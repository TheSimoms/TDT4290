// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Sep 25 13:42:36 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef http__jabber__org__protocol__pubsub__event_HH
#define http__jabber__org__protocol__pubsub__event_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "jabber_x_data.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef http__jabber__org__protocol__pubsub__event_HH
#endif

namespace http__jabber__org__protocol__pubsub__event {

/* Forward declarations of classes */

class Event_choice;
class Event_choice_template;
class Collection_choice;
class Collection_choice_template;
class Empty;
class Empty_template;
class Associate;
class Associate_template;
class Disassociate;
class Disassociate_template;
class Collection;
class Collection_template;
class Configuration;
class Configuration_template;
class Configuration_sequence;
class Configuration_sequence_template;
class Delete;
class Delete_template;
class Redirect;
class Redirect_template;
class Items_choice;
class Items_choice_template;
class Items_choice_item__list;
class Items_choice_item__list_template;
class Item;
class Item_template;
class Item_choice;
class Item_choice_template;
class Items_choice_retract__list;
class Items_choice_retract__list_template;
class Retract;
class Retract_template;
class Items;
class Items_template;
class Purge;
class Purge_template;
class Subscription;
class Subscription_template;
class Subscription_subscription;
class Subscription_subscription_template;
class Event;
class Event_template;

} /* end of namespace */

#ifndef http__jabber__org__protocol__pubsub__event_HH
#define http__jabber__org__protocol__pubsub__event_HH

namespace http__jabber__org__protocol__pubsub__event {

/* Class definitions */

class Event_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_collection = 1, ALT_configuration = 2, ALT_delete_ = 3, ALT_items = 4, ALT_purge = 5, ALT_subscription = 6 };
private:
union_selection_type union_selection;
union {
Collection *field_collection;
Configuration *field_configuration;
Delete *field_delete_;
Items *field_items;
Purge *field_purge;
Subscription *field_subscription;
};
void copy_value(const Event_choice& other_value);

public:
Event_choice();
Event_choice(const Event_choice& other_value);
~Event_choice();
Event_choice& operator=(const Event_choice& other_value);
boolean operator==(const Event_choice& other_value) const;
inline boolean operator!=(const Event_choice& other_value) const { return !(*this == other_value); }
Collection& collection();
const Collection& collection() const;
Configuration& configuration();
const Configuration& configuration() const;
Delete& delete_();
const Delete& delete_() const;
Items& items();
const Items& items() const;
Purge& purge();
const Purge& purge() const;
Subscription& subscription();
const Subscription& subscription() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Event_choice_template : public Base_Template {
union {
struct {
Event_choice::union_selection_type union_selection;
union {
Collection_template *field_collection;
Configuration_template *field_configuration;
Delete_template *field_delete_;
Items_template *field_items;
Purge_template *field_purge;
Subscription_template *field_subscription;
};
} single_value;
struct {
unsigned int n_values;
Event_choice_template *list_value;
} value_list;
};
void copy_value(const Event_choice& other_value);

void copy_template(const Event_choice_template& other_value);

public:
Event_choice_template();
Event_choice_template(template_sel other_value);
Event_choice_template(const Event_choice& other_value);
Event_choice_template(const OPTIONAL<Event_choice>& other_value);
Event_choice_template(const Event_choice_template& other_value);
~Event_choice_template();
void clean_up();
Event_choice_template& operator=(template_sel other_value);
Event_choice_template& operator=(const Event_choice& other_value);
Event_choice_template& operator=(const OPTIONAL<Event_choice>& other_value);
Event_choice_template& operator=(const Event_choice_template& other_value);
boolean match(const Event_choice& other_value) const;
boolean is_value() const;Event_choice valueof() const;
Event_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Collection_template& collection();
const Collection_template& collection() const;
Configuration_template& configuration();
const Configuration_template& configuration() const;
Delete_template& delete_();
const Delete_template& delete_() const;
Items_template& items();
const Items_template& items() const;
Purge_template& purge();
const Purge_template& purge() const;
Subscription_template& subscription();
const Subscription_template& subscription() const;
boolean ischosen(Event_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Event_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Collection_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_associate = 1, ALT_disassociate = 2 };
private:
union_selection_type union_selection;
union {
Associate *field_associate;
Disassociate *field_disassociate;
};
void copy_value(const Collection_choice& other_value);

public:
Collection_choice();
Collection_choice(const Collection_choice& other_value);
~Collection_choice();
Collection_choice& operator=(const Collection_choice& other_value);
boolean operator==(const Collection_choice& other_value) const;
inline boolean operator!=(const Collection_choice& other_value) const { return !(*this == other_value); }
Associate& associate();
const Associate& associate() const;
Disassociate& disassociate();
const Disassociate& disassociate() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Collection_choice_template : public Base_Template {
union {
struct {
Collection_choice::union_selection_type union_selection;
union {
Associate_template *field_associate;
Disassociate_template *field_disassociate;
};
} single_value;
struct {
unsigned int n_values;
Collection_choice_template *list_value;
} value_list;
};
void copy_value(const Collection_choice& other_value);

void copy_template(const Collection_choice_template& other_value);

public:
Collection_choice_template();
Collection_choice_template(template_sel other_value);
Collection_choice_template(const Collection_choice& other_value);
Collection_choice_template(const OPTIONAL<Collection_choice>& other_value);
Collection_choice_template(const Collection_choice_template& other_value);
~Collection_choice_template();
void clean_up();
Collection_choice_template& operator=(template_sel other_value);
Collection_choice_template& operator=(const Collection_choice& other_value);
Collection_choice_template& operator=(const OPTIONAL<Collection_choice>& other_value);
Collection_choice_template& operator=(const Collection_choice_template& other_value);
boolean match(const Collection_choice& other_value) const;
boolean is_value() const;Collection_choice valueof() const;
Collection_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Associate_template& associate();
const Associate_template& associate() const;
Disassociate_template& disassociate();
const Disassociate_template& disassociate() const;
boolean ischosen(Collection_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Collection_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Associate : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Associate();
  Associate(const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base);
  Associate(const Associate& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Associate& operator=(const Associate& other_value);
  boolean operator==(const Associate& other_value) const;
  inline boolean operator!=(const Associate& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Associate_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Associate_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Associate& other_value);
void copy_template(const Associate_template& other_value);

public:
Associate_template();
Associate_template(template_sel other_value);
Associate_template(const Associate& other_value);
Associate_template(const OPTIONAL<Associate>& other_value);
Associate_template(const Associate_template& other_value);
~Associate_template();
Associate_template& operator=(template_sel other_value);
Associate_template& operator=(const Associate& other_value);
Associate_template& operator=(const OPTIONAL<Associate>& other_value);
Associate_template& operator=(const Associate_template& other_value);
boolean match(const Associate& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Associate valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Associate_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Associate& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Disassociate : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Disassociate();
  Disassociate(const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base);
  Disassociate(const Disassociate& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Disassociate& operator=(const Disassociate& other_value);
  boolean operator==(const Disassociate& other_value) const;
  inline boolean operator!=(const Disassociate& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Disassociate_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Disassociate_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Disassociate& other_value);
void copy_template(const Disassociate_template& other_value);

public:
Disassociate_template();
Disassociate_template(template_sel other_value);
Disassociate_template(const Disassociate& other_value);
Disassociate_template(const OPTIONAL<Disassociate>& other_value);
Disassociate_template(const Disassociate_template& other_value);
~Disassociate_template();
Disassociate_template& operator=(template_sel other_value);
Disassociate_template& operator=(const Disassociate& other_value);
Disassociate_template& operator=(const OPTIONAL<Disassociate>& other_value);
Disassociate_template& operator=(const Disassociate_template& other_value);
boolean match(const Disassociate& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Disassociate valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Disassociate_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Disassociate& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Collection : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  Collection_choice field_choice;
  boolean bound_flag;
public:
  Collection();
  Collection(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Collection_choice& par_choice);
  Collection(const Collection& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Collection& operator=(const Collection& other_value);
  boolean operator==(const Collection& other_value) const;
  inline boolean operator!=(const Collection& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline Collection_choice& choice()
    {return field_choice;}
  inline const Collection_choice& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Collection_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Collection_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Collection& other_value);
void copy_template(const Collection_template& other_value);

public:
Collection_template();
Collection_template(template_sel other_value);
Collection_template(const Collection& other_value);
Collection_template(const OPTIONAL<Collection>& other_value);
Collection_template(const Collection_template& other_value);
~Collection_template();
Collection_template& operator=(template_sel other_value);
Collection_template& operator=(const Collection& other_value);
Collection_template& operator=(const OPTIONAL<Collection>& other_value);
Collection_template& operator=(const Collection_template& other_value);
boolean match(const Collection& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Collection valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Collection_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Collection_choice_template& choice();
const Collection_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Collection& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configuration : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<Configuration_sequence> field_sequence;
  boolean bound_flag;
public:
  Configuration();
  Configuration(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<Configuration_sequence>& par_sequence);
  Configuration(const Configuration& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Configuration& operator=(const Configuration& other_value);
  boolean operator==(const Configuration& other_value) const;
  inline boolean operator!=(const Configuration& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<Configuration_sequence>& sequence()
    {return field_sequence;}
  inline const OPTIONAL<Configuration_sequence>& sequence() const
    {return field_sequence;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Configuration_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Configuration_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Configuration& other_value);
void copy_template(const Configuration_template& other_value);

public:
Configuration_template();
Configuration_template(template_sel other_value);
Configuration_template(const Configuration& other_value);
Configuration_template(const OPTIONAL<Configuration>& other_value);
Configuration_template(const Configuration_template& other_value);
~Configuration_template();
Configuration_template& operator=(template_sel other_value);
Configuration_template& operator=(const Configuration& other_value);
Configuration_template& operator=(const OPTIONAL<Configuration>& other_value);
Configuration_template& operator=(const Configuration_template& other_value);
boolean match(const Configuration& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Configuration valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Configuration_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Configuration_sequence_template& sequence();
const Configuration_sequence_template& sequence() const;
int size_of() const;
void log() const;
void log_match(const Configuration& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configuration_sequence : public Base_Type {
  jabber__x__data::X field_x;
  boolean bound_flag;
public:
  Configuration_sequence();
  Configuration_sequence(const jabber__x__data::X& par_x);
  Configuration_sequence(const Configuration_sequence& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Configuration_sequence& operator=(const Configuration_sequence& other_value);
  boolean operator==(const Configuration_sequence& other_value) const;
  inline boolean operator!=(const Configuration_sequence& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline jabber__x__data::X& x()
    {return field_x;}
  inline const jabber__x__data::X& x() const
    {return field_x;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Configuration_sequence_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Configuration_sequence_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Configuration_sequence& other_value);
void copy_template(const Configuration_sequence_template& other_value);

public:
Configuration_sequence_template();
Configuration_sequence_template(template_sel other_value);
Configuration_sequence_template(const Configuration_sequence& other_value);
Configuration_sequence_template(const OPTIONAL<Configuration_sequence>& other_value);
Configuration_sequence_template(const Configuration_sequence_template& other_value);
~Configuration_sequence_template();
Configuration_sequence_template& operator=(template_sel other_value);
Configuration_sequence_template& operator=(const Configuration_sequence& other_value);
Configuration_sequence_template& operator=(const OPTIONAL<Configuration_sequence>& other_value);
Configuration_sequence_template& operator=(const Configuration_sequence_template& other_value);
boolean match(const Configuration_sequence& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Configuration_sequence valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Configuration_sequence_template& list_item(unsigned int list_index) const;
jabber__x__data::X_template& x();
const jabber__x__data::X_template& x() const;
int size_of() const;
void log() const;
void log_match(const Configuration_sequence& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Delete : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  OPTIONAL<Redirect> field_redirect;
  boolean bound_flag;
public:
  Delete();
  Delete(const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<Redirect>& par_redirect);
  Delete(const Delete& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Delete& operator=(const Delete& other_value);
  boolean operator==(const Delete& other_value) const;
  inline boolean operator!=(const Delete& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline OPTIONAL<Redirect>& redirect()
    {return field_redirect;}
  inline const OPTIONAL<Redirect>& redirect() const
    {return field_redirect;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Delete_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Delete_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Delete& other_value);
void copy_template(const Delete_template& other_value);

public:
Delete_template();
Delete_template(template_sel other_value);
Delete_template(const Delete& other_value);
Delete_template(const OPTIONAL<Delete>& other_value);
Delete_template(const Delete_template& other_value);
~Delete_template();
Delete_template& operator=(template_sel other_value);
Delete_template& operator=(const Delete& other_value);
Delete_template& operator=(const OPTIONAL<Delete>& other_value);
Delete_template& operator=(const Delete_template& other_value);
boolean match(const Delete& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Delete valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Delete_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Redirect_template& redirect();
const Redirect_template& redirect() const;
int size_of() const;
void log() const;
void log_match(const Delete& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Redirect : public Base_Type {
  UNIVERSAL_CHARSTRING field_uri;
  Empty field_base;
  boolean bound_flag;
public:
  Redirect();
  Redirect(const UNIVERSAL_CHARSTRING& par_uri,
    const Empty& par_base);
  Redirect(const Redirect& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Redirect& operator=(const Redirect& other_value);
  boolean operator==(const Redirect& other_value) const;
  inline boolean operator!=(const Redirect& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& uri()
    {return field_uri;}
  inline const UNIVERSAL_CHARSTRING& uri() const
    {return field_uri;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Redirect_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Redirect_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Redirect& other_value);
void copy_template(const Redirect_template& other_value);

public:
Redirect_template();
Redirect_template(template_sel other_value);
Redirect_template(const Redirect& other_value);
Redirect_template(const OPTIONAL<Redirect>& other_value);
Redirect_template(const Redirect_template& other_value);
~Redirect_template();
Redirect_template& operator=(template_sel other_value);
Redirect_template& operator=(const Redirect& other_value);
Redirect_template& operator=(const OPTIONAL<Redirect>& other_value);
Redirect_template& operator=(const Redirect_template& other_value);
boolean match(const Redirect& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Redirect valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Redirect_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& uri();
const UNIVERSAL_CHARSTRING_template& uri() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Redirect& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Items_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_item__list = 1, ALT_retract__list = 2 };
private:
union_selection_type union_selection;
union {
Items_choice_item__list *field_item__list;
Items_choice_retract__list *field_retract__list;
};
void copy_value(const Items_choice& other_value);

public:
Items_choice();
Items_choice(const Items_choice& other_value);
~Items_choice();
Items_choice& operator=(const Items_choice& other_value);
boolean operator==(const Items_choice& other_value) const;
inline boolean operator!=(const Items_choice& other_value) const { return !(*this == other_value); }
Items_choice_item__list& item__list();
const Items_choice_item__list& item__list() const;
Items_choice_retract__list& retract__list();
const Items_choice_retract__list& retract__list() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Items_choice_template : public Base_Template {
union {
struct {
Items_choice::union_selection_type union_selection;
union {
Items_choice_item__list_template *field_item__list;
Items_choice_retract__list_template *field_retract__list;
};
} single_value;
struct {
unsigned int n_values;
Items_choice_template *list_value;
} value_list;
};
void copy_value(const Items_choice& other_value);

void copy_template(const Items_choice_template& other_value);

public:
Items_choice_template();
Items_choice_template(template_sel other_value);
Items_choice_template(const Items_choice& other_value);
Items_choice_template(const OPTIONAL<Items_choice>& other_value);
Items_choice_template(const Items_choice_template& other_value);
~Items_choice_template();
void clean_up();
Items_choice_template& operator=(template_sel other_value);
Items_choice_template& operator=(const Items_choice& other_value);
Items_choice_template& operator=(const OPTIONAL<Items_choice>& other_value);
Items_choice_template& operator=(const Items_choice_template& other_value);
boolean match(const Items_choice& other_value) const;
boolean is_value() const;Items_choice valueof() const;
Items_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Items_choice_item__list_template& item__list();
const Items_choice_item__list_template& item__list() const;
Items_choice_retract__list_template& retract__list();
const Items_choice_retract__list_template& retract__list() const;
boolean ischosen(Items_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Items_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Items_choice_item__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Item **value_elements;
} *val_ptr;

static const Item UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Items_choice_item__list& other_value);

public:
  typedef Item of_type;
Items_choice_item__list();
Items_choice_item__list(null_type other_value);
Items_choice_item__list(const Items_choice_item__list& other_value);
~Items_choice_item__list();

void clean_up();
Items_choice_item__list& operator=(null_type other_value);
Items_choice_item__list& operator=(const Items_choice_item__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Items_choice_item__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Items_choice_item__list& other_value) const { return !(*this == other_value); }

Item& operator[](int index_value);
Item& operator[](const INTEGER& index_value);
const Item& operator[](int index_value) const;
const Item& operator[](const INTEGER& index_value) const;

Items_choice_item__list operator<<=(int rotate_count) const;
Items_choice_item__list operator<<=(const INTEGER& rotate_count) const;
Items_choice_item__list operator>>=(int rotate_count) const;
Items_choice_item__list operator>>=(const INTEGER& rotate_count) const;

Items_choice_item__list operator+(const Items_choice_item__list& other_value) const;

Items_choice_item__list substr(int index, int returncount) const;

Items_choice_item__list replace(int index, int len, const Items_choice_item__list& repl) const;

Items_choice_item__list replace(int index, int len, const Items_choice_item__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Items_choice_item__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Item_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Items_choice_item__list_template *list_value;
} value_list;
};
void copy_value(const Items_choice_item__list& other_value);
void copy_template(const Items_choice_item__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Items_choice_item__list_template();
Items_choice_item__list_template(template_sel other_value);
Items_choice_item__list_template(null_type other_value);
Items_choice_item__list_template(const Items_choice_item__list& other_value);
Items_choice_item__list_template(const OPTIONAL<Items_choice_item__list>& other_value);
Items_choice_item__list_template(const Items_choice_item__list_template& other_value);
~Items_choice_item__list_template();

void clean_up();
Items_choice_item__list_template& operator=(template_sel other_value);
Items_choice_item__list_template& operator=(null_type other_value);
Items_choice_item__list_template& operator=(const Items_choice_item__list& other_value);
Items_choice_item__list_template& operator=(const OPTIONAL<Items_choice_item__list>& other_value);
Items_choice_item__list_template& operator=(const Items_choice_item__list_template& other_value);

Item_template& operator[](int index_value);
Item_template& operator[](const INTEGER& index_value);
const Item_template& operator[](int index_value) const;
const Item_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Items_choice_item__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Items_choice_item__list valueof() const;
Items_choice_item__list substr(int index, int returncount) const;

Items_choice_item__list replace(int index, int len, const Items_choice_item__list_template& repl) const;

Items_choice_item__list replace(int index, int len, const Items_choice_item__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Items_choice_item__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Items_choice_item__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Item : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_id;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_publisher;
  OPTIONAL<Item_choice> field_choice;
  boolean bound_flag;
public:
  Item();
  Item(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_id,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_publisher,
    const OPTIONAL<Item_choice>& par_choice);
  Item(const Item& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Item& operator=(const Item& other_value);
  boolean operator==(const Item& other_value) const;
  inline boolean operator!=(const Item& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& id()
    {return field_id;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& id() const
    {return field_id;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& publisher()
    {return field_publisher;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& publisher() const
    {return field_publisher;}
  inline OPTIONAL<Item_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Item_choice>& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Item_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Item_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Item& other_value);
void copy_template(const Item_template& other_value);

public:
Item_template();
Item_template(template_sel other_value);
Item_template(const Item& other_value);
Item_template(const OPTIONAL<Item>& other_value);
Item_template(const Item_template& other_value);
~Item_template();
Item_template& operator=(template_sel other_value);
Item_template& operator=(const Item& other_value);
Item_template& operator=(const OPTIONAL<Item>& other_value);
Item_template& operator=(const Item_template& other_value);
boolean match(const Item& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Item valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Item_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& id();
const UNIVERSAL_CHARSTRING_template& id() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& publisher();
const UNIVERSAL_CHARSTRING_template& publisher() const;
Item_choice_template& choice();
const Item_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Item& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Item_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_elem = 1 };
private:
union_selection_type union_selection;
union {
UNIVERSAL_CHARSTRING *field_elem;
};
void copy_value(const Item_choice& other_value);

public:
Item_choice();
Item_choice(const Item_choice& other_value);
~Item_choice();
Item_choice& operator=(const Item_choice& other_value);
boolean operator==(const Item_choice& other_value) const;
inline boolean operator!=(const Item_choice& other_value) const { return !(*this == other_value); }
UNIVERSAL_CHARSTRING& elem();
const UNIVERSAL_CHARSTRING& elem() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Item_choice_template : public Base_Template {
union {
struct {
Item_choice::union_selection_type union_selection;
union {
UNIVERSAL_CHARSTRING_template *field_elem;
};
} single_value;
struct {
unsigned int n_values;
Item_choice_template *list_value;
} value_list;
};
void copy_value(const Item_choice& other_value);

void copy_template(const Item_choice_template& other_value);

public:
Item_choice_template();
Item_choice_template(template_sel other_value);
Item_choice_template(const Item_choice& other_value);
Item_choice_template(const OPTIONAL<Item_choice>& other_value);
Item_choice_template(const Item_choice_template& other_value);
~Item_choice_template();
void clean_up();
Item_choice_template& operator=(template_sel other_value);
Item_choice_template& operator=(const Item_choice& other_value);
Item_choice_template& operator=(const OPTIONAL<Item_choice>& other_value);
Item_choice_template& operator=(const Item_choice_template& other_value);
boolean match(const Item_choice& other_value) const;
boolean is_value() const;Item_choice valueof() const;
Item_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
UNIVERSAL_CHARSTRING_template& elem();
const UNIVERSAL_CHARSTRING_template& elem() const;
boolean ischosen(Item_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Item_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Items_choice_retract__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Retract **value_elements;
} *val_ptr;

static const Retract UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Items_choice_retract__list& other_value);

public:
  typedef Retract of_type;
Items_choice_retract__list();
Items_choice_retract__list(null_type other_value);
Items_choice_retract__list(const Items_choice_retract__list& other_value);
~Items_choice_retract__list();

void clean_up();
Items_choice_retract__list& operator=(null_type other_value);
Items_choice_retract__list& operator=(const Items_choice_retract__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Items_choice_retract__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Items_choice_retract__list& other_value) const { return !(*this == other_value); }

Retract& operator[](int index_value);
Retract& operator[](const INTEGER& index_value);
const Retract& operator[](int index_value) const;
const Retract& operator[](const INTEGER& index_value) const;

Items_choice_retract__list operator<<=(int rotate_count) const;
Items_choice_retract__list operator<<=(const INTEGER& rotate_count) const;
Items_choice_retract__list operator>>=(int rotate_count) const;
Items_choice_retract__list operator>>=(const INTEGER& rotate_count) const;

Items_choice_retract__list operator+(const Items_choice_retract__list& other_value) const;

Items_choice_retract__list substr(int index, int returncount) const;

Items_choice_retract__list replace(int index, int len, const Items_choice_retract__list& repl) const;

Items_choice_retract__list replace(int index, int len, const Items_choice_retract__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Items_choice_retract__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Retract_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Items_choice_retract__list_template *list_value;
} value_list;
};
void copy_value(const Items_choice_retract__list& other_value);
void copy_template(const Items_choice_retract__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Items_choice_retract__list_template();
Items_choice_retract__list_template(template_sel other_value);
Items_choice_retract__list_template(null_type other_value);
Items_choice_retract__list_template(const Items_choice_retract__list& other_value);
Items_choice_retract__list_template(const OPTIONAL<Items_choice_retract__list>& other_value);
Items_choice_retract__list_template(const Items_choice_retract__list_template& other_value);
~Items_choice_retract__list_template();

void clean_up();
Items_choice_retract__list_template& operator=(template_sel other_value);
Items_choice_retract__list_template& operator=(null_type other_value);
Items_choice_retract__list_template& operator=(const Items_choice_retract__list& other_value);
Items_choice_retract__list_template& operator=(const OPTIONAL<Items_choice_retract__list>& other_value);
Items_choice_retract__list_template& operator=(const Items_choice_retract__list_template& other_value);

Retract_template& operator[](int index_value);
Retract_template& operator[](const INTEGER& index_value);
const Retract_template& operator[](int index_value) const;
const Retract_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Items_choice_retract__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Items_choice_retract__list valueof() const;
Items_choice_retract__list substr(int index, int returncount) const;

Items_choice_retract__list replace(int index, int len, const Items_choice_retract__list_template& repl) const;

Items_choice_retract__list replace(int index, int len, const Items_choice_retract__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Items_choice_retract__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Items_choice_retract__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Retract : public Base_Type {
  UNIVERSAL_CHARSTRING field_id;
  Empty field_base;
  boolean bound_flag;
public:
  Retract();
  Retract(const UNIVERSAL_CHARSTRING& par_id,
    const Empty& par_base);
  Retract(const Retract& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Retract& operator=(const Retract& other_value);
  boolean operator==(const Retract& other_value) const;
  inline boolean operator!=(const Retract& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& id()
    {return field_id;}
  inline const UNIVERSAL_CHARSTRING& id() const
    {return field_id;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Retract_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Retract_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Retract& other_value);
void copy_template(const Retract_template& other_value);

public:
Retract_template();
Retract_template(template_sel other_value);
Retract_template(const Retract& other_value);
Retract_template(const OPTIONAL<Retract>& other_value);
Retract_template(const Retract_template& other_value);
~Retract_template();
Retract_template& operator=(template_sel other_value);
Retract_template& operator=(const Retract& other_value);
Retract_template& operator=(const OPTIONAL<Retract>& other_value);
Retract_template& operator=(const Retract_template& other_value);
boolean match(const Retract& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Retract valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Retract_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& id();
const UNIVERSAL_CHARSTRING_template& id() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Retract& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Items : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Items_choice field_choice;
  boolean bound_flag;
public:
  Items();
  Items(const UNIVERSAL_CHARSTRING& par_node,
    const Items_choice& par_choice);
  Items(const Items& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Items& operator=(const Items& other_value);
  boolean operator==(const Items& other_value) const;
  inline boolean operator!=(const Items& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Items_choice& choice()
    {return field_choice;}
  inline const Items_choice& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Items_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Items_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Items& other_value);
void copy_template(const Items_template& other_value);

public:
Items_template();
Items_template(template_sel other_value);
Items_template(const Items& other_value);
Items_template(const OPTIONAL<Items>& other_value);
Items_template(const Items_template& other_value);
~Items_template();
Items_template& operator=(template_sel other_value);
Items_template& operator=(const Items& other_value);
Items_template& operator=(const OPTIONAL<Items>& other_value);
Items_template& operator=(const Items_template& other_value);
boolean match(const Items& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Items valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Items_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Items_choice_template& choice();
const Items_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Items& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Purge : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Purge();
  Purge(const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base);
  Purge(const Purge& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Purge& operator=(const Purge& other_value);
  boolean operator==(const Purge& other_value) const;
  inline boolean operator!=(const Purge& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Purge_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Purge_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Purge& other_value);
void copy_template(const Purge_template& other_value);

public:
Purge_template();
Purge_template(template_sel other_value);
Purge_template(const Purge& other_value);
Purge_template(const OPTIONAL<Purge>& other_value);
Purge_template(const Purge_template& other_value);
~Purge_template();
Purge_template& operator=(template_sel other_value);
Purge_template& operator=(const Purge& other_value);
Purge_template& operator=(const OPTIONAL<Purge>& other_value);
Purge_template& operator=(const Purge_template& other_value);
boolean match(const Purge& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Purge valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Purge_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Purge& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscription : public Base_Type {
  OPTIONAL<CHARSTRING> field_expiry;
  UNIVERSAL_CHARSTRING field_jid;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_subid;
  OPTIONAL<Subscription_subscription> field_subscription;
  Empty field_base;
  boolean bound_flag;
public:
  Subscription();
  Subscription(const OPTIONAL<CHARSTRING>& par_expiry,
    const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const OPTIONAL<Subscription_subscription>& par_subscription,
    const Empty& par_base);
  Subscription(const Subscription& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscription& operator=(const Subscription& other_value);
  boolean operator==(const Subscription& other_value) const;
  inline boolean operator!=(const Subscription& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<CHARSTRING>& expiry()
    {return field_expiry;}
  inline const OPTIONAL<CHARSTRING>& expiry() const
    {return field_expiry;}
  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& subid()
    {return field_subid;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& subid() const
    {return field_subid;}
  inline OPTIONAL<Subscription_subscription>& subscription()
    {return field_subscription;}
  inline const OPTIONAL<Subscription_subscription>& subscription() const
    {return field_subscription;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscription_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscription_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscription& other_value);
void copy_template(const Subscription_template& other_value);

public:
Subscription_template();
Subscription_template(template_sel other_value);
Subscription_template(const Subscription& other_value);
Subscription_template(const OPTIONAL<Subscription>& other_value);
Subscription_template(const Subscription_template& other_value);
~Subscription_template();
Subscription_template& operator=(template_sel other_value);
Subscription_template& operator=(const Subscription& other_value);
Subscription_template& operator=(const OPTIONAL<Subscription>& other_value);
Subscription_template& operator=(const Subscription_template& other_value);
boolean match(const Subscription& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_template& list_item(unsigned int list_index) const;
CHARSTRING_template& expiry();
const CHARSTRING_template& expiry() const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& subid();
const UNIVERSAL_CHARSTRING_template& subid() const;
Subscription_subscription_template& subscription();
const Subscription_subscription_template& subscription() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscription_subscription : public Base_Type { // enum
friend class Subscription_subscription_template;
public:
enum enum_type { none__ = 0, pending = 1, subscribed = 2, unconfigured = 3, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
Subscription_subscription();
Subscription_subscription(int other_value);
Subscription_subscription(enum_type other_value);
Subscription_subscription(const Subscription_subscription& other_value);

Subscription_subscription& operator=(int other_value);
Subscription_subscription& operator=(enum_type other_value);
Subscription_subscription& operator=(const Subscription_subscription& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Subscription_subscription& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Subscription_subscription& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Subscription_subscription& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Subscription_subscription& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Subscription_subscription& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Subscription_subscription& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Subscription_subscription& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Subscription_subscription_template : public Base_Template {
union {
Subscription_subscription::enum_type single_value;
struct {
unsigned int n_values;
Subscription_subscription_template *list_value;
} value_list;
};

void copy_template(const Subscription_subscription_template& other_value);

public:
Subscription_subscription_template();
Subscription_subscription_template(template_sel other_value);
Subscription_subscription_template(int other_value);
Subscription_subscription_template(Subscription_subscription::enum_type other_value);
Subscription_subscription_template(const Subscription_subscription& other_value);
Subscription_subscription_template(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template(const Subscription_subscription_template& other_value);
~Subscription_subscription_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription_subscription_template& operator=(template_sel other_value);
Subscription_subscription_template& operator=(int other_value);
Subscription_subscription_template& operator=(Subscription_subscription::enum_type other_value);
Subscription_subscription_template& operator=(const Subscription_subscription& other_value);
Subscription_subscription_template& operator=(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template& operator=(const Subscription_subscription_template& other_value);

boolean match(Subscription_subscription::enum_type other_value) const;
boolean match(const Subscription_subscription& other_value) const;
Subscription_subscription::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_subscription_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Subscription_subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Event : public Base_Type {
  Event_choice field_choice;
  boolean bound_flag;
public:
  Event();
  Event(const Event_choice& par_choice);
  Event(const Event& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Event& operator=(const Event& other_value);
  boolean operator==(const Event& other_value) const;
  inline boolean operator!=(const Event& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Event_choice& choice()
    {return field_choice;}
  inline const Event_choice& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Event_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Event_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Event& other_value);
void copy_template(const Event_template& other_value);

public:
Event_template();
Event_template(template_sel other_value);
Event_template(const Event& other_value);
Event_template(const OPTIONAL<Event>& other_value);
Event_template(const Event_template& other_value);
~Event_template();
Event_template& operator=(template_sel other_value);
Event_template& operator=(const Event& other_value);
Event_template& operator=(const OPTIONAL<Event>& other_value);
Event_template& operator=(const Event_template& other_value);
boolean match(const Event& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Event valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Event_template& list_item(unsigned int list_index) const;
Event_choice_template& choice();
const Event_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Event& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const Items_choice_item__list& other_value);
inline boolean operator!=(null_type null_value, const Items_choice_item__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Items_choice_retract__list& other_value);
inline boolean operator!=(null_type null_value, const Items_choice_retract__list& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t Event_choice_xer_;
extern const TTCN_JSONdescriptor_t Event_choice_json_;
extern const TTCN_Typedescriptor_t Event_choice_descr_;
extern const XERdescriptor_t Collection_choice_xer_;
extern const TTCN_JSONdescriptor_t Collection_choice_json_;
extern const TTCN_Typedescriptor_t Collection_choice_descr_;
extern const XERdescriptor_t Associate_node_xer_;
extern const TTCN_Typedescriptor_t Associate_node_descr_;
extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Associate_base_xer_;
extern const TTCN_Typedescriptor_t Associate_base_descr_;
extern const XERdescriptor_t Associate_xer_;
extern const TTCN_JSONdescriptor_t Associate_json_;
extern const TTCN_Typedescriptor_t Associate_descr_;
extern const XERdescriptor_t Collection_choice_associate_xer_;
extern const TTCN_Typedescriptor_t Collection_choice_associate_descr_;
extern const XERdescriptor_t Disassociate_node_xer_;
extern const TTCN_Typedescriptor_t Disassociate_node_descr_;
extern const XERdescriptor_t Disassociate_base_xer_;
extern const TTCN_Typedescriptor_t Disassociate_base_descr_;
extern const XERdescriptor_t Disassociate_xer_;
extern const TTCN_JSONdescriptor_t Disassociate_json_;
extern const TTCN_Typedescriptor_t Disassociate_descr_;
extern const XERdescriptor_t Collection_choice_disassociate_xer_;
extern const TTCN_Typedescriptor_t Collection_choice_disassociate_descr_;
extern const XERdescriptor_t Collection_xer_;
extern const TTCN_JSONdescriptor_t Collection_json_;
extern const TTCN_Typedescriptor_t Collection_descr_;
extern const XERdescriptor_t Collection_node_xer_;
extern const TTCN_Typedescriptor_t Collection_node_descr_;
extern const XERdescriptor_t Event_choice_collection_xer_;
extern const TTCN_Typedescriptor_t Event_choice_collection_descr_;
extern const XERdescriptor_t Configuration_xer_;
extern const TTCN_JSONdescriptor_t Configuration_json_;
extern const TTCN_Typedescriptor_t Configuration_descr_;
extern const XERdescriptor_t Configuration_node_xer_;
extern const TTCN_Typedescriptor_t Configuration_node_descr_;
extern const XERdescriptor_t Configuration_sequence_x_xer_;
extern const TTCN_Typedescriptor_t Configuration_sequence_x_descr_;
extern const XERdescriptor_t Configuration_sequence_xer_;
extern const TTCN_JSONdescriptor_t Configuration_sequence_json_;
extern const TTCN_Typedescriptor_t Configuration_sequence_descr_;
extern const XERdescriptor_t Event_choice_configuration_xer_;
extern const TTCN_Typedescriptor_t Event_choice_configuration_descr_;
extern const XERdescriptor_t Delete_node_xer_;
extern const TTCN_Typedescriptor_t Delete_node_descr_;
extern const XERdescriptor_t Delete_xer_;
extern const TTCN_JSONdescriptor_t Delete_json_;
extern const TTCN_Typedescriptor_t Delete_descr_;
extern const XERdescriptor_t Redirect_uri_xer_;
extern const TTCN_Typedescriptor_t Redirect_uri_descr_;
extern const XERdescriptor_t Redirect_base_xer_;
extern const TTCN_Typedescriptor_t Redirect_base_descr_;
extern const XERdescriptor_t Redirect_xer_;
extern const TTCN_JSONdescriptor_t Redirect_json_;
extern const TTCN_Typedescriptor_t Redirect_descr_;
extern const XERdescriptor_t Delete_redirect_xer_;
extern const TTCN_Typedescriptor_t Delete_redirect_descr_;
extern const XERdescriptor_t Event_choice_delete__xer_;
extern const TTCN_Typedescriptor_t Event_choice_delete__descr_;
extern const XERdescriptor_t Items_node_xer_;
extern const TTCN_Typedescriptor_t Items_node_descr_;
extern const XERdescriptor_t Items_choice_xer_;
extern const TTCN_JSONdescriptor_t Items_choice_json_;
extern const TTCN_Typedescriptor_t Items_choice_descr_;
extern const XERdescriptor_t Items_choice_item__list_xer_;
extern const TTCN_JSONdescriptor_t Items_choice_item__list_json_;
extern const TTCN_Typedescriptor_t Items_choice_item__list_descr_;
extern const XERdescriptor_t Item_xer_;
extern const TTCN_JSONdescriptor_t Item_json_;
extern const TTCN_Typedescriptor_t Item_descr_;
extern const XERdescriptor_t Item_id_xer_;
extern const TTCN_Typedescriptor_t Item_id_descr_;
extern const XERdescriptor_t Item_node_xer_;
extern const TTCN_Typedescriptor_t Item_node_descr_;
extern const XERdescriptor_t Item_publisher_xer_;
extern const TTCN_Typedescriptor_t Item_publisher_descr_;
extern const XERdescriptor_t Item_choice_xer_;
extern const TTCN_JSONdescriptor_t Item_choice_json_;
extern const TTCN_Typedescriptor_t Item_choice_descr_;
extern const XERdescriptor_t Item_choice_elem_xer_;
extern const TTCN_Typedescriptor_t Item_choice_elem_descr_;
extern const XERdescriptor_t Items_choice_item__list_0_xer_;
extern const TTCN_Typedescriptor_t Items_choice_item__list_0_descr_;
extern const XERdescriptor_t Items_choice_retract__list_xer_;
extern const TTCN_JSONdescriptor_t Items_choice_retract__list_json_;
extern const TTCN_Typedescriptor_t Items_choice_retract__list_descr_;
extern const XERdescriptor_t Retract_id_xer_;
extern const TTCN_Typedescriptor_t Retract_id_descr_;
extern const XERdescriptor_t Retract_base_xer_;
extern const TTCN_Typedescriptor_t Retract_base_descr_;
extern const XERdescriptor_t Retract_xer_;
extern const TTCN_JSONdescriptor_t Retract_json_;
extern const TTCN_Typedescriptor_t Retract_descr_;
extern const XERdescriptor_t Items_choice_retract__list_0_xer_;
extern const TTCN_Typedescriptor_t Items_choice_retract__list_0_descr_;
extern const XERdescriptor_t Items_xer_;
extern const TTCN_JSONdescriptor_t Items_json_;
extern const TTCN_Typedescriptor_t Items_descr_;
extern const XERdescriptor_t Event_choice_items_xer_;
extern const TTCN_Typedescriptor_t Event_choice_items_descr_;
extern const XERdescriptor_t Purge_node_xer_;
extern const TTCN_Typedescriptor_t Purge_node_descr_;
extern const XERdescriptor_t Purge_base_xer_;
extern const TTCN_Typedescriptor_t Purge_base_descr_;
extern const XERdescriptor_t Purge_xer_;
extern const TTCN_JSONdescriptor_t Purge_json_;
extern const TTCN_Typedescriptor_t Purge_descr_;
extern const XERdescriptor_t Event_choice_purge_xer_;
extern const TTCN_Typedescriptor_t Event_choice_purge_descr_;
extern const XERdescriptor_t Subscription_jid_xer_;
extern const TTCN_Typedescriptor_t Subscription_jid_descr_;
extern const XERdescriptor_t Subscription_base_xer_;
extern const TTCN_Typedescriptor_t Subscription_base_descr_;
extern const XERdescriptor_t Subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_descr_;
extern const XERdescriptor_t Subscription_expiry_xer_;
extern const TTCN_Typedescriptor_t Subscription_expiry_descr_;
extern const XERdescriptor_t Subscription_node_xer_;
extern const TTCN_Typedescriptor_t Subscription_node_descr_;
extern const XERdescriptor_t Subscription_subid_xer_;
extern const TTCN_Typedescriptor_t Subscription_subid_descr_;
extern const XERdescriptor_t Subscription_subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_subscription_descr_;
extern const XERdescriptor_t Event_choice_subscription_xer_;
extern const TTCN_Typedescriptor_t Event_choice_subscription_descr_;
extern const XERdescriptor_t Event_xer_;
extern const TTCN_JSONdescriptor_t Event_json_;
extern const TTCN_Typedescriptor_t Event_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
