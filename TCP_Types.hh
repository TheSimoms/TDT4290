// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:40:58 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef TCP__Types_HH
#define TCP__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "General_Types.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef TCP__Types_HH
#endif

namespace TCP__Types {

/* Forward declarations of classes */

class TCP__Control__bits;
class TCP__Control__bits_template;
class PDU__TCP;
class PDU__TCP_template;

} /* end of namespace */

#ifndef TCP__Types_HH
#define TCP__Types_HH

namespace TCP__Types {

/* Type definitions */

typedef OCTETSTRING IP__Address;
typedef OCTETSTRING_template IP__Address_template;

/* Class definitions */

class TCP__Control__bits : public Base_Type {
  BITSTRING field_urg;
  BITSTRING field_ack;
  BITSTRING field_psh;
  BITSTRING field_rst;
  BITSTRING field_syn;
  BITSTRING field_fin;
  boolean bound_flag;
public:
  TCP__Control__bits();
  TCP__Control__bits(const BITSTRING& par_urg,
    const BITSTRING& par_ack,
    const BITSTRING& par_psh,
    const BITSTRING& par_rst,
    const BITSTRING& par_syn,
    const BITSTRING& par_fin);
  TCP__Control__bits(const TCP__Control__bits& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  TCP__Control__bits& operator=(const TCP__Control__bits& other_value);
  boolean operator==(const TCP__Control__bits& other_value) const;
  inline boolean operator!=(const TCP__Control__bits& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BITSTRING& urg()
    {return field_urg;}
  inline const BITSTRING& urg() const
    {return field_urg;}
  inline BITSTRING& ack()
    {return field_ack;}
  inline const BITSTRING& ack() const
    {return field_ack;}
  inline BITSTRING& psh()
    {return field_psh;}
  inline const BITSTRING& psh() const
    {return field_psh;}
  inline BITSTRING& rst()
    {return field_rst;}
  inline const BITSTRING& rst() const
    {return field_rst;}
  inline BITSTRING& syn()
    {return field_syn;}
  inline const BITSTRING& syn() const
    {return field_syn;}
  inline BITSTRING& fin()
    {return field_fin;}
  inline const BITSTRING& fin() const
    {return field_fin;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class TCP__Control__bits_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
TCP__Control__bits_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const TCP__Control__bits& other_value);
void copy_template(const TCP__Control__bits_template& other_value);

public:
TCP__Control__bits_template();
TCP__Control__bits_template(template_sel other_value);
TCP__Control__bits_template(const TCP__Control__bits& other_value);
TCP__Control__bits_template(const OPTIONAL<TCP__Control__bits>& other_value);
TCP__Control__bits_template(const TCP__Control__bits_template& other_value);
~TCP__Control__bits_template();
TCP__Control__bits_template& operator=(template_sel other_value);
TCP__Control__bits_template& operator=(const TCP__Control__bits& other_value);
TCP__Control__bits_template& operator=(const OPTIONAL<TCP__Control__bits>& other_value);
TCP__Control__bits_template& operator=(const TCP__Control__bits_template& other_value);
boolean match(const TCP__Control__bits& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
TCP__Control__bits valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
TCP__Control__bits_template& list_item(unsigned int list_index) const;
BITSTRING_template& urg();
const BITSTRING_template& urg() const;
BITSTRING_template& ack();
const BITSTRING_template& ack() const;
BITSTRING_template& psh();
const BITSTRING_template& psh() const;
BITSTRING_template& rst();
const BITSTRING_template& rst() const;
BITSTRING_template& syn();
const BITSTRING_template& syn() const;
BITSTRING_template& fin();
const BITSTRING_template& fin() const;
int size_of() const;
void log() const;
void log_match(const TCP__Control__bits& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class PDU__TCP : public Base_Type {
  INTEGER field_source__port;
  INTEGER field_dest__port;
  INTEGER field_sequence__number;
  INTEGER field_acknowledgment__number;
  INTEGER field_data__offset;
  BITSTRING field_reserved;
  TCP__Control__bits field_control__bits;
  INTEGER field_window;
  OCTETSTRING field_checksum;
  INTEGER field_urgent__pointer;
  OPTIONAL<OCTETSTRING> field_options;
  OPTIONAL<OCTETSTRING> field_data;
  boolean bound_flag;
public:
  PDU__TCP();
  PDU__TCP(const INTEGER& par_source__port,
    const INTEGER& par_dest__port,
    const INTEGER& par_sequence__number,
    const INTEGER& par_acknowledgment__number,
    const INTEGER& par_data__offset,
    const BITSTRING& par_reserved,
    const TCP__Control__bits& par_control__bits,
    const INTEGER& par_window,
    const OCTETSTRING& par_checksum,
    const INTEGER& par_urgent__pointer,
    const OPTIONAL<OCTETSTRING>& par_options,
    const OPTIONAL<OCTETSTRING>& par_data);
  PDU__TCP(const PDU__TCP& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  PDU__TCP& operator=(const PDU__TCP& other_value);
  boolean operator==(const PDU__TCP& other_value) const;
  inline boolean operator!=(const PDU__TCP& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& source__port()
    {return field_source__port;}
  inline const INTEGER& source__port() const
    {return field_source__port;}
  inline INTEGER& dest__port()
    {return field_dest__port;}
  inline const INTEGER& dest__port() const
    {return field_dest__port;}
  inline INTEGER& sequence__number()
    {return field_sequence__number;}
  inline const INTEGER& sequence__number() const
    {return field_sequence__number;}
  inline INTEGER& acknowledgment__number()
    {return field_acknowledgment__number;}
  inline const INTEGER& acknowledgment__number() const
    {return field_acknowledgment__number;}
  inline INTEGER& data__offset()
    {return field_data__offset;}
  inline const INTEGER& data__offset() const
    {return field_data__offset;}
  inline BITSTRING& reserved()
    {return field_reserved;}
  inline const BITSTRING& reserved() const
    {return field_reserved;}
  inline TCP__Control__bits& control__bits()
    {return field_control__bits;}
  inline const TCP__Control__bits& control__bits() const
    {return field_control__bits;}
  inline INTEGER& window()
    {return field_window;}
  inline const INTEGER& window() const
    {return field_window;}
  inline OCTETSTRING& checksum()
    {return field_checksum;}
  inline const OCTETSTRING& checksum() const
    {return field_checksum;}
  inline INTEGER& urgent__pointer()
    {return field_urgent__pointer;}
  inline const INTEGER& urgent__pointer() const
    {return field_urgent__pointer;}
  inline OPTIONAL<OCTETSTRING>& options()
    {return field_options;}
  inline const OPTIONAL<OCTETSTRING>& options() const
    {return field_options;}
  inline OPTIONAL<OCTETSTRING>& data()
    {return field_data;}
  inline const OPTIONAL<OCTETSTRING>& data() const
    {return field_data;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree&) const;
int RAW_decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, int, raw_order_t, boolean no_err=FALSE,int sel_field=-1, boolean first_call=TRUE);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class PDU__TCP_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
PDU__TCP_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const PDU__TCP& other_value);
void copy_template(const PDU__TCP_template& other_value);

public:
PDU__TCP_template();
PDU__TCP_template(template_sel other_value);
PDU__TCP_template(const PDU__TCP& other_value);
PDU__TCP_template(const OPTIONAL<PDU__TCP>& other_value);
PDU__TCP_template(const PDU__TCP_template& other_value);
~PDU__TCP_template();
PDU__TCP_template& operator=(template_sel other_value);
PDU__TCP_template& operator=(const PDU__TCP& other_value);
PDU__TCP_template& operator=(const OPTIONAL<PDU__TCP>& other_value);
PDU__TCP_template& operator=(const PDU__TCP_template& other_value);
boolean match(const PDU__TCP& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
PDU__TCP valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
PDU__TCP_template& list_item(unsigned int list_index) const;
INTEGER_template& source__port();
const INTEGER_template& source__port() const;
INTEGER_template& dest__port();
const INTEGER_template& dest__port() const;
INTEGER_template& sequence__number();
const INTEGER_template& sequence__number() const;
INTEGER_template& acknowledgment__number();
const INTEGER_template& acknowledgment__number() const;
INTEGER_template& data__offset();
const INTEGER_template& data__offset() const;
BITSTRING_template& reserved();
const BITSTRING_template& reserved() const;
TCP__Control__bits_template& control__bits();
const TCP__Control__bits_template& control__bits() const;
INTEGER_template& window();
const INTEGER_template& window() const;
OCTETSTRING_template& checksum();
const OCTETSTRING_template& checksum() const;
INTEGER_template& urgent__pointer();
const INTEGER_template& urgent__pointer() const;
OCTETSTRING_template& options();
const OCTETSTRING_template& options() const;
OCTETSTRING_template& data();
const OCTETSTRING_template& data() const;
int size_of() const;
void log() const;
void log_match(const PDU__TCP& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern OCTETSTRING f__enc__PDU__TCP(const OCTETSTRING& pl__ip__source, const OCTETSTRING& pl__ip__dest, const PDU__TCP& pdu, const BOOLEAN& pl__autoDataOffset, const BOOLEAN& pl__autoCheckSum);
extern PDU__TCP f__dec__PDU__TCP(const OCTETSTRING& stream);
extern BOOLEAN f__TCP__verify__checksum(const OCTETSTRING& stream, const OCTETSTRING& pl__ip__source, const OCTETSTRING& pl__ip__dest);

/* Global variable declarations */

extern const XERdescriptor_t IP__Address_xer_;
extern const TTCN_Typedescriptor_t IP__Address_descr_;
extern const OCTETSTRING& f__enc__PDU__TCP_pl__ip__source_defval;
extern const OCTETSTRING& f__enc__PDU__TCP_pl__ip__dest_defval;
extern const BOOLEAN& f__enc__PDU__TCP_pl__autoDataOffset_defval;
extern const BOOLEAN& f__enc__PDU__TCP_pl__autoCheckSum_defval;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_urg_raw_;
extern const XERdescriptor_t TCP__Control__bits_urg_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_urg_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_ack_raw_;
extern const XERdescriptor_t TCP__Control__bits_ack_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_ack_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_psh_raw_;
extern const XERdescriptor_t TCP__Control__bits_psh_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_psh_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_rst_raw_;
extern const XERdescriptor_t TCP__Control__bits_rst_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_rst_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_syn_raw_;
extern const XERdescriptor_t TCP__Control__bits_syn_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_syn_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_fin_raw_;
extern const XERdescriptor_t TCP__Control__bits_fin_xer_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_fin_descr_;
extern const TTCN_RAWdescriptor_t TCP__Control__bits_raw_;
extern const TTCN_JSONdescriptor_t TCP__Control__bits_json_;
extern const TTCN_Typedescriptor_t TCP__Control__bits_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_source__port_raw_;
extern const XERdescriptor_t PDU__TCP_source__port_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_source__port_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_dest__port_raw_;
extern const XERdescriptor_t PDU__TCP_dest__port_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_dest__port_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_sequence__number_raw_;
extern const XERdescriptor_t PDU__TCP_sequence__number_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_sequence__number_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_acknowledgment__number_raw_;
extern const XERdescriptor_t PDU__TCP_acknowledgment__number_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_acknowledgment__number_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_data__offset_raw_;
extern const XERdescriptor_t PDU__TCP_data__offset_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_data__offset_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_reserved_raw_;
extern const XERdescriptor_t PDU__TCP_reserved_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_reserved_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_control__bits_raw_;
extern const TTCN_Typedescriptor_t PDU__TCP_control__bits_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_window_raw_;
extern const XERdescriptor_t PDU__TCP_window_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_window_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_checksum_raw_;
extern const XERdescriptor_t PDU__TCP_checksum_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_checksum_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_urgent__pointer_raw_;
extern const XERdescriptor_t PDU__TCP_urgent__pointer_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_urgent__pointer_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_raw_;
extern const TTCN_JSONdescriptor_t PDU__TCP_json_;
extern const TTCN_Typedescriptor_t PDU__TCP_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_options_raw_;
extern const XERdescriptor_t PDU__TCP_options_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_options_descr_;
extern const TTCN_RAWdescriptor_t PDU__TCP_data_raw_;
extern const XERdescriptor_t PDU__TCP_data_xer_;
extern const TTCN_Typedescriptor_t PDU__TCP_data_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
