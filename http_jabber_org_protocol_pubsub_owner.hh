// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Sep 25 13:42:36 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef http__jabber__org__protocol__pubsub__owner_HH
#define http__jabber__org__protocol__pubsub__owner_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "jabber_x_data.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef http__jabber__org__protocol__pubsub__owner_HH
#endif

namespace http__jabber__org__protocol__pubsub__owner {

/* Forward declarations of classes */

class Pubsub_choice;
class Pubsub_choice_template;
class Affiliations_affiliation__list;
class Affiliations_affiliation__list_template;
class Affiliation_affiliation;
class Affiliation_affiliation_template;
class Empty;
class Empty_template;
class Affiliation;
class Affiliation_template;
class Affiliations;
class Affiliations_template;
class Configure;
class Configure_template;
class Configure_choice;
class Configure_choice_template;
class Default;
class Default_template;
class Default_choice;
class Default_choice_template;
class Delete;
class Delete_template;
class Redirect;
class Redirect_template;
class Purge;
class Purge_template;
class Subscriptions_subscription__list;
class Subscriptions_subscription__list_template;
class Subscription_subscription;
class Subscription_subscription_template;
class Subscription;
class Subscription_template;
class Subscriptions;
class Subscriptions_template;
class Pubsub;
class Pubsub_template;

} /* end of namespace */

#ifndef http__jabber__org__protocol__pubsub__owner_HH
#define http__jabber__org__protocol__pubsub__owner_HH

namespace http__jabber__org__protocol__pubsub__owner {

/* Class definitions */

class Pubsub_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_affiliations = 1, ALT_configure = 2, ALT_default__ = 3, ALT_delete_ = 4, ALT_purge = 5, ALT_subscriptions = 6 };
private:
union_selection_type union_selection;
union {
Affiliations *field_affiliations;
Configure *field_configure;
Default *field_default__;
Delete *field_delete_;
Purge *field_purge;
Subscriptions *field_subscriptions;
};
void copy_value(const Pubsub_choice& other_value);

public:
Pubsub_choice();
Pubsub_choice(const Pubsub_choice& other_value);
~Pubsub_choice();
Pubsub_choice& operator=(const Pubsub_choice& other_value);
boolean operator==(const Pubsub_choice& other_value) const;
inline boolean operator!=(const Pubsub_choice& other_value) const { return !(*this == other_value); }
Affiliations& affiliations();
const Affiliations& affiliations() const;
Configure& configure();
const Configure& configure() const;
Default& default__();
const Default& default__() const;
Delete& delete_();
const Delete& delete_() const;
Purge& purge();
const Purge& purge() const;
Subscriptions& subscriptions();
const Subscriptions& subscriptions() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Pubsub_choice_template : public Base_Template {
union {
struct {
Pubsub_choice::union_selection_type union_selection;
union {
Affiliations_template *field_affiliations;
Configure_template *field_configure;
Default_template *field_default__;
Delete_template *field_delete_;
Purge_template *field_purge;
Subscriptions_template *field_subscriptions;
};
} single_value;
struct {
unsigned int n_values;
Pubsub_choice_template *list_value;
} value_list;
};
void copy_value(const Pubsub_choice& other_value);

void copy_template(const Pubsub_choice_template& other_value);

public:
Pubsub_choice_template();
Pubsub_choice_template(template_sel other_value);
Pubsub_choice_template(const Pubsub_choice& other_value);
Pubsub_choice_template(const OPTIONAL<Pubsub_choice>& other_value);
Pubsub_choice_template(const Pubsub_choice_template& other_value);
~Pubsub_choice_template();
void clean_up();
Pubsub_choice_template& operator=(template_sel other_value);
Pubsub_choice_template& operator=(const Pubsub_choice& other_value);
Pubsub_choice_template& operator=(const OPTIONAL<Pubsub_choice>& other_value);
Pubsub_choice_template& operator=(const Pubsub_choice_template& other_value);
boolean match(const Pubsub_choice& other_value) const;
boolean is_value() const;Pubsub_choice valueof() const;
Pubsub_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliations_template& affiliations();
const Affiliations_template& affiliations() const;
Configure_template& configure();
const Configure_template& configure() const;
Default_template& default__();
const Default_template& default__() const;
Delete_template& delete_();
const Delete_template& delete_() const;
Purge_template& purge();
const Purge_template& purge() const;
Subscriptions_template& subscriptions();
const Subscriptions_template& subscriptions() const;
boolean ischosen(Pubsub_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Pubsub_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliations_affiliation__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Affiliation **value_elements;
} *val_ptr;

static const Affiliation UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Affiliations_affiliation__list& other_value);

public:
  typedef Affiliation of_type;
Affiliations_affiliation__list();
Affiliations_affiliation__list(null_type other_value);
Affiliations_affiliation__list(const Affiliations_affiliation__list& other_value);
~Affiliations_affiliation__list();

void clean_up();
Affiliations_affiliation__list& operator=(null_type other_value);
Affiliations_affiliation__list& operator=(const Affiliations_affiliation__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Affiliations_affiliation__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Affiliations_affiliation__list& other_value) const { return !(*this == other_value); }

Affiliation& operator[](int index_value);
Affiliation& operator[](const INTEGER& index_value);
const Affiliation& operator[](int index_value) const;
const Affiliation& operator[](const INTEGER& index_value) const;

Affiliations_affiliation__list operator<<=(int rotate_count) const;
Affiliations_affiliation__list operator<<=(const INTEGER& rotate_count) const;
Affiliations_affiliation__list operator>>=(int rotate_count) const;
Affiliations_affiliation__list operator>>=(const INTEGER& rotate_count) const;

Affiliations_affiliation__list operator+(const Affiliations_affiliation__list& other_value) const;

Affiliations_affiliation__list substr(int index, int returncount) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list& repl) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Affiliations_affiliation__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Affiliation_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Affiliations_affiliation__list_template *list_value;
} value_list;
};
void copy_value(const Affiliations_affiliation__list& other_value);
void copy_template(const Affiliations_affiliation__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Affiliations_affiliation__list_template();
Affiliations_affiliation__list_template(template_sel other_value);
Affiliations_affiliation__list_template(null_type other_value);
Affiliations_affiliation__list_template(const Affiliations_affiliation__list& other_value);
Affiliations_affiliation__list_template(const OPTIONAL<Affiliations_affiliation__list>& other_value);
Affiliations_affiliation__list_template(const Affiliations_affiliation__list_template& other_value);
~Affiliations_affiliation__list_template();

void clean_up();
Affiliations_affiliation__list_template& operator=(template_sel other_value);
Affiliations_affiliation__list_template& operator=(null_type other_value);
Affiliations_affiliation__list_template& operator=(const Affiliations_affiliation__list& other_value);
Affiliations_affiliation__list_template& operator=(const OPTIONAL<Affiliations_affiliation__list>& other_value);
Affiliations_affiliation__list_template& operator=(const Affiliations_affiliation__list_template& other_value);

Affiliation_template& operator[](int index_value);
Affiliation_template& operator[](const INTEGER& index_value);
const Affiliation_template& operator[](int index_value) const;
const Affiliation_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Affiliations_affiliation__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Affiliations_affiliation__list valueof() const;
Affiliations_affiliation__list substr(int index, int returncount) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list_template& repl) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Affiliations_affiliation__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Affiliations_affiliation__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliation_affiliation : public Base_Type { // enum
friend class Affiliation_affiliation_template;
public:
enum enum_type { member = 0, none__ = 1, outcast = 2, owner = 3, publisher = 4, publish__only = 5, UNKNOWN_VALUE = 6, UNBOUND_VALUE = 7 };
private:
enum_type enum_value;

public:
Affiliation_affiliation();
Affiliation_affiliation(int other_value);
Affiliation_affiliation(enum_type other_value);
Affiliation_affiliation(const Affiliation_affiliation& other_value);

Affiliation_affiliation& operator=(int other_value);
Affiliation_affiliation& operator=(enum_type other_value);
Affiliation_affiliation& operator=(const Affiliation_affiliation& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Affiliation_affiliation& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Affiliation_affiliation& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Affiliation_affiliation& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Affiliation_affiliation& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Affiliation_affiliation& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Affiliation_affiliation& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Affiliation_affiliation& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Affiliation_affiliation_template : public Base_Template {
union {
Affiliation_affiliation::enum_type single_value;
struct {
unsigned int n_values;
Affiliation_affiliation_template *list_value;
} value_list;
};

void copy_template(const Affiliation_affiliation_template& other_value);

public:
Affiliation_affiliation_template();
Affiliation_affiliation_template(template_sel other_value);
Affiliation_affiliation_template(int other_value);
Affiliation_affiliation_template(Affiliation_affiliation::enum_type other_value);
Affiliation_affiliation_template(const Affiliation_affiliation& other_value);
Affiliation_affiliation_template(const OPTIONAL<Affiliation_affiliation>& other_value);
Affiliation_affiliation_template(const Affiliation_affiliation_template& other_value);
~Affiliation_affiliation_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliation_affiliation_template& operator=(template_sel other_value);
Affiliation_affiliation_template& operator=(int other_value);
Affiliation_affiliation_template& operator=(Affiliation_affiliation::enum_type other_value);
Affiliation_affiliation_template& operator=(const Affiliation_affiliation& other_value);
Affiliation_affiliation_template& operator=(const OPTIONAL<Affiliation_affiliation>& other_value);
Affiliation_affiliation_template& operator=(const Affiliation_affiliation_template& other_value);

boolean match(Affiliation_affiliation::enum_type other_value) const;
boolean match(const Affiliation_affiliation& other_value) const;
Affiliation_affiliation::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliation_affiliation_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Affiliation_affiliation& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliation : public Base_Type {
  Affiliation_affiliation field_affiliation;
  UNIVERSAL_CHARSTRING field_jid;
  Empty field_base;
  boolean bound_flag;
public:
  Affiliation();
  Affiliation(const Affiliation_affiliation& par_affiliation,
    const UNIVERSAL_CHARSTRING& par_jid,
    const Empty& par_base);
  Affiliation(const Affiliation& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Affiliation& operator=(const Affiliation& other_value);
  boolean operator==(const Affiliation& other_value) const;
  inline boolean operator!=(const Affiliation& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Affiliation_affiliation& affiliation()
    {return field_affiliation;}
  inline const Affiliation_affiliation& affiliation() const
    {return field_affiliation;}
  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Affiliation_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Affiliation_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Affiliation& other_value);
void copy_template(const Affiliation_template& other_value);

public:
Affiliation_template();
Affiliation_template(template_sel other_value);
Affiliation_template(const Affiliation& other_value);
Affiliation_template(const OPTIONAL<Affiliation>& other_value);
Affiliation_template(const Affiliation_template& other_value);
~Affiliation_template();
Affiliation_template& operator=(template_sel other_value);
Affiliation_template& operator=(const Affiliation& other_value);
Affiliation_template& operator=(const OPTIONAL<Affiliation>& other_value);
Affiliation_template& operator=(const Affiliation_template& other_value);
boolean match(const Affiliation& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliation valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliation_template& list_item(unsigned int list_index) const;
Affiliation_affiliation_template& affiliation();
const Affiliation_affiliation_template& affiliation() const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Affiliation& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Affiliations : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Affiliations_affiliation__list field_affiliation__list;
  boolean bound_flag;
public:
  Affiliations();
  Affiliations(const UNIVERSAL_CHARSTRING& par_node,
    const Affiliations_affiliation__list& par_affiliation__list);
  Affiliations(const Affiliations& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Affiliations& operator=(const Affiliations& other_value);
  boolean operator==(const Affiliations& other_value) const;
  inline boolean operator!=(const Affiliations& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Affiliations_affiliation__list& affiliation__list()
    {return field_affiliation__list;}
  inline const Affiliations_affiliation__list& affiliation__list() const
    {return field_affiliation__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Affiliations_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Affiliations_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Affiliations& other_value);
void copy_template(const Affiliations_template& other_value);

public:
Affiliations_template();
Affiliations_template(template_sel other_value);
Affiliations_template(const Affiliations& other_value);
Affiliations_template(const OPTIONAL<Affiliations>& other_value);
Affiliations_template(const Affiliations_template& other_value);
~Affiliations_template();
Affiliations_template& operator=(template_sel other_value);
Affiliations_template& operator=(const Affiliations& other_value);
Affiliations_template& operator=(const OPTIONAL<Affiliations>& other_value);
Affiliations_template& operator=(const Affiliations_template& other_value);
boolean match(const Affiliations& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliations valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliations_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Affiliations_affiliation__list_template& affiliation__list();
const Affiliations_affiliation__list_template& affiliation__list() const;
int size_of() const;
void log() const;
void log_match(const Affiliations& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configure : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<Configure_choice> field_choice;
  boolean bound_flag;
public:
  Configure();
  Configure(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<Configure_choice>& par_choice);
  Configure(const Configure& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Configure& operator=(const Configure& other_value);
  boolean operator==(const Configure& other_value) const;
  inline boolean operator!=(const Configure& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<Configure_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Configure_choice>& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Configure_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Configure_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Configure& other_value);
void copy_template(const Configure_template& other_value);

public:
Configure_template();
Configure_template(template_sel other_value);
Configure_template(const Configure& other_value);
Configure_template(const OPTIONAL<Configure>& other_value);
Configure_template(const Configure_template& other_value);
~Configure_template();
Configure_template& operator=(template_sel other_value);
Configure_template& operator=(const Configure& other_value);
Configure_template& operator=(const OPTIONAL<Configure>& other_value);
Configure_template& operator=(const Configure_template& other_value);
boolean match(const Configure& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Configure valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Configure_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Configure_choice_template& choice();
const Configure_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Configure& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configure_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_x = 1 };
private:
union_selection_type union_selection;
union {
jabber__x__data::X *field_x;
};
void copy_value(const Configure_choice& other_value);

public:
Configure_choice();
Configure_choice(const Configure_choice& other_value);
~Configure_choice();
Configure_choice& operator=(const Configure_choice& other_value);
boolean operator==(const Configure_choice& other_value) const;
inline boolean operator!=(const Configure_choice& other_value) const { return !(*this == other_value); }
jabber__x__data::X& x();
const jabber__x__data::X& x() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Configure_choice_template : public Base_Template {
union {
struct {
Configure_choice::union_selection_type union_selection;
union {
jabber__x__data::X_template *field_x;
};
} single_value;
struct {
unsigned int n_values;
Configure_choice_template *list_value;
} value_list;
};
void copy_value(const Configure_choice& other_value);

void copy_template(const Configure_choice_template& other_value);

public:
Configure_choice_template();
Configure_choice_template(template_sel other_value);
Configure_choice_template(const Configure_choice& other_value);
Configure_choice_template(const OPTIONAL<Configure_choice>& other_value);
Configure_choice_template(const Configure_choice_template& other_value);
~Configure_choice_template();
void clean_up();
Configure_choice_template& operator=(template_sel other_value);
Configure_choice_template& operator=(const Configure_choice& other_value);
Configure_choice_template& operator=(const OPTIONAL<Configure_choice>& other_value);
Configure_choice_template& operator=(const Configure_choice_template& other_value);
boolean match(const Configure_choice& other_value) const;
boolean is_value() const;Configure_choice valueof() const;
Configure_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
jabber__x__data::X_template& x();
const jabber__x__data::X_template& x() const;
boolean ischosen(Configure_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Configure_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Default : public Base_Type {
  OPTIONAL<Default_choice> field_choice;
  boolean bound_flag;
public:
  Default();
  Default(const OPTIONAL<Default_choice>& par_choice);
  Default(const Default& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Default& operator=(const Default& other_value);
  boolean operator==(const Default& other_value) const;
  inline boolean operator!=(const Default& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Default_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Default_choice>& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Default_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Default_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Default& other_value);
void copy_template(const Default_template& other_value);

public:
Default_template();
Default_template(template_sel other_value);
Default_template(const Default& other_value);
Default_template(const OPTIONAL<Default>& other_value);
Default_template(const Default_template& other_value);
~Default_template();
Default_template& operator=(template_sel other_value);
Default_template& operator=(const Default& other_value);
Default_template& operator=(const OPTIONAL<Default>& other_value);
Default_template& operator=(const Default_template& other_value);
boolean match(const Default& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Default valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Default_template& list_item(unsigned int list_index) const;
Default_choice_template& choice();
const Default_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Default& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Default_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_x = 1 };
private:
union_selection_type union_selection;
union {
jabber__x__data::X *field_x;
};
void copy_value(const Default_choice& other_value);

public:
Default_choice();
Default_choice(const Default_choice& other_value);
~Default_choice();
Default_choice& operator=(const Default_choice& other_value);
boolean operator==(const Default_choice& other_value) const;
inline boolean operator!=(const Default_choice& other_value) const { return !(*this == other_value); }
jabber__x__data::X& x();
const jabber__x__data::X& x() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Default_choice_template : public Base_Template {
union {
struct {
Default_choice::union_selection_type union_selection;
union {
jabber__x__data::X_template *field_x;
};
} single_value;
struct {
unsigned int n_values;
Default_choice_template *list_value;
} value_list;
};
void copy_value(const Default_choice& other_value);

void copy_template(const Default_choice_template& other_value);

public:
Default_choice_template();
Default_choice_template(template_sel other_value);
Default_choice_template(const Default_choice& other_value);
Default_choice_template(const OPTIONAL<Default_choice>& other_value);
Default_choice_template(const Default_choice_template& other_value);
~Default_choice_template();
void clean_up();
Default_choice_template& operator=(template_sel other_value);
Default_choice_template& operator=(const Default_choice& other_value);
Default_choice_template& operator=(const OPTIONAL<Default_choice>& other_value);
Default_choice_template& operator=(const Default_choice_template& other_value);
boolean match(const Default_choice& other_value) const;
boolean is_value() const;Default_choice valueof() const;
Default_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
jabber__x__data::X_template& x();
const jabber__x__data::X_template& x() const;
boolean ischosen(Default_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Default_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Delete : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  OPTIONAL<Redirect> field_redirect;
  boolean bound_flag;
public:
  Delete();
  Delete(const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<Redirect>& par_redirect);
  Delete(const Delete& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Delete& operator=(const Delete& other_value);
  boolean operator==(const Delete& other_value) const;
  inline boolean operator!=(const Delete& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline OPTIONAL<Redirect>& redirect()
    {return field_redirect;}
  inline const OPTIONAL<Redirect>& redirect() const
    {return field_redirect;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Delete_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Delete_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Delete& other_value);
void copy_template(const Delete_template& other_value);

public:
Delete_template();
Delete_template(template_sel other_value);
Delete_template(const Delete& other_value);
Delete_template(const OPTIONAL<Delete>& other_value);
Delete_template(const Delete_template& other_value);
~Delete_template();
Delete_template& operator=(template_sel other_value);
Delete_template& operator=(const Delete& other_value);
Delete_template& operator=(const OPTIONAL<Delete>& other_value);
Delete_template& operator=(const Delete_template& other_value);
boolean match(const Delete& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Delete valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Delete_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Redirect_template& redirect();
const Redirect_template& redirect() const;
int size_of() const;
void log() const;
void log_match(const Delete& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Redirect : public Base_Type {
  UNIVERSAL_CHARSTRING field_uri;
  Empty field_base;
  boolean bound_flag;
public:
  Redirect();
  Redirect(const UNIVERSAL_CHARSTRING& par_uri,
    const Empty& par_base);
  Redirect(const Redirect& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Redirect& operator=(const Redirect& other_value);
  boolean operator==(const Redirect& other_value) const;
  inline boolean operator!=(const Redirect& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& uri()
    {return field_uri;}
  inline const UNIVERSAL_CHARSTRING& uri() const
    {return field_uri;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Redirect_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Redirect_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Redirect& other_value);
void copy_template(const Redirect_template& other_value);

public:
Redirect_template();
Redirect_template(template_sel other_value);
Redirect_template(const Redirect& other_value);
Redirect_template(const OPTIONAL<Redirect>& other_value);
Redirect_template(const Redirect_template& other_value);
~Redirect_template();
Redirect_template& operator=(template_sel other_value);
Redirect_template& operator=(const Redirect& other_value);
Redirect_template& operator=(const OPTIONAL<Redirect>& other_value);
Redirect_template& operator=(const Redirect_template& other_value);
boolean match(const Redirect& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Redirect valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Redirect_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& uri();
const UNIVERSAL_CHARSTRING_template& uri() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Redirect& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Purge : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Purge();
  Purge(const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base);
  Purge(const Purge& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Purge& operator=(const Purge& other_value);
  boolean operator==(const Purge& other_value) const;
  inline boolean operator!=(const Purge& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Purge_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Purge_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Purge& other_value);
void copy_template(const Purge_template& other_value);

public:
Purge_template();
Purge_template(template_sel other_value);
Purge_template(const Purge& other_value);
Purge_template(const OPTIONAL<Purge>& other_value);
Purge_template(const Purge_template& other_value);
~Purge_template();
Purge_template& operator=(template_sel other_value);
Purge_template& operator=(const Purge& other_value);
Purge_template& operator=(const OPTIONAL<Purge>& other_value);
Purge_template& operator=(const Purge_template& other_value);
boolean match(const Purge& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Purge valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Purge_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Purge& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscriptions_subscription__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Subscription **value_elements;
} *val_ptr;

static const Subscription UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Subscriptions_subscription__list& other_value);

public:
  typedef Subscription of_type;
Subscriptions_subscription__list();
Subscriptions_subscription__list(null_type other_value);
Subscriptions_subscription__list(const Subscriptions_subscription__list& other_value);
~Subscriptions_subscription__list();

void clean_up();
Subscriptions_subscription__list& operator=(null_type other_value);
Subscriptions_subscription__list& operator=(const Subscriptions_subscription__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Subscriptions_subscription__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Subscriptions_subscription__list& other_value) const { return !(*this == other_value); }

Subscription& operator[](int index_value);
Subscription& operator[](const INTEGER& index_value);
const Subscription& operator[](int index_value) const;
const Subscription& operator[](const INTEGER& index_value) const;

Subscriptions_subscription__list operator<<=(int rotate_count) const;
Subscriptions_subscription__list operator<<=(const INTEGER& rotate_count) const;
Subscriptions_subscription__list operator>>=(int rotate_count) const;
Subscriptions_subscription__list operator>>=(const INTEGER& rotate_count) const;

Subscriptions_subscription__list operator+(const Subscriptions_subscription__list& other_value) const;

Subscriptions_subscription__list substr(int index, int returncount) const;

Subscriptions_subscription__list replace(int index, int len, const Subscriptions_subscription__list& repl) const;

Subscriptions_subscription__list replace(int index, int len, const Subscriptions_subscription__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Subscriptions_subscription__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Subscription_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Subscriptions_subscription__list_template *list_value;
} value_list;
};
void copy_value(const Subscriptions_subscription__list& other_value);
void copy_template(const Subscriptions_subscription__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Subscriptions_subscription__list_template();
Subscriptions_subscription__list_template(template_sel other_value);
Subscriptions_subscription__list_template(null_type other_value);
Subscriptions_subscription__list_template(const Subscriptions_subscription__list& other_value);
Subscriptions_subscription__list_template(const OPTIONAL<Subscriptions_subscription__list>& other_value);
Subscriptions_subscription__list_template(const Subscriptions_subscription__list_template& other_value);
~Subscriptions_subscription__list_template();

void clean_up();
Subscriptions_subscription__list_template& operator=(template_sel other_value);
Subscriptions_subscription__list_template& operator=(null_type other_value);
Subscriptions_subscription__list_template& operator=(const Subscriptions_subscription__list& other_value);
Subscriptions_subscription__list_template& operator=(const OPTIONAL<Subscriptions_subscription__list>& other_value);
Subscriptions_subscription__list_template& operator=(const Subscriptions_subscription__list_template& other_value);

Subscription_template& operator[](int index_value);
Subscription_template& operator[](const INTEGER& index_value);
const Subscription_template& operator[](int index_value) const;
const Subscription_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Subscriptions_subscription__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Subscriptions_subscription__list valueof() const;
Subscriptions_subscription__list substr(int index, int returncount) const;

Subscriptions_subscription__list replace(int index, int len, const Subscriptions_subscription__list_template& repl) const;

Subscriptions_subscription__list replace(int index, int len, const Subscriptions_subscription__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Subscriptions_subscription__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Subscriptions_subscription__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Subscription_subscription : public Base_Type { // enum
friend class Subscription_subscription_template;
public:
enum enum_type { none__ = 0, pending = 1, subscribed = 2, unconfigured = 3, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
Subscription_subscription();
Subscription_subscription(int other_value);
Subscription_subscription(enum_type other_value);
Subscription_subscription(const Subscription_subscription& other_value);

Subscription_subscription& operator=(int other_value);
Subscription_subscription& operator=(enum_type other_value);
Subscription_subscription& operator=(const Subscription_subscription& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Subscription_subscription& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Subscription_subscription& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Subscription_subscription& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Subscription_subscription& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Subscription_subscription& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Subscription_subscription& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Subscription_subscription& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Subscription_subscription_template : public Base_Template {
union {
Subscription_subscription::enum_type single_value;
struct {
unsigned int n_values;
Subscription_subscription_template *list_value;
} value_list;
};

void copy_template(const Subscription_subscription_template& other_value);

public:
Subscription_subscription_template();
Subscription_subscription_template(template_sel other_value);
Subscription_subscription_template(int other_value);
Subscription_subscription_template(Subscription_subscription::enum_type other_value);
Subscription_subscription_template(const Subscription_subscription& other_value);
Subscription_subscription_template(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template(const Subscription_subscription_template& other_value);
~Subscription_subscription_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription_subscription_template& operator=(template_sel other_value);
Subscription_subscription_template& operator=(int other_value);
Subscription_subscription_template& operator=(Subscription_subscription::enum_type other_value);
Subscription_subscription_template& operator=(const Subscription_subscription& other_value);
Subscription_subscription_template& operator=(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template& operator=(const Subscription_subscription_template& other_value);

boolean match(Subscription_subscription::enum_type other_value) const;
boolean match(const Subscription_subscription& other_value) const;
Subscription_subscription::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_subscription_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Subscription_subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Subscription : public Base_Type {
  UNIVERSAL_CHARSTRING field_jid;
  Subscription_subscription field_subscription;
  Empty field_base;
  boolean bound_flag;
public:
  Subscription();
  Subscription(const UNIVERSAL_CHARSTRING& par_jid,
    const Subscription_subscription& par_subscription,
    const Empty& par_base);
  Subscription(const Subscription& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscription& operator=(const Subscription& other_value);
  boolean operator==(const Subscription& other_value) const;
  inline boolean operator!=(const Subscription& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline Subscription_subscription& subscription()
    {return field_subscription;}
  inline const Subscription_subscription& subscription() const
    {return field_subscription;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscription_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscription_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscription& other_value);
void copy_template(const Subscription_template& other_value);

public:
Subscription_template();
Subscription_template(template_sel other_value);
Subscription_template(const Subscription& other_value);
Subscription_template(const OPTIONAL<Subscription>& other_value);
Subscription_template(const Subscription_template& other_value);
~Subscription_template();
Subscription_template& operator=(template_sel other_value);
Subscription_template& operator=(const Subscription& other_value);
Subscription_template& operator=(const OPTIONAL<Subscription>& other_value);
Subscription_template& operator=(const Subscription_template& other_value);
boolean match(const Subscription& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
Subscription_subscription_template& subscription();
const Subscription_subscription_template& subscription() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscriptions : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Subscriptions_subscription__list field_subscription__list;
  boolean bound_flag;
public:
  Subscriptions();
  Subscriptions(const UNIVERSAL_CHARSTRING& par_node,
    const Subscriptions_subscription__list& par_subscription__list);
  Subscriptions(const Subscriptions& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscriptions& operator=(const Subscriptions& other_value);
  boolean operator==(const Subscriptions& other_value) const;
  inline boolean operator!=(const Subscriptions& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Subscriptions_subscription__list& subscription__list()
    {return field_subscription__list;}
  inline const Subscriptions_subscription__list& subscription__list() const
    {return field_subscription__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscriptions_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscriptions_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscriptions& other_value);
void copy_template(const Subscriptions_template& other_value);

public:
Subscriptions_template();
Subscriptions_template(template_sel other_value);
Subscriptions_template(const Subscriptions& other_value);
Subscriptions_template(const OPTIONAL<Subscriptions>& other_value);
Subscriptions_template(const Subscriptions_template& other_value);
~Subscriptions_template();
Subscriptions_template& operator=(template_sel other_value);
Subscriptions_template& operator=(const Subscriptions& other_value);
Subscriptions_template& operator=(const OPTIONAL<Subscriptions>& other_value);
Subscriptions_template& operator=(const Subscriptions_template& other_value);
boolean match(const Subscriptions& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscriptions valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscriptions_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Subscriptions_subscription__list_template& subscription__list();
const Subscriptions_subscription__list_template& subscription__list() const;
int size_of() const;
void log() const;
void log_match(const Subscriptions& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Pubsub : public Base_Type {
  Pubsub_choice field_choice;
  boolean bound_flag;
public:
  Pubsub();
  Pubsub(const Pubsub_choice& par_choice);
  Pubsub(const Pubsub& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Pubsub& operator=(const Pubsub& other_value);
  boolean operator==(const Pubsub& other_value) const;
  inline boolean operator!=(const Pubsub& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Pubsub_choice& choice()
    {return field_choice;}
  inline const Pubsub_choice& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Pubsub_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Pubsub_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Pubsub& other_value);
void copy_template(const Pubsub_template& other_value);

public:
Pubsub_template();
Pubsub_template(template_sel other_value);
Pubsub_template(const Pubsub& other_value);
Pubsub_template(const OPTIONAL<Pubsub>& other_value);
Pubsub_template(const Pubsub_template& other_value);
~Pubsub_template();
Pubsub_template& operator=(template_sel other_value);
Pubsub_template& operator=(const Pubsub& other_value);
Pubsub_template& operator=(const OPTIONAL<Pubsub>& other_value);
Pubsub_template& operator=(const Pubsub_template& other_value);
boolean match(const Pubsub& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Pubsub valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Pubsub_template& list_item(unsigned int list_index) const;
Pubsub_choice_template& choice();
const Pubsub_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Pubsub& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const Affiliations_affiliation__list& other_value);
inline boolean operator!=(null_type null_value, const Affiliations_affiliation__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Subscriptions_subscription__list& other_value);
inline boolean operator!=(null_type null_value, const Subscriptions_subscription__list& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t Pubsub_choice_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_descr_;
extern const XERdescriptor_t Affiliations_node_xer_;
extern const TTCN_Typedescriptor_t Affiliations_node_descr_;
extern const XERdescriptor_t Affiliations_affiliation__list_xer_;
extern const TTCN_JSONdescriptor_t Affiliations_affiliation__list_json_;
extern const TTCN_Typedescriptor_t Affiliations_affiliation__list_descr_;
extern const XERdescriptor_t Affiliation_affiliation_xer_;
extern const TTCN_JSONdescriptor_t Affiliation_affiliation_json_;
extern const TTCN_Typedescriptor_t Affiliation_affiliation_descr_;
extern const XERdescriptor_t Affiliation_jid_xer_;
extern const TTCN_Typedescriptor_t Affiliation_jid_descr_;
extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Affiliation_base_xer_;
extern const TTCN_Typedescriptor_t Affiliation_base_descr_;
extern const XERdescriptor_t Affiliation_xer_;
extern const TTCN_JSONdescriptor_t Affiliation_json_;
extern const TTCN_Typedescriptor_t Affiliation_descr_;
extern const XERdescriptor_t Affiliations_affiliation__list_0_xer_;
extern const TTCN_Typedescriptor_t Affiliations_affiliation__list_0_descr_;
extern const XERdescriptor_t Affiliations_xer_;
extern const TTCN_JSONdescriptor_t Affiliations_json_;
extern const TTCN_Typedescriptor_t Affiliations_descr_;
extern const XERdescriptor_t Pubsub_choice_affiliations_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_affiliations_descr_;
extern const XERdescriptor_t Configure_xer_;
extern const TTCN_JSONdescriptor_t Configure_json_;
extern const TTCN_Typedescriptor_t Configure_descr_;
extern const XERdescriptor_t Configure_node_xer_;
extern const TTCN_Typedescriptor_t Configure_node_descr_;
extern const XERdescriptor_t Configure_choice_xer_;
extern const TTCN_JSONdescriptor_t Configure_choice_json_;
extern const TTCN_Typedescriptor_t Configure_choice_descr_;
extern const XERdescriptor_t Configure_choice_x_xer_;
extern const TTCN_Typedescriptor_t Configure_choice_x_descr_;
extern const XERdescriptor_t Pubsub_choice_configure_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_configure_descr_;
extern const XERdescriptor_t Default_xer_;
extern const TTCN_JSONdescriptor_t Default_json_;
extern const TTCN_Typedescriptor_t Default_descr_;
extern const XERdescriptor_t Default_choice_xer_;
extern const TTCN_JSONdescriptor_t Default_choice_json_;
extern const TTCN_Typedescriptor_t Default_choice_descr_;
extern const XERdescriptor_t Default_choice_x_xer_;
extern const TTCN_Typedescriptor_t Default_choice_x_descr_;
extern const XERdescriptor_t Pubsub_choice_default___xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_default___descr_;
extern const XERdescriptor_t Delete_node_xer_;
extern const TTCN_Typedescriptor_t Delete_node_descr_;
extern const XERdescriptor_t Delete_xer_;
extern const TTCN_JSONdescriptor_t Delete_json_;
extern const TTCN_Typedescriptor_t Delete_descr_;
extern const XERdescriptor_t Redirect_uri_xer_;
extern const TTCN_Typedescriptor_t Redirect_uri_descr_;
extern const XERdescriptor_t Redirect_base_xer_;
extern const TTCN_Typedescriptor_t Redirect_base_descr_;
extern const XERdescriptor_t Redirect_xer_;
extern const TTCN_JSONdescriptor_t Redirect_json_;
extern const TTCN_Typedescriptor_t Redirect_descr_;
extern const XERdescriptor_t Delete_redirect_xer_;
extern const TTCN_Typedescriptor_t Delete_redirect_descr_;
extern const XERdescriptor_t Pubsub_choice_delete__xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_delete__descr_;
extern const XERdescriptor_t Purge_node_xer_;
extern const TTCN_Typedescriptor_t Purge_node_descr_;
extern const XERdescriptor_t Purge_base_xer_;
extern const TTCN_Typedescriptor_t Purge_base_descr_;
extern const XERdescriptor_t Purge_xer_;
extern const TTCN_JSONdescriptor_t Purge_json_;
extern const TTCN_Typedescriptor_t Purge_descr_;
extern const XERdescriptor_t Pubsub_choice_purge_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_purge_descr_;
extern const XERdescriptor_t Subscriptions_node_xer_;
extern const TTCN_Typedescriptor_t Subscriptions_node_descr_;
extern const XERdescriptor_t Subscriptions_subscription__list_xer_;
extern const TTCN_JSONdescriptor_t Subscriptions_subscription__list_json_;
extern const TTCN_Typedescriptor_t Subscriptions_subscription__list_descr_;
extern const XERdescriptor_t Subscription_jid_xer_;
extern const TTCN_Typedescriptor_t Subscription_jid_descr_;
extern const XERdescriptor_t Subscription_subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_subscription_descr_;
extern const XERdescriptor_t Subscription_base_xer_;
extern const TTCN_Typedescriptor_t Subscription_base_descr_;
extern const XERdescriptor_t Subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_descr_;
extern const XERdescriptor_t Subscriptions_subscription__list_0_xer_;
extern const TTCN_Typedescriptor_t Subscriptions_subscription__list_0_descr_;
extern const XERdescriptor_t Subscriptions_xer_;
extern const TTCN_JSONdescriptor_t Subscriptions_json_;
extern const TTCN_Typedescriptor_t Subscriptions_descr_;
extern const XERdescriptor_t Pubsub_choice_subscriptions_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_subscriptions_descr_;
extern const XERdescriptor_t Pubsub_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_json_;
extern const TTCN_Typedescriptor_t Pubsub_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
