// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 11:34:10 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef jabber__iq__auth_HH
#define jabber__iq__auth_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "XSD.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef jabber__iq__auth_HH
#endif

namespace jabber__iq__auth {

/* Forward declarations of classes */

class Query_choice;
class Query_choice_template;
class Query;
class Query_template;

} /* end of namespace */

#ifndef jabber__iq__auth_HH
#define jabber__iq__auth_HH

namespace jabber__iq__auth {

/* Type definitions */

typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING Query_choice_password__list;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING_template Query_choice_password__list_template;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING Query_choice_digest__list;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING_template Query_choice_digest__list_template;

/* Class definitions */

class Query_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_password__list = 1, ALT_digest__list = 2 };
private:
union_selection_type union_selection;
union {
Query_choice_password__list *field_password__list;
Query_choice_digest__list *field_digest__list;
};
void copy_value(const Query_choice& other_value);

public:
Query_choice();
Query_choice(const Query_choice& other_value);
~Query_choice();
Query_choice& operator=(const Query_choice& other_value);
boolean operator==(const Query_choice& other_value) const;
inline boolean operator!=(const Query_choice& other_value) const { return !(*this == other_value); }
Query_choice_password__list& password__list();
const Query_choice_password__list& password__list() const;
Query_choice_digest__list& digest__list();
const Query_choice_digest__list& digest__list() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Query_choice_template : public Base_Template {
union {
struct {
Query_choice::union_selection_type union_selection;
union {
Query_choice_password__list_template *field_password__list;
Query_choice_digest__list_template *field_digest__list;
};
} single_value;
struct {
unsigned int n_values;
Query_choice_template *list_value;
} value_list;
};
void copy_value(const Query_choice& other_value);

void copy_template(const Query_choice_template& other_value);

public:
Query_choice_template();
Query_choice_template(template_sel other_value);
Query_choice_template(const Query_choice& other_value);
Query_choice_template(const OPTIONAL<Query_choice>& other_value);
Query_choice_template(const Query_choice_template& other_value);
~Query_choice_template();
void clean_up();
Query_choice_template& operator=(template_sel other_value);
Query_choice_template& operator=(const Query_choice& other_value);
Query_choice_template& operator=(const OPTIONAL<Query_choice>& other_value);
Query_choice_template& operator=(const Query_choice_template& other_value);
boolean match(const Query_choice& other_value) const;
boolean is_value() const;Query_choice valueof() const;
Query_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Query_choice_password__list_template& password__list();
const Query_choice_password__list_template& password__list() const;
Query_choice_digest__list_template& digest__list();
const Query_choice_digest__list_template& digest__list() const;
boolean ischosen(Query_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Query_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Query : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_username;
  Query_choice field_choice;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_resource;
  boolean bound_flag;
public:
  Query();
  Query(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_username,
    const Query_choice& par_choice,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_resource);
  Query(const Query& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Query& operator=(const Query& other_value);
  boolean operator==(const Query& other_value) const;
  inline boolean operator!=(const Query& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& username()
    {return field_username;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& username() const
    {return field_username;}
  inline Query_choice& choice()
    {return field_choice;}
  inline const Query_choice& choice() const
    {return field_choice;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& resource()
    {return field_resource;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& resource() const
    {return field_resource;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Query_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Query_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Query& other_value);
void copy_template(const Query_template& other_value);

public:
Query_template();
Query_template(template_sel other_value);
Query_template(const Query& other_value);
Query_template(const OPTIONAL<Query>& other_value);
Query_template(const Query_template& other_value);
~Query_template();
Query_template& operator=(template_sel other_value);
Query_template& operator=(const Query& other_value);
Query_template& operator=(const OPTIONAL<Query>& other_value);
Query_template& operator=(const Query_template& other_value);
boolean match(const Query& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Query valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Query_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& username();
const UNIVERSAL_CHARSTRING_template& username() const;
Query_choice_template& choice();
const Query_choice_template& choice() const;
UNIVERSAL_CHARSTRING_template& resource();
const UNIVERSAL_CHARSTRING_template& resource() const;
int size_of() const;
void log() const;
void log_match(const Query& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Global variable declarations */

extern const XERdescriptor_t Query_choice_xer_;
extern const TTCN_JSONdescriptor_t Query_choice_json_;
extern const TTCN_Typedescriptor_t Query_choice_descr_;
extern const XERdescriptor_t Query_choice_password__list_xer_;
extern const TTCN_JSONdescriptor_t Query_choice_password__list_json_;
extern const TTCN_Typedescriptor_t Query_choice_password__list_descr_;
extern const XERdescriptor_t Query_choice_password__list_0_xer_;
extern const TTCN_Typedescriptor_t Query_choice_password__list_0_descr_;
extern const XERdescriptor_t Query_choice_digest__list_xer_;
extern const TTCN_JSONdescriptor_t Query_choice_digest__list_json_;
extern const TTCN_Typedescriptor_t Query_choice_digest__list_descr_;
extern const XERdescriptor_t Query_choice_digest__list_0_xer_;
extern const TTCN_Typedescriptor_t Query_choice_digest__list_0_descr_;
extern const XERdescriptor_t Query_xer_;
extern const TTCN_JSONdescriptor_t Query_json_;
extern const TTCN_Typedescriptor_t Query_descr_;
extern const XERdescriptor_t Query_username_xer_;
extern const TTCN_Typedescriptor_t Query_username_descr_;
extern const XERdescriptor_t Query_resource_xer_;
extern const TTCN_Typedescriptor_t Query_resource_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
