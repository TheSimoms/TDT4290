// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef urn__ietf__params__xml__ns__xmpp__sasl_HH
#define urn__ietf__params__xml__ns__xmpp__sasl_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "XSD.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef urn__ietf__params__xml__ns__xmpp__sasl_HH
#endif

namespace urn__ietf__params__xml__ns__xmpp__sasl {

/* Forward declarations of classes */

class Mechanisms_elem__list;
class Mechanisms_elem__list_template;
class Mechanisms;
class Mechanisms_template;
class Empty;
class Empty_template;
class Auth;
class Auth_template;
class Failure;
class Failure_template;
class Failure_choice;
class Failure_choice_template;
class Text;
class Text_template;

} /* end of namespace */

#ifndef urn__ietf__params__xml__ns__xmpp__sasl_HH
#define urn__ietf__params__xml__ns__xmpp__sasl_HH

namespace urn__ietf__params__xml__ns__xmpp__sasl {

/* Type definitions */

typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING Mechanisms_mechanism__list;
typedef PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING_template Mechanisms_mechanism__list_template;
typedef Empty Abort;
typedef Empty_template Abort_template;
typedef UNIVERSAL_CHARSTRING Challenge;
typedef UNIVERSAL_CHARSTRING_template Challenge_template;
typedef UNIVERSAL_CHARSTRING Response;
typedef UNIVERSAL_CHARSTRING_template Response_template;
typedef UNIVERSAL_CHARSTRING Success;
typedef UNIVERSAL_CHARSTRING_template Success_template;

/* Class definitions */

class Mechanisms_elem__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
UNIVERSAL_CHARSTRING **value_elements;
} *val_ptr;

static const UNIVERSAL_CHARSTRING UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Mechanisms_elem__list& other_value);

public:
  typedef UNIVERSAL_CHARSTRING of_type;
Mechanisms_elem__list();
Mechanisms_elem__list(null_type other_value);
Mechanisms_elem__list(const Mechanisms_elem__list& other_value);
~Mechanisms_elem__list();

void clean_up();
Mechanisms_elem__list& operator=(null_type other_value);
Mechanisms_elem__list& operator=(const Mechanisms_elem__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Mechanisms_elem__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Mechanisms_elem__list& other_value) const { return !(*this == other_value); }

UNIVERSAL_CHARSTRING& operator[](int index_value);
UNIVERSAL_CHARSTRING& operator[](const INTEGER& index_value);
const UNIVERSAL_CHARSTRING& operator[](int index_value) const;
const UNIVERSAL_CHARSTRING& operator[](const INTEGER& index_value) const;

Mechanisms_elem__list operator<<=(int rotate_count) const;
Mechanisms_elem__list operator<<=(const INTEGER& rotate_count) const;
Mechanisms_elem__list operator>>=(int rotate_count) const;
Mechanisms_elem__list operator>>=(const INTEGER& rotate_count) const;

Mechanisms_elem__list operator+(const Mechanisms_elem__list& other_value) const;

Mechanisms_elem__list substr(int index, int returncount) const;

Mechanisms_elem__list replace(int index, int len, const Mechanisms_elem__list& repl) const;

Mechanisms_elem__list replace(int index, int len, const Mechanisms_elem__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Mechanisms_elem__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
UNIVERSAL_CHARSTRING_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Mechanisms_elem__list_template *list_value;
} value_list;
};
void copy_value(const Mechanisms_elem__list& other_value);
void copy_template(const Mechanisms_elem__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Mechanisms_elem__list_template();
Mechanisms_elem__list_template(template_sel other_value);
Mechanisms_elem__list_template(null_type other_value);
Mechanisms_elem__list_template(const Mechanisms_elem__list& other_value);
Mechanisms_elem__list_template(const OPTIONAL<Mechanisms_elem__list>& other_value);
Mechanisms_elem__list_template(const Mechanisms_elem__list_template& other_value);
~Mechanisms_elem__list_template();

void clean_up();
Mechanisms_elem__list_template& operator=(template_sel other_value);
Mechanisms_elem__list_template& operator=(null_type other_value);
Mechanisms_elem__list_template& operator=(const Mechanisms_elem__list& other_value);
Mechanisms_elem__list_template& operator=(const OPTIONAL<Mechanisms_elem__list>& other_value);
Mechanisms_elem__list_template& operator=(const Mechanisms_elem__list_template& other_value);

UNIVERSAL_CHARSTRING_template& operator[](int index_value);
UNIVERSAL_CHARSTRING_template& operator[](const INTEGER& index_value);
const UNIVERSAL_CHARSTRING_template& operator[](int index_value) const;
const UNIVERSAL_CHARSTRING_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Mechanisms_elem__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Mechanisms_elem__list valueof() const;
Mechanisms_elem__list substr(int index, int returncount) const;

Mechanisms_elem__list replace(int index, int len, const Mechanisms_elem__list_template& repl) const;

Mechanisms_elem__list replace(int index, int len, const Mechanisms_elem__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Mechanisms_elem__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Mechanisms_elem__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Mechanisms : public Base_Type {
  Mechanisms_mechanism__list field_mechanism__list;
  Mechanisms_elem__list field_elem__list;
  boolean bound_flag;
public:
  Mechanisms();
  Mechanisms(const Mechanisms_mechanism__list& par_mechanism__list,
    const Mechanisms_elem__list& par_elem__list);
  Mechanisms(const Mechanisms& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Mechanisms& operator=(const Mechanisms& other_value);
  boolean operator==(const Mechanisms& other_value) const;
  inline boolean operator!=(const Mechanisms& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Mechanisms_mechanism__list& mechanism__list()
    {return field_mechanism__list;}
  inline const Mechanisms_mechanism__list& mechanism__list() const
    {return field_mechanism__list;}
  inline Mechanisms_elem__list& elem__list()
    {return field_elem__list;}
  inline const Mechanisms_elem__list& elem__list() const
    {return field_elem__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Mechanisms_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Mechanisms_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Mechanisms& other_value);
void copy_template(const Mechanisms_template& other_value);

public:
Mechanisms_template();
Mechanisms_template(template_sel other_value);
Mechanisms_template(const Mechanisms& other_value);
Mechanisms_template(const OPTIONAL<Mechanisms>& other_value);
Mechanisms_template(const Mechanisms_template& other_value);
~Mechanisms_template();
Mechanisms_template& operator=(template_sel other_value);
Mechanisms_template& operator=(const Mechanisms& other_value);
Mechanisms_template& operator=(const OPTIONAL<Mechanisms>& other_value);
Mechanisms_template& operator=(const Mechanisms_template& other_value);
boolean match(const Mechanisms& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Mechanisms valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Mechanisms_template& list_item(unsigned int list_index) const;
Mechanisms_mechanism__list_template& mechanism__list();
const Mechanisms_mechanism__list_template& mechanism__list() const;
Mechanisms_elem__list_template& elem__list();
const Mechanisms_elem__list_template& elem__list() const;
int size_of() const;
void log() const;
void log_match(const Mechanisms& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Auth : public Base_Type {
  UNIVERSAL_CHARSTRING field_mechanism;
  UNIVERSAL_CHARSTRING field_base;
  boolean bound_flag;
public:
  Auth();
  Auth(const UNIVERSAL_CHARSTRING& par_mechanism,
    const UNIVERSAL_CHARSTRING& par_base);
  Auth(const Auth& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Auth& operator=(const Auth& other_value);
  boolean operator==(const Auth& other_value) const;
  inline boolean operator!=(const Auth& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& mechanism()
    {return field_mechanism;}
  inline const UNIVERSAL_CHARSTRING& mechanism() const
    {return field_mechanism;}
  inline UNIVERSAL_CHARSTRING& base()
    {return field_base;}
  inline const UNIVERSAL_CHARSTRING& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Auth_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Auth_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Auth& other_value);
void copy_template(const Auth_template& other_value);

public:
Auth_template();
Auth_template(template_sel other_value);
Auth_template(const Auth& other_value);
Auth_template(const OPTIONAL<Auth>& other_value);
Auth_template(const Auth_template& other_value);
~Auth_template();
Auth_template& operator=(template_sel other_value);
Auth_template& operator=(const Auth& other_value);
Auth_template& operator=(const OPTIONAL<Auth>& other_value);
Auth_template& operator=(const Auth_template& other_value);
boolean match(const Auth& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Auth valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Auth_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& mechanism();
const UNIVERSAL_CHARSTRING_template& mechanism() const;
UNIVERSAL_CHARSTRING_template& base();
const UNIVERSAL_CHARSTRING_template& base() const;
int size_of() const;
void log() const;
void log_match(const Auth& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Failure : public Base_Type {
  OPTIONAL<Failure_choice> field_choice;
  OPTIONAL<Text> field_text;
  boolean bound_flag;
public:
  Failure();
  Failure(const OPTIONAL<Failure_choice>& par_choice,
    const OPTIONAL<Text>& par_text);
  Failure(const Failure& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Failure& operator=(const Failure& other_value);
  boolean operator==(const Failure& other_value) const;
  inline boolean operator!=(const Failure& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Failure_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Failure_choice>& choice() const
    {return field_choice;}
  inline OPTIONAL<Text>& text()
    {return field_text;}
  inline const OPTIONAL<Text>& text() const
    {return field_text;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Failure_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Failure_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Failure& other_value);
void copy_template(const Failure_template& other_value);

public:
Failure_template();
Failure_template(template_sel other_value);
Failure_template(const Failure& other_value);
Failure_template(const OPTIONAL<Failure>& other_value);
Failure_template(const Failure_template& other_value);
~Failure_template();
Failure_template& operator=(template_sel other_value);
Failure_template& operator=(const Failure& other_value);
Failure_template& operator=(const OPTIONAL<Failure>& other_value);
Failure_template& operator=(const Failure_template& other_value);
boolean match(const Failure& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Failure valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Failure_template& list_item(unsigned int list_index) const;
Failure_choice_template& choice();
const Failure_choice_template& choice() const;
Text_template& text();
const Text_template& text() const;
int size_of() const;
void log() const;
void log_match(const Failure& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Failure_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_aborted = 1, ALT_account__disabled = 2, ALT_credentials__expired = 3, ALT_encryption__required = 4, ALT_incorrect__encoding = 5, ALT_invalid__authzid = 6, ALT_invalid__mechanism = 7, ALT_malformed__request = 8, ALT_mechanism__too__weak = 9, ALT_not__authorized = 10, ALT_temporary__auth__failure = 11 };
private:
union_selection_type union_selection;
union {
Empty *field_aborted;
Empty *field_account__disabled;
Empty *field_credentials__expired;
Empty *field_encryption__required;
Empty *field_incorrect__encoding;
Empty *field_invalid__authzid;
Empty *field_invalid__mechanism;
Empty *field_malformed__request;
Empty *field_mechanism__too__weak;
Empty *field_not__authorized;
Empty *field_temporary__auth__failure;
};
void copy_value(const Failure_choice& other_value);

public:
Failure_choice();
Failure_choice(const Failure_choice& other_value);
~Failure_choice();
Failure_choice& operator=(const Failure_choice& other_value);
boolean operator==(const Failure_choice& other_value) const;
inline boolean operator!=(const Failure_choice& other_value) const { return !(*this == other_value); }
Empty& aborted();
const Empty& aborted() const;
Empty& account__disabled();
const Empty& account__disabled() const;
Empty& credentials__expired();
const Empty& credentials__expired() const;
Empty& encryption__required();
const Empty& encryption__required() const;
Empty& incorrect__encoding();
const Empty& incorrect__encoding() const;
Empty& invalid__authzid();
const Empty& invalid__authzid() const;
Empty& invalid__mechanism();
const Empty& invalid__mechanism() const;
Empty& malformed__request();
const Empty& malformed__request() const;
Empty& mechanism__too__weak();
const Empty& mechanism__too__weak() const;
Empty& not__authorized();
const Empty& not__authorized() const;
Empty& temporary__auth__failure();
const Empty& temporary__auth__failure() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Failure_choice_template : public Base_Template {
union {
struct {
Failure_choice::union_selection_type union_selection;
union {
Empty_template *field_aborted;
Empty_template *field_account__disabled;
Empty_template *field_credentials__expired;
Empty_template *field_encryption__required;
Empty_template *field_incorrect__encoding;
Empty_template *field_invalid__authzid;
Empty_template *field_invalid__mechanism;
Empty_template *field_malformed__request;
Empty_template *field_mechanism__too__weak;
Empty_template *field_not__authorized;
Empty_template *field_temporary__auth__failure;
};
} single_value;
struct {
unsigned int n_values;
Failure_choice_template *list_value;
} value_list;
};
void copy_value(const Failure_choice& other_value);

void copy_template(const Failure_choice_template& other_value);

public:
Failure_choice_template();
Failure_choice_template(template_sel other_value);
Failure_choice_template(const Failure_choice& other_value);
Failure_choice_template(const OPTIONAL<Failure_choice>& other_value);
Failure_choice_template(const Failure_choice_template& other_value);
~Failure_choice_template();
void clean_up();
Failure_choice_template& operator=(template_sel other_value);
Failure_choice_template& operator=(const Failure_choice& other_value);
Failure_choice_template& operator=(const OPTIONAL<Failure_choice>& other_value);
Failure_choice_template& operator=(const Failure_choice_template& other_value);
boolean match(const Failure_choice& other_value) const;
boolean is_value() const;Failure_choice valueof() const;
Failure_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& aborted();
const Empty_template& aborted() const;
Empty_template& account__disabled();
const Empty_template& account__disabled() const;
Empty_template& credentials__expired();
const Empty_template& credentials__expired() const;
Empty_template& encryption__required();
const Empty_template& encryption__required() const;
Empty_template& incorrect__encoding();
const Empty_template& incorrect__encoding() const;
Empty_template& invalid__authzid();
const Empty_template& invalid__authzid() const;
Empty_template& invalid__mechanism();
const Empty_template& invalid__mechanism() const;
Empty_template& malformed__request();
const Empty_template& malformed__request() const;
Empty_template& mechanism__too__weak();
const Empty_template& mechanism__too__weak() const;
Empty_template& not__authorized();
const Empty_template& not__authorized() const;
Empty_template& temporary__auth__failure();
const Empty_template& temporary__auth__failure() const;
boolean ischosen(Failure_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Failure_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Text : public Base_Type {
  OPTIONAL<CHARSTRING> field_lang;
  UNIVERSAL_CHARSTRING field_base;
  boolean bound_flag;
public:
  Text();
  Text(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base);
  Text(const Text& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Text& operator=(const Text& other_value);
  boolean operator==(const Text& other_value) const;
  inline boolean operator!=(const Text& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<CHARSTRING>& lang()
    {return field_lang;}
  inline const OPTIONAL<CHARSTRING>& lang() const
    {return field_lang;}
  inline UNIVERSAL_CHARSTRING& base()
    {return field_base;}
  inline const UNIVERSAL_CHARSTRING& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Text_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Text_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Text& other_value);
void copy_template(const Text_template& other_value);

public:
Text_template();
Text_template(template_sel other_value);
Text_template(const Text& other_value);
Text_template(const OPTIONAL<Text>& other_value);
Text_template(const Text_template& other_value);
~Text_template();
Text_template& operator=(template_sel other_value);
Text_template& operator=(const Text& other_value);
Text_template& operator=(const OPTIONAL<Text>& other_value);
Text_template& operator=(const Text_template& other_value);
boolean match(const Text& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Text valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Text_template& list_item(unsigned int list_index) const;
CHARSTRING_template& lang();
const CHARSTRING_template& lang() const;
UNIVERSAL_CHARSTRING_template& base();
const UNIVERSAL_CHARSTRING_template& base() const;
int size_of() const;
void log() const;
void log_match(const Text& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const Mechanisms_elem__list& other_value);
inline boolean operator!=(null_type null_value, const Mechanisms_elem__list& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t Mechanisms_mechanism__list_xer_;
extern const TTCN_JSONdescriptor_t Mechanisms_mechanism__list_json_;
extern const TTCN_Typedescriptor_t Mechanisms_mechanism__list_descr_;
extern const XERdescriptor_t Mechanisms_mechanism__list_0_xer_;
extern const TTCN_Typedescriptor_t Mechanisms_mechanism__list_0_descr_;
extern const XERdescriptor_t Mechanisms_elem__list_xer_;
extern const TTCN_JSONdescriptor_t Mechanisms_elem__list_json_;
extern const TTCN_Typedescriptor_t Mechanisms_elem__list_descr_;
extern const XERdescriptor_t Mechanisms_elem__list_0_xer_;
extern const TTCN_Typedescriptor_t Mechanisms_elem__list_0_descr_;
extern const XERdescriptor_t Mechanisms_xer_;
extern const TTCN_JSONdescriptor_t Mechanisms_json_;
extern const TTCN_Typedescriptor_t Mechanisms_descr_;
extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Abort_xer_;
extern const TTCN_Typedescriptor_t Abort_descr_;
extern const XERdescriptor_t Auth_mechanism_xer_;
extern const TTCN_Typedescriptor_t Auth_mechanism_descr_;
extern const XERdescriptor_t Auth_base_xer_;
extern const TTCN_Typedescriptor_t Auth_base_descr_;
extern const XERdescriptor_t Auth_xer_;
extern const TTCN_JSONdescriptor_t Auth_json_;
extern const TTCN_Typedescriptor_t Auth_descr_;
extern const XERdescriptor_t Challenge_xer_;
extern const TTCN_Typedescriptor_t Challenge_descr_;
extern const XERdescriptor_t Response_xer_;
extern const TTCN_Typedescriptor_t Response_descr_;
extern const XERdescriptor_t Success_xer_;
extern const TTCN_Typedescriptor_t Success_descr_;
extern const XERdescriptor_t Failure_xer_;
extern const TTCN_JSONdescriptor_t Failure_json_;
extern const TTCN_Typedescriptor_t Failure_descr_;
extern const XERdescriptor_t Failure_choice_xer_;
extern const TTCN_JSONdescriptor_t Failure_choice_json_;
extern const TTCN_Typedescriptor_t Failure_choice_descr_;
extern const XERdescriptor_t Failure_choice_aborted_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_aborted_descr_;
extern const XERdescriptor_t Failure_choice_account__disabled_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_account__disabled_descr_;
extern const XERdescriptor_t Failure_choice_credentials__expired_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_credentials__expired_descr_;
extern const XERdescriptor_t Failure_choice_encryption__required_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_encryption__required_descr_;
extern const XERdescriptor_t Failure_choice_incorrect__encoding_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_incorrect__encoding_descr_;
extern const XERdescriptor_t Failure_choice_invalid__authzid_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_invalid__authzid_descr_;
extern const XERdescriptor_t Failure_choice_invalid__mechanism_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_invalid__mechanism_descr_;
extern const XERdescriptor_t Failure_choice_malformed__request_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_malformed__request_descr_;
extern const XERdescriptor_t Failure_choice_mechanism__too__weak_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_mechanism__too__weak_descr_;
extern const XERdescriptor_t Failure_choice_not__authorized_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_not__authorized_descr_;
extern const XERdescriptor_t Failure_choice_temporary__auth__failure_xer_;
extern const TTCN_Typedescriptor_t Failure_choice_temporary__auth__failure_descr_;
extern const XERdescriptor_t Text_base_xer_;
extern const TTCN_Typedescriptor_t Text_base_descr_;
extern const XERdescriptor_t Text_xer_;
extern const TTCN_JSONdescriptor_t Text_json_;
extern const TTCN_Typedescriptor_t Text_descr_;
extern const XERdescriptor_t Text_lang_xer_;
extern const TTCN_Typedescriptor_t Text_lang_descr_;
extern const XERdescriptor_t Failure_text_xer_;
extern const TTCN_Typedescriptor_t Failure_text_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
