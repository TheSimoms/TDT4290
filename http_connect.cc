// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 13:40:50 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "http_connect.hh"

namespace http__connect {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();
static boolean init_comp_type(const char *component_type, boolean init_base_comps);
static void module_control_part();

/* Literal string constants */

static const CHARSTRING cs_17(0, NULL),
cs_3(116, "(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d#2 (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d#4 \\d#2:\\d#2:\\d#2 [A-Z]#(,5)"),
cs_7(53, "(application/json|text/html; charset=utf-8|text/html)"),
cs_11('*'),
cs_14(9, "127.0.0.1"),
cs_12(32, "Access-Control-Allow-Credentials"),
cs_10(27, "Access-Control-Allow-Origin"),
cs_4(10, "Connection"),
cs_8(14, "Content-Length"),
cs_6(12, "Content-Type"),
cs_2(4, "Date"),
cs_15(3, "GET"),
cs_18(2, "OK"),
cs_0(6, "Server"),
cs_9(3, "\\d+"),
cs_5(5, "close"),
cs_1(13, "gunicorn/17.5"),
cs_16(2, "ip"),
cs_13(4, "true"),
cs_19(28, "{\n  \"origin\": \"127.0.0.1\"\n}\n");
static const unsigned char module_checksum[] = { 0x4f, 0xd3, 0x67, 0x95, 0x96, 0x73, 0x40, 0xee, 0x8e, 0x07, 0xe3, 0xe9, 0x34, 0x0d, 0x9d, 0x0c };

/* Global variable definitions */

const TTCN_Typedescriptor_t& HTTP__TYPE_descr_ = COMPONENT_descr_;
HTTPmsg__PortType::HTTPmsg__PT HTTP__TYPE_component_HTTP__PORT("HTTP_PORT");
TIMER HTTP__TYPE_component_TIMER_("TIMER", 1.0);
static HTTPmsg__Types::HeaderLines_template template_header__lines;
const HTTPmsg__Types::HeaderLines_template& header__lines = template_header__lines;
static HTTPmsg__Types::Connect_template template_connect__;
const HTTPmsg__Types::Connect_template& connect__ = template_connect__;
static HTTPmsg__Types::Connect__result_template template_connect__result;
const HTTPmsg__Types::Connect__result_template& connect__result = template_connect__result;
static HTTPmsg__Types::HTTPRequest_template template_request;
const HTTPmsg__Types::HTTPRequest_template& request = template_request;
static HTTPmsg__Types::HTTPResponse_template template_response;
const HTTPmsg__Types::HTTPResponse_template& response = template_response;
static HTTPmsg__Types::HTTPMessage_template template_request__message;
const HTTPmsg__Types::HTTPMessage_template& request__message = template_request__message;
static HTTPmsg__Types::HTTPMessage_template template_respone__message;
const HTTPmsg__Types::HTTPMessage_template& respone__message = template_respone__message;
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("http_connect", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, init_comp_type, NULL, module_control_part);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Bodies of functions, altsteps and testcases */

verdicttype testcase_SuccessfulConnect(boolean has_timer, double timer_value)
{
TTCN_Runtime::check_begin_testcase(has_timer, timer_value);
try {
TTCN_Runtime::begin_testcase("http_connect", "SuccessfulConnect", "http_connect", "HTTP_TYPE", "http_connect", "HTTP_TYPE", has_timer, timer_value);
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 157 */
TTCN_Runtime::map_port(MTC_COMPREF, HTTP__TYPE_component_HTTP__PORT.get_name(), SYSTEM_COMPREF, HTTP__TYPE_component_HTTP__PORT.get_name());
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 159 */
HTTP__TYPE_component_HTTP__PORT.send(connect__);
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 160 */
HTTP__TYPE_component_HTTP__PORT.send(request__message);
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 162 */
HTTP__TYPE_component_TIMER_.start();
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 164 */
{
tmp_9:
alt_status tmp_9_alt_flag_0 = ALT_MAYBE;
alt_status tmp_9_alt_flag_1 = ALT_MAYBE;
alt_status tmp_9_alt_flag_2 = ALT_MAYBE;
alt_status tmp_9_default_flag = ALT_MAYBE;
TTCN_Snapshot::take_new(FALSE);
for ( ; ; ) {
if (tmp_9_alt_flag_0 == ALT_MAYBE) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 165 */
tmp_9_alt_flag_0 = HTTP__TYPE_component_HTTP__PORT.receive(respone__message, NULL, any_compref, NULL);
if (tmp_9_alt_flag_0 == ALT_YES) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 165 */
HTTP__TYPE_component_TIMER_.stop();
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 165 */
TTCN_Runtime::setverdict(PASS);
break;
}
}
if (tmp_9_alt_flag_1 == ALT_MAYBE) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 166 */
tmp_9_alt_flag_1 = HTTP__TYPE_component_TIMER_.timeout();
if (tmp_9_alt_flag_1 == ALT_YES) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 166 */
TTCN_Runtime::setverdict(INCONC);
break;
}
}
if (tmp_9_alt_flag_2 == ALT_MAYBE) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 167 */
tmp_9_alt_flag_2 = HTTP__TYPE_component_HTTP__PORT.receive(any_compref, NULL);
if (tmp_9_alt_flag_2 == ALT_YES) {
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 167 */
HTTP__TYPE_component_TIMER_.stop();
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 167 */
TTCN_Runtime::setverdict(FAIL);
break;
}
}
if (tmp_9_default_flag == ALT_MAYBE) {
tmp_9_default_flag = TTCN_Default::try_altsteps();
if (tmp_9_default_flag == ALT_YES || tmp_9_default_flag == ALT_BREAK) break;
else if (tmp_9_default_flag == ALT_REPEAT) goto tmp_9;
}
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 164 */
if (tmp_9_alt_flag_0 == ALT_NO && tmp_9_alt_flag_1 == ALT_NO && tmp_9_alt_flag_2 == ALT_NO && tmp_9_default_flag == ALT_NO) TTCN_error("None of the branches can be chosen in the alt statement in file /work/TDT4290/src/http/test_cases/http_connect.ttcn between lines 164 and 168.");
TTCN_Snapshot::take_new(TRUE);
}
}
} catch (const TC_Error& tc_error) {
} catch (const TC_End& tc_end) {
TTCN_Logger::log_str(TTCN_FUNCTION, "Test case SuccessfulConnect was stopped.");
}
return TTCN_Runtime::end_testcase();
}


/* Bodies of static functions */

static void pre_init_module()
{
HTTPmsg__PortType::module_object.pre_init_module();
module_object.add_testcase_nonpard("SuccessfulConnect", testcase_SuccessfulConnect);
}

static void post_init_module()
{
HTTPmsg__PortType::module_object.post_init_module();
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 67 */
template_header__lines.set_size(7);
{
HTTPmsg__Types::HeaderLine_template& tmp_0 = template_header__lines[0];
tmp_0.header__name() = cs_0;
tmp_0.header__value() = cs_1;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_1 = template_header__lines[1];
tmp_1.header__name() = cs_2;
tmp_1.header__value() = CHARSTRING_template(STRING_PATTERN, (CHARSTRING)cs_3);
}
{
HTTPmsg__Types::HeaderLine_template& tmp_2 = template_header__lines[2];
tmp_2.header__name() = cs_4;
tmp_2.header__value() = cs_5;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_3 = template_header__lines[3];
tmp_3.header__name() = cs_6;
tmp_3.header__value() = CHARSTRING_template(STRING_PATTERN, (CHARSTRING)cs_7);
}
{
HTTPmsg__Types::HeaderLine_template& tmp_4 = template_header__lines[4];
tmp_4.header__name() = cs_8;
tmp_4.header__value() = CHARSTRING_template(STRING_PATTERN, (CHARSTRING)cs_9);
}
{
HTTPmsg__Types::HeaderLine_template& tmp_5 = template_header__lines[5];
tmp_5.header__name() = cs_10;
tmp_5.header__value() = cs_11;
}
{
HTTPmsg__Types::HeaderLine_template& tmp_6 = template_header__lines[6];
tmp_6.header__name() = cs_12;
tmp_6.header__value() = cs_13;
}
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 98 */
template_connect__.hostname() = cs_14;
template_connect__.portnumber() = 8000;
template_connect__.use__ssl() = FALSE;
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 104 */
{
INTEGER_template& tmp_7 = template_connect__result.client__id();
tmp_7.set_type(VALUE_RANGE);
tmp_7.set_min(0);
}
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 108 */
template_request.client__id() = OMIT_VALUE;
template_request.method() = cs_15;
template_request.uri() = cs_16;
template_request.version__major() = 1;
template_request.version__minor() = 1;
template_request.header() = NULL_VALUE;
template_request.body() = cs_17;
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 119 */
{
INTEGER_template& tmp_8 = template_response.client__id();
tmp_8.set_type(VALUE_RANGE);
tmp_8.set_min(0);
}
template_response.version__major() = 1;
template_response.version__minor() = 1;
template_response.statuscode() = 200;
template_response.statustext() = cs_18;
template_response.header() = header__lines;
template_response.body() = cs_19;
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 129 */
template_request__message.request() = request;
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 133 */
template_respone__message.response() = response;
}

static boolean init_comp_type(const char *component_type, boolean init_base_comps)
{
(void)init_base_comps;
if (!strcmp(component_type, "HTTP_TYPE")) {
HTTP__TYPE_component_HTTP__PORT.activate_port();
return TRUE;
} else return FALSE;
}

static void module_control_part()
{
TTCN_Runtime::begin_controlpart("http_connect");
/* /work/TDT4290/src/http/test_cases/http_connect.ttcn, line 177 */
testcase_SuccessfulConnect(FALSE, 0.0);
TTCN_Runtime::end_controlpart();
}


} /* end of namespace */
