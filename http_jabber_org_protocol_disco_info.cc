// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 10:28:08 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "http_jabber_org_protocol_disco_info.hh"

namespace http__jabber__org__protocol__disco__info {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0xb6, 0xa5, 0xce, 0x52, 0x1e, 0x21, 0xa9, 0xaa, 0x85, 0xb1, 0x7c, 0x0e, 0x6a, 0xad, 0x2d, 0x58 };

/* Global variable definitions */

const XERdescriptor_t       Query_xer_ = { {"Query>\n", "query>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Query_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Query_descr_ = { "@http_jabber_org_protocol_disco_info.Query", NULL, NULL, NULL, &Query_xer_, &Query_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Query_node_descr_ = { "@http_jabber_org_protocol_disco_info.Query.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Query_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_sequence_identity__list_xer_ = { {"identity_list>\n", "identity_list>\n"}, {15, 15}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, &Query_sequence_identity__list_0_xer_ };
const TTCN_JSONdescriptor_t Query_sequence_identity__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Query_sequence_identity__list_descr_ = { "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list", NULL, NULL, NULL, &Query_sequence_identity__list_xer_, &Query_sequence_identity__list_json_, &Query_sequence_identity__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NonEmptyString_xer_ = { {"NonEmptyString>\n", "nonEmptyString>\n"}, {16, 16}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t NonEmptyString_descr_ = { "@http_jabber_org_protocol_disco_info.NonEmptyString", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NonEmptyString_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Identity_category_xer_ = { {"category>\n", "category>\n"}, {10, 10}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Identity_category_descr_ = { "@http_jabber_org_protocol_disco_info.Identity.category", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Identity_category_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Identity_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Identity_type___descr_ = { "@http_jabber_org_protocol_disco_info.Identity.type_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Identity_type___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Empty_xer_ = { {"Empty>\n", "empty>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Empty_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Empty_descr_ = { "@http_jabber_org_protocol_disco_info.Empty", NULL, NULL, NULL, &Empty_xer_, &Empty_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Identity_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Identity_base_descr_ = { "@http_jabber_org_protocol_disco_info.Identity.base", NULL, NULL, NULL, &Identity_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Identity_xer_ = { {"Identity>\n", "identity>\n"}, {10, 10}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Identity_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Identity_descr_ = { "@http_jabber_org_protocol_disco_info.Identity", NULL, NULL, NULL, &Identity_xer_, &Identity_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Identity_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Identity_name_descr_ = { "@http_jabber_org_protocol_disco_info.Identity.name", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Identity_name_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_sequence_identity__list_0_xer_ = { {"Identity>\n", "identity>\n"}, {10, 10}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Query_sequence_identity__list_0_descr_ = { "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list.<oftype>", NULL, NULL, NULL, &Query_sequence_identity__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_sequence_feature__list_xer_ = { {"feature_list>\n", "feature_list>\n"}, {14, 14}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, &Query_sequence_feature__list_0_xer_ };
const TTCN_JSONdescriptor_t Query_sequence_feature__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Query_sequence_feature__list_descr_ = { "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list", NULL, NULL, NULL, &Query_sequence_feature__list_xer_, &Query_sequence_feature__list_json_, &Query_sequence_feature__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Feature_var___xer_ = { {"var_>\n", "var>\n"}, {6, 5}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Feature_var___descr_ = { "@http_jabber_org_protocol_disco_info.Feature.var_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Feature_var___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Feature_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Feature_base_descr_ = { "@http_jabber_org_protocol_disco_info.Feature.base", NULL, NULL, NULL, &Feature_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Feature_xer_ = { {"Feature>\n", "feature>\n"}, {9, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Feature_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Feature_descr_ = { "@http_jabber_org_protocol_disco_info.Feature", NULL, NULL, NULL, &Feature_xer_, &Feature_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_sequence_feature__list_0_xer_ = { {"Feature>\n", "feature>\n"}, {9, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_Typedescriptor_t Query_sequence_feature__list_0_descr_ = { "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list.<oftype>", NULL, NULL, NULL, &Query_sequence_feature__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Query_sequence_xer_ = { {"sequence>\n", "sequence>\n"}, {10, 10}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 15, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Query_sequence_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Query_sequence_descr_ = { "@http_jabber_org_protocol_disco_info.Query.sequence", NULL, NULL, NULL, &Query_sequence_xer_, &Query_sequence_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "http://jabber.org/protocol/disco#info", "tq0012" },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "http://www.w3.org/2001/XMLSchema-instance", "xsi" }
};

TTCN_Module module_object("http_jabber_org_protocol_disco_info", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

Query::Query()
{
  bound_flag = FALSE;
}

Query::Query(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<Query_sequence>& par_sequence)
  :   field_node(par_node),
  field_sequence(par_sequence)
{
  bound_flag = TRUE;
}

Query::Query(const Query& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Query.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
else field_sequence.clean_up();
}

void Query::clean_up()
{
field_node.clean_up();
field_sequence.clean_up();
bound_flag = FALSE;
}

Query& Query::operator=(const Query& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_disco_info.Query.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
  else field_sequence.clean_up();
}
return *this;
}

boolean Query::operator==(const Query& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_sequence==other_value.field_sequence;
}

boolean Query::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_sequence.get_selection() || field_sequence.is_bound()) return TRUE;
return FALSE;
}
boolean Query::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_sequence.get_selection() && !field_sequence.is_value()) return FALSE;
return TRUE;
}
int Query::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_disco_info.Query");
  int ret_val = 0;
  if (field_node.ispresent()) ret_val++;
  if (field_sequence.ispresent()) ret_val++;
  return ret_val;
}

void Query::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", sequence := ");
field_sequence.log();
TTCN_Logger::log_event_str(" }");
}

void Query::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_disco_info.Query'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_disco_info.Query'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_disco_info.Query has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Query: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_disco_info.Query");
  }
}

void Query::set_implicit_omit()
{
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (!sequence().is_bound()) sequence() = OMIT_VALUE;
else sequence().set_implicit_omit();
}

void Query::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_disco_info.Query.");
field_node.encode_text(text_buf);
field_sequence.encode_text(text_buf);
}

void Query::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_sequence.decode_text(text_buf);
}

void Query::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Query::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Query::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Query_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_sequence.collect_ns(Query_sequence_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Query::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Query_node_xer_, flavor)) return true;
  else if (Query_sequence::can_start(name, uri, Query_sequence_xer_, flavor)) return true;
  return false;
}

int Query::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Query_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("sequence': ");
  sub_len += field_sequence.XER_encode(Query_sequence_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Query::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Query_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Query_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Query_node_xer_, 1) && check_namespace(ns_uri, Query_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Query_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Query_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_sequence = *static_cast<const Query_sequence*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("sequence': ");
    field_sequence.XER_decode(Query_sequence_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Query::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Query_node_descr_, p_tok);
  }

  if (field_sequence.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence");
    enc_len += field_sequence.JSON_encode(Query_sequence_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Query::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Query_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (8 == name_len && 0 == strncmp(fld_name, "sequence", name_len)) {
        int ret_val = field_sequence.JSON_decode(Query_sequence_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_sequence.is_bound()) {
    field_sequence = OMIT_VALUE;
  }

  return dec_len;
}

struct Query_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
Query_sequence_template field_sequence;
};

void Query_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_OR_OMIT;
single_value->field_sequence = ANY_OR_OMIT;
}
}
}

void Query_template::copy_value(const Query& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.sequence().is_bound()) {
  if (other_value.sequence().ispresent()) single_value->field_sequence = other_value.sequence()();
  else single_value->field_sequence = OMIT_VALUE;
} else {
  single_value->field_sequence.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Query_template::copy_template(const Query_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sequence().get_selection()) {
single_value->field_sequence = other_value.sequence();
} else {
single_value->field_sequence.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Query_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.");
break;
}
set_selection(other_value);
}

Query_template::Query_template()
{
}

Query_template::Query_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Query_template::Query_template(const Query& other_value)
{
copy_value(other_value);
}

Query_template::Query_template(const OPTIONAL<Query>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Query from an unbound optional field.");
}
}

Query_template::Query_template(const Query_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Query_template::~Query_template()
{
clean_up();
}

Query_template& Query_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Query_template& Query_template::operator=(const Query& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Query_template& Query_template::operator=(const OPTIONAL<Query>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Query.");
}
return *this;
}

Query_template& Query_template::operator=(const Query_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Query_template::match(const Query& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.sequence().is_bound()) return FALSE;
if((other_value.sequence().ispresent() ? !single_value->field_sequence.match((const Query_sequence&)other_value.sequence()) : !single_value->field_sequence.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.");
}
return FALSE;
}

boolean Query_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_sequence.is_omit() || single_value->field_sequence.is_bound()) return TRUE;
return FALSE;
}

boolean Query_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_sequence.is_omit() && !single_value->field_sequence.is_value()) return FALSE;
return TRUE;
}

void Query_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Query Query_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Query.");
Query ret_val;
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_sequence.is_omit()) ret_val.sequence() = OMIT_VALUE;
else if (single_value->field_sequence.is_bound()) {
ret_val.sequence() = single_value->field_sequence.valueof();
}
return ret_val;
}

void Query_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_disco_info.Query.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Query_template[list_length];
}

Query_template& Query_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Query.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Query.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Query_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Query_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_disco_info.Query.");
return single_value->field_node;
}

Query_sequence_template& Query_template::sequence()
{
set_specific();
return single_value->field_sequence;
}

const Query_sequence_template& Query_template::sequence() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sequence of a non-specific template of type @http_jabber_org_protocol_disco_info.Query.");
return single_value->field_sequence;
}

int Query_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_node.is_present()) ret_val++;
      if (single_value->field_sequence.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.");
  }
  return 0;
}

void Query_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", sequence := ");
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Query_template::log_match(const Query& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.sequence().ispresent()){
if(!single_value->field_sequence.match(match_value.sequence())){
TTCN_Logger::log_logmatch_info(".sequence");
single_value->field_sequence.log_match(match_value.sequence());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_sequence.match_omit()){
 TTCN_Logger::log_logmatch_info(".sequence := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", sequence := ");
if (match_value.sequence().ispresent()) single_value->field_sequence.log_match(match_value.sequence());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_sequence.log();
if (single_value->field_sequence.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Query_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_sequence.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.");
}
}

void Query_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_sequence.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Query_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_disco_info.Query.");
}
}

void Query_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_disco_info.Query'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_disco_info.Query'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_disco_info.Query has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Query: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_disco_info.Query");
  }
  is_ifpresent = param.get_ifpresent();
}

void Query_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query");
single_value->field_sequence.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query");
}

boolean Query_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Query_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Identity Query_sequence_identity__list::UNBOUND_ELEM;
Query_sequence_identity__list::Query_sequence_identity__list()
{
val_ptr = NULL;
}

Query_sequence_identity__list::Query_sequence_identity__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Query_sequence_identity__list::Query_sequence_identity__list(const Query_sequence_identity__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Query_sequence_identity__list::~Query_sequence_identity__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Query_sequence_identity__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Query_sequence_identity__list& Query_sequence_identity__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Query_sequence_identity__list& Query_sequence_identity__list::operator=(const Query_sequence_identity__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Query_sequence_identity__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return val_ptr->n_elements == 0 ;
}

boolean Query_sequence_identity__list::operator==(const Query_sequence_identity__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Identity& Query_sequence_identity__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Identity**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Identity(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Identity;
}
return *val_ptr->value_elements[index_value];
}

Identity& Query_sequence_identity__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return (*this)[(int)index_value];
}

const Identity& Query_sequence_identity__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Identity& Query_sequence_identity__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return (*this)[(int)index_value];
}

Query_sequence_identity__list Query_sequence_identity__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Query_sequence_identity__list Query_sequence_identity__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Query_sequence_identity__list Query_sequence_identity__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Query_sequence_identity__list Query_sequence_identity__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Query_sequence_identity__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Identity(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Query_sequence_identity__list Query_sequence_identity__list::operator+(const Query_sequence_identity__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_disco_info.Query.sequence.identity_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Query_sequence_identity__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Identity(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Identity(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Query_sequence_identity__list Query_sequence_identity__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list","element");
Query_sequence_identity__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Identity(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Query_sequence_identity__list Query_sequence_identity__list::replace(int index, int len, const Query_sequence_identity__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list","element");
Query_sequence_identity__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Identity(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Identity(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Identity(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Query_sequence_identity__list Query_sequence_identity__list::replace(int index, int len, const Query_sequence_identity__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Query_sequence_identity__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Identity**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Identity(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Identity**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Identity**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Query_sequence_identity__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Query_sequence_identity__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return val_ptr->n_elements;
}

int Query_sequence_identity__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Query_sequence_identity__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Query_sequence_identity__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_disco_info.Query.sequence.identity_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Query_sequence_identity__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Query_sequence_identity__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Query_sequence_identity__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
val_ptr->value_elements = (Identity**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Identity;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Query_sequence_identity__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Query_sequence_identity__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Query_sequence_identity__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Identity::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Query_sequence_identity__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Query_sequence_identity__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Query_sequence_identity__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Query_sequence_identity__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Query_sequence_identity__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Identity* val = new Identity;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Identity**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Query_sequence_identity__list_template::copy_value(const Query_sequence_identity__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Identity_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Identity_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Identity_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Query_sequence_identity__list_template::copy_template(const Query_sequence_identity__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Identity_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Identity_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Identity_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Query_sequence_identity__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
break;
}
set_selection(other_value);
}

boolean Query_sequence_identity__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Query_sequence_identity__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Query_sequence_identity__list*)value_ptr)[value_index]);
else return ((const Query_sequence_identity__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template()
{
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template(const Query_sequence_identity__list& other_value)
{
copy_value(other_value);
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template(const OPTIONAL<Query_sequence_identity__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence_identity__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list from an unbound optional field.");
}
}

Query_sequence_identity__list_template::Query_sequence_identity__list_template(const Query_sequence_identity__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Query_sequence_identity__list_template::~Query_sequence_identity__list_template()
{
clean_up();
}

void Query_sequence_identity__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::operator=(const Query_sequence_identity__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::operator=(const OPTIONAL<Query_sequence_identity__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence_identity__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
}
return *this;
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::operator=(const Query_sequence_identity__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Identity_template& Query_sequence_identity__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Identity_template& Query_sequence_identity__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return (*this)[(int)index_value];
}

const Identity_template& Query_sequence_identity__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Identity_template& Query_sequence_identity__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return (*this)[(int)index_value];
}

void Query_sequence_identity__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Identity_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Identity_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Identity_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Identity_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Query_sequence_identity__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Query_sequence_identity__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
}

boolean Query_sequence_identity__list_template::match(const Query_sequence_identity__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
}
return FALSE;
}

boolean Query_sequence_identity__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Query_sequence_identity__list Query_sequence_identity__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
Query_sequence_identity__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Query_sequence_identity__list Query_sequence_identity__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Query_sequence_identity__list Query_sequence_identity__list_template::replace(int index, int len, const Query_sequence_identity__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Query_sequence_identity__list Query_sequence_identity__list_template::replace(int index, int len, const Query_sequence_identity__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Query_sequence_identity__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Query_sequence_identity__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
}
set_selection(template_type);
}

Query_sequence_identity__list_template& Query_sequence_identity__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return value_list.list_value[list_index];
}

void Query_sequence_identity__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Query_sequence_identity__list_template::log_match(const Query_sequence_identity__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Query_sequence_identity__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
}
}

void Query_sequence_identity__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
single_value.value_elements = (Identity_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Identity_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Query_sequence_identity__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
}
}

boolean Query_sequence_identity__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Query_sequence_identity__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Query_sequence_identity__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_disco_info.Query.sequence.identity_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Query_sequence_identity__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence.identity_list");
}

Empty::Empty()
{
enum_value = UNBOUND_VALUE;
}

Empty::Empty(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @http_jabber_org_protocol_disco_info.Empty with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Empty::Empty(enum_type other_value)
{
enum_value = other_value;
}

Empty::Empty(const Empty& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
enum_value = other_value.enum_value;
}

Empty& Empty::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @http_jabber_org_protocol_disco_info.Empty.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Empty& Empty::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Empty& Empty::operator=(const Empty& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
enum_value = other_value.enum_value;
return *this;
}

boolean Empty::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value == other_value;
}

boolean Empty::operator==(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value == other_value.enum_value;
}

boolean Empty::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value < other_value;
}

boolean Empty::operator<(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value < other_value.enum_value;
}

boolean Empty::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value > other_value;
}

boolean Empty::operator>(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value > other_value.enum_value;
}

const char *Empty::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case x: if (txt) return " "; else return "x";
default: return "<unknown>";
}
}

Empty::enum_type Empty::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, " ") || !strcmp(str_par, "x")) return x;
else return UNKNOWN_VALUE;
}

boolean Empty::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
return TRUE;
default:
return FALSE;
}
}

int Empty::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_disco_info.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Empty::enum2int(const Empty& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_disco_info.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Empty::operator Empty::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return enum_value;
}

void Empty::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Empty::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@http_jabber_org_protocol_disco_info.Empty");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @http_jabber_org_protocol_disco_info.Empty.");
  }
}

void Empty::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
text_buf.push_int(enum_value);
}

void Empty::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @http_jabber_org_protocol_disco_info.Empty.", enum_value);
}

void Empty::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Empty::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Empty::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Empty::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Empty::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Empty::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Empty::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Empty_template::copy_template(const Empty_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
}
}

Empty_template::Empty_template()
{
}

Empty_template::Empty_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Empty_template::Empty_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Empty::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @http_jabber_org_protocol_disco_info.Empty with unknown numeric value %d.", other_value);
single_value = (Empty::enum_type)other_value;
}

Empty_template::Empty_template(Empty::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Empty_template::Empty_template(const Empty& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
single_value = other_value.enum_value;
}

Empty_template::Empty_template(const OPTIONAL<Empty>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @http_jabber_org_protocol_disco_info.Empty from an unbound optional field.");
}
}

Empty_template::Empty_template(const Empty_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Empty_template::~Empty_template()
{
clean_up();
}

boolean Empty_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Empty_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Empty::UNBOUND_VALUE;
}

void Empty_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Empty_template& Empty_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Empty_template& Empty_template::operator=(int other_value)
{
if (!Empty::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @http_jabber_org_protocol_disco_info.Empty.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)other_value;
return *this;
}

Empty_template& Empty_template::operator=(Empty::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Empty_template& Empty_template::operator=(const Empty& other_value)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_disco_info.Empty to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Empty_template& Empty_template::operator=(const OPTIONAL<Empty>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
}
return *this;
}

Empty_template& Empty_template::operator=(const Empty_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Empty_template::match(Empty::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
}
return FALSE;
}

boolean Empty_template::match(const Empty& other_value) const
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @http_jabber_org_protocol_disco_info.Empty with an unbound value.");
return match(other_value.enum_value);
}

Empty::enum_type Empty_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return single_value;
}

void Empty_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Empty_template[list_length];
}

Empty_template& Empty_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
return value_list.list_value[list_index];
}

void Empty_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Empty::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Empty_template::log_match(const Empty& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Empty_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
}
}

void Empty_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Empty::enum_type)text_buf.pull_int().get_val();
if (!Empty::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @http_jabber_org_protocol_disco_info.Empty.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @http_jabber_org_protocol_disco_info.Empty.");
}
}

boolean Empty_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Empty_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Empty_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Empty::enum_type enum_val = Empty::str_to_enum(param.get_enumerated());
    if (!Empty::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @http_jabber_org_protocol_disco_info.Empty.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@http_jabber_org_protocol_disco_info.Empty");
  }
  is_ifpresent = param.get_ifpresent();
}

void Empty_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Empty");
}

Identity::Identity()
{
  bound_flag = FALSE;
}

Identity::Identity(const UNIVERSAL_CHARSTRING& par_category,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_name,
    const UNIVERSAL_CHARSTRING& par_type__,
    const Empty& par_base)
  :   field_category(par_category),
  field_name(par_name),
  field_type__(par_type__),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Identity::Identity(const Identity& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Identity.");
bound_flag = TRUE;
if (other_value.category().is_bound()) field_category = other_value.category();
else field_category.clean_up();
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Identity::clean_up()
{
field_category.clean_up();
field_name.clean_up();
field_type__.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Identity& Identity::operator=(const Identity& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_disco_info.Identity.");
  bound_flag = TRUE;
  if (other_value.category().is_bound()) field_category = other_value.category();
  else field_category.clean_up();
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Identity::operator==(const Identity& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_category==other_value.field_category
  && field_name==other_value.field_name
  && field_type__==other_value.field_type__
  && field_base==other_value.field_base;
}

boolean Identity::is_bound() const
{
if (bound_flag) return TRUE;
if(field_category.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_name.get_selection() || field_name.is_bound()) return TRUE;
if(field_type__.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Identity::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_category.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_name.get_selection() && !field_name.is_value()) return FALSE;
if(!field_type__.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Identity::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_disco_info.Identity");
  int ret_val = 3;
  if (field_name.ispresent()) ret_val++;
  return ret_val;
}

void Identity::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ category := ");
field_category.log();
TTCN_Logger::log_event_str(", name := ");
field_name.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Identity::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_disco_info.Identity'");
    }
    if (strcmp("category", param_field) == 0) {
      category().set_param(param);
      return;
    } else if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_disco_info.Identity'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_disco_info.Identity has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) category().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "category")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          category().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Identity: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_disco_info.Identity");
  }
}

void Identity::set_implicit_omit()
{
if (category().is_bound()) category().set_implicit_omit();
if (!name().is_bound()) name() = OMIT_VALUE;
else name().set_implicit_omit();
if (type__().is_bound()) type__().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Identity::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_disco_info.Identity.");
field_category.encode_text(text_buf);
field_name.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Identity::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_category.decode_text(text_buf);
field_name.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Identity::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Identity::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Identity::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_category.collect_ns(Identity_category_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_name.collect_ns(Identity_name_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Identity_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Identity_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Identity::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Identity_category_xer_, flavor)) return true;
  return false;
}

int Identity::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("category': ");
  tmp_len = field_category.XER_encode(Identity_category_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("name': ");
  tmp_len = field_name.XER_encode(Identity_name_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Identity_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Identity_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Identity::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Identity_category_xer_.dfeValue) field_category = *static_cast<const UNIVERSAL_CHARSTRING*>(Identity_category_xer_.dfeValue);
  if (Identity_name_xer_.dfeValue) field_name = *static_cast<const UNIVERSAL_CHARSTRING*>(Identity_name_xer_.dfeValue);
  else field_name = OMIT_VALUE;
  if (Identity_type___xer_.dfeValue) field_type__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Identity_type___xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Identity_category_xer_, 1) && check_namespace(ns_uri, Identity_category_xer_)) {
      ec_1.set_msg("category': ");
      field_category.XER_decode(Identity_category_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Identity_name_xer_, 1) && check_namespace(ns_uri, Identity_name_xer_)) {
      ec_1.set_msg("name': ");
      field_name.XER_decode(Identity_name_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Identity_type___xer_, 1) && check_namespace(ns_uri, Identity_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Identity_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_category.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'category'");
  if (!field_type__.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'type_'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("category': ");
    field_category.XER_decode(Identity_category_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("name': ");
    field_name.XER_decode(Identity_name_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Identity_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Identity_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Identity::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Identity.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "category");
    enc_len += field_category.JSON_encode(Identity_category_descr_, p_tok);
  }

  if (field_name.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "name");
    enc_len += field_name.JSON_encode(Identity_name_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Identity_type___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Identity_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Identity::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "category", name_len)) {
        int ret_val = field_category.JSON_decode(Identity_category_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "category");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "name", name_len)) {
        int ret_val = field_name.JSON_decode(Identity_name_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "name");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Identity_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Identity_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_category.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "category");
    return JSON_ERROR_FATAL;
  }
  if (!field_name.is_bound()) {
    field_name = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "type_");
    return JSON_ERROR_FATAL;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Identity_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_category;
UNIVERSAL_CHARSTRING_template field_name;
UNIVERSAL_CHARSTRING_template field_type__;
Empty_template field_base;
};

void Identity_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_category = ANY_VALUE;
single_value->field_name = ANY_OR_OMIT;
single_value->field_type__ = ANY_VALUE;
single_value->field_base = ANY_VALUE;
}
}
}

void Identity_template::copy_value(const Identity& other_value)
{
single_value = new single_value_struct;
if (other_value.category().is_bound()) {
  single_value->field_category = other_value.category();
} else {
  single_value->field_category.clean_up();
}
if (other_value.name().is_bound()) {
  if (other_value.name().ispresent()) single_value->field_name = other_value.name()();
  else single_value->field_name = OMIT_VALUE;
} else {
  single_value->field_name.clean_up();
}
if (other_value.type__().is_bound()) {
  single_value->field_type__ = other_value.type__();
} else {
  single_value->field_type__.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Identity_template::copy_template(const Identity_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.category().get_selection()) {
single_value->field_category = other_value.category();
} else {
single_value->field_category.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Identity_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Identity.");
break;
}
set_selection(other_value);
}

Identity_template::Identity_template()
{
}

Identity_template::Identity_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Identity_template::Identity_template(const Identity& other_value)
{
copy_value(other_value);
}

Identity_template::Identity_template(const OPTIONAL<Identity>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Identity&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Identity from an unbound optional field.");
}
}

Identity_template::Identity_template(const Identity_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Identity_template::~Identity_template()
{
clean_up();
}

Identity_template& Identity_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Identity_template& Identity_template::operator=(const Identity& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Identity_template& Identity_template::operator=(const OPTIONAL<Identity>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Identity&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Identity.");
}
return *this;
}

Identity_template& Identity_template::operator=(const Identity_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Identity_template::match(const Identity& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.category().is_bound()) return FALSE;
if(!single_value->field_category.match(other_value.category()))return FALSE;
if(!other_value.name().is_bound()) return FALSE;
if((other_value.name().ispresent() ? !single_value->field_name.match((const UNIVERSAL_CHARSTRING&)other_value.name()) : !single_value->field_name.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if(!single_value->field_type__.match(other_value.type__()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Identity.");
}
return FALSE;
}

boolean Identity_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_category.is_bound()) return TRUE;
if (single_value->field_name.is_omit() || single_value->field_name.is_bound()) return TRUE;
if (single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Identity_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_category.is_value()) return FALSE;
if (!single_value->field_name.is_omit() && !single_value->field_name.is_value()) return FALSE;
if (!single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Identity_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Identity Identity_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Identity.");
Identity ret_val;
if (single_value->field_category.is_bound()) {
ret_val.category() = single_value->field_category.valueof();
}
if (single_value->field_name.is_omit()) ret_val.name() = OMIT_VALUE;
else if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Identity_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_disco_info.Identity.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Identity_template[list_length];
}

Identity_template& Identity_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Identity.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Identity.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Identity_template::category()
{
set_specific();
return single_value->field_category;
}

const UNIVERSAL_CHARSTRING_template& Identity_template::category() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field category of a non-specific template of type @http_jabber_org_protocol_disco_info.Identity.");
return single_value->field_category;
}

UNIVERSAL_CHARSTRING_template& Identity_template::name()
{
set_specific();
return single_value->field_name;
}

const UNIVERSAL_CHARSTRING_template& Identity_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @http_jabber_org_protocol_disco_info.Identity.");
return single_value->field_name;
}

UNIVERSAL_CHARSTRING_template& Identity_template::type__()
{
set_specific();
return single_value->field_type__;
}

const UNIVERSAL_CHARSTRING_template& Identity_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @http_jabber_org_protocol_disco_info.Identity.");
return single_value->field_type__;
}

Empty_template& Identity_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Identity_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_disco_info.Identity.");
return single_value->field_base;
}

int Identity_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 3;
      if (single_value->field_name.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Identity containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Identity.");
  }
  return 0;
}

void Identity_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ category := ");
single_value->field_category.log();
TTCN_Logger::log_event_str(", name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Identity_template::log_match(const Identity& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_category.match(match_value.category())){
TTCN_Logger::log_logmatch_info(".category");
single_value->field_category.log_match(match_value.category());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.name().ispresent()){
if(!single_value->field_name.match(match_value.name())){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_name.match_omit()){
 TTCN_Logger::log_logmatch_info(".name := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_name.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ category := ");
single_value->field_category.log_match(match_value.category());
TTCN_Logger::log_event_str(", name := ");
if (match_value.name().ispresent()) single_value->field_name.log_match(match_value.name());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_name.log();
if (single_value->field_name.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Identity_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_category.encode_text(text_buf);
single_value->field_name.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Identity.");
}
}

void Identity_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_category.decode_text(text_buf);
single_value->field_name.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Identity_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_disco_info.Identity.");
}
}

void Identity_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_disco_info.Identity'");
    }
    if (strcmp("category", param_field) == 0) {
      category().set_param(param);
      return;
    } else if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_disco_info.Identity'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_disco_info.Identity has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) category().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "category")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          category().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Identity: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_disco_info.Identity");
  }
  is_ifpresent = param.get_ifpresent();
}

void Identity_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_category.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Identity");
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Identity");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Identity");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Identity");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Identity");
}

boolean Identity_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Identity_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Feature Query_sequence_feature__list::UNBOUND_ELEM;
Query_sequence_feature__list::Query_sequence_feature__list()
{
val_ptr = NULL;
}

Query_sequence_feature__list::Query_sequence_feature__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Query_sequence_feature__list::Query_sequence_feature__list(const Query_sequence_feature__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Query_sequence_feature__list::~Query_sequence_feature__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Query_sequence_feature__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Query_sequence_feature__list& Query_sequence_feature__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Query_sequence_feature__list& Query_sequence_feature__list::operator=(const Query_sequence_feature__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Query_sequence_feature__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return val_ptr->n_elements == 0 ;
}

boolean Query_sequence_feature__list::operator==(const Query_sequence_feature__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Feature& Query_sequence_feature__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Feature**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Feature(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Feature;
}
return *val_ptr->value_elements[index_value];
}

Feature& Query_sequence_feature__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return (*this)[(int)index_value];
}

const Feature& Query_sequence_feature__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Feature& Query_sequence_feature__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return (*this)[(int)index_value];
}

Query_sequence_feature__list Query_sequence_feature__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Query_sequence_feature__list Query_sequence_feature__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Query_sequence_feature__list Query_sequence_feature__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Query_sequence_feature__list Query_sequence_feature__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Query_sequence_feature__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Feature(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Query_sequence_feature__list Query_sequence_feature__list::operator+(const Query_sequence_feature__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_disco_info.Query.sequence.feature_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Query_sequence_feature__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Feature(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Feature(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Query_sequence_feature__list Query_sequence_feature__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list","element");
Query_sequence_feature__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Feature(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Query_sequence_feature__list Query_sequence_feature__list::replace(int index, int len, const Query_sequence_feature__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list","element");
Query_sequence_feature__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Feature(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Feature(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Feature(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Query_sequence_feature__list Query_sequence_feature__list::replace(int index, int len, const Query_sequence_feature__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Query_sequence_feature__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Feature**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Feature(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Feature**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Feature**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Query_sequence_feature__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Query_sequence_feature__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return val_ptr->n_elements;
}

int Query_sequence_feature__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Query_sequence_feature__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Query_sequence_feature__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_disco_info.Query.sequence.feature_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Query_sequence_feature__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Query_sequence_feature__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Query_sequence_feature__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
val_ptr->value_elements = (Feature**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Feature;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Query_sequence_feature__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Query_sequence_feature__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Query_sequence_feature__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Feature::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Query_sequence_feature__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Query_sequence_feature__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Query_sequence_feature__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Query_sequence_feature__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Query_sequence_feature__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Feature* val = new Feature;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Feature**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Query_sequence_feature__list_template::copy_value(const Query_sequence_feature__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Feature_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Feature_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Feature_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Query_sequence_feature__list_template::copy_template(const Query_sequence_feature__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Feature_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Feature_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Feature_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Query_sequence_feature__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
break;
}
set_selection(other_value);
}

boolean Query_sequence_feature__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Query_sequence_feature__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Query_sequence_feature__list*)value_ptr)[value_index]);
else return ((const Query_sequence_feature__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template()
{
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template(const Query_sequence_feature__list& other_value)
{
copy_value(other_value);
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template(const OPTIONAL<Query_sequence_feature__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence_feature__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list from an unbound optional field.");
}
}

Query_sequence_feature__list_template::Query_sequence_feature__list_template(const Query_sequence_feature__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Query_sequence_feature__list_template::~Query_sequence_feature__list_template()
{
clean_up();
}

void Query_sequence_feature__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::operator=(const Query_sequence_feature__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::operator=(const OPTIONAL<Query_sequence_feature__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence_feature__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
}
return *this;
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::operator=(const Query_sequence_feature__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Feature_template& Query_sequence_feature__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Feature_template& Query_sequence_feature__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return (*this)[(int)index_value];
}

const Feature_template& Query_sequence_feature__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Feature_template& Query_sequence_feature__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return (*this)[(int)index_value];
}

void Query_sequence_feature__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Feature_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Feature_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Feature_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Feature_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Query_sequence_feature__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Query_sequence_feature__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
}

boolean Query_sequence_feature__list_template::match(const Query_sequence_feature__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
}
return FALSE;
}

boolean Query_sequence_feature__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Query_sequence_feature__list Query_sequence_feature__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
Query_sequence_feature__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Query_sequence_feature__list Query_sequence_feature__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Query_sequence_feature__list Query_sequence_feature__list_template::replace(int index, int len, const Query_sequence_feature__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Query_sequence_feature__list Query_sequence_feature__list_template::replace(int index, int len, const Query_sequence_feature__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Query_sequence_feature__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Query_sequence_feature__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
}
set_selection(template_type);
}

Query_sequence_feature__list_template& Query_sequence_feature__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return value_list.list_value[list_index];
}

void Query_sequence_feature__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Query_sequence_feature__list_template::log_match(const Query_sequence_feature__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Query_sequence_feature__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
}
}

void Query_sequence_feature__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
single_value.value_elements = (Feature_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Feature_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Query_sequence_feature__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
}
}

boolean Query_sequence_feature__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Query_sequence_feature__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Query_sequence_feature__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_disco_info.Query.sequence.feature_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Query_sequence_feature__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence.feature_list");
}

Feature::Feature()
{
  bound_flag = FALSE;
}

Feature::Feature(const UNIVERSAL_CHARSTRING& par_var__,
    const Empty& par_base)
  :   field_var__(par_var__),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Feature::Feature(const Feature& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Feature.");
bound_flag = TRUE;
if (other_value.var__().is_bound()) field_var__ = other_value.var__();
else field_var__.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Feature::clean_up()
{
field_var__.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Feature& Feature::operator=(const Feature& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_disco_info.Feature.");
  bound_flag = TRUE;
  if (other_value.var__().is_bound()) field_var__ = other_value.var__();
  else field_var__.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Feature::operator==(const Feature& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_var__==other_value.field_var__
  && field_base==other_value.field_base;
}

boolean Feature::is_bound() const
{
if (bound_flag) return TRUE;
if(field_var__.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Feature::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_var__.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Feature::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_disco_info.Feature");
  return 2;
}

void Feature::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ var_ := ");
field_var__.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Feature::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_disco_info.Feature'");
    }
    if (strcmp("var_", param_field) == 0) {
      var__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_disco_info.Feature'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_disco_info.Feature has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) var__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "var_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          var__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Feature: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_disco_info.Feature");
  }
}

void Feature::set_implicit_omit()
{
if (var__().is_bound()) var__().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Feature::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_disco_info.Feature.");
field_var__.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Feature::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_var__.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Feature::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Feature::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Feature::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_var__.collect_ns(Feature_var___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Feature_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Feature::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Feature_var___xer_, flavor)) return true;
  return false;
}

int Feature::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("var_': ");
  tmp_len = field_var__.XER_encode(Feature_var___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Feature_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Feature::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Feature_var___xer_.dfeValue) field_var__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Feature_var___xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Feature_var___xer_, 1) && check_namespace(ns_uri, Feature_var___xer_)) {
      ec_1.set_msg("var_': ");
      field_var__.XER_decode(Feature_var___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_var__.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'var_'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("var_': ");
    field_var__.XER_decode(Feature_var___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Feature_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Feature::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Feature.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "var_");
    enc_len += field_var__.JSON_encode(Feature_var___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Feature_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Feature::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "var_", name_len)) {
        int ret_val = field_var__.JSON_decode(Feature_var___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "var_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Feature_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_var__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "var_");
    return JSON_ERROR_FATAL;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Feature_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_var__;
Empty_template field_base;
};

void Feature_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_var__ = ANY_VALUE;
single_value->field_base = ANY_VALUE;
}
}
}

void Feature_template::copy_value(const Feature& other_value)
{
single_value = new single_value_struct;
if (other_value.var__().is_bound()) {
  single_value->field_var__ = other_value.var__();
} else {
  single_value->field_var__.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Feature_template::copy_template(const Feature_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.var__().get_selection()) {
single_value->field_var__ = other_value.var__();
} else {
single_value->field_var__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Feature_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Feature.");
break;
}
set_selection(other_value);
}

Feature_template::Feature_template()
{
}

Feature_template::Feature_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Feature_template::Feature_template(const Feature& other_value)
{
copy_value(other_value);
}

Feature_template::Feature_template(const OPTIONAL<Feature>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Feature&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Feature from an unbound optional field.");
}
}

Feature_template::Feature_template(const Feature_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Feature_template::~Feature_template()
{
clean_up();
}

Feature_template& Feature_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Feature_template& Feature_template::operator=(const Feature& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Feature_template& Feature_template::operator=(const OPTIONAL<Feature>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Feature&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Feature.");
}
return *this;
}

Feature_template& Feature_template::operator=(const Feature_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Feature_template::match(const Feature& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.var__().is_bound()) return FALSE;
if(!single_value->field_var__.match(other_value.var__()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Feature.");
}
return FALSE;
}

boolean Feature_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_var__.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Feature_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_var__.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Feature_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Feature Feature_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Feature.");
Feature ret_val;
if (single_value->field_var__.is_bound()) {
ret_val.var__() = single_value->field_var__.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Feature_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_disco_info.Feature.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Feature_template[list_length];
}

Feature_template& Feature_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Feature.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Feature.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Feature_template::var__()
{
set_specific();
return single_value->field_var__;
}

const UNIVERSAL_CHARSTRING_template& Feature_template::var__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field var_ of a non-specific template of type @http_jabber_org_protocol_disco_info.Feature.");
return single_value->field_var__;
}

Empty_template& Feature_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Feature_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_disco_info.Feature.");
return single_value->field_base;
}

int Feature_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Feature containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Feature.");
  }
  return 0;
}

void Feature_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ var_ := ");
single_value->field_var__.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Feature_template::log_match(const Feature& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_var__.match(match_value.var__())){
TTCN_Logger::log_logmatch_info(".var_");
single_value->field_var__.log_match(match_value.var__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ var_ := ");
single_value->field_var__.log_match(match_value.var__());
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Feature_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_var__.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Feature.");
}
}

void Feature_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_var__.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Feature_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_disco_info.Feature.");
}
}

void Feature_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_disco_info.Feature'");
    }
    if (strcmp("var_", param_field) == 0) {
      var__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_disco_info.Feature'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_disco_info.Feature has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) var__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "var_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          var__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Feature: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_disco_info.Feature");
  }
  is_ifpresent = param.get_ifpresent();
}

void Feature_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_var__.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Feature");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Feature");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Feature");
}

boolean Feature_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Feature_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Query_sequence::Query_sequence()
{
  bound_flag = FALSE;
}

Query_sequence::Query_sequence(const Query_sequence_identity__list& par_identity__list,
    const Query_sequence_feature__list& par_feature__list)
  :   field_identity__list(par_identity__list),
  field_feature__list(par_feature__list)
{
  bound_flag = TRUE;
}

Query_sequence::Query_sequence(const Query_sequence& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.");
bound_flag = TRUE;
if (other_value.identity__list().is_bound()) field_identity__list = other_value.identity__list();
else field_identity__list.clean_up();
if (other_value.feature__list().is_bound()) field_feature__list = other_value.feature__list();
else field_feature__list.clean_up();
}

void Query_sequence::clean_up()
{
field_identity__list.clean_up();
field_feature__list.clean_up();
bound_flag = FALSE;
}

Query_sequence& Query_sequence::operator=(const Query_sequence& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.");
  bound_flag = TRUE;
  if (other_value.identity__list().is_bound()) field_identity__list = other_value.identity__list();
  else field_identity__list.clean_up();
  if (other_value.feature__list().is_bound()) field_feature__list = other_value.feature__list();
  else field_feature__list.clean_up();
}
return *this;
}

boolean Query_sequence::operator==(const Query_sequence& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_identity__list==other_value.field_identity__list
  && field_feature__list==other_value.field_feature__list;
}

boolean Query_sequence::is_bound() const
{
if (bound_flag) return TRUE;
if(field_identity__list.is_bound()) return TRUE;
if(field_feature__list.is_bound()) return TRUE;
return FALSE;
}
boolean Query_sequence::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_identity__list.is_value()) return FALSE;
if(!field_feature__list.is_value()) return FALSE;
return TRUE;
}
int Query_sequence::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_disco_info.Query.sequence");
  return 2;
}

void Query_sequence::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ identity_list := ");
field_identity__list.log();
TTCN_Logger::log_event_str(", feature_list := ");
field_feature__list.log();
TTCN_Logger::log_event_str(" }");
}

void Query_sequence::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_disco_info.Query.sequence'");
    }
    if (strcmp("identity_list", param_field) == 0) {
      identity__list().set_param(param);
      return;
    } else if (strcmp("feature_list", param_field) == 0) {
      feature__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_disco_info.Query.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_disco_info.Query.sequence has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) identity__list().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) feature__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "identity_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          identity__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "feature_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          feature__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Query.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_disco_info.Query.sequence");
  }
}

void Query_sequence::set_implicit_omit()
{
if (identity__list().is_bound()) identity__list().set_implicit_omit();
if (feature__list().is_bound()) feature__list().set_implicit_omit();
}

void Query_sequence::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_disco_info.Query.sequence.");
field_identity__list.encode_text(text_buf);
field_feature__list.encode_text(text_buf);
}

void Query_sequence::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_identity__list.decode_text(text_buf);
field_feature__list.decode_text(text_buf);
}

void Query_sequence::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Query_sequence::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Query_sequence::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_identity__list.collect_ns(Query_sequence_identity__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_feature__list.collect_ns(Query_sequence_feature__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Query_sequence::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Query_sequence_identity__list::can_start(name, uri, Query_sequence_identity__list_xer_, flavor)) return true;
  return false;
}

int Query_sequence::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("identity_list': ");
  sub_len += field_identity__list.XER_encode(Query_sequence_identity__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("feature_list': ");
  sub_len += field_feature__list.XER_encode(Query_sequence_feature__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Query_sequence::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("identity_list': ");
    field_identity__list.XER_decode(Query_sequence_identity__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_feature__list = *static_cast<const Query_sequence_feature__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("feature_list': ");
    field_feature__list.XER_decode(Query_sequence_feature__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Query_sequence::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "identity_list");
    enc_len += field_identity__list.JSON_encode(Query_sequence_identity__list_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "feature_list");
    enc_len += field_feature__list.JSON_encode(Query_sequence_feature__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Query_sequence::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (13 == name_len && 0 == strncmp(fld_name, "identity_list", name_len)) {
        int ret_val = field_identity__list.JSON_decode(Query_sequence_identity__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "identity_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (12 == name_len && 0 == strncmp(fld_name, "feature_list", name_len)) {
        int ret_val = field_feature__list.JSON_decode(Query_sequence_feature__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "feature_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_identity__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "identity_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_feature__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "feature_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Query_sequence_template::single_value_struct {
Query_sequence_identity__list_template field_identity__list;
Query_sequence_feature__list_template field_feature__list;
};

void Query_sequence_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_identity__list = ANY_VALUE;
single_value->field_feature__list = ANY_VALUE;
}
}
}

void Query_sequence_template::copy_value(const Query_sequence& other_value)
{
single_value = new single_value_struct;
if (other_value.identity__list().is_bound()) {
  single_value->field_identity__list = other_value.identity__list();
} else {
  single_value->field_identity__list.clean_up();
}
if (other_value.feature__list().is_bound()) {
  single_value->field_feature__list = other_value.feature__list();
} else {
  single_value->field_feature__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Query_sequence_template::copy_template(const Query_sequence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.identity__list().get_selection()) {
single_value->field_identity__list = other_value.identity__list();
} else {
single_value->field_identity__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.feature__list().get_selection()) {
single_value->field_feature__list = other_value.feature__list();
} else {
single_value->field_feature__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Query_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
break;
}
set_selection(other_value);
}

Query_sequence_template::Query_sequence_template()
{
}

Query_sequence_template::Query_sequence_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Query_sequence_template::Query_sequence_template(const Query_sequence& other_value)
{
copy_value(other_value);
}

Query_sequence_template::Query_sequence_template(const OPTIONAL<Query_sequence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_disco_info.Query.sequence from an unbound optional field.");
}
}

Query_sequence_template::Query_sequence_template(const Query_sequence_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Query_sequence_template::~Query_sequence_template()
{
clean_up();
}

Query_sequence_template& Query_sequence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Query_sequence_template& Query_sequence_template::operator=(const Query_sequence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Query_sequence_template& Query_sequence_template::operator=(const OPTIONAL<Query_sequence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Query_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
}
return *this;
}

Query_sequence_template& Query_sequence_template::operator=(const Query_sequence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Query_sequence_template::match(const Query_sequence& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.identity__list().is_bound()) return FALSE;
if(!single_value->field_identity__list.match(other_value.identity__list()))return FALSE;
if(!other_value.feature__list().is_bound()) return FALSE;
if(!single_value->field_feature__list.match(other_value.feature__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
}
return FALSE;
}

boolean Query_sequence_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_identity__list.is_bound()) return TRUE;
if (single_value->field_feature__list.is_bound()) return TRUE;
return FALSE;
}

boolean Query_sequence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_identity__list.is_value()) return FALSE;
if (!single_value->field_feature__list.is_value()) return FALSE;
return TRUE;
}

void Query_sequence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Query_sequence Query_sequence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
Query_sequence ret_val;
if (single_value->field_identity__list.is_bound()) {
ret_val.identity__list() = single_value->field_identity__list.valueof();
}
if (single_value->field_feature__list.is_bound()) {
ret_val.feature__list() = single_value->field_feature__list.valueof();
}
return ret_val;
}

void Query_sequence_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Query_sequence_template[list_length];
}

Query_sequence_template& Query_sequence_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
return value_list.list_value[list_index];
}

Query_sequence_identity__list_template& Query_sequence_template::identity__list()
{
set_specific();
return single_value->field_identity__list;
}

const Query_sequence_identity__list_template& Query_sequence_template::identity__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field identity_list of a non-specific template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
return single_value->field_identity__list;
}

Query_sequence_feature__list_template& Query_sequence_template::feature__list()
{
set_specific();
return single_value->field_feature__list;
}

const Query_sequence_feature__list_template& Query_sequence_template::feature__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field feature_list of a non-specific template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
return single_value->field_feature__list;
}

int Query_sequence_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_disco_info.Query.sequence containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
  }
  return 0;
}

void Query_sequence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ identity_list := ");
single_value->field_identity__list.log();
TTCN_Logger::log_event_str(", feature_list := ");
single_value->field_feature__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Query_sequence_template::log_match(const Query_sequence& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_identity__list.match(match_value.identity__list())){
TTCN_Logger::log_logmatch_info(".identity_list");
single_value->field_identity__list.log_match(match_value.identity__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_feature__list.match(match_value.feature__list())){
TTCN_Logger::log_logmatch_info(".feature_list");
single_value->field_feature__list.log_match(match_value.feature__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ identity_list := ");
single_value->field_identity__list.log_match(match_value.identity__list());
TTCN_Logger::log_event_str(", feature_list := ");
single_value->field_feature__list.log_match(match_value.feature__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Query_sequence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_identity__list.encode_text(text_buf);
single_value->field_feature__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
}
}

void Query_sequence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_identity__list.decode_text(text_buf);
single_value->field_feature__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Query_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_disco_info.Query.sequence.");
}
}

void Query_sequence_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_disco_info.Query.sequence'");
    }
    if (strcmp("identity_list", param_field) == 0) {
      identity__list().set_param(param);
      return;
    } else if (strcmp("feature_list", param_field) == 0) {
      feature__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_disco_info.Query.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_disco_info.Query.sequence has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) identity__list().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) feature__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "identity_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          identity__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "feature_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          feature__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_disco_info.Query.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_disco_info.Query.sequence");
  }
  is_ifpresent = param.get_ifpresent();
}

void Query_sequence_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_identity__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence");
single_value->field_feature__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_disco_info.Query.sequence");
}

boolean Query_sequence_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Query_sequence_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const Query_sequence_identity__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.identity_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Query_sequence_feature__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_disco_info.Query.sequence.feature_list.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
XSD::module_object.pre_init_module();
}

static void post_init_module()
{
XSD::module_object.post_init_module();
}


} /* end of namespace */
