/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module XMPP_Types
// [.objid{ itu_t(0) identified_organization(4) etsi(0)
// identified_organization(127) ericsson(5) testing(0)
// <put further nodes here if needed>}]
{

import from http_etherx_jabber_org_streams all;

// Client connect ASP. Initiates a new connection towards a server.
// Check for XMPP_Connected!
type record XMPP_Connect {
  charstring hostname,
  integer portnumber (1..65535),
  charstring local_hostname optional,
  integer local_portnumber (1..65535) optional
};

// Received by the client after XMPP_Connect is sent.
// The client_id will be filled with -1 if unsuccessful.
// Returned client_id shall be used to distinguish between the open connections.
type record XMPP_Connect_result {
  integer client_id
}

// Received when the server has accepted an incoming connection.
type record XMPP_Connected {
  charstring hostname,
  integer portnumber (1..65535),
  integer client_id
};
  
// Closes all connections, or the specified one only.
// client_id = omit means close all connections.
type record XMPP_Close {
  integer client_id optional
};

// Shuts down the current listening port and listens on the specified port.
// In case of omit will use the configured port, else random.
// portnumber = omit means random port number -> check for XMPP_Listen_result!
type record XMPP_Listen {
  integer portnumber (1..65535) optional,
  charstring local_hostname optional
};

// Received after Listen. Sends back the choosen listening port.
type record XMPP_Listen_result {
  integer portnumber (1..65535)
};

// Close server listening port, but leave all current connections open.
type record XMPP_Shutdown {};

type enumerated TCP_Send_error_types { TCP_SEND_INVALID_CLIENT_ID (0),
  TCP_SEND_ERROR(1), TCP_SEND_MESSAGE_NOT_COMPLETE(2) }

type record XMPP_Send_error {
  integer client_id optional,   
  Stream data,
  integer sent_octets,
  TCP_Send_error_types error_type,
  integer os_error_code,
  charstring os_error_text,
  charstring ttcn_error_text
}

// allowed address families:
const charstring c_TCP_AF_INET := "AF_INET";
const charstring c_TCP_IPv4 := "IPv4";
const charstring c_TCP_AF_INET6 := "AF_INET6";
const charstring c_TCP_IPv6 := "IPv6";
const charstring c_TCP_AF_UNSPEC := "AF_UNSPEC";
const charstring c_TCP_UNSPEC := "UNSPEC";
// set the address family
type charstring XMPP_SetAddressFamily;

}  // end of module
