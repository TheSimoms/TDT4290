module CoffeeSuite
{
   // Coffee Machine

   type port IntegerInputPortType message { in integer }
   type port CharstringOutputPortType message { out charstring }

   type component CoffeeMachineComponentType {
      port IntegerInputPortType InputPort;
      port CharstringOutputPortType OutputPort;
   }


   function CoffeeMachineFunction() runs on CoffeeMachineComponentType
   {
      const integer Price := 50;
      var integer Amount, Cents;
      Amount := 0;
      while (true) {
         InputPort.receive(integer:?) -> value Cents;
         Amount := Amount+Cents;
         while (Amount >= Price) {
            OutputPort.send(charstring:"coffee");
            Amount := Amount-Price;
         }
      }
   }

   // Coffee Drinker

   type port IntegerOutputPortType message { out integer }
   type port CharstringInputPortType message { in charstring }

   type component CoffeeDrinkerComponentType
   {
      port CharstringInputPortType InputPort;
      port IntegerOutputPortType OutputPort;
   }

   function CoffeeDrinkerFunction() runs on CoffeeDrinkerComponentType
   {
      var integer Count;

      OutputPort.send(100);

      Count := 0;

      timer t;
      t.start(5.0);
      alt {
         [] InputPort.receive(charstring:"coffee") {
            Count := Count+1;
            repeat;
         }
         [] t.timeout {
         }
      }
      log("Received " & int2str(Count) & " cup of coffee.");
      if (Count == 2) {
         setverdict(pass);
      }
      else {
         setverdict(fail);
      }   
   }

   type component EmptyComponentType {}

   testcase TwoCoffeesPlease () runs on EmptyComponentType
   {
      var CoffeeMachineComponentType CoffeeMachine;
      var CoffeeDrinkerComponentType CoffeeDrinker;

      CoffeeMachine := CoffeeMachineComponentType.create;
      CoffeeDrinker := CoffeeDrinkerComponentType.create;

      connect(CoffeeDrinker:OutputPort, CoffeeMachine:InputPort);
      connect(CoffeeDrinker:InputPort, CoffeeMachine:OutputPort);

      CoffeeMachine.start( CoffeeMachineFunction() );
      CoffeeDrinker.start( CoffeeDrinkerFunction() );

      timer t; t.start(6.0); t.timeout;
      CoffeeMachine.stop;

   }

   control {
      execute( TwoCoffeesPlease() );
   }
}