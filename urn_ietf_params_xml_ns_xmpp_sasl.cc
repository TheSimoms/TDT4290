// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "urn_ietf_params_xml_ns_xmpp_sasl.hh"

namespace urn__ietf__params__xml__ns__xmpp__sasl {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x71, 0xd0, 0x20, 0x53, 0xe0, 0xf9, 0x75, 0xfd, 0xe9, 0x89, 0x81, 0x1b, 0x25, 0xb5, 0x08, 0x4e };

/* Global variable definitions */

const XERdescriptor_t       Mechanisms_mechanism__list_xer_ = { {"mechanism_list>\n", "mechanism_list>\n"}, {16, 16}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, &Mechanisms_mechanism__list_0_xer_ };
const TTCN_JSONdescriptor_t Mechanisms_mechanism__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Mechanisms_mechanism__list_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.mechanism_list", NULL, NULL, NULL, &Mechanisms_mechanism__list_xer_, &Mechanisms_mechanism__list_json_, &Mechanisms_mechanism__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Mechanisms_mechanism__list_0_xer_ = { {"NMTOKEN>\n", "mechanism>\n"}, {9, 11}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Mechanisms_mechanism__list_0_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.mechanism_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Mechanisms_mechanism__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Mechanisms_elem__list_xer_ = { {"elem_list>\n", "elem_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, &Mechanisms_elem__list_0_xer_ };
const TTCN_JSONdescriptor_t Mechanisms_elem__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Mechanisms_elem__list_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list", NULL, NULL, NULL, &Mechanisms_elem__list_xer_, &Mechanisms_elem__list_json_, &Mechanisms_elem__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const char* Mechanisms_elem__list_0_ns_uris_[] = {"", "urn:ietf:params:xml:ns:xmpp-sasl"};
const XERdescriptor_t       Mechanisms_elem__list_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |ANY_ELEMENT |ANY_EXCEPT, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 2, Mechanisms_elem__list_0_ns_uris_, NULL };
const TTCN_Typedescriptor_t Mechanisms_elem__list_0_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Mechanisms_elem__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Mechanisms_xer_ = { {"Mechanisms>\n", "mechanisms>\n"}, {12, 12}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Mechanisms_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Mechanisms_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms", NULL, NULL, NULL, &Mechanisms_xer_, &Mechanisms_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Empty_xer_ = { {"Empty>\n", "empty>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Empty_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Empty_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Empty", NULL, NULL, NULL, &Empty_xer_, &Empty_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Abort_xer_ = { {"Abort>\n", "abort>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Abort_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Abort", NULL, NULL, NULL, &Abort_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Auth_mechanism_xer_ = { {"mechanism>\n", "mechanism>\n"}, {11, 11}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Auth_mechanism_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Auth.mechanism", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Auth_mechanism_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Auth_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Auth_base_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Auth.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Auth_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Auth_xer_ = { {"Auth>\n", "auth>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Auth_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Auth_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Auth", NULL, NULL, NULL, &Auth_xer_, &Auth_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Challenge_xer_ = { {"Challenge>\n", "challenge>\n"}, {11, 11}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Challenge_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Challenge", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Challenge_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Response_xer_ = { {"Response>\n", "response>\n"}, {10, 10}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Response_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Response", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Response_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Success_xer_ = { {"Success>\n", "success>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Success_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Success", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Success_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_xer_ = { {"Failure>\n", "failure>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Failure_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Failure_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure", NULL, NULL, NULL, &Failure_xer_, &Failure_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_xer_ = { {"choice>\n", "choice>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Failure_choice_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Failure_choice_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice", NULL, NULL, NULL, &Failure_choice_xer_, &Failure_choice_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_aborted_xer_ = { {"aborted>\n", "aborted>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_aborted_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.aborted", NULL, NULL, NULL, &Failure_choice_aborted_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_account__disabled_xer_ = { {"account_disabled>\n", "account-disabled>\n"}, {18, 18}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_account__disabled_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.account_disabled", NULL, NULL, NULL, &Failure_choice_account__disabled_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_credentials__expired_xer_ = { {"credentials_expired>\n", "credentials-expired>\n"}, {21, 21}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_credentials__expired_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.credentials_expired", NULL, NULL, NULL, &Failure_choice_credentials__expired_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_encryption__required_xer_ = { {"encryption_required>\n", "encryption-required>\n"}, {21, 21}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_encryption__required_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.encryption_required", NULL, NULL, NULL, &Failure_choice_encryption__required_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_incorrect__encoding_xer_ = { {"incorrect_encoding>\n", "incorrect-encoding>\n"}, {20, 20}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_incorrect__encoding_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.incorrect_encoding", NULL, NULL, NULL, &Failure_choice_incorrect__encoding_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_invalid__authzid_xer_ = { {"invalid_authzid>\n", "invalid-authzid>\n"}, {17, 17}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_invalid__authzid_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.invalid_authzid", NULL, NULL, NULL, &Failure_choice_invalid__authzid_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_invalid__mechanism_xer_ = { {"invalid_mechanism>\n", "invalid-mechanism>\n"}, {19, 19}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_invalid__mechanism_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.invalid_mechanism", NULL, NULL, NULL, &Failure_choice_invalid__mechanism_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_malformed__request_xer_ = { {"malformed_request>\n", "malformed-request>\n"}, {19, 19}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_malformed__request_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.malformed_request", NULL, NULL, NULL, &Failure_choice_malformed__request_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_mechanism__too__weak_xer_ = { {"mechanism_too_weak>\n", "mechanism-too-weak>\n"}, {20, 20}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_mechanism__too__weak_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.mechanism_too_weak", NULL, NULL, NULL, &Failure_choice_mechanism__too__weak_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_not__authorized_xer_ = { {"not_authorized>\n", "not-authorized>\n"}, {16, 16}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_not__authorized_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.not_authorized", NULL, NULL, NULL, &Failure_choice_not__authorized_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_choice_temporary__auth__failure_xer_ = { {"temporary_auth_failure>\n", "temporary-auth-failure>\n"}, {24, 24}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_choice_temporary__auth__failure_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.temporary_auth_failure", NULL, NULL, NULL, &Failure_choice_temporary__auth__failure_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Text_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Text_base_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Text.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Text_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Text_xer_ = { {"Text>\n", "text>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Text_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Text_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Text", NULL, NULL, NULL, &Text_xer_, &Text_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Text_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Text_lang_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Text.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Text_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Failure_text_xer_ = { {"text>\n", "text>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 19, 0, NULL, NULL };
const TTCN_Typedescriptor_t Failure_text_descr_ = { "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.text", NULL, NULL, NULL, &Failure_text_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "urn:ietf:params:xml:ns:xmpp-sasl", "tq0016" },
  { NULL, NULL },
  { "http://www.w3.org/2001/XMLSchema-instance", "xsi" }
};

TTCN_Module module_object("urn_ietf_params_xml_ns_xmpp_sasl", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const UNIVERSAL_CHARSTRING Mechanisms_elem__list::UNBOUND_ELEM;
Mechanisms_elem__list::Mechanisms_elem__list()
{
val_ptr = NULL;
}

Mechanisms_elem__list::Mechanisms_elem__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Mechanisms_elem__list::Mechanisms_elem__list(const Mechanisms_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Mechanisms_elem__list::~Mechanisms_elem__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Mechanisms_elem__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Mechanisms_elem__list& Mechanisms_elem__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Mechanisms_elem__list& Mechanisms_elem__list::operator=(const Mechanisms_elem__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Mechanisms_elem__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return val_ptr->n_elements == 0 ;
}

boolean Mechanisms_elem__list::operator==(const Mechanisms_elem__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

UNIVERSAL_CHARSTRING& Mechanisms_elem__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new UNIVERSAL_CHARSTRING;
}
return *val_ptr->value_elements[index_value];
}

UNIVERSAL_CHARSTRING& Mechanisms_elem__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING& Mechanisms_elem__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const UNIVERSAL_CHARSTRING& Mechanisms_elem__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return (*this)[(int)index_value];
}

Mechanisms_elem__list Mechanisms_elem__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Mechanisms_elem__list Mechanisms_elem__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Mechanisms_elem__list Mechanisms_elem__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Mechanisms_elem__list Mechanisms_elem__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Mechanisms_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Mechanisms_elem__list Mechanisms_elem__list::operator+(const Mechanisms_elem__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Mechanisms_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Mechanisms_elem__list Mechanisms_elem__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list","element");
Mechanisms_elem__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Mechanisms_elem__list Mechanisms_elem__list::replace(int index, int len, const Mechanisms_elem__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list","element");
Mechanisms_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new UNIVERSAL_CHARSTRING(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Mechanisms_elem__list Mechanisms_elem__list::replace(int index, int len, const Mechanisms_elem__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Mechanisms_elem__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Mechanisms_elem__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Mechanisms_elem__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return val_ptr->n_elements;
}

int Mechanisms_elem__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Mechanisms_elem__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Mechanisms_elem__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Mechanisms_elem__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Mechanisms_elem__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Mechanisms_elem__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Mechanisms_elem__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Mechanisms_elem__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Mechanisms_elem__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return UNIVERSAL_CHARSTRING::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Mechanisms_elem__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Mechanisms_elem__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (e_xer && (p_td.xer_bits & ANY_ATTRIBUTES)) {
      static const universal_char sp = { 0,0,0,' ' };
      static const universal_char tb = { 0,0,0,9 };
      size_t buf_len = p_buf.get_len(), shorter = 0;
      const unsigned char * const buf_data = p_buf.get_data();
      if (buf_data[buf_len - 1 - shorter] == '\n') ++shorter;
      if (buf_data[buf_len - 1 - shorter] == '>' ) ++shorter;
      unsigned char saved[4];
      memcpy(saved, buf_data + (buf_len - shorter), shorter);
      p_buf.increase_length(-shorter);
      for (int i = 0; i < val_ptr->n_elements; ++i) {
        TTCN_EncDec_ErrorContext ec_0("Attribute %d: ", i);
        if (val_ptr->value_elements[i] == NULL) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
            "Encoding an unbound universal charstring value.");
          continue;
        }
        size_t len = val_ptr->value_elements[i]->lengthof();
        for (;;) {
          const UNIVERSAL_CHARSTRING_ELEMENT& ue = (*val_ptr->value_elements[i])[len - 1];
          if (sp == ue || tb == ue) --len;
          else break;
        }
        size_t j, sp_at = 0;
        for (j = 0; j < len; j++) {
          UNIVERSAL_CHARSTRING_ELEMENT ue = (*val_ptr->value_elements[i])[j];
          if (sp_at) {
            if (sp == ue || tb == ue) {}
            else break;
          } else {
            if (sp == ue || tb == ue) sp_at = j;
          }
        } // next j
        size_t buf_start = p_buf.get_len();
        if (sp_at > 0) {
          char * ns = mprintf(" xmlns:b%d='", i);
          size_t ns_len = mstrlen(ns);
          p_buf.put_s(ns_len, (const unsigned char*)ns);
          UNIVERSAL_CHARSTRING before(sp_at, (const universal_char*)(*val_ptr->value_elements[i]));
          before.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            TTCN_Buffer ns_buf;
            before.encode_utf8(ns_buf);
            CHARSTRING cs;
            ns_buf.get_string(cs);
            check_namespace_restrictions(p_td, (const char*)cs);
          }
          p_buf.put_c('\'');
          p_buf.put_c(' ');
          p_buf.put_s(ns_len - 9, (const unsigned char*)ns + 7);
          p_buf.put_c(':');
          Free(ns);
        }
        else {
          p_buf.put_c(' ');
          j = 0;
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            check_namespace_restrictions(p_td, NULL);
          }
        }
        UNIVERSAL_CHARSTRING after(len - j, (const universal_char*)(*val_ptr->value_elements[i]) + j);
        after.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
        TTCN_Buffer check_buf;
        check_buf.put_s(2, (unsigned char*)"<a");
        check_buf.put_s(p_buf.get_len() - buf_start, p_buf.get_data() + buf_start);
        check_buf.put_s(2, (unsigned char*)"/>");        XmlReaderWrap checker(check_buf);
        while (1 == checker.Read()) ;
      }
      p_buf.put_s(shorter, saved);
    } else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Mechanisms_elem__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          if (e_xer && (p_td.xer_bits & ANY_ELEMENT)) {
            (*this)[val_ptr->n_elements] = (const char*)p_reader.ReadOuterXml();
            for (rd_ok = p_reader.Read(); rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) {}
            if (p_reader.NodeType() != XML_READER_TYPE_ELEMENT) rd_ok = p_reader.Read();
          } else          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Mechanisms_elem__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Mechanisms_elem__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    UNIVERSAL_CHARSTRING* val = new UNIVERSAL_CHARSTRING;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Mechanisms_elem__list_template::copy_value(const Mechanisms_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Mechanisms_elem__list_template::copy_template(const Mechanisms_elem__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Mechanisms_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
break;
}
set_selection(other_value);
}

boolean Mechanisms_elem__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Mechanisms_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Mechanisms_elem__list*)value_ptr)[value_index]);
else return ((const Mechanisms_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template()
{
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template(const Mechanisms_elem__list& other_value)
{
copy_value(other_value);
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template(const OPTIONAL<Mechanisms_elem__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Mechanisms_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list from an unbound optional field.");
}
}

Mechanisms_elem__list_template::Mechanisms_elem__list_template(const Mechanisms_elem__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Mechanisms_elem__list_template::~Mechanisms_elem__list_template()
{
clean_up();
}

void Mechanisms_elem__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::operator=(const Mechanisms_elem__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::operator=(const OPTIONAL<Mechanisms_elem__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Mechanisms_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
}
return *this;
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::operator=(const Mechanisms_elem__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

UNIVERSAL_CHARSTRING_template& Mechanisms_elem__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
    break;
}
return *single_value.value_elements[index_value];
}

UNIVERSAL_CHARSTRING_template& Mechanisms_elem__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING_template& Mechanisms_elem__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const UNIVERSAL_CHARSTRING_template& Mechanisms_elem__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return (*this)[(int)index_value];
}

void Mechanisms_elem__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Mechanisms_elem__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Mechanisms_elem__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
}

boolean Mechanisms_elem__list_template::match(const Mechanisms_elem__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
}
return FALSE;
}

boolean Mechanisms_elem__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Mechanisms_elem__list Mechanisms_elem__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
Mechanisms_elem__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Mechanisms_elem__list Mechanisms_elem__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Mechanisms_elem__list Mechanisms_elem__list_template::replace(int index, int len, const Mechanisms_elem__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Mechanisms_elem__list Mechanisms_elem__list_template::replace(int index, int len, const Mechanisms_elem__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Mechanisms_elem__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Mechanisms_elem__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
}
set_selection(template_type);
}

Mechanisms_elem__list_template& Mechanisms_elem__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return value_list.list_value[list_index];
}

void Mechanisms_elem__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Mechanisms_elem__list_template::log_match(const Mechanisms_elem__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Mechanisms_elem__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
}
}

void Mechanisms_elem__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Mechanisms_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
}
}

boolean Mechanisms_elem__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Mechanisms_elem__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Mechanisms_elem__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Mechanisms_elem__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list");
}

Mechanisms::Mechanisms()
{
  bound_flag = FALSE;
}

Mechanisms::Mechanisms(const Mechanisms_mechanism__list& par_mechanism__list,
    const Mechanisms_elem__list& par_elem__list)
  :   field_mechanism__list(par_mechanism__list),
  field_elem__list(par_elem__list)
{
  bound_flag = TRUE;
}

Mechanisms::Mechanisms(const Mechanisms& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
bound_flag = TRUE;
if (other_value.mechanism__list().is_bound()) field_mechanism__list = other_value.mechanism__list();
else field_mechanism__list.clean_up();
if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
else field_elem__list.clean_up();
}

void Mechanisms::clean_up()
{
field_mechanism__list.clean_up();
field_elem__list.clean_up();
bound_flag = FALSE;
}

Mechanisms& Mechanisms::operator=(const Mechanisms& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
  bound_flag = TRUE;
  if (other_value.mechanism__list().is_bound()) field_mechanism__list = other_value.mechanism__list();
  else field_mechanism__list.clean_up();
  if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
  else field_elem__list.clean_up();
}
return *this;
}

boolean Mechanisms::operator==(const Mechanisms& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_mechanism__list==other_value.field_mechanism__list
  && field_elem__list==other_value.field_elem__list;
}

boolean Mechanisms::is_bound() const
{
if (bound_flag) return TRUE;
if(field_mechanism__list.is_bound()) return TRUE;
if(field_elem__list.is_bound()) return TRUE;
return FALSE;
}
boolean Mechanisms::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_mechanism__list.is_value()) return FALSE;
if(!field_elem__list.is_value()) return FALSE;
return TRUE;
}
int Mechanisms::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
  return 2;
}

void Mechanisms::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ mechanism_list := ");
field_mechanism__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
field_elem__list.log();
TTCN_Logger::log_event_str(" }");
}

void Mechanisms::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms'");
    }
    if (strcmp("mechanism_list", param_field) == 0) {
      mechanism__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mechanism__list().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mechanism_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mechanism__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
  }
}

void Mechanisms::set_implicit_omit()
{
if (mechanism__list().is_bound()) mechanism__list().set_implicit_omit();
if (elem__list().is_bound()) elem__list().set_implicit_omit();
}

void Mechanisms::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
field_mechanism__list.encode_text(text_buf);
field_elem__list.encode_text(text_buf);
}

void Mechanisms::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_mechanism__list.decode_text(text_buf);
field_elem__list.decode_text(text_buf);
}

void Mechanisms::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Mechanisms::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Mechanisms::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_mechanism__list.collect_ns(Mechanisms_mechanism__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem__list.collect_ns(Mechanisms_elem__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Mechanisms::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Mechanisms_mechanism__list::can_start(name, uri, Mechanisms_mechanism__list_xer_, flavor)) return true;
  return false;
}

int Mechanisms::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("mechanism_list': ");
  sub_len += field_mechanism__list.XER_encode(Mechanisms_mechanism__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("elem_list': ");
  sub_len += field_elem__list.XER_encode(Mechanisms_elem__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Mechanisms::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("mechanism_list': ");
    field_mechanism__list.XER_decode(Mechanisms_mechanism__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_elem__list = *static_cast<const Mechanisms_elem__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("elem_list': ");
    field_elem__list.XER_decode(Mechanisms_elem__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Mechanisms::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "mechanism_list");
    enc_len += field_mechanism__list.JSON_encode(Mechanisms_mechanism__list_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem_list");
    enc_len += field_elem__list.JSON_encode(Mechanisms_elem__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Mechanisms::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (14 == name_len && 0 == strncmp(fld_name, "mechanism_list", name_len)) {
        int ret_val = field_mechanism__list.JSON_decode(Mechanisms_mechanism__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "mechanism_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "elem_list", name_len)) {
        int ret_val = field_elem__list.JSON_decode(Mechanisms_elem__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_mechanism__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "mechanism_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_elem__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Mechanisms_template::single_value_struct {
Mechanisms_mechanism__list_template field_mechanism__list;
Mechanisms_elem__list_template field_elem__list;
};

void Mechanisms_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_mechanism__list = ANY_VALUE;
single_value->field_elem__list = ANY_VALUE;
}
}
}

void Mechanisms_template::copy_value(const Mechanisms& other_value)
{
single_value = new single_value_struct;
if (other_value.mechanism__list().is_bound()) {
  single_value->field_mechanism__list = other_value.mechanism__list();
} else {
  single_value->field_mechanism__list.clean_up();
}
if (other_value.elem__list().is_bound()) {
  single_value->field_elem__list = other_value.elem__list();
} else {
  single_value->field_elem__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Mechanisms_template::copy_template(const Mechanisms_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.mechanism__list().get_selection()) {
single_value->field_mechanism__list = other_value.mechanism__list();
} else {
single_value->field_mechanism__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem__list().get_selection()) {
single_value->field_elem__list = other_value.elem__list();
} else {
single_value->field_elem__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Mechanisms_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
break;
}
set_selection(other_value);
}

Mechanisms_template::Mechanisms_template()
{
}

Mechanisms_template::Mechanisms_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Mechanisms_template::Mechanisms_template(const Mechanisms& other_value)
{
copy_value(other_value);
}

Mechanisms_template::Mechanisms_template(const OPTIONAL<Mechanisms>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Mechanisms&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms from an unbound optional field.");
}
}

Mechanisms_template::Mechanisms_template(const Mechanisms_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Mechanisms_template::~Mechanisms_template()
{
clean_up();
}

Mechanisms_template& Mechanisms_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Mechanisms_template& Mechanisms_template::operator=(const Mechanisms& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Mechanisms_template& Mechanisms_template::operator=(const OPTIONAL<Mechanisms>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Mechanisms&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
}
return *this;
}

Mechanisms_template& Mechanisms_template::operator=(const Mechanisms_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Mechanisms_template::match(const Mechanisms& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.mechanism__list().is_bound()) return FALSE;
if(!single_value->field_mechanism__list.match(other_value.mechanism__list()))return FALSE;
if(!other_value.elem__list().is_bound()) return FALSE;
if(!single_value->field_elem__list.match(other_value.elem__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
}
return FALSE;
}

boolean Mechanisms_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_mechanism__list.is_bound()) return TRUE;
if (single_value->field_elem__list.is_bound()) return TRUE;
return FALSE;
}

boolean Mechanisms_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_mechanism__list.is_value()) return FALSE;
if (!single_value->field_elem__list.is_value()) return FALSE;
return TRUE;
}

void Mechanisms_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Mechanisms Mechanisms_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
Mechanisms ret_val;
if (single_value->field_mechanism__list.is_bound()) {
ret_val.mechanism__list() = single_value->field_mechanism__list.valueof();
}
if (single_value->field_elem__list.is_bound()) {
ret_val.elem__list() = single_value->field_elem__list.valueof();
}
return ret_val;
}

void Mechanisms_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Mechanisms_template[list_length];
}

Mechanisms_template& Mechanisms_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
return value_list.list_value[list_index];
}

Mechanisms_mechanism__list_template& Mechanisms_template::mechanism__list()
{
set_specific();
return single_value->field_mechanism__list;
}

const Mechanisms_mechanism__list_template& Mechanisms_template::mechanism__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field mechanism_list of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
return single_value->field_mechanism__list;
}

Mechanisms_elem__list_template& Mechanisms_template::elem__list()
{
set_specific();
return single_value->field_elem__list;
}

const Mechanisms_elem__list_template& Mechanisms_template::elem__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem_list of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
return single_value->field_elem__list;
}

int Mechanisms_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
  }
  return 0;
}

void Mechanisms_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ mechanism_list := ");
single_value->field_mechanism__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Mechanisms_template::log_match(const Mechanisms& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_mechanism__list.match(match_value.mechanism__list())){
TTCN_Logger::log_logmatch_info(".mechanism_list");
single_value->field_mechanism__list.log_match(match_value.mechanism__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_elem__list.match(match_value.elem__list())){
TTCN_Logger::log_logmatch_info(".elem_list");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ mechanism_list := ");
single_value->field_mechanism__list.log_match(match_value.mechanism__list());
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Mechanisms_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_mechanism__list.encode_text(text_buf);
single_value->field_elem__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
}
}

void Mechanisms_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_mechanism__list.decode_text(text_buf);
single_value->field_elem__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Mechanisms_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.");
}
}

void Mechanisms_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms'");
    }
    if (strcmp("mechanism_list", param_field) == 0) {
      mechanism__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mechanism__list().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mechanism_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mechanism__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
  }
  is_ifpresent = param.get_ifpresent();
}

void Mechanisms_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_mechanism__list.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
single_value->field_elem__list.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms");
}

boolean Mechanisms_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Mechanisms_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Empty::Empty()
{
enum_value = UNBOUND_VALUE;
}

Empty::Empty(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Empty::Empty(enum_type other_value)
{
enum_value = other_value;
}

Empty::Empty(const Empty& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
enum_value = other_value.enum_value;
}

Empty& Empty::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Empty& Empty::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Empty& Empty::operator=(const Empty& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
enum_value = other_value.enum_value;
return *this;
}

boolean Empty::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value == other_value;
}

boolean Empty::operator==(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value == other_value.enum_value;
}

boolean Empty::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value < other_value;
}

boolean Empty::operator<(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value < other_value.enum_value;
}

boolean Empty::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value > other_value;
}

boolean Empty::operator>(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value > other_value.enum_value;
}

const char *Empty::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case x: if (txt) return " "; else return "x";
default: return "<unknown>";
}
}

Empty::enum_type Empty::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, " ") || !strcmp(str_par, "x")) return x;
else return UNKNOWN_VALUE;
}

boolean Empty::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
return TRUE;
default:
return FALSE;
}
}

int Empty::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Empty::enum2int(const Empty& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Empty::operator Empty::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return enum_value;
}

void Empty::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Empty::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@urn_ietf_params_xml_ns_xmpp_sasl.Empty");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
  }
}

void Empty::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
text_buf.push_int(enum_value);
}

void Empty::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", enum_value);
}

void Empty::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Empty::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Empty::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Empty::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Empty::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Empty::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Empty::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Empty_template::copy_template(const Empty_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
}
}

Empty_template::Empty_template()
{
}

Empty_template::Empty_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Empty_template::Empty_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Empty::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty with unknown numeric value %d.", other_value);
single_value = (Empty::enum_type)other_value;
}

Empty_template::Empty_template(Empty::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Empty_template::Empty_template(const Empty& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
single_value = other_value.enum_value;
}

Empty_template::Empty_template(const OPTIONAL<Empty>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty from an unbound optional field.");
}
}

Empty_template::Empty_template(const Empty_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Empty_template::~Empty_template()
{
clean_up();
}

boolean Empty_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Empty_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Empty::UNBOUND_VALUE;
}

void Empty_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Empty_template& Empty_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Empty_template& Empty_template::operator=(int other_value)
{
if (!Empty::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)other_value;
return *this;
}

Empty_template& Empty_template::operator=(Empty::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Empty_template& Empty_template::operator=(const Empty& other_value)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Empty_template& Empty_template::operator=(const OPTIONAL<Empty>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
}
return *this;
}

Empty_template& Empty_template::operator=(const Empty_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Empty_template::match(Empty::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
}
return FALSE;
}

boolean Empty_template::match(const Empty& other_value) const
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty with an unbound value.");
return match(other_value.enum_value);
}

Empty::enum_type Empty_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return single_value;
}

void Empty_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Empty_template[list_length];
}

Empty_template& Empty_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
return value_list.list_value[list_index];
}

void Empty_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Empty::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Empty_template::log_match(const Empty& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Empty_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
}
}

void Empty_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Empty::enum_type)text_buf.pull_int().get_val();
if (!Empty::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
}
}

boolean Empty_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Empty_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Empty_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Empty::enum_type enum_val = Empty::str_to_enum(param.get_enumerated());
    if (!Empty::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @urn_ietf_params_xml_ns_xmpp_sasl.Empty.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@urn_ietf_params_xml_ns_xmpp_sasl.Empty");
  }
  is_ifpresent = param.get_ifpresent();
}

void Empty_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Empty");
}

Auth::Auth()
{
  bound_flag = FALSE;
}

Auth::Auth(const UNIVERSAL_CHARSTRING& par_mechanism,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_mechanism(par_mechanism),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Auth::Auth(const Auth& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
bound_flag = TRUE;
if (other_value.mechanism().is_bound()) field_mechanism = other_value.mechanism();
else field_mechanism.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Auth::clean_up()
{
field_mechanism.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Auth& Auth::operator=(const Auth& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
  bound_flag = TRUE;
  if (other_value.mechanism().is_bound()) field_mechanism = other_value.mechanism();
  else field_mechanism.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Auth::operator==(const Auth& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_mechanism==other_value.field_mechanism
  && field_base==other_value.field_base;
}

boolean Auth::is_bound() const
{
if (bound_flag) return TRUE;
if(field_mechanism.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Auth::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_mechanism.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Auth::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth");
  return 2;
}

void Auth::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ mechanism := ");
field_mechanism.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Auth::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@urn_ietf_params_xml_ns_xmpp_sasl.Auth'");
    }
    if (strcmp("mechanism", param_field) == 0) {
      mechanism().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@urn_ietf_params_xml_ns_xmpp_sasl.Auth'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mechanism().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mechanism")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mechanism().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Auth: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@urn_ietf_params_xml_ns_xmpp_sasl.Auth");
  }
}

void Auth::set_implicit_omit()
{
if (mechanism().is_bound()) mechanism().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Auth::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
field_mechanism.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Auth::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_mechanism.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Auth::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Auth::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Auth::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_mechanism.collect_ns(Auth_mechanism_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Auth_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Auth::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Auth_mechanism_xer_, flavor)) return true;
  return false;
}

int Auth::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("mechanism': ");
  tmp_len = field_mechanism.XER_encode(Auth_mechanism_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Auth_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Auth::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Auth_mechanism_xer_.dfeValue) field_mechanism = *static_cast<const UNIVERSAL_CHARSTRING*>(Auth_mechanism_xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Auth_mechanism_xer_, 1) && check_namespace(ns_uri, Auth_mechanism_xer_)) {
      ec_1.set_msg("mechanism': ");
      field_mechanism.XER_decode(Auth_mechanism_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_mechanism.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'mechanism'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("mechanism': ");
    field_mechanism.XER_decode(Auth_mechanism_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Auth_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Auth::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "mechanism");
    enc_len += field_mechanism.JSON_encode(Auth_mechanism_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Auth_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Auth::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "mechanism", name_len)) {
        int ret_val = field_mechanism.JSON_decode(Auth_mechanism_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "mechanism");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Auth_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_mechanism.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "mechanism");
    return JSON_ERROR_FATAL;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Auth_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_mechanism;
UNIVERSAL_CHARSTRING_template field_base;
};

void Auth_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_mechanism = ANY_VALUE;
single_value->field_base = ANY_VALUE;
}
}
}

void Auth_template::copy_value(const Auth& other_value)
{
single_value = new single_value_struct;
if (other_value.mechanism().is_bound()) {
  single_value->field_mechanism = other_value.mechanism();
} else {
  single_value->field_mechanism.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Auth_template::copy_template(const Auth_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.mechanism().get_selection()) {
single_value->field_mechanism = other_value.mechanism();
} else {
single_value->field_mechanism.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Auth_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
break;
}
set_selection(other_value);
}

Auth_template::Auth_template()
{
}

Auth_template::Auth_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Auth_template::Auth_template(const Auth& other_value)
{
copy_value(other_value);
}

Auth_template::Auth_template(const OPTIONAL<Auth>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Auth&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth from an unbound optional field.");
}
}

Auth_template::Auth_template(const Auth_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Auth_template::~Auth_template()
{
clean_up();
}

Auth_template& Auth_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Auth_template& Auth_template::operator=(const Auth& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Auth_template& Auth_template::operator=(const OPTIONAL<Auth>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Auth&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
}
return *this;
}

Auth_template& Auth_template::operator=(const Auth_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Auth_template::match(const Auth& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.mechanism().is_bound()) return FALSE;
if(!single_value->field_mechanism.match(other_value.mechanism()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
}
return FALSE;
}

boolean Auth_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_mechanism.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Auth_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_mechanism.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Auth_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Auth Auth_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
Auth ret_val;
if (single_value->field_mechanism.is_bound()) {
ret_val.mechanism() = single_value->field_mechanism.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Auth_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Auth_template[list_length];
}

Auth_template& Auth_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Auth_template::mechanism()
{
set_specific();
return single_value->field_mechanism;
}

const UNIVERSAL_CHARSTRING_template& Auth_template::mechanism() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field mechanism of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
return single_value->field_mechanism;
}

UNIVERSAL_CHARSTRING_template& Auth_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Auth_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
return single_value->field_base;
}

int Auth_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
  }
  return 0;
}

void Auth_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ mechanism := ");
single_value->field_mechanism.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Auth_template::log_match(const Auth& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_mechanism.match(match_value.mechanism())){
TTCN_Logger::log_logmatch_info(".mechanism");
single_value->field_mechanism.log_match(match_value.mechanism());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ mechanism := ");
single_value->field_mechanism.log_match(match_value.mechanism());
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Auth_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_mechanism.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
}
}

void Auth_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_mechanism.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Auth_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth.");
}
}

void Auth_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Auth'");
    }
    if (strcmp("mechanism", param_field) == 0) {
      mechanism().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Auth'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @urn_ietf_params_xml_ns_xmpp_sasl.Auth has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mechanism().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mechanism")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mechanism().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Auth: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@urn_ietf_params_xml_ns_xmpp_sasl.Auth");
  }
  is_ifpresent = param.get_ifpresent();
}

void Auth_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_mechanism.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Auth");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Auth");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Auth");
}

boolean Auth_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Auth_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Failure::Failure()
{
  bound_flag = FALSE;
}

Failure::Failure(const OPTIONAL<Failure_choice>& par_choice,
    const OPTIONAL<Text>& par_text)
  :   field_choice(par_choice),
  field_text(par_text)
{
  bound_flag = TRUE;
}

Failure::Failure(const Failure& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
bound_flag = TRUE;
if (other_value.choice().is_bound()) field_choice = other_value.choice();
else field_choice.clean_up();
if (other_value.text().is_bound()) field_text = other_value.text();
else field_text.clean_up();
}

void Failure::clean_up()
{
field_choice.clean_up();
field_text.clean_up();
bound_flag = FALSE;
}

Failure& Failure::operator=(const Failure& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
  bound_flag = TRUE;
  if (other_value.choice().is_bound()) field_choice = other_value.choice();
  else field_choice.clean_up();
  if (other_value.text().is_bound()) field_text = other_value.text();
  else field_text.clean_up();
}
return *this;
}

boolean Failure::operator==(const Failure& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_choice==other_value.field_choice
  && field_text==other_value.field_text;
}

boolean Failure::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_choice.get_selection() || field_choice.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_text.get_selection() || field_text.is_bound()) return TRUE;
return FALSE;
}
boolean Failure::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_choice.get_selection() && !field_choice.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_text.get_selection() && !field_text.is_value()) return FALSE;
return TRUE;
}
int Failure::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure");
  int ret_val = 0;
  if (field_choice.ispresent()) ret_val++;
  if (field_text.ispresent()) ret_val++;
  return ret_val;
}

void Failure::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ choice := ");
field_choice.log();
TTCN_Logger::log_event_str(", text := ");
field_text.log();
TTCN_Logger::log_event_str(" }");
}

void Failure::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else if (strcmp("text", param_field) == 0) {
      text().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) text().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "text")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          text().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Failure: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@urn_ietf_params_xml_ns_xmpp_sasl.Failure");
  }
}

void Failure::set_implicit_omit()
{
if (!choice().is_bound()) choice() = OMIT_VALUE;
else choice().set_implicit_omit();
if (!text().is_bound()) text() = OMIT_VALUE;
else text().set_implicit_omit();
}

void Failure::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
field_choice.encode_text(text_buf);
field_text.encode_text(text_buf);
}

void Failure::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_choice.decode_text(text_buf);
field_text.decode_text(text_buf);
}

void Failure::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Failure::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Failure::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_choice.collect_ns(Failure_choice_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_text.collect_ns(Failure_text_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Failure::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Failure_choice::can_start(name, uri, Failure_choice_xer_, flavor)) return true;
  else if (Text::can_start(name, uri, Failure_text_xer_, flavor)) return true;
  return false;
}

int Failure::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("choice': ");
  sub_len += field_choice.XER_encode(Failure_choice_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("text': ");
  sub_len += field_text.XER_encode(Failure_text_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Failure::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("choice': ");
    field_choice.XER_decode(Failure_choice_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_text = *static_cast<const Text*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("text': ");
    field_text.XER_decode(Failure_text_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Failure::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_choice.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice");
    enc_len += field_choice.JSON_encode(Failure_choice_descr_, p_tok);
  }

  if (field_text.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "text");
    enc_len += field_text.JSON_encode(Failure_text_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Failure::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "choice", name_len)) {
        int ret_val = field_choice.JSON_decode(Failure_choice_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "text", name_len)) {
        int ret_val = field_text.JSON_decode(Failure_text_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "text");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_choice.is_bound()) {
    field_choice = OMIT_VALUE;
  }
  if (!field_text.is_bound()) {
    field_text = OMIT_VALUE;
  }

  return dec_len;
}

struct Failure_template::single_value_struct {
Failure_choice_template field_choice;
Text_template field_text;
};

void Failure_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_choice = ANY_OR_OMIT;
single_value->field_text = ANY_OR_OMIT;
}
}
}

void Failure_template::copy_value(const Failure& other_value)
{
single_value = new single_value_struct;
if (other_value.choice().is_bound()) {
  if (other_value.choice().ispresent()) single_value->field_choice = other_value.choice()();
  else single_value->field_choice = OMIT_VALUE;
} else {
  single_value->field_choice.clean_up();
}
if (other_value.text().is_bound()) {
  if (other_value.text().ispresent()) single_value->field_text = other_value.text()();
  else single_value->field_text = OMIT_VALUE;
} else {
  single_value->field_text.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Failure_template::copy_template(const Failure_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.choice().get_selection()) {
single_value->field_choice = other_value.choice();
} else {
single_value->field_choice.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.text().get_selection()) {
single_value->field_text = other_value.text();
} else {
single_value->field_text.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Failure_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
break;
}
set_selection(other_value);
}

Failure_template::Failure_template()
{
}

Failure_template::Failure_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Failure_template::Failure_template(const Failure& other_value)
{
copy_value(other_value);
}

Failure_template::Failure_template(const OPTIONAL<Failure>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Failure&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure from an unbound optional field.");
}
}

Failure_template::Failure_template(const Failure_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Failure_template::~Failure_template()
{
clean_up();
}

Failure_template& Failure_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Failure_template& Failure_template::operator=(const Failure& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Failure_template& Failure_template::operator=(const OPTIONAL<Failure>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Failure&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
}
return *this;
}

Failure_template& Failure_template::operator=(const Failure_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Failure_template::match(const Failure& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.choice().is_bound()) return FALSE;
if((other_value.choice().ispresent() ? !single_value->field_choice.match((const Failure_choice&)other_value.choice()) : !single_value->field_choice.match_omit()))return FALSE;
if(!other_value.text().is_bound()) return FALSE;
if((other_value.text().ispresent() ? !single_value->field_text.match((const Text&)other_value.text()) : !single_value->field_text.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
}
return FALSE;
}

boolean Failure_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_choice.is_omit() || single_value->field_choice.is_bound()) return TRUE;
if (single_value->field_text.is_omit() || single_value->field_text.is_bound()) return TRUE;
return FALSE;
}

boolean Failure_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_choice.is_omit() && !single_value->field_choice.is_value()) return FALSE;
if (!single_value->field_text.is_omit() && !single_value->field_text.is_value()) return FALSE;
return TRUE;
}

void Failure_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Failure Failure_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
Failure ret_val;
if (single_value->field_choice.is_omit()) ret_val.choice() = OMIT_VALUE;
else if (single_value->field_choice.is_bound()) {
ret_val.choice() = single_value->field_choice.valueof();
}
if (single_value->field_text.is_omit()) ret_val.text() = OMIT_VALUE;
else if (single_value->field_text.is_bound()) {
ret_val.text() = single_value->field_text.valueof();
}
return ret_val;
}

void Failure_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Failure_template[list_length];
}

Failure_template& Failure_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
return value_list.list_value[list_index];
}

Failure_choice_template& Failure_template::choice()
{
set_specific();
return single_value->field_choice;
}

const Failure_choice_template& Failure_template::choice() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field choice of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
return single_value->field_choice;
}

Text_template& Failure_template::text()
{
set_specific();
return single_value->field_text;
}

const Text_template& Failure_template::text() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field text of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
return single_value->field_text;
}

int Failure_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_choice.is_present()) ret_val++;
      if (single_value->field_text.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
  }
  return 0;
}

void Failure_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ choice := ");
single_value->field_choice.log();
TTCN_Logger::log_event_str(", text := ");
single_value->field_text.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Failure_template::log_match(const Failure& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.choice().ispresent()){
if(!single_value->field_choice.match(match_value.choice())){
TTCN_Logger::log_logmatch_info(".choice");
single_value->field_choice.log_match(match_value.choice());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_choice.match_omit()){
 TTCN_Logger::log_logmatch_info(".choice := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_choice.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.text().ispresent()){
if(!single_value->field_text.match(match_value.text())){
TTCN_Logger::log_logmatch_info(".text");
single_value->field_text.log_match(match_value.text());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_text.match_omit()){
 TTCN_Logger::log_logmatch_info(".text := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_text.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ choice := ");
if (match_value.choice().ispresent()) single_value->field_choice.log_match(match_value.choice());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_choice.log();
if (single_value->field_choice.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", text := ");
if (match_value.text().ispresent()) single_value->field_text.log_match(match_value.text());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_text.log();
if (single_value->field_text.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Failure_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_choice.encode_text(text_buf);
single_value->field_text.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
}
}

void Failure_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_choice.decode_text(text_buf);
single_value->field_text.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Failure_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.");
}
}

void Failure_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else if (strcmp("text", param_field) == 0) {
      text().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) text().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "text")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          text().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Failure: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@urn_ietf_params_xml_ns_xmpp_sasl.Failure");
  }
  is_ifpresent = param.get_ifpresent();
}

void Failure_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_choice.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure");
single_value->field_text.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure");
}

boolean Failure_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Failure_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Failure_choice::copy_value(const Failure_choice& other_value)
{
switch (other_value.union_selection) {
case ALT_aborted:
field_aborted = new Empty(*other_value.field_aborted);
break;
case ALT_account__disabled:
field_account__disabled = new Empty(*other_value.field_account__disabled);
break;
case ALT_credentials__expired:
field_credentials__expired = new Empty(*other_value.field_credentials__expired);
break;
case ALT_encryption__required:
field_encryption__required = new Empty(*other_value.field_encryption__required);
break;
case ALT_incorrect__encoding:
field_incorrect__encoding = new Empty(*other_value.field_incorrect__encoding);
break;
case ALT_invalid__authzid:
field_invalid__authzid = new Empty(*other_value.field_invalid__authzid);
break;
case ALT_invalid__mechanism:
field_invalid__mechanism = new Empty(*other_value.field_invalid__mechanism);
break;
case ALT_malformed__request:
field_malformed__request = new Empty(*other_value.field_malformed__request);
break;
case ALT_mechanism__too__weak:
field_mechanism__too__weak = new Empty(*other_value.field_mechanism__too__weak);
break;
case ALT_not__authorized:
field_not__authorized = new Empty(*other_value.field_not__authorized);
break;
case ALT_temporary__auth__failure:
field_temporary__auth__failure = new Empty(*other_value.field_temporary__auth__failure);
break;
default:
TTCN_error("Assignment of an unbound union value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
union_selection = other_value.union_selection;
}

Failure_choice::Failure_choice()
{
union_selection = UNBOUND_VALUE;
}

Failure_choice::Failure_choice(const Failure_choice& other_value)
: Base_Type(){
copy_value(other_value);
}

Failure_choice::~Failure_choice()
{
clean_up();
}

Failure_choice& Failure_choice::operator=(const Failure_choice& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Failure_choice::operator==(const Failure_choice& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_aborted:
return *field_aborted == *other_value.field_aborted;
case ALT_account__disabled:
return *field_account__disabled == *other_value.field_account__disabled;
case ALT_credentials__expired:
return *field_credentials__expired == *other_value.field_credentials__expired;
case ALT_encryption__required:
return *field_encryption__required == *other_value.field_encryption__required;
case ALT_incorrect__encoding:
return *field_incorrect__encoding == *other_value.field_incorrect__encoding;
case ALT_invalid__authzid:
return *field_invalid__authzid == *other_value.field_invalid__authzid;
case ALT_invalid__mechanism:
return *field_invalid__mechanism == *other_value.field_invalid__mechanism;
case ALT_malformed__request:
return *field_malformed__request == *other_value.field_malformed__request;
case ALT_mechanism__too__weak:
return *field_mechanism__too__weak == *other_value.field_mechanism__too__weak;
case ALT_not__authorized:
return *field_not__authorized == *other_value.field_not__authorized;
case ALT_temporary__auth__failure:
return *field_temporary__auth__failure == *other_value.field_temporary__auth__failure;
default:
return FALSE;
}
}

Empty& Failure_choice::aborted()
{
if (union_selection != ALT_aborted) {
clean_up();
field_aborted = new Empty;
union_selection = ALT_aborted;
}
return *field_aborted;
}

const Empty& Failure_choice::aborted() const
{
if (union_selection != ALT_aborted) TTCN_error("Using non-selected field aborted in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_aborted;
}

Empty& Failure_choice::account__disabled()
{
if (union_selection != ALT_account__disabled) {
clean_up();
field_account__disabled = new Empty;
union_selection = ALT_account__disabled;
}
return *field_account__disabled;
}

const Empty& Failure_choice::account__disabled() const
{
if (union_selection != ALT_account__disabled) TTCN_error("Using non-selected field account_disabled in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_account__disabled;
}

Empty& Failure_choice::credentials__expired()
{
if (union_selection != ALT_credentials__expired) {
clean_up();
field_credentials__expired = new Empty;
union_selection = ALT_credentials__expired;
}
return *field_credentials__expired;
}

const Empty& Failure_choice::credentials__expired() const
{
if (union_selection != ALT_credentials__expired) TTCN_error("Using non-selected field credentials_expired in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_credentials__expired;
}

Empty& Failure_choice::encryption__required()
{
if (union_selection != ALT_encryption__required) {
clean_up();
field_encryption__required = new Empty;
union_selection = ALT_encryption__required;
}
return *field_encryption__required;
}

const Empty& Failure_choice::encryption__required() const
{
if (union_selection != ALT_encryption__required) TTCN_error("Using non-selected field encryption_required in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_encryption__required;
}

Empty& Failure_choice::incorrect__encoding()
{
if (union_selection != ALT_incorrect__encoding) {
clean_up();
field_incorrect__encoding = new Empty;
union_selection = ALT_incorrect__encoding;
}
return *field_incorrect__encoding;
}

const Empty& Failure_choice::incorrect__encoding() const
{
if (union_selection != ALT_incorrect__encoding) TTCN_error("Using non-selected field incorrect_encoding in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_incorrect__encoding;
}

Empty& Failure_choice::invalid__authzid()
{
if (union_selection != ALT_invalid__authzid) {
clean_up();
field_invalid__authzid = new Empty;
union_selection = ALT_invalid__authzid;
}
return *field_invalid__authzid;
}

const Empty& Failure_choice::invalid__authzid() const
{
if (union_selection != ALT_invalid__authzid) TTCN_error("Using non-selected field invalid_authzid in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_invalid__authzid;
}

Empty& Failure_choice::invalid__mechanism()
{
if (union_selection != ALT_invalid__mechanism) {
clean_up();
field_invalid__mechanism = new Empty;
union_selection = ALT_invalid__mechanism;
}
return *field_invalid__mechanism;
}

const Empty& Failure_choice::invalid__mechanism() const
{
if (union_selection != ALT_invalid__mechanism) TTCN_error("Using non-selected field invalid_mechanism in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_invalid__mechanism;
}

Empty& Failure_choice::malformed__request()
{
if (union_selection != ALT_malformed__request) {
clean_up();
field_malformed__request = new Empty;
union_selection = ALT_malformed__request;
}
return *field_malformed__request;
}

const Empty& Failure_choice::malformed__request() const
{
if (union_selection != ALT_malformed__request) TTCN_error("Using non-selected field malformed_request in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_malformed__request;
}

Empty& Failure_choice::mechanism__too__weak()
{
if (union_selection != ALT_mechanism__too__weak) {
clean_up();
field_mechanism__too__weak = new Empty;
union_selection = ALT_mechanism__too__weak;
}
return *field_mechanism__too__weak;
}

const Empty& Failure_choice::mechanism__too__weak() const
{
if (union_selection != ALT_mechanism__too__weak) TTCN_error("Using non-selected field mechanism_too_weak in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_mechanism__too__weak;
}

Empty& Failure_choice::not__authorized()
{
if (union_selection != ALT_not__authorized) {
clean_up();
field_not__authorized = new Empty;
union_selection = ALT_not__authorized;
}
return *field_not__authorized;
}

const Empty& Failure_choice::not__authorized() const
{
if (union_selection != ALT_not__authorized) TTCN_error("Using non-selected field not_authorized in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_not__authorized;
}

Empty& Failure_choice::temporary__auth__failure()
{
if (union_selection != ALT_temporary__auth__failure) {
clean_up();
field_temporary__auth__failure = new Empty;
union_selection = ALT_temporary__auth__failure;
}
return *field_temporary__auth__failure;
}

const Empty& Failure_choice::temporary__auth__failure() const
{
if (union_selection != ALT_temporary__auth__failure) TTCN_error("Using non-selected field temporary_auth_failure in a value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *field_temporary__auth__failure;
}

boolean Failure_choice::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return union_selection == checked_selection;
}

boolean Failure_choice::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Failure_choice::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_aborted: return field_aborted->is_value();
case ALT_account__disabled: return field_account__disabled->is_value();
case ALT_credentials__expired: return field_credentials__expired->is_value();
case ALT_encryption__required: return field_encryption__required->is_value();
case ALT_incorrect__encoding: return field_incorrect__encoding->is_value();
case ALT_invalid__authzid: return field_invalid__authzid->is_value();
case ALT_invalid__mechanism: return field_invalid__mechanism->is_value();
case ALT_malformed__request: return field_malformed__request->is_value();
case ALT_mechanism__too__weak: return field_mechanism__too__weak->is_value();
case ALT_not__authorized: return field_not__authorized->is_value();
case ALT_temporary__auth__failure: return field_temporary__auth__failure->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Failure_choice::clean_up()
{
switch (union_selection) {
case ALT_aborted:
  delete field_aborted;
  break;
case ALT_account__disabled:
  delete field_account__disabled;
  break;
case ALT_credentials__expired:
  delete field_credentials__expired;
  break;
case ALT_encryption__required:
  delete field_encryption__required;
  break;
case ALT_incorrect__encoding:
  delete field_incorrect__encoding;
  break;
case ALT_invalid__authzid:
  delete field_invalid__authzid;
  break;
case ALT_invalid__mechanism:
  delete field_invalid__mechanism;
  break;
case ALT_malformed__request:
  delete field_malformed__request;
  break;
case ALT_mechanism__too__weak:
  delete field_mechanism__too__weak;
  break;
case ALT_not__authorized:
  delete field_not__authorized;
  break;
case ALT_temporary__auth__failure:
  delete field_temporary__auth__failure;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Failure_choice::log() const
{
switch (union_selection) {
case ALT_aborted:
TTCN_Logger::log_event_str("{ aborted := ");
field_aborted->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_account__disabled:
TTCN_Logger::log_event_str("{ account_disabled := ");
field_account__disabled->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_credentials__expired:
TTCN_Logger::log_event_str("{ credentials_expired := ");
field_credentials__expired->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_encryption__required:
TTCN_Logger::log_event_str("{ encryption_required := ");
field_encryption__required->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_incorrect__encoding:
TTCN_Logger::log_event_str("{ incorrect_encoding := ");
field_incorrect__encoding->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_invalid__authzid:
TTCN_Logger::log_event_str("{ invalid_authzid := ");
field_invalid__authzid->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_invalid__mechanism:
TTCN_Logger::log_event_str("{ invalid_mechanism := ");
field_invalid__mechanism->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_malformed__request:
TTCN_Logger::log_event_str("{ malformed_request := ");
field_malformed__request->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mechanism__too__weak:
TTCN_Logger::log_event_str("{ mechanism_too_weak := ");
field_mechanism__too__weak->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_not__authorized:
TTCN_Logger::log_event_str("{ not_authorized := ");
field_not__authorized->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_temporary__auth__failure:
TTCN_Logger::log_event_str("{ temporary_auth_failure := ");
field_temporary__auth__failure->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Failure_choice::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice'");
    }
    if (strcmp("aborted", param_field) == 0) {
      aborted().set_param(param);
      return;
    } else if (strcmp("account_disabled", param_field) == 0) {
      account__disabled().set_param(param);
      return;
    } else if (strcmp("credentials_expired", param_field) == 0) {
      credentials__expired().set_param(param);
      return;
    } else if (strcmp("encryption_required", param_field) == 0) {
      encryption__required().set_param(param);
      return;
    } else if (strcmp("incorrect_encoding", param_field) == 0) {
      incorrect__encoding().set_param(param);
      return;
    } else if (strcmp("invalid_authzid", param_field) == 0) {
      invalid__authzid().set_param(param);
      return;
    } else if (strcmp("invalid_mechanism", param_field) == 0) {
      invalid__mechanism().set_param(param);
      return;
    } else if (strcmp("malformed_request", param_field) == 0) {
      malformed__request().set_param(param);
      return;
    } else if (strcmp("mechanism_too_weak", param_field) == 0) {
      mechanism__too__weak().set_param(param);
      return;
    } else if (strcmp("not_authorized", param_field) == 0) {
      not__authorized().set_param(param);
      return;
    } else if (strcmp("temporary_auth_failure", param_field) == 0) {
      temporary__auth__failure().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "aborted")) {
    aborted().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "account_disabled")) {
    account__disabled().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "credentials_expired")) {
    credentials__expired().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "encryption_required")) {
    encryption__required().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "incorrect_encoding")) {
    incorrect__encoding().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "invalid_authzid")) {
    invalid__authzid().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "invalid_mechanism")) {
    invalid__mechanism().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "malformed_request")) {
    malformed__request().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mechanism_too_weak")) {
    mechanism__too__weak().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "not_authorized")) {
    not__authorized().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "temporary_auth_failure")) {
    temporary__auth__failure().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.", mp_last->get_id()->get_name());
}

void Failure_choice::set_implicit_omit()
{
switch (union_selection) {
case ALT_aborted:
field_aborted->set_implicit_omit(); break;
case ALT_account__disabled:
field_account__disabled->set_implicit_omit(); break;
case ALT_credentials__expired:
field_credentials__expired->set_implicit_omit(); break;
case ALT_encryption__required:
field_encryption__required->set_implicit_omit(); break;
case ALT_incorrect__encoding:
field_incorrect__encoding->set_implicit_omit(); break;
case ALT_invalid__authzid:
field_invalid__authzid->set_implicit_omit(); break;
case ALT_invalid__mechanism:
field_invalid__mechanism->set_implicit_omit(); break;
case ALT_malformed__request:
field_malformed__request->set_implicit_omit(); break;
case ALT_mechanism__too__weak:
field_mechanism__too__weak->set_implicit_omit(); break;
case ALT_not__authorized:
field_not__authorized->set_implicit_omit(); break;
case ALT_temporary__auth__failure:
field_temporary__auth__failure->set_implicit_omit(); break;
default: break;
}
}

void Failure_choice::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_aborted:
field_aborted->encode_text(text_buf);
break;
case ALT_account__disabled:
field_account__disabled->encode_text(text_buf);
break;
case ALT_credentials__expired:
field_credentials__expired->encode_text(text_buf);
break;
case ALT_encryption__required:
field_encryption__required->encode_text(text_buf);
break;
case ALT_incorrect__encoding:
field_incorrect__encoding->encode_text(text_buf);
break;
case ALT_invalid__authzid:
field_invalid__authzid->encode_text(text_buf);
break;
case ALT_invalid__mechanism:
field_invalid__mechanism->encode_text(text_buf);
break;
case ALT_malformed__request:
field_malformed__request->encode_text(text_buf);
break;
case ALT_mechanism__too__weak:
field_mechanism__too__weak->encode_text(text_buf);
break;
case ALT_not__authorized:
field_not__authorized->encode_text(text_buf);
break;
case ALT_temporary__auth__failure:
field_temporary__auth__failure->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}

void Failure_choice::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_aborted:
aborted().decode_text(text_buf);
break;
case ALT_account__disabled:
account__disabled().decode_text(text_buf);
break;
case ALT_credentials__expired:
credentials__expired().decode_text(text_buf);
break;
case ALT_encryption__required:
encryption__required().decode_text(text_buf);
break;
case ALT_incorrect__encoding:
incorrect__encoding().decode_text(text_buf);
break;
case ALT_invalid__authzid:
invalid__authzid().decode_text(text_buf);
break;
case ALT_invalid__mechanism:
invalid__mechanism().decode_text(text_buf);
break;
case ALT_malformed__request:
malformed__request().decode_text(text_buf);
break;
case ALT_mechanism__too__weak:
mechanism__too__weak().decode_text(text_buf);
break;
case ALT_not__authorized:
not__authorized().decode_text(text_buf);
break;
case ALT_temporary__auth__failure:
temporary__auth__failure().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}

void Failure_choice::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Failure_choice::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Failure_choice::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (Empty::can_start(name, uri, Failure_choice_aborted_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_account__disabled_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_credentials__expired_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_encryption__required_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_incorrect__encoding_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_invalid__authzid_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_invalid__mechanism_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_malformed__request_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_mechanism__too__weak_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_not__authorized_xer_, flavor)) return true;
  if (Empty::can_start(name, uri, Failure_choice_temporary__auth__failure_xer_, flavor)) return true;
  return false;
}

char ** Failure_choice::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_aborted:
      new_ns = field_aborted->collect_ns(Failure_choice_aborted_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    case ALT_account__disabled:
      new_ns = field_account__disabled->collect_ns(Failure_choice_account__disabled_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_account__disabled_xer_.namelens[1] > 2);
      break;
    case ALT_credentials__expired:
      new_ns = field_credentials__expired->collect_ns(Failure_choice_credentials__expired_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_credentials__expired_xer_.namelens[1] > 2);
      break;
    case ALT_encryption__required:
      new_ns = field_encryption__required->collect_ns(Failure_choice_encryption__required_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_encryption__required_xer_.namelens[1] > 2);
      break;
    case ALT_incorrect__encoding:
      new_ns = field_incorrect__encoding->collect_ns(Failure_choice_incorrect__encoding_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_incorrect__encoding_xer_.namelens[1] > 2);
      break;
    case ALT_invalid__authzid:
      new_ns = field_invalid__authzid->collect_ns(Failure_choice_invalid__authzid_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_invalid__authzid_xer_.namelens[1] > 2);
      break;
    case ALT_invalid__mechanism:
      new_ns = field_invalid__mechanism->collect_ns(Failure_choice_invalid__mechanism_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_invalid__mechanism_xer_.namelens[1] > 2);
      break;
    case ALT_malformed__request:
      new_ns = field_malformed__request->collect_ns(Failure_choice_malformed__request_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_malformed__request_xer_.namelens[1] > 2);
      break;
    case ALT_mechanism__too__weak:
      new_ns = field_mechanism__too__weak->collect_ns(Failure_choice_mechanism__too__weak_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_mechanism__too__weak_xer_.namelens[1] > 2);
      break;
    case ALT_not__authorized:
      new_ns = field_not__authorized->collect_ns(Failure_choice_not__authorized_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_not__authorized_xer_.namelens[1] > 2);
      break;
    case ALT_temporary__auth__failure:
      new_ns = field_temporary__auth__failure->collect_ns(Failure_choice_temporary__auth__failure_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Failure_choice_temporary__auth__failure_xer_.namelens[1] > 2);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Failure_choice::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Failure_choice::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_aborted:
    ec_1.set_msg("aborted': ");
    field_aborted->XER_encode(Failure_choice_aborted_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_account__disabled:
    ec_1.set_msg("account_disabled': ");
    field_account__disabled->XER_encode(Failure_choice_account__disabled_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_credentials__expired:
    ec_1.set_msg("credentials_expired': ");
    field_credentials__expired->XER_encode(Failure_choice_credentials__expired_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_encryption__required:
    ec_1.set_msg("encryption_required': ");
    field_encryption__required->XER_encode(Failure_choice_encryption__required_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_incorrect__encoding:
    ec_1.set_msg("incorrect_encoding': ");
    field_incorrect__encoding->XER_encode(Failure_choice_incorrect__encoding_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_invalid__authzid:
    ec_1.set_msg("invalid_authzid': ");
    field_invalid__authzid->XER_encode(Failure_choice_invalid__authzid_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_invalid__mechanism:
    ec_1.set_msg("invalid_mechanism': ");
    field_invalid__mechanism->XER_encode(Failure_choice_invalid__mechanism_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_malformed__request:
    ec_1.set_msg("malformed_request': ");
    field_malformed__request->XER_encode(Failure_choice_malformed__request_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_mechanism__too__weak:
    ec_1.set_msg("mechanism_too_weak': ");
    field_mechanism__too__weak->XER_encode(Failure_choice_mechanism__too__weak_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_not__authorized:
    ec_1.set_msg("not_authorized': ");
    field_not__authorized->XER_encode(Failure_choice_not__authorized_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_temporary__auth__failure:
    ec_1.set_msg("temporary_auth_failure': ");
    field_temporary__auth__failure->XER_encode(Failure_choice_temporary__auth__failure_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Failure_choice::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (Empty::can_start(elem_name, ns_uri, Failure_choice_aborted_xer_, flavor_1) || (Failure_choice_aborted_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("aborted': ");
      aborted().XER_decode(Failure_choice_aborted_xer_, p_reader, flavor_1, 0);
      if (!aborted().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_account__disabled_xer_, flavor_1) || (Failure_choice_account__disabled_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("account_disabled': ");
      account__disabled().XER_decode(Failure_choice_account__disabled_xer_, p_reader, flavor_1, 0);
      if (!account__disabled().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_credentials__expired_xer_, flavor_1) || (Failure_choice_credentials__expired_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("credentials_expired': ");
      credentials__expired().XER_decode(Failure_choice_credentials__expired_xer_, p_reader, flavor_1, 0);
      if (!credentials__expired().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_encryption__required_xer_, flavor_1) || (Failure_choice_encryption__required_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("encryption_required': ");
      encryption__required().XER_decode(Failure_choice_encryption__required_xer_, p_reader, flavor_1, 0);
      if (!encryption__required().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_incorrect__encoding_xer_, flavor_1) || (Failure_choice_incorrect__encoding_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("incorrect_encoding': ");
      incorrect__encoding().XER_decode(Failure_choice_incorrect__encoding_xer_, p_reader, flavor_1, 0);
      if (!incorrect__encoding().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_invalid__authzid_xer_, flavor_1) || (Failure_choice_invalid__authzid_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("invalid_authzid': ");
      invalid__authzid().XER_decode(Failure_choice_invalid__authzid_xer_, p_reader, flavor_1, 0);
      if (!invalid__authzid().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_invalid__mechanism_xer_, flavor_1) || (Failure_choice_invalid__mechanism_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("invalid_mechanism': ");
      invalid__mechanism().XER_decode(Failure_choice_invalid__mechanism_xer_, p_reader, flavor_1, 0);
      if (!invalid__mechanism().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_malformed__request_xer_, flavor_1) || (Failure_choice_malformed__request_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("malformed_request': ");
      malformed__request().XER_decode(Failure_choice_malformed__request_xer_, p_reader, flavor_1, 0);
      if (!malformed__request().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_mechanism__too__weak_xer_, flavor_1) || (Failure_choice_mechanism__too__weak_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("mechanism_too_weak': ");
      mechanism__too__weak().XER_decode(Failure_choice_mechanism__too__weak_xer_, p_reader, flavor_1, 0);
      if (!mechanism__too__weak().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_not__authorized_xer_, flavor_1) || (Failure_choice_not__authorized_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("not_authorized': ");
      not__authorized().XER_decode(Failure_choice_not__authorized_xer_, p_reader, flavor_1, 0);
      if (!not__authorized().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Empty::can_start(elem_name, ns_uri, Failure_choice_temporary__auth__failure_xer_, flavor_1) || (Failure_choice_temporary__auth__failure_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("temporary_auth_failure': ");
      temporary__auth__failure().XER_decode(Failure_choice_temporary__auth__failure_xer_, p_reader, flavor_1, 0);
      if (!temporary__auth__failure().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Failure_choice::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_aborted:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "aborted");
    enc_len += field_aborted->JSON_encode(Failure_choice_aborted_descr_, p_tok);
    break;
  case ALT_account__disabled:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "account_disabled");
    enc_len += field_account__disabled->JSON_encode(Failure_choice_account__disabled_descr_, p_tok);
    break;
  case ALT_credentials__expired:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "credentials_expired");
    enc_len += field_credentials__expired->JSON_encode(Failure_choice_credentials__expired_descr_, p_tok);
    break;
  case ALT_encryption__required:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "encryption_required");
    enc_len += field_encryption__required->JSON_encode(Failure_choice_encryption__required_descr_, p_tok);
    break;
  case ALT_incorrect__encoding:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "incorrect_encoding");
    enc_len += field_incorrect__encoding->JSON_encode(Failure_choice_incorrect__encoding_descr_, p_tok);
    break;
  case ALT_invalid__authzid:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "invalid_authzid");
    enc_len += field_invalid__authzid->JSON_encode(Failure_choice_invalid__authzid_descr_, p_tok);
    break;
  case ALT_invalid__mechanism:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "invalid_mechanism");
    enc_len += field_invalid__mechanism->JSON_encode(Failure_choice_invalid__mechanism_descr_, p_tok);
    break;
  case ALT_malformed__request:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "malformed_request");
    enc_len += field_malformed__request->JSON_encode(Failure_choice_malformed__request_descr_, p_tok);
    break;
  case ALT_mechanism__too__weak:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "mechanism_too_weak");
    enc_len += field_mechanism__too__weak->JSON_encode(Failure_choice_mechanism__too__weak_descr_, p_tok);
    break;
  case ALT_not__authorized:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "not_authorized");
    enc_len += field_not__authorized->JSON_encode(Failure_choice_not__authorized_descr_, p_tok);
    break;
  case ALT_temporary__auth__failure:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "temporary_auth_failure");
    enc_len += field_temporary__auth__failure->JSON_encode(Failure_choice_temporary__auth__failure_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Failure_choice::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "aborted", name_len)) {
      int ret_val = aborted().JSON_decode(Failure_choice_aborted_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "aborted");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "account_disabled", name_len)) {
      int ret_val = account__disabled().JSON_decode(Failure_choice_account__disabled_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "account_disabled");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "credentials_expired", name_len)) {
      int ret_val = credentials__expired().JSON_decode(Failure_choice_credentials__expired_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "credentials_expired");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "encryption_required", name_len)) {
      int ret_val = encryption__required().JSON_decode(Failure_choice_encryption__required_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "encryption_required");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "incorrect_encoding", name_len)) {
      int ret_val = incorrect__encoding().JSON_decode(Failure_choice_incorrect__encoding_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "incorrect_encoding");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "invalid_authzid", name_len)) {
      int ret_val = invalid__authzid().JSON_decode(Failure_choice_invalid__authzid_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "invalid_authzid");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "invalid_mechanism", name_len)) {
      int ret_val = invalid__mechanism().JSON_decode(Failure_choice_invalid__mechanism_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "invalid_mechanism");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "malformed_request", name_len)) {
      int ret_val = malformed__request().JSON_decode(Failure_choice_malformed__request_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "malformed_request");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "mechanism_too_weak", name_len)) {
      int ret_val = mechanism__too__weak().JSON_decode(Failure_choice_mechanism__too__weak_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "mechanism_too_weak");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "not_authorized", name_len)) {
      int ret_val = not__authorized().JSON_decode(Failure_choice_not__authorized_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "not_authorized");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "temporary_auth_failure", name_len)) {
      int ret_val = temporary__auth__failure().JSON_decode(Failure_choice_temporary__auth__failure_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "temporary_auth_failure");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Failure_choice_template::copy_value(const Failure_choice& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
single_value.field_aborted = new Empty_template(other_value.aborted());
break;
case Failure_choice::ALT_account__disabled:
single_value.field_account__disabled = new Empty_template(other_value.account__disabled());
break;
case Failure_choice::ALT_credentials__expired:
single_value.field_credentials__expired = new Empty_template(other_value.credentials__expired());
break;
case Failure_choice::ALT_encryption__required:
single_value.field_encryption__required = new Empty_template(other_value.encryption__required());
break;
case Failure_choice::ALT_incorrect__encoding:
single_value.field_incorrect__encoding = new Empty_template(other_value.incorrect__encoding());
break;
case Failure_choice::ALT_invalid__authzid:
single_value.field_invalid__authzid = new Empty_template(other_value.invalid__authzid());
break;
case Failure_choice::ALT_invalid__mechanism:
single_value.field_invalid__mechanism = new Empty_template(other_value.invalid__mechanism());
break;
case Failure_choice::ALT_malformed__request:
single_value.field_malformed__request = new Empty_template(other_value.malformed__request());
break;
case Failure_choice::ALT_mechanism__too__weak:
single_value.field_mechanism__too__weak = new Empty_template(other_value.mechanism__too__weak());
break;
case Failure_choice::ALT_not__authorized:
single_value.field_not__authorized = new Empty_template(other_value.not__authorized());
break;
case Failure_choice::ALT_temporary__auth__failure:
single_value.field_temporary__auth__failure = new Empty_template(other_value.temporary__auth__failure());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
set_selection(SPECIFIC_VALUE);
}

void Failure_choice_template::copy_template(const Failure_choice_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
single_value.field_aborted = new Empty_template(*other_value.single_value.field_aborted);
break;
case Failure_choice::ALT_account__disabled:
single_value.field_account__disabled = new Empty_template(*other_value.single_value.field_account__disabled);
break;
case Failure_choice::ALT_credentials__expired:
single_value.field_credentials__expired = new Empty_template(*other_value.single_value.field_credentials__expired);
break;
case Failure_choice::ALT_encryption__required:
single_value.field_encryption__required = new Empty_template(*other_value.single_value.field_encryption__required);
break;
case Failure_choice::ALT_incorrect__encoding:
single_value.field_incorrect__encoding = new Empty_template(*other_value.single_value.field_incorrect__encoding);
break;
case Failure_choice::ALT_invalid__authzid:
single_value.field_invalid__authzid = new Empty_template(*other_value.single_value.field_invalid__authzid);
break;
case Failure_choice::ALT_invalid__mechanism:
single_value.field_invalid__mechanism = new Empty_template(*other_value.single_value.field_invalid__mechanism);
break;
case Failure_choice::ALT_malformed__request:
single_value.field_malformed__request = new Empty_template(*other_value.single_value.field_malformed__request);
break;
case Failure_choice::ALT_mechanism__too__weak:
single_value.field_mechanism__too__weak = new Empty_template(*other_value.single_value.field_mechanism__too__weak);
break;
case Failure_choice::ALT_not__authorized:
single_value.field_not__authorized = new Empty_template(*other_value.single_value.field_not__authorized);
break;
case Failure_choice::ALT_temporary__auth__failure:
single_value.field_temporary__auth__failure = new Empty_template(*other_value.single_value.field_temporary__auth__failure);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Failure_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
set_selection(other_value);
}

Failure_choice_template::Failure_choice_template()
{
}

Failure_choice_template::Failure_choice_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Failure_choice_template::Failure_choice_template(const Failure_choice& other_value)
{
copy_value(other_value);
}

Failure_choice_template::Failure_choice_template(const OPTIONAL<Failure_choice>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Failure_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice from an unbound optional field.");
}
}

Failure_choice_template::Failure_choice_template(const Failure_choice_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Failure_choice_template::~Failure_choice_template()
{
clean_up();
}

void Failure_choice_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
delete single_value.field_aborted;
break;
case Failure_choice::ALT_account__disabled:
delete single_value.field_account__disabled;
break;
case Failure_choice::ALT_credentials__expired:
delete single_value.field_credentials__expired;
break;
case Failure_choice::ALT_encryption__required:
delete single_value.field_encryption__required;
break;
case Failure_choice::ALT_incorrect__encoding:
delete single_value.field_incorrect__encoding;
break;
case Failure_choice::ALT_invalid__authzid:
delete single_value.field_invalid__authzid;
break;
case Failure_choice::ALT_invalid__mechanism:
delete single_value.field_invalid__mechanism;
break;
case Failure_choice::ALT_malformed__request:
delete single_value.field_malformed__request;
break;
case Failure_choice::ALT_mechanism__too__weak:
delete single_value.field_mechanism__too__weak;
break;
case Failure_choice::ALT_not__authorized:
delete single_value.field_not__authorized;
break;
case Failure_choice::ALT_temporary__auth__failure:
delete single_value.field_temporary__auth__failure;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Failure_choice_template& Failure_choice_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Failure_choice_template& Failure_choice_template::operator=(const Failure_choice& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Failure_choice_template& Failure_choice_template::operator=(const OPTIONAL<Failure_choice>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Failure_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
return *this;
}

Failure_choice_template& Failure_choice_template::operator=(const Failure_choice_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Failure_choice_template::match(const Failure_choice& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Failure_choice::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Failure_choice::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Failure_choice::ALT_aborted:
return single_value.field_aborted->match(other_value.aborted());
case Failure_choice::ALT_account__disabled:
return single_value.field_account__disabled->match(other_value.account__disabled());
case Failure_choice::ALT_credentials__expired:
return single_value.field_credentials__expired->match(other_value.credentials__expired());
case Failure_choice::ALT_encryption__required:
return single_value.field_encryption__required->match(other_value.encryption__required());
case Failure_choice::ALT_incorrect__encoding:
return single_value.field_incorrect__encoding->match(other_value.incorrect__encoding());
case Failure_choice::ALT_invalid__authzid:
return single_value.field_invalid__authzid->match(other_value.invalid__authzid());
case Failure_choice::ALT_invalid__mechanism:
return single_value.field_invalid__mechanism->match(other_value.invalid__mechanism());
case Failure_choice::ALT_malformed__request:
return single_value.field_malformed__request->match(other_value.malformed__request());
case Failure_choice::ALT_mechanism__too__weak:
return single_value.field_mechanism__too__weak->match(other_value.mechanism__too__weak());
case Failure_choice::ALT_not__authorized:
return single_value.field_not__authorized->match(other_value.not__authorized());
case Failure_choice::ALT_temporary__auth__failure:
return single_value.field_temporary__auth__failure->match(other_value.temporary__auth__failure());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
return FALSE;
}

boolean Failure_choice_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
return single_value.field_aborted->is_value();
case Failure_choice::ALT_account__disabled:
return single_value.field_account__disabled->is_value();
case Failure_choice::ALT_credentials__expired:
return single_value.field_credentials__expired->is_value();
case Failure_choice::ALT_encryption__required:
return single_value.field_encryption__required->is_value();
case Failure_choice::ALT_incorrect__encoding:
return single_value.field_incorrect__encoding->is_value();
case Failure_choice::ALT_invalid__authzid:
return single_value.field_invalid__authzid->is_value();
case Failure_choice::ALT_invalid__mechanism:
return single_value.field_invalid__mechanism->is_value();
case Failure_choice::ALT_malformed__request:
return single_value.field_malformed__request->is_value();
case Failure_choice::ALT_mechanism__too__weak:
return single_value.field_mechanism__too__weak->is_value();
case Failure_choice::ALT_not__authorized:
return single_value.field_not__authorized->is_value();
case Failure_choice::ALT_temporary__auth__failure:
return single_value.field_temporary__auth__failure->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}

Failure_choice Failure_choice_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
Failure_choice ret_val;
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
ret_val.aborted() = single_value.field_aborted->valueof();
break;
case Failure_choice::ALT_account__disabled:
ret_val.account__disabled() = single_value.field_account__disabled->valueof();
break;
case Failure_choice::ALT_credentials__expired:
ret_val.credentials__expired() = single_value.field_credentials__expired->valueof();
break;
case Failure_choice::ALT_encryption__required:
ret_val.encryption__required() = single_value.field_encryption__required->valueof();
break;
case Failure_choice::ALT_incorrect__encoding:
ret_val.incorrect__encoding() = single_value.field_incorrect__encoding->valueof();
break;
case Failure_choice::ALT_invalid__authzid:
ret_val.invalid__authzid() = single_value.field_invalid__authzid->valueof();
break;
case Failure_choice::ALT_invalid__mechanism:
ret_val.invalid__mechanism() = single_value.field_invalid__mechanism->valueof();
break;
case Failure_choice::ALT_malformed__request:
ret_val.malformed__request() = single_value.field_malformed__request->valueof();
break;
case Failure_choice::ALT_mechanism__too__weak:
ret_val.mechanism__too__weak() = single_value.field_mechanism__too__weak->valueof();
break;
case Failure_choice::ALT_not__authorized:
ret_val.not__authorized() = single_value.field_not__authorized->valueof();
break;
case Failure_choice::ALT_temporary__auth__failure:
ret_val.temporary__auth__failure() = single_value.field_temporary__auth__failure->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
return ret_val;
}

Failure_choice_template& Failure_choice_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return value_list.list_value[list_index];
}
void Failure_choice_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Failure_choice_template[list_length];
}

Empty_template& Failure_choice_template::aborted()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_aborted) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_aborted = new Empty_template(ANY_VALUE);
else single_value.field_aborted = new Empty_template;
single_value.union_selection = Failure_choice::ALT_aborted;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_aborted;
}

const Empty_template& Failure_choice_template::aborted() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field aborted in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_aborted) TTCN_error("Accessing non-selected field aborted in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_aborted;
}

Empty_template& Failure_choice_template::account__disabled()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_account__disabled) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_account__disabled = new Empty_template(ANY_VALUE);
else single_value.field_account__disabled = new Empty_template;
single_value.union_selection = Failure_choice::ALT_account__disabled;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_account__disabled;
}

const Empty_template& Failure_choice_template::account__disabled() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field account_disabled in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_account__disabled) TTCN_error("Accessing non-selected field account_disabled in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_account__disabled;
}

Empty_template& Failure_choice_template::credentials__expired()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_credentials__expired) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_credentials__expired = new Empty_template(ANY_VALUE);
else single_value.field_credentials__expired = new Empty_template;
single_value.union_selection = Failure_choice::ALT_credentials__expired;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_credentials__expired;
}

const Empty_template& Failure_choice_template::credentials__expired() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field credentials_expired in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_credentials__expired) TTCN_error("Accessing non-selected field credentials_expired in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_credentials__expired;
}

Empty_template& Failure_choice_template::encryption__required()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_encryption__required) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_encryption__required = new Empty_template(ANY_VALUE);
else single_value.field_encryption__required = new Empty_template;
single_value.union_selection = Failure_choice::ALT_encryption__required;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_encryption__required;
}

const Empty_template& Failure_choice_template::encryption__required() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field encryption_required in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_encryption__required) TTCN_error("Accessing non-selected field encryption_required in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_encryption__required;
}

Empty_template& Failure_choice_template::incorrect__encoding()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_incorrect__encoding) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_incorrect__encoding = new Empty_template(ANY_VALUE);
else single_value.field_incorrect__encoding = new Empty_template;
single_value.union_selection = Failure_choice::ALT_incorrect__encoding;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_incorrect__encoding;
}

const Empty_template& Failure_choice_template::incorrect__encoding() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field incorrect_encoding in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_incorrect__encoding) TTCN_error("Accessing non-selected field incorrect_encoding in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_incorrect__encoding;
}

Empty_template& Failure_choice_template::invalid__authzid()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_invalid__authzid) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_invalid__authzid = new Empty_template(ANY_VALUE);
else single_value.field_invalid__authzid = new Empty_template;
single_value.union_selection = Failure_choice::ALT_invalid__authzid;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_invalid__authzid;
}

const Empty_template& Failure_choice_template::invalid__authzid() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field invalid_authzid in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_invalid__authzid) TTCN_error("Accessing non-selected field invalid_authzid in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_invalid__authzid;
}

Empty_template& Failure_choice_template::invalid__mechanism()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_invalid__mechanism) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_invalid__mechanism = new Empty_template(ANY_VALUE);
else single_value.field_invalid__mechanism = new Empty_template;
single_value.union_selection = Failure_choice::ALT_invalid__mechanism;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_invalid__mechanism;
}

const Empty_template& Failure_choice_template::invalid__mechanism() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field invalid_mechanism in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_invalid__mechanism) TTCN_error("Accessing non-selected field invalid_mechanism in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_invalid__mechanism;
}

Empty_template& Failure_choice_template::malformed__request()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_malformed__request) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_malformed__request = new Empty_template(ANY_VALUE);
else single_value.field_malformed__request = new Empty_template;
single_value.union_selection = Failure_choice::ALT_malformed__request;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_malformed__request;
}

const Empty_template& Failure_choice_template::malformed__request() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field malformed_request in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_malformed__request) TTCN_error("Accessing non-selected field malformed_request in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_malformed__request;
}

Empty_template& Failure_choice_template::mechanism__too__weak()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_mechanism__too__weak) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mechanism__too__weak = new Empty_template(ANY_VALUE);
else single_value.field_mechanism__too__weak = new Empty_template;
single_value.union_selection = Failure_choice::ALT_mechanism__too__weak;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mechanism__too__weak;
}

const Empty_template& Failure_choice_template::mechanism__too__weak() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mechanism_too_weak in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_mechanism__too__weak) TTCN_error("Accessing non-selected field mechanism_too_weak in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_mechanism__too__weak;
}

Empty_template& Failure_choice_template::not__authorized()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_not__authorized) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_not__authorized = new Empty_template(ANY_VALUE);
else single_value.field_not__authorized = new Empty_template;
single_value.union_selection = Failure_choice::ALT_not__authorized;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_not__authorized;
}

const Empty_template& Failure_choice_template::not__authorized() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field not_authorized in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_not__authorized) TTCN_error("Accessing non-selected field not_authorized in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_not__authorized;
}

Empty_template& Failure_choice_template::temporary__auth__failure()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Failure_choice::ALT_temporary__auth__failure) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_temporary__auth__failure = new Empty_template(ANY_VALUE);
else single_value.field_temporary__auth__failure = new Empty_template;
single_value.union_selection = Failure_choice::ALT_temporary__auth__failure;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_temporary__auth__failure;
}

const Empty_template& Failure_choice_template::temporary__auth__failure() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field temporary_auth_failure in a non-specific template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
if (single_value.union_selection != Failure_choice::ALT_temporary__auth__failure) TTCN_error("Accessing non-selected field temporary_auth_failure in a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return *single_value.field_temporary__auth__failure;
}

boolean Failure_choice_template::ischosen(Failure_choice::union_selection_type checked_selection) const
{
if (checked_selection == Failure_choice::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Failure_choice::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
}
return FALSE;
}

void Failure_choice_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
TTCN_Logger::log_event_str("{ aborted := ");
single_value.field_aborted->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_account__disabled:
TTCN_Logger::log_event_str("{ account_disabled := ");
single_value.field_account__disabled->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_credentials__expired:
TTCN_Logger::log_event_str("{ credentials_expired := ");
single_value.field_credentials__expired->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_encryption__required:
TTCN_Logger::log_event_str("{ encryption_required := ");
single_value.field_encryption__required->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_incorrect__encoding:
TTCN_Logger::log_event_str("{ incorrect_encoding := ");
single_value.field_incorrect__encoding->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_invalid__authzid:
TTCN_Logger::log_event_str("{ invalid_authzid := ");
single_value.field_invalid__authzid->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_invalid__mechanism:
TTCN_Logger::log_event_str("{ invalid_mechanism := ");
single_value.field_invalid__mechanism->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_malformed__request:
TTCN_Logger::log_event_str("{ malformed_request := ");
single_value.field_malformed__request->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_mechanism__too__weak:
TTCN_Logger::log_event_str("{ mechanism_too_weak := ");
single_value.field_mechanism__too__weak->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_not__authorized:
TTCN_Logger::log_event_str("{ not_authorized := ");
single_value.field_not__authorized->log();
TTCN_Logger::log_event_str(" }");
break;
case Failure_choice::ALT_temporary__auth__failure:
TTCN_Logger::log_event_str("{ temporary_auth_failure := ");
single_value.field_temporary__auth__failure->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Failure_choice_template::log_match(const Failure_choice& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".aborted");
single_value.field_aborted->log_match(match_value.aborted());
} else {
TTCN_Logger::log_event_str("{ aborted := ");
single_value.field_aborted->log_match(match_value.aborted());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_account__disabled:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".account_disabled");
single_value.field_account__disabled->log_match(match_value.account__disabled());
} else {
TTCN_Logger::log_event_str("{ account_disabled := ");
single_value.field_account__disabled->log_match(match_value.account__disabled());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_credentials__expired:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".credentials_expired");
single_value.field_credentials__expired->log_match(match_value.credentials__expired());
} else {
TTCN_Logger::log_event_str("{ credentials_expired := ");
single_value.field_credentials__expired->log_match(match_value.credentials__expired());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_encryption__required:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".encryption_required");
single_value.field_encryption__required->log_match(match_value.encryption__required());
} else {
TTCN_Logger::log_event_str("{ encryption_required := ");
single_value.field_encryption__required->log_match(match_value.encryption__required());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_incorrect__encoding:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".incorrect_encoding");
single_value.field_incorrect__encoding->log_match(match_value.incorrect__encoding());
} else {
TTCN_Logger::log_event_str("{ incorrect_encoding := ");
single_value.field_incorrect__encoding->log_match(match_value.incorrect__encoding());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_invalid__authzid:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".invalid_authzid");
single_value.field_invalid__authzid->log_match(match_value.invalid__authzid());
} else {
TTCN_Logger::log_event_str("{ invalid_authzid := ");
single_value.field_invalid__authzid->log_match(match_value.invalid__authzid());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_invalid__mechanism:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".invalid_mechanism");
single_value.field_invalid__mechanism->log_match(match_value.invalid__mechanism());
} else {
TTCN_Logger::log_event_str("{ invalid_mechanism := ");
single_value.field_invalid__mechanism->log_match(match_value.invalid__mechanism());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_malformed__request:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".malformed_request");
single_value.field_malformed__request->log_match(match_value.malformed__request());
} else {
TTCN_Logger::log_event_str("{ malformed_request := ");
single_value.field_malformed__request->log_match(match_value.malformed__request());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_mechanism__too__weak:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mechanism_too_weak");
single_value.field_mechanism__too__weak->log_match(match_value.mechanism__too__weak());
} else {
TTCN_Logger::log_event_str("{ mechanism_too_weak := ");
single_value.field_mechanism__too__weak->log_match(match_value.mechanism__too__weak());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_not__authorized:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".not_authorized");
single_value.field_not__authorized->log_match(match_value.not__authorized());
} else {
TTCN_Logger::log_event_str("{ not_authorized := ");
single_value.field_not__authorized->log_match(match_value.not__authorized());
TTCN_Logger::log_event_str(" }");
}
break;
case Failure_choice::ALT_temporary__auth__failure:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".temporary_auth_failure");
single_value.field_temporary__auth__failure->log_match(match_value.temporary__auth__failure());
} else {
TTCN_Logger::log_event_str("{ temporary_auth_failure := ");
single_value.field_temporary__auth__failure->log_match(match_value.temporary__auth__failure());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Failure_choice_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
single_value.field_aborted->encode_text(text_buf);
break;
case Failure_choice::ALT_account__disabled:
single_value.field_account__disabled->encode_text(text_buf);
break;
case Failure_choice::ALT_credentials__expired:
single_value.field_credentials__expired->encode_text(text_buf);
break;
case Failure_choice::ALT_encryption__required:
single_value.field_encryption__required->encode_text(text_buf);
break;
case Failure_choice::ALT_incorrect__encoding:
single_value.field_incorrect__encoding->encode_text(text_buf);
break;
case Failure_choice::ALT_invalid__authzid:
single_value.field_invalid__authzid->encode_text(text_buf);
break;
case Failure_choice::ALT_invalid__mechanism:
single_value.field_invalid__mechanism->encode_text(text_buf);
break;
case Failure_choice::ALT_malformed__request:
single_value.field_malformed__request->encode_text(text_buf);
break;
case Failure_choice::ALT_mechanism__too__weak:
single_value.field_mechanism__too__weak->encode_text(text_buf);
break;
case Failure_choice::ALT_not__authorized:
single_value.field_not__authorized->encode_text(text_buf);
break;
case Failure_choice::ALT_temporary__auth__failure:
single_value.field_temporary__auth__failure->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}

void Failure_choice_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Failure_choice::UNBOUND_VALUE;
Failure_choice::union_selection_type new_selection = (Failure_choice::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Failure_choice::ALT_aborted:
single_value.field_aborted = new Empty_template;
single_value.field_aborted->decode_text(text_buf);
break;
case Failure_choice::ALT_account__disabled:
single_value.field_account__disabled = new Empty_template;
single_value.field_account__disabled->decode_text(text_buf);
break;
case Failure_choice::ALT_credentials__expired:
single_value.field_credentials__expired = new Empty_template;
single_value.field_credentials__expired->decode_text(text_buf);
break;
case Failure_choice::ALT_encryption__required:
single_value.field_encryption__required = new Empty_template;
single_value.field_encryption__required->decode_text(text_buf);
break;
case Failure_choice::ALT_incorrect__encoding:
single_value.field_incorrect__encoding = new Empty_template;
single_value.field_incorrect__encoding->decode_text(text_buf);
break;
case Failure_choice::ALT_invalid__authzid:
single_value.field_invalid__authzid = new Empty_template;
single_value.field_invalid__authzid->decode_text(text_buf);
break;
case Failure_choice::ALT_invalid__mechanism:
single_value.field_invalid__mechanism = new Empty_template;
single_value.field_invalid__mechanism->decode_text(text_buf);
break;
case Failure_choice::ALT_malformed__request:
single_value.field_malformed__request = new Empty_template;
single_value.field_malformed__request->decode_text(text_buf);
break;
case Failure_choice::ALT_mechanism__too__weak:
single_value.field_mechanism__too__weak = new Empty_template;
single_value.field_mechanism__too__weak->decode_text(text_buf);
break;
case Failure_choice::ALT_not__authorized:
single_value.field_not__authorized = new Empty_template;
single_value.field_not__authorized->decode_text(text_buf);
break;
case Failure_choice::ALT_temporary__auth__failure:
single_value.field_temporary__auth__failure = new Empty_template;
single_value.field_temporary__auth__failure->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Failure_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
}

boolean Failure_choice_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Failure_choice_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Failure_choice_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice'");
    }
    if (strcmp("aborted", param_field) == 0) {
      aborted().set_param(param);
      return;
    } else if (strcmp("account_disabled", param_field) == 0) {
      account__disabled().set_param(param);
      return;
    } else if (strcmp("credentials_expired", param_field) == 0) {
      credentials__expired().set_param(param);
      return;
    } else if (strcmp("encryption_required", param_field) == 0) {
      encryption__required().set_param(param);
      return;
    } else if (strcmp("incorrect_encoding", param_field) == 0) {
      incorrect__encoding().set_param(param);
      return;
    } else if (strcmp("invalid_authzid", param_field) == 0) {
      invalid__authzid().set_param(param);
      return;
    } else if (strcmp("invalid_mechanism", param_field) == 0) {
      invalid__mechanism().set_param(param);
      return;
    } else if (strcmp("malformed_request", param_field) == 0) {
      malformed__request().set_param(param);
      return;
    } else if (strcmp("mechanism_too_weak", param_field) == 0) {
      mechanism__too__weak().set_param(param);
      return;
    } else if (strcmp("not_authorized", param_field) == 0) {
      not__authorized().set_param(param);
      return;
    } else if (strcmp("temporary_auth_failure", param_field) == 0) {
      temporary__auth__failure().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "aborted")) {
      aborted().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "account_disabled")) {
      account__disabled().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "credentials_expired")) {
      credentials__expired().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "encryption_required")) {
      encryption__required().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "incorrect_encoding")) {
      incorrect__encoding().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "invalid_authzid")) {
      invalid__authzid().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "invalid_mechanism")) {
      invalid__mechanism().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "malformed_request")) {
      malformed__request().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mechanism_too_weak")) {
      mechanism__too__weak().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "not_authorized")) {
      not__authorized().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "temporary_auth_failure")) {
      temporary__auth__failure().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
  }
  is_ifpresent = param.get_ifpresent();
}

void Failure_choice_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Failure_choice::ALT_aborted:
single_value.field_aborted->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_account__disabled:
single_value.field_account__disabled->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_credentials__expired:
single_value.field_credentials__expired->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_encryption__required:
single_value.field_encryption__required->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_incorrect__encoding:
single_value.field_incorrect__encoding->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_invalid__authzid:
single_value.field_invalid__authzid->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_invalid__mechanism:
single_value.field_invalid__mechanism->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_malformed__request:
single_value.field_malformed__request->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_mechanism__too__weak:
single_value.field_mechanism__too__weak->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_not__authorized:
single_value.field_not__authorized->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
case Failure_choice::ALT_temporary__auth__failure:
single_value.field_temporary__auth__failure->check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Failure.choice");
}

Text::Text()
{
  bound_flag = FALSE;
}

Text::Text(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_lang(par_lang),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Text::Text(const Text& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
bound_flag = TRUE;
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Text::clean_up()
{
field_lang.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Text& Text::operator=(const Text& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
  bound_flag = TRUE;
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Text::operator==(const Text& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_lang==other_value.field_lang
  && field_base==other_value.field_base;
}

boolean Text::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Text::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Text::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text");
  int ret_val = 1;
  if (field_lang.ispresent()) ret_val++;
  return ret_val;
}

void Text::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Text::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@urn_ietf_params_xml_ns_xmpp_sasl.Text'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@urn_ietf_params_xml_ns_xmpp_sasl.Text'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Text: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@urn_ietf_params_xml_ns_xmpp_sasl.Text");
  }
}

void Text::set_implicit_omit()
{
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Text::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
field_lang.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Text::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_lang.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Text::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Text::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Text::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_lang.collect_ns(Text_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Text_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Text::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (CHARSTRING::can_start(name, uri, Text_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Text_base_xer_, flavor)) return true;
  return false;
}

int Text::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Text_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Text_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Text::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Text_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Text_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Text_lang_xer_, 1) && check_namespace(ns_uri, Text_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Text_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Text_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Text_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Text::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Text_lang_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Text_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Text::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Text_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Text_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Text_template::single_value_struct {
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_base;
};

void Text_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_lang = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Text_template::copy_value(const Text& other_value)
{
single_value = new single_value_struct;
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Text_template::copy_template(const Text_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Text_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
break;
}
set_selection(other_value);
}

Text_template::Text_template()
{
}

Text_template::Text_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Text_template::Text_template(const Text& other_value)
{
copy_value(other_value);
}

Text_template::Text_template(const OPTIONAL<Text>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Text&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text from an unbound optional field.");
}
}

Text_template::Text_template(const Text_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Text_template::~Text_template()
{
clean_up();
}

Text_template& Text_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Text_template& Text_template::operator=(const Text& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Text_template& Text_template::operator=(const OPTIONAL<Text>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Text&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
}
return *this;
}

Text_template& Text_template::operator=(const Text_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Text_template::match(const Text& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
}
return FALSE;
}

boolean Text_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Text_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Text_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Text Text_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
Text ret_val;
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Text_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Text_template[list_length];
}

Text_template& Text_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Text_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Text_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Text_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Text_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
return single_value->field_base;
}

int Text_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_lang.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
  }
  return 0;
}

void Text_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Text_template::log_match(const Text& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Text_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_lang.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
}
}

void Text_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_lang.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Text_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text.");
}
}

void Text_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Text'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@urn_ietf_params_xml_ns_xmpp_sasl.Text'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @urn_ietf_params_xml_ns_xmpp_sasl.Text has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @urn_ietf_params_xml_ns_xmpp_sasl.Text: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@urn_ietf_params_xml_ns_xmpp_sasl.Text");
  }
  is_ifpresent = param.get_ifpresent();
}

void Text_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Text");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Text");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@urn_ietf_params_xml_ns_xmpp_sasl.Text");
}

boolean Text_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Text_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const Mechanisms_elem__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @urn_ietf_params_xml_ns_xmpp_sasl.Mechanisms.elem_list.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
XSD::module_object.pre_init_module();
}

static void post_init_module()
{
XSD::module_object.post_init_module();
}


} /* end of namespace */
