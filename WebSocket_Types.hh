// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:40:58 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef WebSocket__Types_HH
#define WebSocket__Types_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef WebSocket__Types_HH
#endif

namespace WebSocket__Types {

/* Forward declarations of classes */

class Websocket__close;
class Websocket__close_template;
class WebSocket__opcode;
class WebSocket__opcode_template;
class WebSocket__payloads;
class WebSocket__payloads_template;
class WebSocket__PDU;
class WebSocket__PDU_template;

} /* end of namespace */

#ifndef WebSocket__Types_HH
#define WebSocket__Types_HH

namespace WebSocket__Types {

/* Class definitions */

class Websocket__close {
  INTEGER field_status__code;
  OPTIONAL<OCTETSTRING> field_data;
  boolean bound_flag;
public:
  Websocket__close();
  Websocket__close(const INTEGER& par_status__code,
    const OPTIONAL<OCTETSTRING>& par_data);
  Websocket__close(const Websocket__close& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Websocket__close& operator=(const Websocket__close& other_value);
  boolean operator==(const Websocket__close& other_value) const;
  inline boolean operator!=(const Websocket__close& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline INTEGER& status__code()
    {return field_status__code;}
  inline const INTEGER& status__code() const
    {return field_status__code;}
  inline OPTIONAL<OCTETSTRING>& data()
    {return field_data;}
  inline const OPTIONAL<OCTETSTRING>& data() const
    {return field_data;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class Websocket__close_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Websocket__close_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Websocket__close& other_value);
void copy_template(const Websocket__close_template& other_value);

public:
Websocket__close_template();
Websocket__close_template(template_sel other_value);
Websocket__close_template(const Websocket__close& other_value);
Websocket__close_template(const OPTIONAL<Websocket__close>& other_value);
Websocket__close_template(const Websocket__close_template& other_value);
~Websocket__close_template();
Websocket__close_template& operator=(template_sel other_value);
Websocket__close_template& operator=(const Websocket__close& other_value);
Websocket__close_template& operator=(const OPTIONAL<Websocket__close>& other_value);
Websocket__close_template& operator=(const Websocket__close_template& other_value);
boolean match(const Websocket__close& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Websocket__close valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Websocket__close_template& list_item(unsigned int list_index) const;
INTEGER_template& status__code();
const INTEGER_template& status__code() const;
OCTETSTRING_template& data();
const OCTETSTRING_template& data() const;
int size_of() const;
void log() const;
void log_match(const Websocket__close& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class WebSocket__opcode : public Base_Type { // enum
friend class WebSocket__opcode_template;
public:
enum enum_type { Continuation__frame = 0, Text__frame = 1, Binary__frame = 2, Reserved__non__control3 = 3, Reserved__non__control4 = 4, Reserved__non__control5 = 5, Reserved__non__control6 = 6, Reserved__non__control7 = 7, Connection__Close = 8, Ping = 9, Pong = 10, Reserved__control11 = 11, Reserved__control12 = 12, Reserved__control13 = 13, Reserved__control14 = 14, Reserved__control15 = 15, UNKNOWN_VALUE = 16, UNBOUND_VALUE = 17 };
private:
enum_type enum_value;

public:
WebSocket__opcode();
WebSocket__opcode(int other_value);
WebSocket__opcode(enum_type other_value);
WebSocket__opcode(const WebSocket__opcode& other_value);

WebSocket__opcode& operator=(int other_value);
WebSocket__opcode& operator=(enum_type other_value);
WebSocket__opcode& operator=(const WebSocket__opcode& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const WebSocket__opcode& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const WebSocket__opcode& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const WebSocket__opcode& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const WebSocket__opcode& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const WebSocket__opcode& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const WebSocket__opcode& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const WebSocket__opcode& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class WebSocket__opcode_template : public Base_Template {
union {
WebSocket__opcode::enum_type single_value;
struct {
unsigned int n_values;
WebSocket__opcode_template *list_value;
} value_list;
};

void copy_template(const WebSocket__opcode_template& other_value);

public:
WebSocket__opcode_template();
WebSocket__opcode_template(template_sel other_value);
WebSocket__opcode_template(int other_value);
WebSocket__opcode_template(WebSocket__opcode::enum_type other_value);
WebSocket__opcode_template(const WebSocket__opcode& other_value);
WebSocket__opcode_template(const OPTIONAL<WebSocket__opcode>& other_value);
WebSocket__opcode_template(const WebSocket__opcode_template& other_value);
~WebSocket__opcode_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
WebSocket__opcode_template& operator=(template_sel other_value);
WebSocket__opcode_template& operator=(int other_value);
WebSocket__opcode_template& operator=(WebSocket__opcode::enum_type other_value);
WebSocket__opcode_template& operator=(const WebSocket__opcode& other_value);
WebSocket__opcode_template& operator=(const OPTIONAL<WebSocket__opcode>& other_value);
WebSocket__opcode_template& operator=(const WebSocket__opcode_template& other_value);

boolean match(WebSocket__opcode::enum_type other_value) const;
boolean match(const WebSocket__opcode& other_value) const;
WebSocket__opcode::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
WebSocket__opcode_template& list_item(unsigned int list_index);
void log() const;
void log_match(const WebSocket__opcode& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class WebSocket__payloads : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_data = 1, ALT_close__data = 2 };
private:
union_selection_type union_selection;
union {
OCTETSTRING *field_data;
Websocket__close *field_close__data;
};
void copy_value(const WebSocket__payloads& other_value);

public:
WebSocket__payloads();
WebSocket__payloads(const WebSocket__payloads& other_value);
~WebSocket__payloads();
WebSocket__payloads& operator=(const WebSocket__payloads& other_value);
boolean operator==(const WebSocket__payloads& other_value) const;
inline boolean operator!=(const WebSocket__payloads& other_value) const { return !(*this == other_value); }
OCTETSTRING& data();
const OCTETSTRING& data() const;
Websocket__close& close__data();
const Websocket__close& close__data() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
};

class WebSocket__payloads_template : public Base_Template {
union {
struct {
WebSocket__payloads::union_selection_type union_selection;
union {
OCTETSTRING_template *field_data;
Websocket__close_template *field_close__data;
};
} single_value;
struct {
unsigned int n_values;
WebSocket__payloads_template *list_value;
} value_list;
};
void copy_value(const WebSocket__payloads& other_value);

void copy_template(const WebSocket__payloads_template& other_value);

public:
WebSocket__payloads_template();
WebSocket__payloads_template(template_sel other_value);
WebSocket__payloads_template(const WebSocket__payloads& other_value);
WebSocket__payloads_template(const OPTIONAL<WebSocket__payloads>& other_value);
WebSocket__payloads_template(const WebSocket__payloads_template& other_value);
~WebSocket__payloads_template();
void clean_up();
WebSocket__payloads_template& operator=(template_sel other_value);
WebSocket__payloads_template& operator=(const WebSocket__payloads& other_value);
WebSocket__payloads_template& operator=(const OPTIONAL<WebSocket__payloads>& other_value);
WebSocket__payloads_template& operator=(const WebSocket__payloads_template& other_value);
boolean match(const WebSocket__payloads& other_value) const;
boolean is_value() const;WebSocket__payloads valueof() const;
WebSocket__payloads_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
OCTETSTRING_template& data();
const OCTETSTRING_template& data() const;
Websocket__close_template& close__data();
const Websocket__close_template& close__data() const;
boolean ischosen(WebSocket__payloads::union_selection_type checked_selection) const;
void log() const;
void log_match(const WebSocket__payloads& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class WebSocket__PDU {
  BITSTRING field_fin__bit;
  BITSTRING field_rsv1__bit;
  BITSTRING field_rsv2__bit;
  BITSTRING field_rsv3__bit;
  WebSocket__opcode field_opcode;
  BITSTRING field_mask__bit;
  INTEGER field_payload__len;
  OPTIONAL<OCTETSTRING> field_masking__key;
  OPTIONAL<WebSocket__payloads> field_payload__data;
  boolean bound_flag;
public:
  WebSocket__PDU();
  WebSocket__PDU(const BITSTRING& par_fin__bit,
    const BITSTRING& par_rsv1__bit,
    const BITSTRING& par_rsv2__bit,
    const BITSTRING& par_rsv3__bit,
    const WebSocket__opcode& par_opcode,
    const BITSTRING& par_mask__bit,
    const INTEGER& par_payload__len,
    const OPTIONAL<OCTETSTRING>& par_masking__key,
    const OPTIONAL<WebSocket__payloads>& par_payload__data);
  WebSocket__PDU(const WebSocket__PDU& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  WebSocket__PDU& operator=(const WebSocket__PDU& other_value);
  boolean operator==(const WebSocket__PDU& other_value) const;
  inline boolean operator!=(const WebSocket__PDU& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline BITSTRING& fin__bit()
    {return field_fin__bit;}
  inline const BITSTRING& fin__bit() const
    {return field_fin__bit;}
  inline BITSTRING& rsv1__bit()
    {return field_rsv1__bit;}
  inline const BITSTRING& rsv1__bit() const
    {return field_rsv1__bit;}
  inline BITSTRING& rsv2__bit()
    {return field_rsv2__bit;}
  inline const BITSTRING& rsv2__bit() const
    {return field_rsv2__bit;}
  inline BITSTRING& rsv3__bit()
    {return field_rsv3__bit;}
  inline const BITSTRING& rsv3__bit() const
    {return field_rsv3__bit;}
  inline WebSocket__opcode& opcode()
    {return field_opcode;}
  inline const WebSocket__opcode& opcode() const
    {return field_opcode;}
  inline BITSTRING& mask__bit()
    {return field_mask__bit;}
  inline const BITSTRING& mask__bit() const
    {return field_mask__bit;}
  inline INTEGER& payload__len()
    {return field_payload__len;}
  inline const INTEGER& payload__len() const
    {return field_payload__len;}
  inline OPTIONAL<OCTETSTRING>& masking__key()
    {return field_masking__key;}
  inline const OPTIONAL<OCTETSTRING>& masking__key() const
    {return field_masking__key;}
  inline OPTIONAL<WebSocket__payloads>& payload__data()
    {return field_payload__data;}
  inline const OPTIONAL<WebSocket__payloads>& payload__data() const
    {return field_payload__data;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
};

class WebSocket__PDU_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
WebSocket__PDU_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const WebSocket__PDU& other_value);
void copy_template(const WebSocket__PDU_template& other_value);

public:
WebSocket__PDU_template();
WebSocket__PDU_template(template_sel other_value);
WebSocket__PDU_template(const WebSocket__PDU& other_value);
WebSocket__PDU_template(const OPTIONAL<WebSocket__PDU>& other_value);
WebSocket__PDU_template(const WebSocket__PDU_template& other_value);
~WebSocket__PDU_template();
WebSocket__PDU_template& operator=(template_sel other_value);
WebSocket__PDU_template& operator=(const WebSocket__PDU& other_value);
WebSocket__PDU_template& operator=(const OPTIONAL<WebSocket__PDU>& other_value);
WebSocket__PDU_template& operator=(const WebSocket__PDU_template& other_value);
boolean match(const WebSocket__PDU& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
WebSocket__PDU valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
WebSocket__PDU_template& list_item(unsigned int list_index) const;
BITSTRING_template& fin__bit();
const BITSTRING_template& fin__bit() const;
BITSTRING_template& rsv1__bit();
const BITSTRING_template& rsv1__bit() const;
BITSTRING_template& rsv2__bit();
const BITSTRING_template& rsv2__bit() const;
BITSTRING_template& rsv3__bit();
const BITSTRING_template& rsv3__bit() const;
WebSocket__opcode_template& opcode();
const WebSocket__opcode_template& opcode() const;
BITSTRING_template& mask__bit();
const BITSTRING_template& mask__bit() const;
INTEGER_template& payload__len();
const INTEGER_template& payload__len() const;
OCTETSTRING_template& masking__key();
const OCTETSTRING_template& masking__key() const;
WebSocket__payloads_template& payload__data();
const WebSocket__payloads_template& payload__data() const;
int size_of() const;
void log() const;
void log_match(const WebSocket__PDU& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern void f__WebSocket__Encode(const WebSocket__PDU& pl__pdu, OCTETSTRING& pl__data, const BOOLEAN& pl__gen__maks, const BOOLEAN& pl__auto__maks);
extern INTEGER f__WebSocket__Decode(const OCTETSTRING& pl__data, WebSocket__PDU& pl__pdu, const BOOLEAN& pl__auto__maks);
extern INTEGER f__WebSocket__calc__length(const OCTETSTRING& pl__data);
extern OCTETSTRING f__WebSocket__Generate__Masking__Key();

/* Global variable declarations */

extern const BOOLEAN& m__Websocket__generate__masking__key;
extern const BOOLEAN& m__Websocket__auto__masking;
extern const BOOLEAN& f__WebSocket__Encode_pl__gen__maks_defval;
extern const BOOLEAN& f__WebSocket__Encode_pl__auto__maks_defval;
extern const BOOLEAN& f__WebSocket__Decode_pl__auto__maks_defval;
extern const XERdescriptor_t Websocket__close_status__code_xer_;
extern const TTCN_Typedescriptor_t Websocket__close_status__code_descr_;
extern const TTCN_Typedescriptor_t Websocket__close_descr_;
extern const XERdescriptor_t Websocket__close_data_xer_;
extern const TTCN_Typedescriptor_t Websocket__close_data_descr_;
extern const TTCN_Typedescriptor_t WebSocket__opcode_descr_;
extern const TTCN_Typedescriptor_t WebSocket__payloads_descr_;
extern const XERdescriptor_t WebSocket__payloads_data_xer_;
extern const TTCN_Typedescriptor_t WebSocket__payloads_data_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_fin__bit_raw_;
extern const XERdescriptor_t WebSocket__PDU_fin__bit_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_fin__bit_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_rsv1__bit_raw_;
extern const XERdescriptor_t WebSocket__PDU_rsv1__bit_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_rsv1__bit_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_rsv2__bit_raw_;
extern const XERdescriptor_t WebSocket__PDU_rsv2__bit_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_rsv2__bit_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_rsv3__bit_raw_;
extern const XERdescriptor_t WebSocket__PDU_rsv3__bit_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_rsv3__bit_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_mask__bit_raw_;
extern const XERdescriptor_t WebSocket__PDU_mask__bit_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_mask__bit_descr_;
extern const XERdescriptor_t WebSocket__PDU_payload__len_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_payload__len_descr_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_descr_;
extern const TTCN_RAWdescriptor_t WebSocket__PDU_masking__key_raw_;
extern const XERdescriptor_t WebSocket__PDU_masking__key_xer_;
extern const TTCN_Typedescriptor_t WebSocket__PDU_masking__key_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
