// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 11:34:10 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "jabber_client.hh"

namespace jabber__client {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x1a, 0x13, 0xdd, 0xb8, 0xf9, 0x2d, 0x26, 0x85, 0x72, 0x90, 0xc2, 0x5e, 0x5b, 0x2a, 0x95, 0xb6 };

/* Global variable definitions */

const XERdescriptor_t       Message_choice__list_xer_ = { {"choice_list>\n", "choice_list>\n"}, {13, 13}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, &Message_choice__list_0_xer_ };
const TTCN_JSONdescriptor_t Message_choice__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Message_choice__list_descr_ = { "@jabber_client.Message.choice_list", NULL, NULL, NULL, &Message_choice__list_xer_, &Message_choice__list_json_, &Message_choice__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_choice__list_0_xer_ = { {"CHOICE>\n", "CHOICE>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Message_choice__list_0_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Message_choice__list_0_descr_ = { "@jabber_client.Message.choice_list.CHOICE", NULL, NULL, NULL, &Message_choice__list_0_xer_, &Message_choice__list_0_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subject_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subject_base_descr_ = { "@jabber_client.Subject.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subject_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subject_xer_ = { {"Subject>\n", "subject>\n"}, {9, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subject_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subject_descr_ = { "@jabber_client.Subject", NULL, NULL, NULL, &Subject_xer_, &Subject_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subject_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subject_lang_descr_ = { "@jabber_client.Subject.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Subject_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_choice__list_0_subject_xer_ = { {"subject>\n", "subject>\n"}, {9, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_choice__list_0_subject_descr_ = { "@jabber_client.Message.choice_list.CHOICE.subject", NULL, NULL, NULL, &Message_choice__list_0_subject_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Body_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Body_base_descr_ = { "@jabber_client.Body.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Body_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Body_xer_ = { {"Body>\n", "body>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Body_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Body_descr_ = { "@jabber_client.Body", NULL, NULL, NULL, &Body_xer_, &Body_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Body_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Body_lang_descr_ = { "@jabber_client.Body.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Body_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_choice__list_0_body_xer_ = { {"body>\n", "body>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_choice__list_0_body_descr_ = { "@jabber_client.Message.choice_list.CHOICE.body", NULL, NULL, NULL, &Message_choice__list_0_body_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Thread_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Thread_base_descr_ = { "@jabber_client.Thread.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Thread_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Thread_xer_ = { {"Thread>\n", "thread>\n"}, {8, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Thread_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Thread_descr_ = { "@jabber_client.Thread", NULL, NULL, NULL, &Thread_xer_, &Thread_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Thread_parent_xer_ = { {"parent>\n", "parent>\n"}, {8, 8}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Thread_parent_descr_ = { "@jabber_client.Thread.parent", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Thread_parent_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_choice__list_0_thread_xer_ = { {"thread>\n", "thread>\n"}, {8, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_choice__list_0_thread_descr_ = { "@jabber_client.Message.choice_list.CHOICE.thread", NULL, NULL, NULL, &Message_choice__list_0_thread_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_elem__list_xer_ = { {"elem_list>\n", "elem_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, &Message_elem__list_0_xer_ };
const TTCN_JSONdescriptor_t Message_elem__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Message_elem__list_descr_ = { "@jabber_client.Message.elem_list", NULL, NULL, NULL, &Message_elem__list_xer_, &Message_elem__list_json_, &Message_elem__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const char* Message_elem__list_0_ns_uris_[] = {"", "jabber:client"};
const XERdescriptor_t       Message_elem__list_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |ANY_ELEMENT |ANY_EXCEPT, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 2, Message_elem__list_0_ns_uris_, NULL };
const TTCN_Typedescriptor_t Message_elem__list_0_descr_ = { "@jabber_client.Message.elem_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Message_elem__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_xer_ = { {"Message>\n", "message>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Message_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Message_descr_ = { "@jabber_client.Message", NULL, NULL, NULL, &Message_xer_, &Message_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_from___xer_ = { {"from_>\n", "from>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_from___descr_ = { "@jabber_client.Message.from_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Message_from___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_id_xer_ = { {"id>\n", "id>\n"}, {4, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_id_descr_ = { "@jabber_client.Message.id", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Message_id_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_lang_descr_ = { "@jabber_client.Message.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Message_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_to___xer_ = { {"to_>\n", "to>\n"}, {5, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_to___descr_ = { "@jabber_client.Message.to_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Message_to___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
Message_type__ Message_type___dfe;
const XERdescriptor_t       Message_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE, &Message_type___dfe, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Message_type___json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Message_type___descr_ = { "@jabber_client.Message.type_", NULL, NULL, NULL, &Message_type___xer_, &Message_type___json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Error_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Error_type___json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Error_type___descr_ = { "@jabber_client.Error.type_", NULL, NULL, NULL, &Error_type___xer_, &Error_type___json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Error_stanzaErrorGroup_xer_ = { {"stanzaErrorGroup>\n", "stanzaErrorGroup>\n"}, {18, 18}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Error_stanzaErrorGroup_descr_ = { "@jabber_client.Error.stanzaErrorGroup", NULL, NULL, NULL, &Error_stanzaErrorGroup_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Error_xer_ = { {"Error>\n", "error>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Error_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Error_descr_ = { "@jabber_client.Error", NULL, NULL, NULL, &Error_xer_, &Error_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Error_by_xer_ = { {"by>\n", "by>\n"}, {4, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Error_by_descr_ = { "@jabber_client.Error.by", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Error_by_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Error_text_xer_ = { {"text>\n", "text>\n"}, {6, 6}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Error_text_descr_ = { "@jabber_client.Error.text", NULL, NULL, NULL, &Error_text_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Message_error___xer_ = { {"error_>\n", "error>\n"}, {8, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Message_error___descr_ = { "@jabber_client.Message.error_", NULL, NULL, NULL, &Message_error___xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_choice__list_xer_ = { {"choice_list>\n", "choice_list>\n"}, {13, 13}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, &Presence_choice__list_0_xer_ };
const TTCN_JSONdescriptor_t Presence_choice__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Presence_choice__list_descr_ = { "@jabber_client.Presence.choice_list", NULL, NULL, NULL, &Presence_choice__list_xer_, &Presence_choice__list_json_, &Presence_choice__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_choice__list_0_xer_ = { {"CHOICE>\n", "CHOICE>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Presence_choice__list_0_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Presence_choice__list_0_descr_ = { "@jabber_client.Presence.choice_list.CHOICE", NULL, NULL, NULL, &Presence_choice__list_0_xer_, &Presence_choice__list_0_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Show_xer_ = { {"Show>\n", "show>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Show_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Show_descr_ = { "@jabber_client.Show", NULL, NULL, NULL, &Show_xer_, &Show_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_choice__list_0_show_xer_ = { {"show>\n", "show>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_choice__list_0_show_descr_ = { "@jabber_client.Presence.choice_list.CHOICE.show", NULL, NULL, NULL, &Presence_choice__list_0_show_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       String1024_xer_ = { {"String1024>\n", "string1024>\n"}, {12, 12}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t String1024_descr_ = { "@jabber_client.String1024", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &String1024_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Status_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Status_base_descr_ = { "@jabber_client.Status.base", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Status_base_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Status_xer_ = { {"Status>\n", "status>\n"}, {8, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Status_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Status_descr_ = { "@jabber_client.Status", NULL, NULL, NULL, &Status_xer_, &Status_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Status_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Status_lang_descr_ = { "@jabber_client.Status.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Status_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_choice__list_0_status_xer_ = { {"status>\n", "status>\n"}, {8, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_choice__list_0_status_descr_ = { "@jabber_client.Presence.choice_list.CHOICE.status", NULL, NULL, NULL, &Presence_choice__list_0_status_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Priority_xer_ = { {"Priority>\n", "priority>\n"}, {10, 10}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Priority_descr_ = { "@jabber_client.Priority", &INTEGER_ber_, &UsefulTtcn3Types::byte_raw_, &INTEGER_text_, &Priority_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_choice__list_0_priority_xer_ = { {"priority>\n", "priority>\n"}, {10, 10}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_choice__list_0_priority_descr_ = { "@jabber_client.Presence.choice_list.CHOICE.priority", &INTEGER_ber_, &UsefulTtcn3Types::byte_raw_, &INTEGER_text_, &Presence_choice__list_0_priority_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_elem__list_xer_ = { {"elem_list>\n", "elem_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, &Presence_elem__list_0_xer_ };
const TTCN_JSONdescriptor_t Presence_elem__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Presence_elem__list_descr_ = { "@jabber_client.Presence.elem_list", NULL, NULL, NULL, &Presence_elem__list_xer_, &Presence_elem__list_json_, &Presence_elem__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const char* Presence_elem__list_0_ns_uris_[] = {"", "jabber:client"};
const XERdescriptor_t       Presence_elem__list_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |ANY_ELEMENT |ANY_EXCEPT, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 2, Presence_elem__list_0_ns_uris_, NULL };
const TTCN_Typedescriptor_t Presence_elem__list_0_descr_ = { "@jabber_client.Presence.elem_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Presence_elem__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_xer_ = { {"Presence>\n", "presence>\n"}, {10, 10}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Presence_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Presence_descr_ = { "@jabber_client.Presence", NULL, NULL, NULL, &Presence_xer_, &Presence_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_from___xer_ = { {"from_>\n", "from>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_from___descr_ = { "@jabber_client.Presence.from_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Presence_from___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_id_xer_ = { {"id>\n", "id>\n"}, {4, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_id_descr_ = { "@jabber_client.Presence.id", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Presence_id_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_lang_descr_ = { "@jabber_client.Presence.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Presence_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_to___xer_ = { {"to_>\n", "to>\n"}, {5, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_to___descr_ = { "@jabber_client.Presence.to_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Presence_to___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Presence_type___json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Presence_type___descr_ = { "@jabber_client.Presence.type_", NULL, NULL, NULL, &Presence_type___xer_, &Presence_type___json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Presence_error___xer_ = { {"error_>\n", "error>\n"}, {8, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Presence_error___descr_ = { "@jabber_client.Presence.error_", NULL, NULL, NULL, &Presence_error___xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_id_xer_ = { {"id>\n", "id>\n"}, {4, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Iq_id_descr_ = { "@jabber_client.Iq.id", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Iq_id_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Iq_type___json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Iq_type___descr_ = { "@jabber_client.Iq.type_", NULL, NULL, NULL, &Iq_type___xer_, &Iq_type___json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_xer_ = { {"Iq>\n", "iq>\n"}, {4, 4}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Iq_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Iq_descr_ = { "@jabber_client.Iq", NULL, NULL, NULL, &Iq_xer_, &Iq_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_from___xer_ = { {"from_>\n", "from>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Iq_from___descr_ = { "@jabber_client.Iq.from_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Iq_from___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_lang_xer_ = { {"lang>\n", "lang>\n"}, {6, 6}, 0 |XER_ATTRIBUTE, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Iq_lang_descr_ = { "@jabber_client.Iq.lang", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Iq_lang_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_to___xer_ = { {"to_>\n", "to>\n"}, {5, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Iq_to___descr_ = { "@jabber_client.Iq.to_", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Iq_to___xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const char* Iq_elem_ns_uris_[] = {"", "jabber:client"};
const XERdescriptor_t       Iq_elem_xer_ = { {"elem>\n", "elem>\n"}, {6, 6}, 0 |ANY_ELEMENT |ANY_EXCEPT, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 2, Iq_elem_ns_uris_, NULL };
const TTCN_Typedescriptor_t Iq_elem_descr_ = { "@jabber_client.Iq.elem", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Iq_elem_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Iq_error___xer_ = { {"error_>\n", "error>\n"}, {8, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 10, 0, NULL, NULL };
const TTCN_Typedescriptor_t Iq_error___descr_ = { "@jabber_client.Iq.error_", NULL, NULL, NULL, &Iq_error___xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { "urn:ietf:params:xml:ns:xmpp-stanzas", "err" },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "jabber:client", "tq0007" },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "http://www.w3.org/2001/XMLSchema-instance", "xsi" }
};

TTCN_Module module_object("jabber_client", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const Message_choice__list_0 Message_choice__list::UNBOUND_ELEM;
Message_choice__list::Message_choice__list()
{
val_ptr = NULL;
}

Message_choice__list::Message_choice__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Message_choice__list::Message_choice__list(const Message_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Message.choice_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Message_choice__list::~Message_choice__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Message_choice__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Message_choice__list& Message_choice__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Message_choice__list& Message_choice__list::operator=(const Message_choice__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @jabber_client.Message.choice_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Message_choice__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Message.choice_list.");
return val_ptr->n_elements == 0 ;
}

boolean Message_choice__list::operator==(const Message_choice__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Message.choice_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Message.choice_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Message_choice__list_0& Message_choice__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Message.choice_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Message_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Message_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Message_choice__list_0;
}
return *val_ptr->value_elements[index_value];
}

Message_choice__list_0& Message_choice__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Message.choice_list.");
return (*this)[(int)index_value];
}

const Message_choice__list_0& Message_choice__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @jabber_client.Message.choice_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Message.choice_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @jabber_client.Message.choice_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Message_choice__list_0& Message_choice__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Message.choice_list.");
return (*this)[(int)index_value];
}

Message_choice__list Message_choice__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Message_choice__list Message_choice__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Message_choice__list Message_choice__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Message_choice__list Message_choice__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @jabber_client.Message.choice_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Message_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Message_choice__list_0(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Message_choice__list Message_choice__list::operator+(const Message_choice__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @jabber_client.Message.choice_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Message_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Message_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Message_choice__list_0(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Message_choice__list Message_choice__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @jabber_client.Message.choice_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@jabber_client.Message.choice_list","element");
Message_choice__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Message_choice__list_0(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Message_choice__list Message_choice__list::replace(int index, int len, const Message_choice__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @jabber_client.Message.choice_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @jabber_client.Message.choice_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@jabber_client.Message.choice_list","element");
Message_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Message_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Message_choice__list_0(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Message_choice__list_0(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Message_choice__list Message_choice__list::replace(int index, int len, const Message_choice__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Message_choice__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @jabber_client.Message.choice_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Message_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Message_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Message_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @jabber_client.Message.choice_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Message_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Message_choice__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Message_choice__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @jabber_client.Message.choice_list.");
return val_ptr->n_elements;
}

int Message_choice__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @jabber_client.Message.choice_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Message_choice__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Message_choice__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@jabber_client.Message.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@jabber_client.Message.choice_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@jabber_client.Message.choice_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Message_choice__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Message_choice__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @jabber_client.Message.choice_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Message_choice__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @jabber_client.Message.choice_list.");
val_ptr->value_elements = (Message_choice__list_0**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Message_choice__list_0;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Message_choice__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Message_choice__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Message_choice__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Message_choice__list_0::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Message_choice__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Message_choice__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Message_choice__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Message_choice__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Message.choice_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Message_choice__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Message_choice__list_0* val = new Message_choice__list_0;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Message_choice__list_0**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Message_choice__list_template::copy_value(const Message_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @jabber_client.Message.choice_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Message_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Message_choice__list_0_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Message_choice__list_0_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Message_choice__list_template::copy_template(const Message_choice__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Message_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Message_choice__list_0_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Message_choice__list_0_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Message_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Message.choice_list.");
break;
}
set_selection(other_value);
}

boolean Message_choice__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Message_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Message_choice__list*)value_ptr)[value_index]);
else return ((const Message_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Message_choice__list_template::Message_choice__list_template()
{
}

Message_choice__list_template::Message_choice__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Message_choice__list_template::Message_choice__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Message_choice__list_template::Message_choice__list_template(const Message_choice__list& other_value)
{
copy_value(other_value);
}

Message_choice__list_template::Message_choice__list_template(const OPTIONAL<Message_choice__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Message.choice_list from an unbound optional field.");
}
}

Message_choice__list_template::Message_choice__list_template(const Message_choice__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Message_choice__list_template::~Message_choice__list_template()
{
clean_up();
}

void Message_choice__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Message_choice__list_template& Message_choice__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Message_choice__list_template& Message_choice__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Message_choice__list_template& Message_choice__list_template::operator=(const Message_choice__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Message_choice__list_template& Message_choice__list_template::operator=(const OPTIONAL<Message_choice__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Message.choice_list.");
}
return *this;
}

Message_choice__list_template& Message_choice__list_template::operator=(const Message_choice__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Message_choice__list_0_template& Message_choice__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Message.choice_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Message.choice_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Message_choice__list_0_template& Message_choice__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Message.choice_list.");
return (*this)[(int)index_value];
}

const Message_choice__list_0_template& Message_choice__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Message.choice_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Message.choice_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @jabber_client.Message.choice_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Message_choice__list_0_template& Message_choice__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Message.choice_list.");
return (*this)[(int)index_value];
}

void Message_choice__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @jabber_client.Message.choice_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Message_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Message_choice__list_0_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Message_choice__list_0_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Message_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Message_choice__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Message_choice__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.choice_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @jabber_client.Message.choice_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @jabber_client.Message.choice_list");
}

boolean Message_choice__list_template::match(const Message_choice__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @jabber_client.Message.choice_list.");
}
return FALSE;
}

boolean Message_choice__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Message_choice__list Message_choice__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @jabber_client.Message.choice_list.");
Message_choice__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Message_choice__list Message_choice__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Message_choice__list Message_choice__list_template::replace(int index, int len, const Message_choice__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Message_choice__list Message_choice__list_template::replace(int index, int len, const Message_choice__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Message_choice__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Message_choice__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @jabber_client.Message.choice_list.");
}
set_selection(template_type);
}

Message_choice__list_template& Message_choice__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @jabber_client.Message.choice_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @jabber_client.Message.choice_list.");
return value_list.list_value[list_index];
}

void Message_choice__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Message_choice__list_template::log_match(const Message_choice__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Message_choice__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Message.choice_list.");
}
}

void Message_choice__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @jabber_client.Message.choice_list.");
single_value.value_elements = (Message_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Message_choice__list_0_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Message_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @jabber_client.Message.choice_list.");
}
}

boolean Message_choice__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Message_choice__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Message_choice__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@jabber_client.Message.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@jabber_client.Message.choice_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Message_choice__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@jabber_client.Message.choice_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Message.choice_list");
}

void Message_choice__list_0::copy_value(const Message_choice__list_0& other_value)
{
switch (other_value.union_selection) {
case ALT_subject:
field_subject = new Subject(*other_value.field_subject);
break;
case ALT_body:
field_body = new Body(*other_value.field_body);
break;
case ALT_thread:
field_thread = new Thread(*other_value.field_thread);
break;
default:
TTCN_error("Assignment of an unbound union value of type @jabber_client.Message.choice_list.CHOICE.");
}
union_selection = other_value.union_selection;
}

Message_choice__list_0::Message_choice__list_0()
{
union_selection = UNBOUND_VALUE;
}

Message_choice__list_0::Message_choice__list_0(const Message_choice__list_0& other_value)
: Base_Type(){
copy_value(other_value);
}

Message_choice__list_0::~Message_choice__list_0()
{
clean_up();
}

Message_choice__list_0& Message_choice__list_0::operator=(const Message_choice__list_0& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Message_choice__list_0::operator==(const Message_choice__list_0& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @jabber_client.Message.choice_list.CHOICE.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @jabber_client.Message.choice_list.CHOICE.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_subject:
return *field_subject == *other_value.field_subject;
case ALT_body:
return *field_body == *other_value.field_body;
case ALT_thread:
return *field_thread == *other_value.field_thread;
default:
return FALSE;
}
}

Subject& Message_choice__list_0::subject()
{
if (union_selection != ALT_subject) {
clean_up();
field_subject = new Subject;
union_selection = ALT_subject;
}
return *field_subject;
}

const Subject& Message_choice__list_0::subject() const
{
if (union_selection != ALT_subject) TTCN_error("Using non-selected field subject in a value of union type @jabber_client.Message.choice_list.CHOICE.");
return *field_subject;
}

Body& Message_choice__list_0::body()
{
if (union_selection != ALT_body) {
clean_up();
field_body = new Body;
union_selection = ALT_body;
}
return *field_body;
}

const Body& Message_choice__list_0::body() const
{
if (union_selection != ALT_body) TTCN_error("Using non-selected field body in a value of union type @jabber_client.Message.choice_list.CHOICE.");
return *field_body;
}

Thread& Message_choice__list_0::thread()
{
if (union_selection != ALT_thread) {
clean_up();
field_thread = new Thread;
union_selection = ALT_thread;
}
return *field_thread;
}

const Thread& Message_choice__list_0::thread() const
{
if (union_selection != ALT_thread) TTCN_error("Using non-selected field thread in a value of union type @jabber_client.Message.choice_list.CHOICE.");
return *field_thread;
}

boolean Message_choice__list_0::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @jabber_client.Message.choice_list.CHOICE.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @jabber_client.Message.choice_list.CHOICE.");
return union_selection == checked_selection;
}

boolean Message_choice__list_0::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Message_choice__list_0::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_subject: return field_subject->is_value();
case ALT_body: return field_body->is_value();
case ALT_thread: return field_thread->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Message_choice__list_0::clean_up()
{
switch (union_selection) {
case ALT_subject:
  delete field_subject;
  break;
case ALT_body:
  delete field_body;
  break;
case ALT_thread:
  delete field_thread;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Message_choice__list_0::log() const
{
switch (union_selection) {
case ALT_subject:
TTCN_Logger::log_event_str("{ subject := ");
field_subject->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_body:
TTCN_Logger::log_event_str("{ body := ");
field_body->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_thread:
TTCN_Logger::log_event_str("{ thread := ");
field_thread->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Message_choice__list_0::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@jabber_client.Message.choice_list.CHOICE'");
    }
    if (strcmp("subject", param_field) == 0) {
      subject().set_param(param);
      return;
    } else if (strcmp("body", param_field) == 0) {
      body().set_param(param);
      return;
    } else if (strcmp("thread", param_field) == 0) {
      thread().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@jabber_client.Message.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "subject")) {
    subject().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "body")) {
    body().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "thread")) {
    thread().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @jabber_client.Message.choice_list.CHOICE.", mp_last->get_id()->get_name());
}

void Message_choice__list_0::set_implicit_omit()
{
switch (union_selection) {
case ALT_subject:
field_subject->set_implicit_omit(); break;
case ALT_body:
field_body->set_implicit_omit(); break;
case ALT_thread:
field_thread->set_implicit_omit(); break;
default: break;
}
}

void Message_choice__list_0::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_subject:
field_subject->encode_text(text_buf);
break;
case ALT_body:
field_body->encode_text(text_buf);
break;
case ALT_thread:
field_thread->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @jabber_client.Message.choice_list.CHOICE.");
}
}

void Message_choice__list_0::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_subject:
subject().decode_text(text_buf);
break;
case ALT_body:
body().decode_text(text_buf);
break;
case ALT_thread:
thread().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @jabber_client.Message.choice_list.CHOICE.");
}
}

void Message_choice__list_0::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Message_choice__list_0::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Message_choice__list_0::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (Subject::can_start(name, uri, Message_choice__list_0_subject_xer_, flavor)) return true;
  if (Body::can_start(name, uri, Message_choice__list_0_body_xer_, flavor)) return true;
  if (Thread::can_start(name, uri, Message_choice__list_0_thread_xer_, flavor)) return true;
  return false;
}

char ** Message_choice__list_0::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_subject:
      new_ns = field_subject->collect_ns(Message_choice__list_0_subject_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    case ALT_body:
      new_ns = field_body->collect_ns(Message_choice__list_0_body_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Message_choice__list_0_body_xer_.namelens[1] > 2);
      break;
    case ALT_thread:
      new_ns = field_thread->collect_ns(Message_choice__list_0_thread_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Message_choice__list_0_thread_xer_.namelens[1] > 2);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Message_choice__list_0::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Message_choice__list_0::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_subject:
    ec_1.set_msg("subject': ");
    field_subject->XER_encode(Message_choice__list_0_subject_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_body:
    ec_1.set_msg("body': ");
    field_body->XER_encode(Message_choice__list_0_body_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_thread:
    ec_1.set_msg("thread': ");
    field_thread->XER_encode(Message_choice__list_0_thread_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Message_choice__list_0::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (Subject::can_start(elem_name, ns_uri, Message_choice__list_0_subject_xer_, flavor_1) || (Message_choice__list_0_subject_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("subject': ");
      subject().XER_decode(Message_choice__list_0_subject_xer_, p_reader, flavor_1, 0);
      if (!subject().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Body::can_start(elem_name, ns_uri, Message_choice__list_0_body_xer_, flavor_1) || (Message_choice__list_0_body_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("body': ");
      body().XER_decode(Message_choice__list_0_body_xer_, p_reader, flavor_1, 0);
      if (!body().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Thread::can_start(elem_name, ns_uri, Message_choice__list_0_thread_xer_, flavor_1) || (Message_choice__list_0_thread_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("thread': ");
      thread().XER_decode(Message_choice__list_0_thread_xer_, p_reader, flavor_1, 0);
      if (!thread().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Message_choice__list_0::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_subject:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subject");
    enc_len += field_subject->JSON_encode(Message_choice__list_0_subject_descr_, p_tok);
    break;
  case ALT_body:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "body");
    enc_len += field_body->JSON_encode(Message_choice__list_0_body_descr_, p_tok);
    break;
  case ALT_thread:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "thread");
    enc_len += field_thread->JSON_encode(Message_choice__list_0_thread_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @jabber_client.Message.choice_list.CHOICE.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Message_choice__list_0::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "subject", name_len)) {
      int ret_val = subject().JSON_decode(Message_choice__list_0_subject_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subject");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "body", name_len)) {
      int ret_val = body().JSON_decode(Message_choice__list_0_body_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "body");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "thread", name_len)) {
      int ret_val = thread().JSON_decode(Message_choice__list_0_thread_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "thread");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Message_choice__list_0_template::copy_value(const Message_choice__list_0& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
single_value.field_subject = new Subject_template(other_value.subject());
break;
case Message_choice__list_0::ALT_body:
single_value.field_body = new Body_template(other_value.body());
break;
case Message_choice__list_0::ALT_thread:
single_value.field_thread = new Thread_template(other_value.thread());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @jabber_client.Message.choice_list.CHOICE.");
}
set_selection(SPECIFIC_VALUE);
}

void Message_choice__list_0_template::copy_template(const Message_choice__list_0_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
single_value.field_subject = new Subject_template(*other_value.single_value.field_subject);
break;
case Message_choice__list_0::ALT_body:
single_value.field_body = new Body_template(*other_value.single_value.field_body);
break;
case Message_choice__list_0::ALT_thread:
single_value.field_thread = new Thread_template(*other_value.single_value.field_thread);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @jabber_client.Message.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Message_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @jabber_client.Message.choice_list.CHOICE.");
}
set_selection(other_value);
}

Message_choice__list_0_template::Message_choice__list_0_template()
{
}

Message_choice__list_0_template::Message_choice__list_0_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Message_choice__list_0_template::Message_choice__list_0_template(const Message_choice__list_0& other_value)
{
copy_value(other_value);
}

Message_choice__list_0_template::Message_choice__list_0_template(const OPTIONAL<Message_choice__list_0>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @jabber_client.Message.choice_list.CHOICE from an unbound optional field.");
}
}

Message_choice__list_0_template::Message_choice__list_0_template(const Message_choice__list_0_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Message_choice__list_0_template::~Message_choice__list_0_template()
{
clean_up();
}

void Message_choice__list_0_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
delete single_value.field_subject;
break;
case Message_choice__list_0::ALT_body:
delete single_value.field_body;
break;
case Message_choice__list_0::ALT_thread:
delete single_value.field_thread;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Message_choice__list_0_template& Message_choice__list_0_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Message_choice__list_0_template& Message_choice__list_0_template::operator=(const Message_choice__list_0& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Message_choice__list_0_template& Message_choice__list_0_template::operator=(const OPTIONAL<Message_choice__list_0>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
return *this;
}

Message_choice__list_0_template& Message_choice__list_0_template::operator=(const Message_choice__list_0_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Message_choice__list_0_template::match(const Message_choice__list_0& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Message_choice__list_0::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Message_choice__list_0::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Message_choice__list_0::ALT_subject:
return single_value.field_subject->match(other_value.subject());
case Message_choice__list_0::ALT_body:
return single_value.field_body->match(other_value.body());
case Message_choice__list_0::ALT_thread:
return single_value.field_thread->match(other_value.thread());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @jabber_client.Message.choice_list.CHOICE.");
}
return FALSE;
}

boolean Message_choice__list_0_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
return single_value.field_subject->is_value();
case Message_choice__list_0::ALT_body:
return single_value.field_body->is_value();
case Message_choice__list_0::ALT_thread:
return single_value.field_thread->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
}

Message_choice__list_0 Message_choice__list_0_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @jabber_client.Message.choice_list.CHOICE.");
Message_choice__list_0 ret_val;
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
ret_val.subject() = single_value.field_subject->valueof();
break;
case Message_choice__list_0::ALT_body:
ret_val.body() = single_value.field_body->valueof();
break;
case Message_choice__list_0::ALT_thread:
ret_val.thread() = single_value.field_thread->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
return ret_val;
}

Message_choice__list_0_template& Message_choice__list_0_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @jabber_client.Message.choice_list.CHOICE.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @jabber_client.Message.choice_list.CHOICE.");
return value_list.list_value[list_index];
}
void Message_choice__list_0_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @jabber_client.Message.choice_list.CHOICE.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Message_choice__list_0_template[list_length];
}

Subject_template& Message_choice__list_0_template::subject()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Message_choice__list_0::ALT_subject) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_subject = new Subject_template(ANY_VALUE);
else single_value.field_subject = new Subject_template;
single_value.union_selection = Message_choice__list_0::ALT_subject;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_subject;
}

const Subject_template& Message_choice__list_0_template::subject() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field subject in a non-specific template of union type @jabber_client.Message.choice_list.CHOICE.");
if (single_value.union_selection != Message_choice__list_0::ALT_subject) TTCN_error("Accessing non-selected field subject in a template of union type @jabber_client.Message.choice_list.CHOICE.");
return *single_value.field_subject;
}

Body_template& Message_choice__list_0_template::body()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Message_choice__list_0::ALT_body) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_body = new Body_template(ANY_VALUE);
else single_value.field_body = new Body_template;
single_value.union_selection = Message_choice__list_0::ALT_body;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_body;
}

const Body_template& Message_choice__list_0_template::body() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field body in a non-specific template of union type @jabber_client.Message.choice_list.CHOICE.");
if (single_value.union_selection != Message_choice__list_0::ALT_body) TTCN_error("Accessing non-selected field body in a template of union type @jabber_client.Message.choice_list.CHOICE.");
return *single_value.field_body;
}

Thread_template& Message_choice__list_0_template::thread()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Message_choice__list_0::ALT_thread) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_thread = new Thread_template(ANY_VALUE);
else single_value.field_thread = new Thread_template;
single_value.union_selection = Message_choice__list_0::ALT_thread;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_thread;
}

const Thread_template& Message_choice__list_0_template::thread() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field thread in a non-specific template of union type @jabber_client.Message.choice_list.CHOICE.");
if (single_value.union_selection != Message_choice__list_0::ALT_thread) TTCN_error("Accessing non-selected field thread in a template of union type @jabber_client.Message.choice_list.CHOICE.");
return *single_value.field_thread;
}

boolean Message_choice__list_0_template::ischosen(Message_choice__list_0::union_selection_type checked_selection) const
{
if (checked_selection == Message_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @jabber_client.Message.choice_list.CHOICE.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Message_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @jabber_client.Message.choice_list.CHOICE.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @jabber_client.Message.choice_list.CHOICE containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @jabber_client.Message.choice_list.CHOICE, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @jabber_client.Message.choice_list.CHOICE");
}
return FALSE;
}

void Message_choice__list_0_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
TTCN_Logger::log_event_str("{ subject := ");
single_value.field_subject->log();
TTCN_Logger::log_event_str(" }");
break;
case Message_choice__list_0::ALT_body:
TTCN_Logger::log_event_str("{ body := ");
single_value.field_body->log();
TTCN_Logger::log_event_str(" }");
break;
case Message_choice__list_0::ALT_thread:
TTCN_Logger::log_event_str("{ thread := ");
single_value.field_thread->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Message_choice__list_0_template::log_match(const Message_choice__list_0& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".subject");
single_value.field_subject->log_match(match_value.subject());
} else {
TTCN_Logger::log_event_str("{ subject := ");
single_value.field_subject->log_match(match_value.subject());
TTCN_Logger::log_event_str(" }");
}
break;
case Message_choice__list_0::ALT_body:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".body");
single_value.field_body->log_match(match_value.body());
} else {
TTCN_Logger::log_event_str("{ body := ");
single_value.field_body->log_match(match_value.body());
TTCN_Logger::log_event_str(" }");
}
break;
case Message_choice__list_0::ALT_thread:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".thread");
single_value.field_thread->log_match(match_value.thread());
} else {
TTCN_Logger::log_event_str("{ thread := ");
single_value.field_thread->log_match(match_value.thread());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Message_choice__list_0_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
single_value.field_subject->encode_text(text_buf);
break;
case Message_choice__list_0::ALT_body:
single_value.field_body->encode_text(text_buf);
break;
case Message_choice__list_0::ALT_thread:
single_value.field_thread->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @jabber_client.Message.choice_list.CHOICE.");
}
}

void Message_choice__list_0_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Message_choice__list_0::UNBOUND_VALUE;
Message_choice__list_0::union_selection_type new_selection = (Message_choice__list_0::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Message_choice__list_0::ALT_subject:
single_value.field_subject = new Subject_template;
single_value.field_subject->decode_text(text_buf);
break;
case Message_choice__list_0::ALT_body:
single_value.field_body = new Body_template;
single_value.field_body->decode_text(text_buf);
break;
case Message_choice__list_0::ALT_thread:
single_value.field_thread = new Thread_template;
single_value.field_thread->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @jabber_client.Message.choice_list.CHOICE.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Message_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @jabber_client.Message.choice_list.CHOICE.");
}
}

boolean Message_choice__list_0_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Message_choice__list_0_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Message_choice__list_0_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@jabber_client.Message.choice_list.CHOICE'");
    }
    if (strcmp("subject", param_field) == 0) {
      subject().set_param(param);
      return;
    } else if (strcmp("body", param_field) == 0) {
      body().set_param(param);
      return;
    } else if (strcmp("thread", param_field) == 0) {
      thread().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@jabber_client.Message.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@jabber_client.Message.choice_list.CHOICE");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "subject")) {
      subject().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "body")) {
      body().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "thread")) {
      thread().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @jabber_client.Message.choice_list.CHOICE.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@jabber_client.Message.choice_list.CHOICE");
  }
  is_ifpresent = param.get_ifpresent();
}

void Message_choice__list_0_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Message_choice__list_0::ALT_subject:
single_value.field_subject->check_restriction(t_res, t_name ? t_name : "@jabber_client.Message.choice_list.CHOICE");
return;
case Message_choice__list_0::ALT_body:
single_value.field_body->check_restriction(t_res, t_name ? t_name : "@jabber_client.Message.choice_list.CHOICE");
return;
case Message_choice__list_0::ALT_thread:
single_value.field_thread->check_restriction(t_res, t_name ? t_name : "@jabber_client.Message.choice_list.CHOICE");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @jabber_client.Message.choice_list.CHOICE.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Message.choice_list.CHOICE");
}

Subject::Subject()
{
  bound_flag = FALSE;
}

Subject::Subject(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_lang(par_lang),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Subject::Subject(const Subject& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Subject.");
bound_flag = TRUE;
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Subject::clean_up()
{
field_lang.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Subject& Subject::operator=(const Subject& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Subject.");
  bound_flag = TRUE;
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Subject::operator==(const Subject& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_lang==other_value.field_lang
  && field_base==other_value.field_base;
}

boolean Subject::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Subject::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Subject::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Subject");
  int ret_val = 1;
  if (field_lang.ispresent()) ret_val++;
  return ret_val;
}

void Subject::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Subject::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Subject'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Subject'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @jabber_client.Subject has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Subject: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Subject");
  }
}

void Subject::set_implicit_omit()
{
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Subject::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Subject.");
field_lang.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Subject::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_lang.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Subject::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subject::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subject::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_lang.collect_ns(Subject_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Subject_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subject::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (CHARSTRING::can_start(name, uri, Subject_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Subject_base_xer_, flavor)) return true;
  return false;
}

int Subject::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Subject_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Subject_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subject::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Subject_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Subject_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Subject_lang_xer_, 1) && check_namespace(ns_uri, Subject_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Subject_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Subject_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Subject_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subject::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Subject.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Subject_lang_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Subject_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subject::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Subject_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Subject_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Subject_template::single_value_struct {
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_base;
};

void Subject_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_lang = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Subject_template::copy_value(const Subject& other_value)
{
single_value = new single_value_struct;
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subject_template::copy_template(const Subject_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subject_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Subject.");
break;
}
set_selection(other_value);
}

Subject_template::Subject_template()
{
}

Subject_template::Subject_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subject_template::Subject_template(const Subject& other_value)
{
copy_value(other_value);
}

Subject_template::Subject_template(const OPTIONAL<Subject>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subject&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Subject from an unbound optional field.");
}
}

Subject_template::Subject_template(const Subject_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subject_template::~Subject_template()
{
clean_up();
}

Subject_template& Subject_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subject_template& Subject_template::operator=(const Subject& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subject_template& Subject_template::operator=(const OPTIONAL<Subject>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subject&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Subject.");
}
return *this;
}

Subject_template& Subject_template::operator=(const Subject_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subject_template::match(const Subject& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Subject.");
}
return FALSE;
}

boolean Subject_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Subject_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Subject_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subject Subject_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Subject.");
Subject ret_val;
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Subject_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Subject.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subject_template[list_length];
}

Subject_template& Subject_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Subject.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Subject.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Subject_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Subject_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Subject.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Subject_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Subject_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @jabber_client.Subject.");
return single_value->field_base;
}

int Subject_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Subject which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_lang.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Subject containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Subject containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Subject containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Subject containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Subject containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Subject.");
  }
  return 0;
}

void Subject_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subject_template::log_match(const Subject& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subject_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_lang.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Subject.");
}
}

void Subject_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_lang.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subject_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Subject.");
}
}

void Subject_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Subject'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Subject'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @jabber_client.Subject has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Subject: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Subject");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subject_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Subject");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@jabber_client.Subject");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Subject");
}

boolean Subject_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subject_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Body::Body()
{
  bound_flag = FALSE;
}

Body::Body(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_lang(par_lang),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Body::Body(const Body& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Body.");
bound_flag = TRUE;
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Body::clean_up()
{
field_lang.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Body& Body::operator=(const Body& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Body.");
  bound_flag = TRUE;
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Body::operator==(const Body& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_lang==other_value.field_lang
  && field_base==other_value.field_base;
}

boolean Body::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Body::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Body::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Body");
  int ret_val = 1;
  if (field_lang.ispresent()) ret_val++;
  return ret_val;
}

void Body::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Body::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Body'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Body'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @jabber_client.Body has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Body: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Body");
  }
}

void Body::set_implicit_omit()
{
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Body::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Body.");
field_lang.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Body::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_lang.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Body::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Body::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Body::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_lang.collect_ns(Body_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Body_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Body::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (CHARSTRING::can_start(name, uri, Body_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Body_base_xer_, flavor)) return true;
  return false;
}

int Body::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Body_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Body_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Body::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Body_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Body_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Body_lang_xer_, 1) && check_namespace(ns_uri, Body_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Body_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Body_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Body_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Body::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Body.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Body_lang_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Body_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Body::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Body_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Body_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Body_template::single_value_struct {
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_base;
};

void Body_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_lang = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Body_template::copy_value(const Body& other_value)
{
single_value = new single_value_struct;
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Body_template::copy_template(const Body_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Body_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Body.");
break;
}
set_selection(other_value);
}

Body_template::Body_template()
{
}

Body_template::Body_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Body_template::Body_template(const Body& other_value)
{
copy_value(other_value);
}

Body_template::Body_template(const OPTIONAL<Body>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Body&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Body from an unbound optional field.");
}
}

Body_template::Body_template(const Body_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Body_template::~Body_template()
{
clean_up();
}

Body_template& Body_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Body_template& Body_template::operator=(const Body& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Body_template& Body_template::operator=(const OPTIONAL<Body>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Body&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Body.");
}
return *this;
}

Body_template& Body_template::operator=(const Body_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Body_template::match(const Body& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Body.");
}
return FALSE;
}

boolean Body_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Body_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Body_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Body Body_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Body.");
Body ret_val;
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Body_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Body.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Body_template[list_length];
}

Body_template& Body_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Body.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Body.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Body_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Body_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Body.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Body_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Body_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @jabber_client.Body.");
return single_value->field_base;
}

int Body_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Body which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_lang.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Body containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Body containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Body containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Body containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Body containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Body.");
  }
  return 0;
}

void Body_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Body_template::log_match(const Body& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Body_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_lang.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Body.");
}
}

void Body_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_lang.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Body_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Body.");
}
}

void Body_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Body'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Body'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @jabber_client.Body has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Body: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Body");
  }
  is_ifpresent = param.get_ifpresent();
}

void Body_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Body");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@jabber_client.Body");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Body");
}

boolean Body_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Body_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Thread::Thread()
{
  bound_flag = FALSE;
}

Thread::Thread(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_parent,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_parent(par_parent),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Thread::Thread(const Thread& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Thread.");
bound_flag = TRUE;
if (other_value.parent().is_bound()) field_parent = other_value.parent();
else field_parent.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Thread::clean_up()
{
field_parent.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Thread& Thread::operator=(const Thread& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Thread.");
  bound_flag = TRUE;
  if (other_value.parent().is_bound()) field_parent = other_value.parent();
  else field_parent.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Thread::operator==(const Thread& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_parent==other_value.field_parent
  && field_base==other_value.field_base;
}

boolean Thread::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_parent.get_selection() || field_parent.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Thread::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_parent.get_selection() && !field_parent.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Thread::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Thread");
  int ret_val = 1;
  if (field_parent.ispresent()) ret_val++;
  return ret_val;
}

void Thread::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ parent := ");
field_parent.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Thread::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Thread'");
    }
    if (strcmp("parent", param_field) == 0) {
      parent().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Thread'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @jabber_client.Thread has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) parent().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "parent")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          parent().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Thread: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Thread");
  }
}

void Thread::set_implicit_omit()
{
if (!parent().is_bound()) parent() = OMIT_VALUE;
else parent().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Thread::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Thread.");
field_parent.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Thread::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_parent.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Thread::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Thread::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Thread::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_parent.collect_ns(Thread_parent_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Thread_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Thread::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Thread_parent_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Thread_base_xer_, flavor)) return true;
  return false;
}

int Thread::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("parent': ");
  tmp_len = field_parent.XER_encode(Thread_parent_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Thread_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Thread::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Thread_parent_xer_.dfeValue) field_parent = *static_cast<const UNIVERSAL_CHARSTRING*>(Thread_parent_xer_.dfeValue);
  else field_parent = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Thread_parent_xer_, 1) && check_namespace(ns_uri, Thread_parent_xer_)) {
      ec_1.set_msg("parent': ");
      field_parent.XER_decode(Thread_parent_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("parent': ");
    field_parent.XER_decode(Thread_parent_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Thread_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Thread::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Thread.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_parent.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "parent");
    enc_len += field_parent.JSON_encode(Thread_parent_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Thread_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Thread::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "parent", name_len)) {
        int ret_val = field_parent.JSON_decode(Thread_parent_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "parent");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Thread_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_parent.is_bound()) {
    field_parent = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Thread_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_parent;
UNIVERSAL_CHARSTRING_template field_base;
};

void Thread_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_parent = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Thread_template::copy_value(const Thread& other_value)
{
single_value = new single_value_struct;
if (other_value.parent().is_bound()) {
  if (other_value.parent().ispresent()) single_value->field_parent = other_value.parent()();
  else single_value->field_parent = OMIT_VALUE;
} else {
  single_value->field_parent.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Thread_template::copy_template(const Thread_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.parent().get_selection()) {
single_value->field_parent = other_value.parent();
} else {
single_value->field_parent.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Thread_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Thread.");
break;
}
set_selection(other_value);
}

Thread_template::Thread_template()
{
}

Thread_template::Thread_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Thread_template::Thread_template(const Thread& other_value)
{
copy_value(other_value);
}

Thread_template::Thread_template(const OPTIONAL<Thread>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Thread&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Thread from an unbound optional field.");
}
}

Thread_template::Thread_template(const Thread_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Thread_template::~Thread_template()
{
clean_up();
}

Thread_template& Thread_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Thread_template& Thread_template::operator=(const Thread& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Thread_template& Thread_template::operator=(const OPTIONAL<Thread>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Thread&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Thread.");
}
return *this;
}

Thread_template& Thread_template::operator=(const Thread_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Thread_template::match(const Thread& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.parent().is_bound()) return FALSE;
if((other_value.parent().ispresent() ? !single_value->field_parent.match((const UNIVERSAL_CHARSTRING&)other_value.parent()) : !single_value->field_parent.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Thread.");
}
return FALSE;
}

boolean Thread_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_parent.is_omit() || single_value->field_parent.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Thread_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_parent.is_omit() && !single_value->field_parent.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Thread_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Thread Thread_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Thread.");
Thread ret_val;
if (single_value->field_parent.is_omit()) ret_val.parent() = OMIT_VALUE;
else if (single_value->field_parent.is_bound()) {
ret_val.parent() = single_value->field_parent.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Thread_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Thread.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Thread_template[list_length];
}

Thread_template& Thread_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Thread.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Thread.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Thread_template::parent()
{
set_specific();
return single_value->field_parent;
}

const UNIVERSAL_CHARSTRING_template& Thread_template::parent() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field parent of a non-specific template of type @jabber_client.Thread.");
return single_value->field_parent;
}

UNIVERSAL_CHARSTRING_template& Thread_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Thread_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @jabber_client.Thread.");
return single_value->field_base;
}

int Thread_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Thread which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_parent.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Thread containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Thread containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Thread containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Thread containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Thread containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Thread.");
  }
  return 0;
}

void Thread_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ parent := ");
single_value->field_parent.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Thread_template::log_match(const Thread& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.parent().ispresent()){
if(!single_value->field_parent.match(match_value.parent())){
TTCN_Logger::log_logmatch_info(".parent");
single_value->field_parent.log_match(match_value.parent());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_parent.match_omit()){
 TTCN_Logger::log_logmatch_info(".parent := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_parent.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ parent := ");
if (match_value.parent().ispresent()) single_value->field_parent.log_match(match_value.parent());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_parent.log();
if (single_value->field_parent.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Thread_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_parent.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Thread.");
}
}

void Thread_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_parent.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Thread_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Thread.");
}
}

void Thread_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Thread'");
    }
    if (strcmp("parent", param_field) == 0) {
      parent().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Thread'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @jabber_client.Thread has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) parent().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "parent")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          parent().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Thread: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Thread");
  }
  is_ifpresent = param.get_ifpresent();
}

void Thread_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_parent.check_restriction(t_res, t_name ? t_name : "@jabber_client.Thread");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@jabber_client.Thread");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Thread");
}

boolean Thread_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Thread_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const UNIVERSAL_CHARSTRING Message_elem__list::UNBOUND_ELEM;
Message_elem__list::Message_elem__list()
{
val_ptr = NULL;
}

Message_elem__list::Message_elem__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Message_elem__list::Message_elem__list(const Message_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Message.elem_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Message_elem__list::~Message_elem__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Message_elem__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Message_elem__list& Message_elem__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Message_elem__list& Message_elem__list::operator=(const Message_elem__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @jabber_client.Message.elem_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Message_elem__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Message.elem_list.");
return val_ptr->n_elements == 0 ;
}

boolean Message_elem__list::operator==(const Message_elem__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Message.elem_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Message.elem_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

UNIVERSAL_CHARSTRING& Message_elem__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Message.elem_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new UNIVERSAL_CHARSTRING;
}
return *val_ptr->value_elements[index_value];
}

UNIVERSAL_CHARSTRING& Message_elem__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Message.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING& Message_elem__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @jabber_client.Message.elem_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Message.elem_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @jabber_client.Message.elem_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const UNIVERSAL_CHARSTRING& Message_elem__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Message.elem_list.");
return (*this)[(int)index_value];
}

Message_elem__list Message_elem__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Message_elem__list Message_elem__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Message_elem__list Message_elem__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Message_elem__list Message_elem__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @jabber_client.Message.elem_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Message_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Message_elem__list Message_elem__list::operator+(const Message_elem__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @jabber_client.Message.elem_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Message_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Message_elem__list Message_elem__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @jabber_client.Message.elem_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@jabber_client.Message.elem_list","element");
Message_elem__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Message_elem__list Message_elem__list::replace(int index, int len, const Message_elem__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @jabber_client.Message.elem_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @jabber_client.Message.elem_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@jabber_client.Message.elem_list","element");
Message_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new UNIVERSAL_CHARSTRING(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Message_elem__list Message_elem__list::replace(int index, int len, const Message_elem__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Message_elem__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @jabber_client.Message.elem_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @jabber_client.Message.elem_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Message_elem__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Message_elem__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @jabber_client.Message.elem_list.");
return val_ptr->n_elements;
}

int Message_elem__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @jabber_client.Message.elem_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Message_elem__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Message_elem__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@jabber_client.Message.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@jabber_client.Message.elem_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@jabber_client.Message.elem_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Message_elem__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Message_elem__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @jabber_client.Message.elem_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Message_elem__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @jabber_client.Message.elem_list.");
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Message_elem__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Message_elem__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Message_elem__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) {
    if (Error::can_start(name, uri, Message_error___xer_, flavor)) return FALSE;
    return TRUE;
  }
  return UNIVERSAL_CHARSTRING::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Message_elem__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Message_elem__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (e_xer && (p_td.xer_bits & ANY_ATTRIBUTES)) {
      static const universal_char sp = { 0,0,0,' ' };
      static const universal_char tb = { 0,0,0,9 };
      size_t buf_len = p_buf.get_len(), shorter = 0;
      const unsigned char * const buf_data = p_buf.get_data();
      if (buf_data[buf_len - 1 - shorter] == '\n') ++shorter;
      if (buf_data[buf_len - 1 - shorter] == '>' ) ++shorter;
      unsigned char saved[4];
      memcpy(saved, buf_data + (buf_len - shorter), shorter);
      p_buf.increase_length(-shorter);
      for (int i = 0; i < val_ptr->n_elements; ++i) {
        TTCN_EncDec_ErrorContext ec_0("Attribute %d: ", i);
        if (val_ptr->value_elements[i] == NULL) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
            "Encoding an unbound universal charstring value.");
          continue;
        }
        size_t len = val_ptr->value_elements[i]->lengthof();
        for (;;) {
          const UNIVERSAL_CHARSTRING_ELEMENT& ue = (*val_ptr->value_elements[i])[len - 1];
          if (sp == ue || tb == ue) --len;
          else break;
        }
        size_t j, sp_at = 0;
        for (j = 0; j < len; j++) {
          UNIVERSAL_CHARSTRING_ELEMENT ue = (*val_ptr->value_elements[i])[j];
          if (sp_at) {
            if (sp == ue || tb == ue) {}
            else break;
          } else {
            if (sp == ue || tb == ue) sp_at = j;
          }
        } // next j
        size_t buf_start = p_buf.get_len();
        if (sp_at > 0) {
          char * ns = mprintf(" xmlns:b%d='", i);
          size_t ns_len = mstrlen(ns);
          p_buf.put_s(ns_len, (const unsigned char*)ns);
          UNIVERSAL_CHARSTRING before(sp_at, (const universal_char*)(*val_ptr->value_elements[i]));
          before.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            TTCN_Buffer ns_buf;
            before.encode_utf8(ns_buf);
            CHARSTRING cs;
            ns_buf.get_string(cs);
            check_namespace_restrictions(p_td, (const char*)cs);
          }
          p_buf.put_c('\'');
          p_buf.put_c(' ');
          p_buf.put_s(ns_len - 9, (const unsigned char*)ns + 7);
          p_buf.put_c(':');
          Free(ns);
        }
        else {
          p_buf.put_c(' ');
          j = 0;
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            check_namespace_restrictions(p_td, NULL);
          }
        }
        UNIVERSAL_CHARSTRING after(len - j, (const universal_char*)(*val_ptr->value_elements[i]) + j);
        after.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
        TTCN_Buffer check_buf;
        check_buf.put_s(2, (unsigned char*)"<a");
        check_buf.put_s(p_buf.get_len() - buf_start, p_buf.get_data() + buf_start);
        check_buf.put_s(2, (unsigned char*)"/>");        XmlReaderWrap checker(check_buf);
        while (1 == checker.Read()) ;
      }
      p_buf.put_s(shorter, saved);
    } else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Message_elem__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          if (e_xer && (p_td.xer_bits & ANY_ELEMENT)) {
            (*this)[val_ptr->n_elements] = (const char*)p_reader.ReadOuterXml();
            for (rd_ok = p_reader.Read(); rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) {}
            if (p_reader.NodeType() != XML_READER_TYPE_ELEMENT) rd_ok = p_reader.Read();
          } else          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Message_elem__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Message.elem_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Message_elem__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    UNIVERSAL_CHARSTRING* val = new UNIVERSAL_CHARSTRING;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Message_elem__list_template::copy_value(const Message_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @jabber_client.Message.elem_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Message_elem__list_template::copy_template(const Message_elem__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Message_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Message.elem_list.");
break;
}
set_selection(other_value);
}

boolean Message_elem__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Message_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Message_elem__list*)value_ptr)[value_index]);
else return ((const Message_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Message_elem__list_template::Message_elem__list_template()
{
}

Message_elem__list_template::Message_elem__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Message_elem__list_template::Message_elem__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Message_elem__list_template::Message_elem__list_template(const Message_elem__list& other_value)
{
copy_value(other_value);
}

Message_elem__list_template::Message_elem__list_template(const OPTIONAL<Message_elem__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Message.elem_list from an unbound optional field.");
}
}

Message_elem__list_template::Message_elem__list_template(const Message_elem__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Message_elem__list_template::~Message_elem__list_template()
{
clean_up();
}

void Message_elem__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Message_elem__list_template& Message_elem__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Message_elem__list_template& Message_elem__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Message_elem__list_template& Message_elem__list_template::operator=(const Message_elem__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Message_elem__list_template& Message_elem__list_template::operator=(const OPTIONAL<Message_elem__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Message.elem_list.");
}
return *this;
}

Message_elem__list_template& Message_elem__list_template::operator=(const Message_elem__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

UNIVERSAL_CHARSTRING_template& Message_elem__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Message.elem_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Message.elem_list.");
    break;
}
return *single_value.value_elements[index_value];
}

UNIVERSAL_CHARSTRING_template& Message_elem__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Message.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING_template& Message_elem__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Message.elem_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Message.elem_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @jabber_client.Message.elem_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const UNIVERSAL_CHARSTRING_template& Message_elem__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Message.elem_list.");
return (*this)[(int)index_value];
}

void Message_elem__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @jabber_client.Message.elem_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Message_elem__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Message_elem__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Message.elem_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @jabber_client.Message.elem_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @jabber_client.Message.elem_list");
}

boolean Message_elem__list_template::match(const Message_elem__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @jabber_client.Message.elem_list.");
}
return FALSE;
}

boolean Message_elem__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Message_elem__list Message_elem__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @jabber_client.Message.elem_list.");
Message_elem__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Message_elem__list Message_elem__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Message_elem__list Message_elem__list_template::replace(int index, int len, const Message_elem__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Message_elem__list Message_elem__list_template::replace(int index, int len, const Message_elem__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Message_elem__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Message_elem__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @jabber_client.Message.elem_list.");
}
set_selection(template_type);
}

Message_elem__list_template& Message_elem__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @jabber_client.Message.elem_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @jabber_client.Message.elem_list.");
return value_list.list_value[list_index];
}

void Message_elem__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Message_elem__list_template::log_match(const Message_elem__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Message_elem__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Message.elem_list.");
}
}

void Message_elem__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @jabber_client.Message.elem_list.");
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Message_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @jabber_client.Message.elem_list.");
}
}

boolean Message_elem__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Message_elem__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Message_elem__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@jabber_client.Message.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@jabber_client.Message.elem_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Message_elem__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@jabber_client.Message.elem_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Message.elem_list");
}

Message::Message()
{
  bound_flag = FALSE;
}

Message::Message(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_from__,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_id,
    const OPTIONAL<CHARSTRING>& par_lang,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_to__,
    const OPTIONAL<Message_type__>& par_type__,
    const Message_choice__list& par_choice__list,
    const Message_elem__list& par_elem__list,
    const OPTIONAL<Error>& par_error__)
  :   field_from__(par_from__),
  field_id(par_id),
  field_lang(par_lang),
  field_to__(par_to__),
  field_type__(par_type__),
  field_choice__list(par_choice__list),
  field_elem__list(par_elem__list),
  field_error__(par_error__)
{
  bound_flag = TRUE;
}

Message::Message(const Message& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Message.");
bound_flag = TRUE;
if (other_value.from__().is_bound()) field_from__ = other_value.from__();
else field_from__.clean_up();
if (other_value.id().is_bound()) field_id = other_value.id();
else field_id.clean_up();
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.to__().is_bound()) field_to__ = other_value.to__();
else field_to__.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.choice__list().is_bound()) field_choice__list = other_value.choice__list();
else field_choice__list.clean_up();
if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
else field_elem__list.clean_up();
if (other_value.error__().is_bound()) field_error__ = other_value.error__();
else field_error__.clean_up();
}

void Message::clean_up()
{
field_from__.clean_up();
field_id.clean_up();
field_lang.clean_up();
field_to__.clean_up();
field_type__.clean_up();
field_choice__list.clean_up();
field_elem__list.clean_up();
field_error__.clean_up();
bound_flag = FALSE;
}

Message& Message::operator=(const Message& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Message.");
  bound_flag = TRUE;
  if (other_value.from__().is_bound()) field_from__ = other_value.from__();
  else field_from__.clean_up();
  if (other_value.id().is_bound()) field_id = other_value.id();
  else field_id.clean_up();
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.to__().is_bound()) field_to__ = other_value.to__();
  else field_to__.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.choice__list().is_bound()) field_choice__list = other_value.choice__list();
  else field_choice__list.clean_up();
  if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
  else field_elem__list.clean_up();
  if (other_value.error__().is_bound()) field_error__ = other_value.error__();
  else field_error__.clean_up();
}
return *this;
}

boolean Message::operator==(const Message& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_from__==other_value.field_from__
  && field_id==other_value.field_id
  && field_lang==other_value.field_lang
  && field_to__==other_value.field_to__
  && field_type__==other_value.field_type__
  && field_choice__list==other_value.field_choice__list
  && field_elem__list==other_value.field_elem__list
  && field_error__==other_value.field_error__;
}

boolean Message::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_from__.get_selection() || field_from__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_id.get_selection() || field_id.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_to__.get_selection() || field_to__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_type__.get_selection() || field_type__.is_bound()) return TRUE;
if(field_choice__list.is_bound()) return TRUE;
if(field_elem__list.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_error__.get_selection() || field_error__.is_bound()) return TRUE;
return FALSE;
}
boolean Message::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_from__.get_selection() && !field_from__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_id.get_selection() && !field_id.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_to__.get_selection() && !field_to__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_type__.get_selection() && !field_type__.is_value()) return FALSE;
if(!field_choice__list.is_value()) return FALSE;
if(!field_elem__list.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_error__.get_selection() && !field_error__.is_value()) return FALSE;
return TRUE;
}
int Message::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Message");
  int ret_val = 2;
  if (field_from__.ispresent()) ret_val++;
  if (field_id.ispresent()) ret_val++;
  if (field_lang.ispresent()) ret_val++;
  if (field_to__.ispresent()) ret_val++;
  if (field_type__.ispresent()) ret_val++;
  if (field_error__.ispresent()) ret_val++;
  return ret_val;
}

void Message::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ from_ := ");
field_from__.log();
TTCN_Logger::log_event_str(", id := ");
field_id.log();
TTCN_Logger::log_event_str(", lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", choice_list := ");
field_choice__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
field_elem__list.log();
TTCN_Logger::log_event_str(", error_ := ");
field_error__.log();
TTCN_Logger::log_event_str(" }");
}

void Message::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Message'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Message'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (8<param.get_size()) {
      param.error("record value of type @jabber_client.Message has 8 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) choice__list().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(7));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Message: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Message");
  }
}

void Message::set_implicit_omit()
{
if (!from__().is_bound()) from__() = OMIT_VALUE;
else from__().set_implicit_omit();
if (!id().is_bound()) id() = OMIT_VALUE;
else id().set_implicit_omit();
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (!to__().is_bound()) to__() = OMIT_VALUE;
else to__().set_implicit_omit();
if (!type__().is_bound()) type__() = OMIT_VALUE;
else type__().set_implicit_omit();
if (choice__list().is_bound()) choice__list().set_implicit_omit();
if (elem__list().is_bound()) elem__list().set_implicit_omit();
if (!error__().is_bound()) error__() = OMIT_VALUE;
else error__().set_implicit_omit();
}

void Message::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Message.");
field_from__.encode_text(text_buf);
field_id.encode_text(text_buf);
field_lang.encode_text(text_buf);
field_to__.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_choice__list.encode_text(text_buf);
field_elem__list.encode_text(text_buf);
field_error__.encode_text(text_buf);
}

void Message::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_from__.decode_text(text_buf);
field_id.decode_text(text_buf);
field_lang.decode_text(text_buf);
field_to__.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_choice__list.decode_text(text_buf);
field_elem__list.decode_text(text_buf);
field_error__.decode_text(text_buf);
}

void Message::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Message::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Message::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_from__.collect_ns(Message_from___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_id.collect_ns(Message_id_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_lang.collect_ns(Message_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_to__.collect_ns(Message_to___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Message_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_choice__list.collect_ns(Message_choice__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem__list.collect_ns(Message_elem__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_error__.collect_ns(Message_error___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Message::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Message_from___xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Message_id_xer_, flavor)) return true;
  else if (CHARSTRING::can_start(name, uri, Message_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Message_to___xer_, flavor)) return true;
  else if (Message_type__::can_start(name, uri, Message_type___xer_, flavor)) return true;
  else if (Message_choice__list::can_start(name, uri, Message_choice__list_xer_, flavor)) return true;
  return false;
}

int Message::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("from_': ");
  tmp_len = field_from__.XER_encode(Message_from___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("id': ");
  tmp_len = field_id.XER_encode(Message_id_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Message_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("to_': ");
  tmp_len = field_to__.XER_encode(Message_to___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Message_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("choice_list': ");
  sub_len += field_choice__list.XER_encode(Message_choice__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("elem_list': ");
  sub_len += field_elem__list.XER_encode(Message_elem__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("error_': ");
  sub_len += field_error__.XER_encode(Message_error___xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Message::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Message_from___xer_.dfeValue) field_from__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Message_from___xer_.dfeValue);
  else field_from__ = OMIT_VALUE;
  if (Message_id_xer_.dfeValue) field_id = *static_cast<const UNIVERSAL_CHARSTRING*>(Message_id_xer_.dfeValue);
  else field_id = OMIT_VALUE;
  if (Message_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Message_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  if (Message_to___xer_.dfeValue) field_to__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Message_to___xer_.dfeValue);
  else field_to__ = OMIT_VALUE;
  if (Message_type___xer_.dfeValue) field_type__ = *static_cast<const Message_type__*>(Message_type___xer_.dfeValue);
  else field_type__ = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Message_from___xer_, 1) && check_namespace(ns_uri, Message_from___xer_)) {
      ec_1.set_msg("from_': ");
      field_from__.XER_decode(Message_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Message_id_xer_, 1) && check_namespace(ns_uri, Message_id_xer_)) {
      ec_1.set_msg("id': ");
      field_id.XER_decode(Message_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Message_lang_xer_, 1) && check_namespace(ns_uri, Message_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Message_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Message_to___xer_, 1) && check_namespace(ns_uri, Message_to___xer_)) {
      ec_1.set_msg("to_': ");
      field_to__.XER_decode(Message_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Message_type___xer_, 1) && check_namespace(ns_uri, Message_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Message_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("from_': ");
    field_from__.XER_decode(Message_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("id': ");
    field_id.XER_decode(Message_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Message_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("to_': ");
    field_to__.XER_decode(Message_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Message_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  {
    ec_1.set_msg("choice_list': ");
    field_choice__list.XER_decode(Message_choice__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  {
    ec_1.set_msg("elem_list': ");
    field_elem__list.XER_decode(Message_elem__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_error__ = *static_cast<const Error*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("error_': ");
    field_error__.XER_decode(Message_error___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Message::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Message.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_from__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "from_");
    enc_len += field_from__.JSON_encode(Message_from___descr_, p_tok);
  }

  if (field_id.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "id");
    enc_len += field_id.JSON_encode(Message_id_descr_, p_tok);
  }

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Message_lang_descr_, p_tok);
  }

  if (field_to__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "to_");
    enc_len += field_to__.JSON_encode(Message_to___descr_, p_tok);
  }

  if (field_type__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Message_type___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice_list");
    enc_len += field_choice__list.JSON_encode(Message_choice__list_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem_list");
    enc_len += field_elem__list.JSON_encode(Message_elem__list_descr_, p_tok);
  }

  if (field_error__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "error_");
    enc_len += field_error__.JSON_encode(Message_error___descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Message::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (5 == name_len && 0 == strncmp(fld_name, "from_", name_len)) {
        int ret_val = field_from__.JSON_decode(Message_from___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "from_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (2 == name_len && 0 == strncmp(fld_name, "id", name_len)) {
        int ret_val = field_id.JSON_decode(Message_id_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "id");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Message_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "to_", name_len)) {
        int ret_val = field_to__.JSON_decode(Message_to___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "to_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Message_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (11 == name_len && 0 == strncmp(fld_name, "choice_list", name_len)) {
        int ret_val = field_choice__list.JSON_decode(Message_choice__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "elem_list", name_len)) {
        int ret_val = field_elem__list.JSON_decode(Message_elem__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (6 == name_len && 0 == strncmp(fld_name, "error_", name_len)) {
        int ret_val = field_error__.JSON_decode(Message_error___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "error_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_from__.is_bound()) {
    field_from__ = OMIT_VALUE;
  }
  if (!field_id.is_bound()) {
    field_id = OMIT_VALUE;
  }
  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_to__.is_bound()) {
    field_to__ = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    field_type__ = OMIT_VALUE;
  }
  if (!field_choice__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "choice_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_elem__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_error__.is_bound()) {
    field_error__ = OMIT_VALUE;
  }

  return dec_len;
}

struct Message_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_from__;
UNIVERSAL_CHARSTRING_template field_id;
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_to__;
Message_type___template field_type__;
Message_choice__list_template field_choice__list;
Message_elem__list_template field_elem__list;
Error_template field_error__;
};

void Message_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_from__ = ANY_OR_OMIT;
single_value->field_id = ANY_OR_OMIT;
single_value->field_lang = ANY_OR_OMIT;
single_value->field_to__ = ANY_OR_OMIT;
single_value->field_type__ = ANY_OR_OMIT;
single_value->field_choice__list = ANY_VALUE;
single_value->field_elem__list = ANY_VALUE;
single_value->field_error__ = ANY_OR_OMIT;
}
}
}

void Message_template::copy_value(const Message& other_value)
{
single_value = new single_value_struct;
if (other_value.from__().is_bound()) {
  if (other_value.from__().ispresent()) single_value->field_from__ = other_value.from__()();
  else single_value->field_from__ = OMIT_VALUE;
} else {
  single_value->field_from__.clean_up();
}
if (other_value.id().is_bound()) {
  if (other_value.id().ispresent()) single_value->field_id = other_value.id()();
  else single_value->field_id = OMIT_VALUE;
} else {
  single_value->field_id.clean_up();
}
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.to__().is_bound()) {
  if (other_value.to__().ispresent()) single_value->field_to__ = other_value.to__()();
  else single_value->field_to__ = OMIT_VALUE;
} else {
  single_value->field_to__.clean_up();
}
if (other_value.type__().is_bound()) {
  if (other_value.type__().ispresent()) single_value->field_type__ = other_value.type__()();
  else single_value->field_type__ = OMIT_VALUE;
} else {
  single_value->field_type__.clean_up();
}
if (other_value.choice__list().is_bound()) {
  single_value->field_choice__list = other_value.choice__list();
} else {
  single_value->field_choice__list.clean_up();
}
if (other_value.elem__list().is_bound()) {
  single_value->field_elem__list = other_value.elem__list();
} else {
  single_value->field_elem__list.clean_up();
}
if (other_value.error__().is_bound()) {
  if (other_value.error__().ispresent()) single_value->field_error__ = other_value.error__()();
  else single_value->field_error__ = OMIT_VALUE;
} else {
  single_value->field_error__.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Message_template::copy_template(const Message_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.from__().get_selection()) {
single_value->field_from__ = other_value.from__();
} else {
single_value->field_from__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.id().get_selection()) {
single_value->field_id = other_value.id();
} else {
single_value->field_id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.to__().get_selection()) {
single_value->field_to__ = other_value.to__();
} else {
single_value->field_to__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.choice__list().get_selection()) {
single_value->field_choice__list = other_value.choice__list();
} else {
single_value->field_choice__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem__list().get_selection()) {
single_value->field_elem__list = other_value.elem__list();
} else {
single_value->field_elem__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.error__().get_selection()) {
single_value->field_error__ = other_value.error__();
} else {
single_value->field_error__.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Message_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Message.");
break;
}
set_selection(other_value);
}

Message_template::Message_template()
{
}

Message_template::Message_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Message_template::Message_template(const Message& other_value)
{
copy_value(other_value);
}

Message_template::Message_template(const OPTIONAL<Message>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Message from an unbound optional field.");
}
}

Message_template::Message_template(const Message_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Message_template::~Message_template()
{
clean_up();
}

Message_template& Message_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Message_template& Message_template::operator=(const Message& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Message_template& Message_template::operator=(const OPTIONAL<Message>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Message&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Message.");
}
return *this;
}

Message_template& Message_template::operator=(const Message_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Message_template::match(const Message& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.from__().is_bound()) return FALSE;
if((other_value.from__().ispresent() ? !single_value->field_from__.match((const UNIVERSAL_CHARSTRING&)other_value.from__()) : !single_value->field_from__.match_omit()))return FALSE;
if(!other_value.id().is_bound()) return FALSE;
if((other_value.id().ispresent() ? !single_value->field_id.match((const UNIVERSAL_CHARSTRING&)other_value.id()) : !single_value->field_id.match_omit()))return FALSE;
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.to__().is_bound()) return FALSE;
if((other_value.to__().ispresent() ? !single_value->field_to__.match((const UNIVERSAL_CHARSTRING&)other_value.to__()) : !single_value->field_to__.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if((other_value.type__().ispresent() ? !single_value->field_type__.match((const Message_type__&)other_value.type__()) : !single_value->field_type__.match_omit()))return FALSE;
if(!other_value.choice__list().is_bound()) return FALSE;
if(!single_value->field_choice__list.match(other_value.choice__list()))return FALSE;
if(!other_value.elem__list().is_bound()) return FALSE;
if(!single_value->field_elem__list.match(other_value.elem__list()))return FALSE;
if(!other_value.error__().is_bound()) return FALSE;
if((other_value.error__().ispresent() ? !single_value->field_error__.match((const Error&)other_value.error__()) : !single_value->field_error__.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Message.");
}
return FALSE;
}

boolean Message_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_from__.is_omit() || single_value->field_from__.is_bound()) return TRUE;
if (single_value->field_id.is_omit() || single_value->field_id.is_bound()) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_to__.is_omit() || single_value->field_to__.is_bound()) return TRUE;
if (single_value->field_type__.is_omit() || single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_choice__list.is_bound()) return TRUE;
if (single_value->field_elem__list.is_bound()) return TRUE;
if (single_value->field_error__.is_omit() || single_value->field_error__.is_bound()) return TRUE;
return FALSE;
}

boolean Message_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_from__.is_omit() && !single_value->field_from__.is_value()) return FALSE;
if (!single_value->field_id.is_omit() && !single_value->field_id.is_value()) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_to__.is_omit() && !single_value->field_to__.is_value()) return FALSE;
if (!single_value->field_type__.is_omit() && !single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_choice__list.is_value()) return FALSE;
if (!single_value->field_elem__list.is_value()) return FALSE;
if (!single_value->field_error__.is_omit() && !single_value->field_error__.is_value()) return FALSE;
return TRUE;
}

void Message_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Message Message_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Message.");
Message ret_val;
if (single_value->field_from__.is_omit()) ret_val.from__() = OMIT_VALUE;
else if (single_value->field_from__.is_bound()) {
ret_val.from__() = single_value->field_from__.valueof();
}
if (single_value->field_id.is_omit()) ret_val.id() = OMIT_VALUE;
else if (single_value->field_id.is_bound()) {
ret_val.id() = single_value->field_id.valueof();
}
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_to__.is_omit()) ret_val.to__() = OMIT_VALUE;
else if (single_value->field_to__.is_bound()) {
ret_val.to__() = single_value->field_to__.valueof();
}
if (single_value->field_type__.is_omit()) ret_val.type__() = OMIT_VALUE;
else if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_choice__list.is_bound()) {
ret_val.choice__list() = single_value->field_choice__list.valueof();
}
if (single_value->field_elem__list.is_bound()) {
ret_val.elem__list() = single_value->field_elem__list.valueof();
}
if (single_value->field_error__.is_omit()) ret_val.error__() = OMIT_VALUE;
else if (single_value->field_error__.is_bound()) {
ret_val.error__() = single_value->field_error__.valueof();
}
return ret_val;
}

void Message_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Message.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Message_template[list_length];
}

Message_template& Message_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Message.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Message.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Message_template::from__()
{
set_specific();
return single_value->field_from__;
}

const UNIVERSAL_CHARSTRING_template& Message_template::from__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field from_ of a non-specific template of type @jabber_client.Message.");
return single_value->field_from__;
}

UNIVERSAL_CHARSTRING_template& Message_template::id()
{
set_specific();
return single_value->field_id;
}

const UNIVERSAL_CHARSTRING_template& Message_template::id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field id of a non-specific template of type @jabber_client.Message.");
return single_value->field_id;
}

CHARSTRING_template& Message_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Message_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Message.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Message_template::to__()
{
set_specific();
return single_value->field_to__;
}

const UNIVERSAL_CHARSTRING_template& Message_template::to__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field to_ of a non-specific template of type @jabber_client.Message.");
return single_value->field_to__;
}

Message_type___template& Message_template::type__()
{
set_specific();
return single_value->field_type__;
}

const Message_type___template& Message_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @jabber_client.Message.");
return single_value->field_type__;
}

Message_choice__list_template& Message_template::choice__list()
{
set_specific();
return single_value->field_choice__list;
}

const Message_choice__list_template& Message_template::choice__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field choice_list of a non-specific template of type @jabber_client.Message.");
return single_value->field_choice__list;
}

Message_elem__list_template& Message_template::elem__list()
{
set_specific();
return single_value->field_elem__list;
}

const Message_elem__list_template& Message_template::elem__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem_list of a non-specific template of type @jabber_client.Message.");
return single_value->field_elem__list;
}

Error_template& Message_template::error__()
{
set_specific();
return single_value->field_error__;
}

const Error_template& Message_template::error__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field error_ of a non-specific template of type @jabber_client.Message.");
return single_value->field_error__;
}

int Message_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Message which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_from__.is_present()) ret_val++;
      if (single_value->field_id.is_present()) ret_val++;
      if (single_value->field_lang.is_present()) ret_val++;
      if (single_value->field_to__.is_present()) ret_val++;
      if (single_value->field_type__.is_present()) ret_val++;
      if (single_value->field_error__.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Message containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Message containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Message containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Message containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Message containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Message.");
  }
  return 0;
}

void Message_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ from_ := ");
single_value->field_from__.log();
TTCN_Logger::log_event_str(", id := ");
single_value->field_id.log();
TTCN_Logger::log_event_str(", lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
single_value->field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", choice_list := ");
single_value->field_choice__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log();
TTCN_Logger::log_event_str(", error_ := ");
single_value->field_error__.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Message_template::log_match(const Message& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.from__().ispresent()){
if(!single_value->field_from__.match(match_value.from__())){
TTCN_Logger::log_logmatch_info(".from_");
single_value->field_from__.log_match(match_value.from__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_from__.match_omit()){
 TTCN_Logger::log_logmatch_info(".from_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_from__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.id().ispresent()){
if(!single_value->field_id.match(match_value.id())){
TTCN_Logger::log_logmatch_info(".id");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_id.match_omit()){
 TTCN_Logger::log_logmatch_info(".id := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_id.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.to__().ispresent()){
if(!single_value->field_to__.match(match_value.to__())){
TTCN_Logger::log_logmatch_info(".to_");
single_value->field_to__.log_match(match_value.to__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_to__.match_omit()){
 TTCN_Logger::log_logmatch_info(".to_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_to__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.type__().ispresent()){
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_type__.match_omit()){
 TTCN_Logger::log_logmatch_info(".type_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_type__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_choice__list.match(match_value.choice__list())){
TTCN_Logger::log_logmatch_info(".choice_list");
single_value->field_choice__list.log_match(match_value.choice__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_elem__list.match(match_value.elem__list())){
TTCN_Logger::log_logmatch_info(".elem_list");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.error__().ispresent()){
if(!single_value->field_error__.match(match_value.error__())){
TTCN_Logger::log_logmatch_info(".error_");
single_value->field_error__.log_match(match_value.error__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_error__.match_omit()){
 TTCN_Logger::log_logmatch_info(".error_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_error__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ from_ := ");
if (match_value.from__().ispresent()) single_value->field_from__.log_match(match_value.from__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_from__.log();
if (single_value->field_from__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", id := ");
if (match_value.id().ispresent()) single_value->field_id.log_match(match_value.id());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_id.log();
if (single_value->field_id.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", to_ := ");
if (match_value.to__().ispresent()) single_value->field_to__.log_match(match_value.to__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_to__.log();
if (single_value->field_to__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
if (match_value.type__().ispresent()) single_value->field_type__.log_match(match_value.type__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_type__.log();
if (single_value->field_type__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", choice_list := ");
single_value->field_choice__list.log_match(match_value.choice__list());
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::log_event_str(", error_ := ");
if (match_value.error__().ispresent()) single_value->field_error__.log_match(match_value.error__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_error__.log();
if (single_value->field_error__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Message_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_from__.encode_text(text_buf);
single_value->field_id.encode_text(text_buf);
single_value->field_lang.encode_text(text_buf);
single_value->field_to__.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_choice__list.encode_text(text_buf);
single_value->field_elem__list.encode_text(text_buf);
single_value->field_error__.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Message.");
}
}

void Message_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_from__.decode_text(text_buf);
single_value->field_id.decode_text(text_buf);
single_value->field_lang.decode_text(text_buf);
single_value->field_to__.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_choice__list.decode_text(text_buf);
single_value->field_elem__list.decode_text(text_buf);
single_value->field_error__.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Message_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Message.");
}
}

void Message_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Message'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Message'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (8<param.get_size()) {
      param.error("record template of type @jabber_client.Message has 8 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) choice__list().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(7));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Message: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Message");
  }
  is_ifpresent = param.get_ifpresent();
}

void Message_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_from__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_id.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_to__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_choice__list.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_elem__list.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
single_value->field_error__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Message");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Message");
}

boolean Message_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Message_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Message_type__::Message_type__()
{
enum_value = UNBOUND_VALUE;
}

Message_type__::Message_type__(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @jabber_client.Message.type_ with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Message_type__::Message_type__(enum_type other_value)
{
enum_value = other_value;
}

Message_type__::Message_type__(const Message_type__& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @jabber_client.Message.type_.");
enum_value = other_value.enum_value;
}

Message_type__& Message_type__::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @jabber_client.Message.type_.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Message_type__& Message_type__::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Message_type__& Message_type__::operator=(const Message_type__& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Message.type_.");
enum_value = other_value.enum_value;
return *this;
}

boolean Message_type__::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value == other_value;
}

boolean Message_type__::operator==(const Message_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value == other_value.enum_value;
}

boolean Message_type__::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value < other_value;
}

boolean Message_type__::operator<(const Message_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value < other_value.enum_value;
}

boolean Message_type__::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value > other_value;
}

boolean Message_type__::operator>(const Message_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Message.type_.");
return enum_value > other_value.enum_value;
}

const char *Message_type__::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case chat: return "chat";
case error__: if (txt) return "error"; else return "error_";
case groupchat: return "groupchat";
case headline: return "headline";
case normal: return "normal";
default: return "<unknown>";
}
}

Message_type__::enum_type Message_type__::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "chat")) return chat;
else if (!strcmp(str_par, "error") || !strcmp(str_par, "error_")) return error__;
else if (!strcmp(str_par, "groupchat")) return groupchat;
else if (!strcmp(str_par, "headline")) return headline;
else if (!strcmp(str_par, "normal")) return normal;
else return UNKNOWN_VALUE;
}

boolean Message_type__::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
case 4:
return TRUE;
default:
return FALSE;
}
}

int Message_type__::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Message.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Message_type__::enum2int(const Message_type__& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Message.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Message_type__::operator Message_type__::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @jabber_client.Message.type_.");
return enum_value;
}

void Message_type__::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Message_type__::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@jabber_client.Message.type_");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @jabber_client.Message.type_.");
  }
}

void Message_type__::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @jabber_client.Message.type_.");
text_buf.push_int(enum_value);
}

void Message_type__::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @jabber_client.Message.type_.", enum_value);
}

void Message_type__::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Message_type__::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Message_type__::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Message_type__::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Message_type__::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Message_type__::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @jabber_client.Message.type_.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Message_type__::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Message_type___template::copy_template(const Message_type___template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Message_type___template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @jabber_client.Message.type_.");
}
}

Message_type___template::Message_type___template()
{
}

Message_type___template::Message_type___template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Message_type___template::Message_type___template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Message_type__::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @jabber_client.Message.type_ with unknown numeric value %d.", other_value);
single_value = (Message_type__::enum_type)other_value;
}

Message_type___template::Message_type___template(Message_type__::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Message_type___template::Message_type___template(const Message_type__& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Message_type__::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @jabber_client.Message.type_.");
single_value = other_value.enum_value;
}

Message_type___template::Message_type___template(const OPTIONAL<Message_type__>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Message_type__::enum_type)(const Message_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @jabber_client.Message.type_ from an unbound optional field.");
}
}

Message_type___template::Message_type___template(const Message_type___template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Message_type___template::~Message_type___template()
{
clean_up();
}

boolean Message_type___template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Message_type___template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Message_type__::UNBOUND_VALUE;
}

void Message_type___template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Message_type___template& Message_type___template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Message_type___template& Message_type___template::operator=(int other_value)
{
if (!Message_type__::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @jabber_client.Message.type_.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Message_type__::enum_type)other_value;
return *this;
}

Message_type___template& Message_type___template::operator=(Message_type__::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Message_type___template& Message_type___template::operator=(const Message_type__& other_value)
{
if (other_value.enum_value == Message_type__::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Message.type_ to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Message_type___template& Message_type___template::operator=(const OPTIONAL<Message_type__>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Message_type__::enum_type)(const Message_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @jabber_client.Message.type_.");
}
return *this;
}

Message_type___template& Message_type___template::operator=(const Message_type___template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Message_type___template::match(Message_type__::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @jabber_client.Message.type_.");
}
return FALSE;
}

boolean Message_type___template::match(const Message_type__& other_value) const
{
if (other_value.enum_value == Message_type__::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @jabber_client.Message.type_ with an unbound value.");
return match(other_value.enum_value);
}

Message_type__::enum_type Message_type___template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @jabber_client.Message.type_.");
return single_value;
}

void Message_type___template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @jabber_client.Message.type_.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Message_type___template[list_length];
}

Message_type___template& Message_type___template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @jabber_client.Message.type_.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @jabber_client.Message.type_.");
return value_list.list_value[list_index];
}

void Message_type___template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Message_type__::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Message_type___template::log_match(const Message_type__& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Message_type___template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @jabber_client.Message.type_.");
}
}

void Message_type___template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Message_type__::enum_type)text_buf.pull_int().get_val();
if (!Message_type__::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @jabber_client.Message.type_.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Message_type___template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @jabber_client.Message.type_.");
}
}

boolean Message_type___template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Message_type___template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Message_type___template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Message_type__::enum_type enum_val = Message_type__::str_to_enum(param.get_enumerated());
    if (!Message_type__::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @jabber_client.Message.type_.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@jabber_client.Message.type_");
  }
  is_ifpresent = param.get_ifpresent();
}

void Message_type___template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Message.type_");
}

Error_type__::Error_type__()
{
enum_value = UNBOUND_VALUE;
}

Error_type__::Error_type__(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @jabber_client.Error.type_ with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Error_type__::Error_type__(enum_type other_value)
{
enum_value = other_value;
}

Error_type__::Error_type__(const Error_type__& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @jabber_client.Error.type_.");
enum_value = other_value.enum_value;
}

Error_type__& Error_type__::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @jabber_client.Error.type_.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Error_type__& Error_type__::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Error_type__& Error_type__::operator=(const Error_type__& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Error.type_.");
enum_value = other_value.enum_value;
return *this;
}

boolean Error_type__::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value == other_value;
}

boolean Error_type__::operator==(const Error_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value == other_value.enum_value;
}

boolean Error_type__::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value < other_value;
}

boolean Error_type__::operator<(const Error_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value < other_value.enum_value;
}

boolean Error_type__::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value > other_value;
}

boolean Error_type__::operator>(const Error_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Error.type_.");
return enum_value > other_value.enum_value;
}

const char *Error_type__::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case auth: return "auth";
case cancel: return "cancel";
case continue__: if (txt) return "continue"; else return "continue_";
case modify: return "modify";
case wait: return "wait";
default: return "<unknown>";
}
}

Error_type__::enum_type Error_type__::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "auth")) return auth;
else if (!strcmp(str_par, "cancel")) return cancel;
else if (!strcmp(str_par, "continue") || !strcmp(str_par, "continue_")) return continue__;
else if (!strcmp(str_par, "modify")) return modify;
else if (!strcmp(str_par, "wait")) return wait;
else return UNKNOWN_VALUE;
}

boolean Error_type__::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
case 4:
return TRUE;
default:
return FALSE;
}
}

int Error_type__::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Error.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Error_type__::enum2int(const Error_type__& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Error.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Error_type__::operator Error_type__::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @jabber_client.Error.type_.");
return enum_value;
}

void Error_type__::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Error_type__::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@jabber_client.Error.type_");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @jabber_client.Error.type_.");
  }
}

void Error_type__::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @jabber_client.Error.type_.");
text_buf.push_int(enum_value);
}

void Error_type__::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @jabber_client.Error.type_.", enum_value);
}

void Error_type__::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Error_type__::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Error_type__::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Error_type__::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Error_type__::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Error_type__::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @jabber_client.Error.type_.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Error_type__::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Error_type___template::copy_template(const Error_type___template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Error_type___template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @jabber_client.Error.type_.");
}
}

Error_type___template::Error_type___template()
{
}

Error_type___template::Error_type___template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Error_type___template::Error_type___template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Error_type__::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @jabber_client.Error.type_ with unknown numeric value %d.", other_value);
single_value = (Error_type__::enum_type)other_value;
}

Error_type___template::Error_type___template(Error_type__::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Error_type___template::Error_type___template(const Error_type__& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Error_type__::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @jabber_client.Error.type_.");
single_value = other_value.enum_value;
}

Error_type___template::Error_type___template(const OPTIONAL<Error_type__>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Error_type__::enum_type)(const Error_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @jabber_client.Error.type_ from an unbound optional field.");
}
}

Error_type___template::Error_type___template(const Error_type___template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Error_type___template::~Error_type___template()
{
clean_up();
}

boolean Error_type___template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Error_type___template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Error_type__::UNBOUND_VALUE;
}

void Error_type___template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Error_type___template& Error_type___template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Error_type___template& Error_type___template::operator=(int other_value)
{
if (!Error_type__::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @jabber_client.Error.type_.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Error_type__::enum_type)other_value;
return *this;
}

Error_type___template& Error_type___template::operator=(Error_type__::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Error_type___template& Error_type___template::operator=(const Error_type__& other_value)
{
if (other_value.enum_value == Error_type__::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Error.type_ to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Error_type___template& Error_type___template::operator=(const OPTIONAL<Error_type__>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Error_type__::enum_type)(const Error_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @jabber_client.Error.type_.");
}
return *this;
}

Error_type___template& Error_type___template::operator=(const Error_type___template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Error_type___template::match(Error_type__::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @jabber_client.Error.type_.");
}
return FALSE;
}

boolean Error_type___template::match(const Error_type__& other_value) const
{
if (other_value.enum_value == Error_type__::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @jabber_client.Error.type_ with an unbound value.");
return match(other_value.enum_value);
}

Error_type__::enum_type Error_type___template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @jabber_client.Error.type_.");
return single_value;
}

void Error_type___template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @jabber_client.Error.type_.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Error_type___template[list_length];
}

Error_type___template& Error_type___template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @jabber_client.Error.type_.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @jabber_client.Error.type_.");
return value_list.list_value[list_index];
}

void Error_type___template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Error_type__::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Error_type___template::log_match(const Error_type__& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Error_type___template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @jabber_client.Error.type_.");
}
}

void Error_type___template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Error_type__::enum_type)text_buf.pull_int().get_val();
if (!Error_type__::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @jabber_client.Error.type_.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Error_type___template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @jabber_client.Error.type_.");
}
}

boolean Error_type___template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Error_type___template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Error_type___template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Error_type__::enum_type enum_val = Error_type__::str_to_enum(param.get_enumerated());
    if (!Error_type__::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @jabber_client.Error.type_.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@jabber_client.Error.type_");
  }
  is_ifpresent = param.get_ifpresent();
}

void Error_type___template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Error.type_");
}

Error::Error()
{
  bound_flag = FALSE;
}

Error::Error(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_by,
    const Error_type__& par_type__,
    const urn__ietf__params__xml__ns__xmpp__stanzas::StanzaErrorGroup& par_stanzaErrorGroup,
    const OPTIONAL<urn__ietf__params__xml__ns__xmpp__stanzas::Text>& par_text)
  :   field_by(par_by),
  field_type__(par_type__),
  field_stanzaErrorGroup(par_stanzaErrorGroup),
  field_text(par_text)
{
  bound_flag = TRUE;
}

Error::Error(const Error& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Error.");
bound_flag = TRUE;
if (other_value.by().is_bound()) field_by = other_value.by();
else field_by.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.stanzaErrorGroup().is_bound()) field_stanzaErrorGroup = other_value.stanzaErrorGroup();
else field_stanzaErrorGroup.clean_up();
if (other_value.text().is_bound()) field_text = other_value.text();
else field_text.clean_up();
}

void Error::clean_up()
{
field_by.clean_up();
field_type__.clean_up();
field_stanzaErrorGroup.clean_up();
field_text.clean_up();
bound_flag = FALSE;
}

Error& Error::operator=(const Error& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Error.");
  bound_flag = TRUE;
  if (other_value.by().is_bound()) field_by = other_value.by();
  else field_by.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.stanzaErrorGroup().is_bound()) field_stanzaErrorGroup = other_value.stanzaErrorGroup();
  else field_stanzaErrorGroup.clean_up();
  if (other_value.text().is_bound()) field_text = other_value.text();
  else field_text.clean_up();
}
return *this;
}

boolean Error::operator==(const Error& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_by==other_value.field_by
  && field_type__==other_value.field_type__
  && field_stanzaErrorGroup==other_value.field_stanzaErrorGroup
  && field_text==other_value.field_text;
}

boolean Error::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_by.get_selection() || field_by.is_bound()) return TRUE;
if(field_type__.is_bound()) return TRUE;
if(field_stanzaErrorGroup.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_text.get_selection() || field_text.is_bound()) return TRUE;
return FALSE;
}
boolean Error::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_by.get_selection() && !field_by.is_value()) return FALSE;
if(!field_type__.is_value()) return FALSE;
if(!field_stanzaErrorGroup.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_text.get_selection() && !field_text.is_value()) return FALSE;
return TRUE;
}
int Error::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Error");
  int ret_val = 2;
  if (field_by.ispresent()) ret_val++;
  if (field_text.ispresent()) ret_val++;
  return ret_val;
}

void Error::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ by := ");
field_by.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", stanzaErrorGroup := ");
field_stanzaErrorGroup.log();
TTCN_Logger::log_event_str(", text := ");
field_text.log();
TTCN_Logger::log_event_str(" }");
}

void Error::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Error'");
    }
    if (strcmp("by", param_field) == 0) {
      by().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("stanzaErrorGroup", param_field) == 0) {
      stanzaErrorGroup().set_param(param);
      return;
    } else if (strcmp("text", param_field) == 0) {
      text().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Error'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @jabber_client.Error has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) by().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) stanzaErrorGroup().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) text().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "by")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          by().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stanzaErrorGroup")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stanzaErrorGroup().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "text")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          text().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Error: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Error");
  }
}

void Error::set_implicit_omit()
{
if (!by().is_bound()) by() = OMIT_VALUE;
else by().set_implicit_omit();
if (type__().is_bound()) type__().set_implicit_omit();
if (stanzaErrorGroup().is_bound()) stanzaErrorGroup().set_implicit_omit();
if (!text().is_bound()) text() = OMIT_VALUE;
else text().set_implicit_omit();
}

void Error::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Error.");
field_by.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_stanzaErrorGroup.encode_text(text_buf);
field_text.encode_text(text_buf);
}

void Error::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_by.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_stanzaErrorGroup.decode_text(text_buf);
field_text.decode_text(text_buf);
}

void Error::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Error::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Error::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_by.collect_ns(Error_by_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Error_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_stanzaErrorGroup.collect_ns(Error_stanzaErrorGroup_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_text.collect_ns(Error_text_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Error::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Error_by_xer_, flavor)) return true;
  else if (Error_type__::can_start(name, uri, Error_type___xer_, flavor)) return true;
  return false;
}

int Error::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("by': ");
  tmp_len = field_by.XER_encode(Error_by_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Error_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("stanzaErrorGroup': ");
  sub_len += field_stanzaErrorGroup.XER_encode(Error_stanzaErrorGroup_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("text': ");
  sub_len += field_text.XER_encode(Error_text_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Error::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Error_by_xer_.dfeValue) field_by = *static_cast<const UNIVERSAL_CHARSTRING*>(Error_by_xer_.dfeValue);
  else field_by = OMIT_VALUE;
  if (Error_type___xer_.dfeValue) field_type__ = *static_cast<const Error_type__*>(Error_type___xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Error_by_xer_, 1) && check_namespace(ns_uri, Error_by_xer_)) {
      ec_1.set_msg("by': ");
      field_by.XER_decode(Error_by_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Error_type___xer_, 1) && check_namespace(ns_uri, Error_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Error_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_type__.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'type_'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("by': ");
    field_by.XER_decode(Error_by_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Error_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  {
    ec_1.set_msg("stanzaErrorGroup': ");
    field_stanzaErrorGroup.XER_decode(Error_stanzaErrorGroup_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_text = *static_cast<const urn__ietf__params__xml__ns__xmpp__stanzas::Text*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("text': ");
    field_text.XER_decode(Error_text_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Error::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Error.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_by.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "by");
    enc_len += field_by.JSON_encode(Error_by_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Error_type___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "stanzaErrorGroup");
    enc_len += field_stanzaErrorGroup.JSON_encode(Error_stanzaErrorGroup_descr_, p_tok);
  }

  if (field_text.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "text");
    enc_len += field_text.JSON_encode(Error_text_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Error::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (2 == name_len && 0 == strncmp(fld_name, "by", name_len)) {
        int ret_val = field_by.JSON_decode(Error_by_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "by");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Error_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (16 == name_len && 0 == strncmp(fld_name, "stanzaErrorGroup", name_len)) {
        int ret_val = field_stanzaErrorGroup.JSON_decode(Error_stanzaErrorGroup_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "stanzaErrorGroup");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "text", name_len)) {
        int ret_val = field_text.JSON_decode(Error_text_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "text");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_by.is_bound()) {
    field_by = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "type_");
    return JSON_ERROR_FATAL;
  }
  if (!field_stanzaErrorGroup.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "stanzaErrorGroup");
    return JSON_ERROR_FATAL;
  }
  if (!field_text.is_bound()) {
    field_text = OMIT_VALUE;
  }

  return dec_len;
}

struct Error_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_by;
Error_type___template field_type__;
urn__ietf__params__xml__ns__xmpp__stanzas::StanzaErrorGroup_template field_stanzaErrorGroup;
urn__ietf__params__xml__ns__xmpp__stanzas::Text_template field_text;
};

void Error_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_by = ANY_OR_OMIT;
single_value->field_type__ = ANY_VALUE;
single_value->field_stanzaErrorGroup = ANY_VALUE;
single_value->field_text = ANY_OR_OMIT;
}
}
}

void Error_template::copy_value(const Error& other_value)
{
single_value = new single_value_struct;
if (other_value.by().is_bound()) {
  if (other_value.by().ispresent()) single_value->field_by = other_value.by()();
  else single_value->field_by = OMIT_VALUE;
} else {
  single_value->field_by.clean_up();
}
if (other_value.type__().is_bound()) {
  single_value->field_type__ = other_value.type__();
} else {
  single_value->field_type__.clean_up();
}
if (other_value.stanzaErrorGroup().is_bound()) {
  single_value->field_stanzaErrorGroup = other_value.stanzaErrorGroup();
} else {
  single_value->field_stanzaErrorGroup.clean_up();
}
if (other_value.text().is_bound()) {
  if (other_value.text().ispresent()) single_value->field_text = other_value.text()();
  else single_value->field_text = OMIT_VALUE;
} else {
  single_value->field_text.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Error_template::copy_template(const Error_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.by().get_selection()) {
single_value->field_by = other_value.by();
} else {
single_value->field_by.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.stanzaErrorGroup().get_selection()) {
single_value->field_stanzaErrorGroup = other_value.stanzaErrorGroup();
} else {
single_value->field_stanzaErrorGroup.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.text().get_selection()) {
single_value->field_text = other_value.text();
} else {
single_value->field_text.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Error_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Error.");
break;
}
set_selection(other_value);
}

Error_template::Error_template()
{
}

Error_template::Error_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Error_template::Error_template(const Error& other_value)
{
copy_value(other_value);
}

Error_template::Error_template(const OPTIONAL<Error>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Error&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Error from an unbound optional field.");
}
}

Error_template::Error_template(const Error_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Error_template::~Error_template()
{
clean_up();
}

Error_template& Error_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Error_template& Error_template::operator=(const Error& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Error_template& Error_template::operator=(const OPTIONAL<Error>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Error&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Error.");
}
return *this;
}

Error_template& Error_template::operator=(const Error_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Error_template::match(const Error& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.by().is_bound()) return FALSE;
if((other_value.by().ispresent() ? !single_value->field_by.match((const UNIVERSAL_CHARSTRING&)other_value.by()) : !single_value->field_by.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if(!single_value->field_type__.match(other_value.type__()))return FALSE;
if(!other_value.stanzaErrorGroup().is_bound()) return FALSE;
if(!single_value->field_stanzaErrorGroup.match(other_value.stanzaErrorGroup()))return FALSE;
if(!other_value.text().is_bound()) return FALSE;
if((other_value.text().ispresent() ? !single_value->field_text.match((const urn__ietf__params__xml__ns__xmpp__stanzas::Text&)other_value.text()) : !single_value->field_text.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Error.");
}
return FALSE;
}

boolean Error_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_by.is_omit() || single_value->field_by.is_bound()) return TRUE;
if (single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_stanzaErrorGroup.is_bound()) return TRUE;
if (single_value->field_text.is_omit() || single_value->field_text.is_bound()) return TRUE;
return FALSE;
}

boolean Error_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_by.is_omit() && !single_value->field_by.is_value()) return FALSE;
if (!single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_stanzaErrorGroup.is_value()) return FALSE;
if (!single_value->field_text.is_omit() && !single_value->field_text.is_value()) return FALSE;
return TRUE;
}

void Error_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Error Error_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Error.");
Error ret_val;
if (single_value->field_by.is_omit()) ret_val.by() = OMIT_VALUE;
else if (single_value->field_by.is_bound()) {
ret_val.by() = single_value->field_by.valueof();
}
if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_stanzaErrorGroup.is_bound()) {
ret_val.stanzaErrorGroup() = single_value->field_stanzaErrorGroup.valueof();
}
if (single_value->field_text.is_omit()) ret_val.text() = OMIT_VALUE;
else if (single_value->field_text.is_bound()) {
ret_val.text() = single_value->field_text.valueof();
}
return ret_val;
}

void Error_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Error.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Error_template[list_length];
}

Error_template& Error_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Error.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Error.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Error_template::by()
{
set_specific();
return single_value->field_by;
}

const UNIVERSAL_CHARSTRING_template& Error_template::by() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field by of a non-specific template of type @jabber_client.Error.");
return single_value->field_by;
}

Error_type___template& Error_template::type__()
{
set_specific();
return single_value->field_type__;
}

const Error_type___template& Error_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @jabber_client.Error.");
return single_value->field_type__;
}

urn__ietf__params__xml__ns__xmpp__stanzas::StanzaErrorGroup_template& Error_template::stanzaErrorGroup()
{
set_specific();
return single_value->field_stanzaErrorGroup;
}

const urn__ietf__params__xml__ns__xmpp__stanzas::StanzaErrorGroup_template& Error_template::stanzaErrorGroup() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field stanzaErrorGroup of a non-specific template of type @jabber_client.Error.");
return single_value->field_stanzaErrorGroup;
}

urn__ietf__params__xml__ns__xmpp__stanzas::Text_template& Error_template::text()
{
set_specific();
return single_value->field_text;
}

const urn__ietf__params__xml__ns__xmpp__stanzas::Text_template& Error_template::text() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field text of a non-specific template of type @jabber_client.Error.");
return single_value->field_text;
}

int Error_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Error which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_by.is_present()) ret_val++;
      if (single_value->field_text.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Error containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Error containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Error containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Error containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Error containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Error.");
  }
  return 0;
}

void Error_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ by := ");
single_value->field_by.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", stanzaErrorGroup := ");
single_value->field_stanzaErrorGroup.log();
TTCN_Logger::log_event_str(", text := ");
single_value->field_text.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Error_template::log_match(const Error& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.by().ispresent()){
if(!single_value->field_by.match(match_value.by())){
TTCN_Logger::log_logmatch_info(".by");
single_value->field_by.log_match(match_value.by());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_by.match_omit()){
 TTCN_Logger::log_logmatch_info(".by := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_by.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_stanzaErrorGroup.match(match_value.stanzaErrorGroup())){
TTCN_Logger::log_logmatch_info(".stanzaErrorGroup");
single_value->field_stanzaErrorGroup.log_match(match_value.stanzaErrorGroup());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.text().ispresent()){
if(!single_value->field_text.match(match_value.text())){
TTCN_Logger::log_logmatch_info(".text");
single_value->field_text.log_match(match_value.text());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_text.match_omit()){
 TTCN_Logger::log_logmatch_info(".text := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_text.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ by := ");
if (match_value.by().ispresent()) single_value->field_by.log_match(match_value.by());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_by.log();
if (single_value->field_by.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::log_event_str(", stanzaErrorGroup := ");
single_value->field_stanzaErrorGroup.log_match(match_value.stanzaErrorGroup());
TTCN_Logger::log_event_str(", text := ");
if (match_value.text().ispresent()) single_value->field_text.log_match(match_value.text());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_text.log();
if (single_value->field_text.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Error_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_by.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_stanzaErrorGroup.encode_text(text_buf);
single_value->field_text.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Error.");
}
}

void Error_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_by.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_stanzaErrorGroup.decode_text(text_buf);
single_value->field_text.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Error_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Error.");
}
}

void Error_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Error'");
    }
    if (strcmp("by", param_field) == 0) {
      by().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("stanzaErrorGroup", param_field) == 0) {
      stanzaErrorGroup().set_param(param);
      return;
    } else if (strcmp("text", param_field) == 0) {
      text().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Error'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @jabber_client.Error has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) by().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) stanzaErrorGroup().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) text().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "by")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          by().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "stanzaErrorGroup")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          stanzaErrorGroup().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "text")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          text().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Error: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Error");
  }
  is_ifpresent = param.get_ifpresent();
}

void Error_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_by.check_restriction(t_res, t_name ? t_name : "@jabber_client.Error");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Error");
single_value->field_stanzaErrorGroup.check_restriction(t_res, t_name ? t_name : "@jabber_client.Error");
single_value->field_text.check_restriction(t_res, t_name ? t_name : "@jabber_client.Error");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Error");
}

boolean Error_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Error_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Presence_choice__list_0 Presence_choice__list::UNBOUND_ELEM;
Presence_choice__list::Presence_choice__list()
{
val_ptr = NULL;
}

Presence_choice__list::Presence_choice__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Presence_choice__list::Presence_choice__list(const Presence_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Presence.choice_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Presence_choice__list::~Presence_choice__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Presence_choice__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Presence_choice__list& Presence_choice__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Presence_choice__list& Presence_choice__list::operator=(const Presence_choice__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @jabber_client.Presence.choice_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Presence_choice__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Presence.choice_list.");
return val_ptr->n_elements == 0 ;
}

boolean Presence_choice__list::operator==(const Presence_choice__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Presence.choice_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Presence.choice_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Presence_choice__list_0& Presence_choice__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Presence.choice_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Presence_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Presence_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Presence_choice__list_0;
}
return *val_ptr->value_elements[index_value];
}

Presence_choice__list_0& Presence_choice__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Presence.choice_list.");
return (*this)[(int)index_value];
}

const Presence_choice__list_0& Presence_choice__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @jabber_client.Presence.choice_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Presence.choice_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @jabber_client.Presence.choice_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Presence_choice__list_0& Presence_choice__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Presence.choice_list.");
return (*this)[(int)index_value];
}

Presence_choice__list Presence_choice__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Presence_choice__list Presence_choice__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Presence_choice__list Presence_choice__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Presence_choice__list Presence_choice__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @jabber_client.Presence.choice_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Presence_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Presence_choice__list_0(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Presence_choice__list Presence_choice__list::operator+(const Presence_choice__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @jabber_client.Presence.choice_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Presence_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Presence_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Presence_choice__list_0(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Presence_choice__list Presence_choice__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @jabber_client.Presence.choice_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@jabber_client.Presence.choice_list","element");
Presence_choice__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Presence_choice__list_0(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Presence_choice__list Presence_choice__list::replace(int index, int len, const Presence_choice__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @jabber_client.Presence.choice_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @jabber_client.Presence.choice_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@jabber_client.Presence.choice_list","element");
Presence_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Presence_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Presence_choice__list_0(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Presence_choice__list_0(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Presence_choice__list Presence_choice__list::replace(int index, int len, const Presence_choice__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Presence_choice__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @jabber_client.Presence.choice_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Presence_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Presence_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Presence_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @jabber_client.Presence.choice_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Presence_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Presence_choice__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Presence_choice__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @jabber_client.Presence.choice_list.");
return val_ptr->n_elements;
}

int Presence_choice__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @jabber_client.Presence.choice_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Presence_choice__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Presence_choice__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@jabber_client.Presence.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@jabber_client.Presence.choice_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@jabber_client.Presence.choice_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Presence_choice__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Presence_choice__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @jabber_client.Presence.choice_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Presence_choice__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @jabber_client.Presence.choice_list.");
val_ptr->value_elements = (Presence_choice__list_0**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Presence_choice__list_0;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Presence_choice__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Presence_choice__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Presence_choice__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Presence_choice__list_0::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Presence_choice__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Presence_choice__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Presence_choice__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Presence_choice__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Presence.choice_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Presence_choice__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Presence_choice__list_0* val = new Presence_choice__list_0;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Presence_choice__list_0**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Presence_choice__list_template::copy_value(const Presence_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @jabber_client.Presence.choice_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Presence_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Presence_choice__list_0_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Presence_choice__list_0_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Presence_choice__list_template::copy_template(const Presence_choice__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Presence_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Presence_choice__list_0_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Presence_choice__list_0_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Presence_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Presence.choice_list.");
break;
}
set_selection(other_value);
}

boolean Presence_choice__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Presence_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Presence_choice__list*)value_ptr)[value_index]);
else return ((const Presence_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Presence_choice__list_template::Presence_choice__list_template()
{
}

Presence_choice__list_template::Presence_choice__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Presence_choice__list_template::Presence_choice__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Presence_choice__list_template::Presence_choice__list_template(const Presence_choice__list& other_value)
{
copy_value(other_value);
}

Presence_choice__list_template::Presence_choice__list_template(const OPTIONAL<Presence_choice__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Presence.choice_list from an unbound optional field.");
}
}

Presence_choice__list_template::Presence_choice__list_template(const Presence_choice__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Presence_choice__list_template::~Presence_choice__list_template()
{
clean_up();
}

void Presence_choice__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Presence_choice__list_template& Presence_choice__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Presence_choice__list_template& Presence_choice__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Presence_choice__list_template& Presence_choice__list_template::operator=(const Presence_choice__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Presence_choice__list_template& Presence_choice__list_template::operator=(const OPTIONAL<Presence_choice__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Presence.choice_list.");
}
return *this;
}

Presence_choice__list_template& Presence_choice__list_template::operator=(const Presence_choice__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Presence_choice__list_0_template& Presence_choice__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Presence.choice_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Presence.choice_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Presence_choice__list_0_template& Presence_choice__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Presence.choice_list.");
return (*this)[(int)index_value];
}

const Presence_choice__list_0_template& Presence_choice__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Presence.choice_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Presence.choice_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @jabber_client.Presence.choice_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Presence_choice__list_0_template& Presence_choice__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Presence.choice_list.");
return (*this)[(int)index_value];
}

void Presence_choice__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @jabber_client.Presence.choice_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Presence_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Presence_choice__list_0_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Presence_choice__list_0_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Presence_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Presence_choice__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Presence_choice__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.choice_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @jabber_client.Presence.choice_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @jabber_client.Presence.choice_list");
}

boolean Presence_choice__list_template::match(const Presence_choice__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @jabber_client.Presence.choice_list.");
}
return FALSE;
}

boolean Presence_choice__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Presence_choice__list Presence_choice__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @jabber_client.Presence.choice_list.");
Presence_choice__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Presence_choice__list Presence_choice__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Presence_choice__list Presence_choice__list_template::replace(int index, int len, const Presence_choice__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Presence_choice__list Presence_choice__list_template::replace(int index, int len, const Presence_choice__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Presence_choice__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Presence_choice__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @jabber_client.Presence.choice_list.");
}
set_selection(template_type);
}

Presence_choice__list_template& Presence_choice__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @jabber_client.Presence.choice_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @jabber_client.Presence.choice_list.");
return value_list.list_value[list_index];
}

void Presence_choice__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Presence_choice__list_template::log_match(const Presence_choice__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Presence_choice__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Presence.choice_list.");
}
}

void Presence_choice__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @jabber_client.Presence.choice_list.");
single_value.value_elements = (Presence_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Presence_choice__list_0_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Presence_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @jabber_client.Presence.choice_list.");
}
}

boolean Presence_choice__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Presence_choice__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Presence_choice__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@jabber_client.Presence.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@jabber_client.Presence.choice_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Presence_choice__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence.choice_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Presence.choice_list");
}

void Presence_choice__list_0::copy_value(const Presence_choice__list_0& other_value)
{
switch (other_value.union_selection) {
case ALT_show:
field_show = new Show(*other_value.field_show);
break;
case ALT_status:
field_status = new Status(*other_value.field_status);
break;
case ALT_priority:
field_priority = new INTEGER(*other_value.field_priority);
break;
default:
TTCN_error("Assignment of an unbound union value of type @jabber_client.Presence.choice_list.CHOICE.");
}
union_selection = other_value.union_selection;
}

Presence_choice__list_0::Presence_choice__list_0()
{
union_selection = UNBOUND_VALUE;
}

Presence_choice__list_0::Presence_choice__list_0(const Presence_choice__list_0& other_value)
: Base_Type(){
copy_value(other_value);
}

Presence_choice__list_0::~Presence_choice__list_0()
{
clean_up();
}

Presence_choice__list_0& Presence_choice__list_0::operator=(const Presence_choice__list_0& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Presence_choice__list_0::operator==(const Presence_choice__list_0& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @jabber_client.Presence.choice_list.CHOICE.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @jabber_client.Presence.choice_list.CHOICE.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_show:
return *field_show == *other_value.field_show;
case ALT_status:
return *field_status == *other_value.field_status;
case ALT_priority:
return *field_priority == *other_value.field_priority;
default:
return FALSE;
}
}

Show& Presence_choice__list_0::show()
{
if (union_selection != ALT_show) {
clean_up();
field_show = new Show;
union_selection = ALT_show;
}
return *field_show;
}

const Show& Presence_choice__list_0::show() const
{
if (union_selection != ALT_show) TTCN_error("Using non-selected field show in a value of union type @jabber_client.Presence.choice_list.CHOICE.");
return *field_show;
}

Status& Presence_choice__list_0::status()
{
if (union_selection != ALT_status) {
clean_up();
field_status = new Status;
union_selection = ALT_status;
}
return *field_status;
}

const Status& Presence_choice__list_0::status() const
{
if (union_selection != ALT_status) TTCN_error("Using non-selected field status in a value of union type @jabber_client.Presence.choice_list.CHOICE.");
return *field_status;
}

INTEGER& Presence_choice__list_0::priority()
{
if (union_selection != ALT_priority) {
clean_up();
field_priority = new INTEGER;
union_selection = ALT_priority;
}
return *field_priority;
}

const INTEGER& Presence_choice__list_0::priority() const
{
if (union_selection != ALT_priority) TTCN_error("Using non-selected field priority in a value of union type @jabber_client.Presence.choice_list.CHOICE.");
return *field_priority;
}

boolean Presence_choice__list_0::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @jabber_client.Presence.choice_list.CHOICE.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @jabber_client.Presence.choice_list.CHOICE.");
return union_selection == checked_selection;
}

boolean Presence_choice__list_0::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Presence_choice__list_0::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_show: return field_show->is_value();
case ALT_status: return field_status->is_value();
case ALT_priority: return field_priority->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Presence_choice__list_0::clean_up()
{
switch (union_selection) {
case ALT_show:
  delete field_show;
  break;
case ALT_status:
  delete field_status;
  break;
case ALT_priority:
  delete field_priority;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Presence_choice__list_0::log() const
{
switch (union_selection) {
case ALT_show:
TTCN_Logger::log_event_str("{ show := ");
field_show->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_status:
TTCN_Logger::log_event_str("{ status := ");
field_status->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_priority:
TTCN_Logger::log_event_str("{ priority := ");
field_priority->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Presence_choice__list_0::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@jabber_client.Presence.choice_list.CHOICE'");
    }
    if (strcmp("show", param_field) == 0) {
      show().set_param(param);
      return;
    } else if (strcmp("status", param_field) == 0) {
      status().set_param(param);
      return;
    } else if (strcmp("priority", param_field) == 0) {
      priority().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@jabber_client.Presence.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "show")) {
    show().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "status")) {
    status().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "priority")) {
    priority().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @jabber_client.Presence.choice_list.CHOICE.", mp_last->get_id()->get_name());
}

void Presence_choice__list_0::set_implicit_omit()
{
switch (union_selection) {
case ALT_show:
field_show->set_implicit_omit(); break;
case ALT_status:
field_status->set_implicit_omit(); break;
case ALT_priority:
field_priority->set_implicit_omit(); break;
default: break;
}
}

void Presence_choice__list_0::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_show:
field_show->encode_text(text_buf);
break;
case ALT_status:
field_status->encode_text(text_buf);
break;
case ALT_priority:
field_priority->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @jabber_client.Presence.choice_list.CHOICE.");
}
}

void Presence_choice__list_0::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_show:
show().decode_text(text_buf);
break;
case ALT_status:
status().decode_text(text_buf);
break;
case ALT_priority:
priority().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @jabber_client.Presence.choice_list.CHOICE.");
}
}

void Presence_choice__list_0::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Presence_choice__list_0::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Presence_choice__list_0::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (Show::can_start(name, uri, Presence_choice__list_0_show_xer_, flavor)) return true;
  if (Status::can_start(name, uri, Presence_choice__list_0_status_xer_, flavor)) return true;
  if (INTEGER::can_start(name, uri, Presence_choice__list_0_priority_xer_, flavor)) return true;
  return false;
}

char ** Presence_choice__list_0::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_show:
      new_ns = field_show->collect_ns(Presence_choice__list_0_show_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    case ALT_status:
      new_ns = field_status->collect_ns(Presence_choice__list_0_status_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Presence_choice__list_0_status_xer_.namelens[1] > 2);
      break;
    case ALT_priority:
      new_ns = field_priority->collect_ns(Presence_choice__list_0_priority_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Presence_choice__list_0_priority_xer_.namelens[1] > 2);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Presence_choice__list_0::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Presence_choice__list_0::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_show:
    ec_1.set_msg("show': ");
    field_show->XER_encode(Presence_choice__list_0_show_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_status:
    ec_1.set_msg("status': ");
    field_status->XER_encode(Presence_choice__list_0_status_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_priority:
    ec_1.set_msg("priority': ");
    field_priority->XER_encode(Presence_choice__list_0_priority_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Presence_choice__list_0::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (Show::can_start(elem_name, ns_uri, Presence_choice__list_0_show_xer_, flavor_1) || (Presence_choice__list_0_show_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("show': ");
      show().XER_decode(Presence_choice__list_0_show_xer_, p_reader, flavor_1, 0);
      if (!show().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Status::can_start(elem_name, ns_uri, Presence_choice__list_0_status_xer_, flavor_1) || (Presence_choice__list_0_status_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("status': ");
      status().XER_decode(Presence_choice__list_0_status_xer_, p_reader, flavor_1, 0);
      if (!status().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (INTEGER::can_start(elem_name, ns_uri, Presence_choice__list_0_priority_xer_, flavor_1) || (Presence_choice__list_0_priority_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("priority': ");
      priority().XER_decode(Presence_choice__list_0_priority_xer_, p_reader, flavor_1, 0);
      if (!priority().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Presence_choice__list_0::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_show:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "show");
    enc_len += field_show->JSON_encode(Presence_choice__list_0_show_descr_, p_tok);
    break;
  case ALT_status:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "status");
    enc_len += field_status->JSON_encode(Presence_choice__list_0_status_descr_, p_tok);
    break;
  case ALT_priority:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "priority");
    enc_len += field_priority->JSON_encode(Presence_choice__list_0_priority_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @jabber_client.Presence.choice_list.CHOICE.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Presence_choice__list_0::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "show", name_len)) {
      int ret_val = show().JSON_decode(Presence_choice__list_0_show_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "show");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "status", name_len)) {
      int ret_val = status().JSON_decode(Presence_choice__list_0_status_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "status");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "priority", name_len)) {
      int ret_val = priority().JSON_decode(Presence_choice__list_0_priority_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "priority");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Presence_choice__list_0_template::copy_value(const Presence_choice__list_0& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
single_value.field_show = new Show_template(other_value.show());
break;
case Presence_choice__list_0::ALT_status:
single_value.field_status = new Status_template(other_value.status());
break;
case Presence_choice__list_0::ALT_priority:
single_value.field_priority = new INTEGER_template(other_value.priority());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @jabber_client.Presence.choice_list.CHOICE.");
}
set_selection(SPECIFIC_VALUE);
}

void Presence_choice__list_0_template::copy_template(const Presence_choice__list_0_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
single_value.field_show = new Show_template(*other_value.single_value.field_show);
break;
case Presence_choice__list_0::ALT_status:
single_value.field_status = new Status_template(*other_value.single_value.field_status);
break;
case Presence_choice__list_0::ALT_priority:
single_value.field_priority = new INTEGER_template(*other_value.single_value.field_priority);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @jabber_client.Presence.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Presence_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
set_selection(other_value);
}

Presence_choice__list_0_template::Presence_choice__list_0_template()
{
}

Presence_choice__list_0_template::Presence_choice__list_0_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Presence_choice__list_0_template::Presence_choice__list_0_template(const Presence_choice__list_0& other_value)
{
copy_value(other_value);
}

Presence_choice__list_0_template::Presence_choice__list_0_template(const OPTIONAL<Presence_choice__list_0>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @jabber_client.Presence.choice_list.CHOICE from an unbound optional field.");
}
}

Presence_choice__list_0_template::Presence_choice__list_0_template(const Presence_choice__list_0_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Presence_choice__list_0_template::~Presence_choice__list_0_template()
{
clean_up();
}

void Presence_choice__list_0_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
delete single_value.field_show;
break;
case Presence_choice__list_0::ALT_status:
delete single_value.field_status;
break;
case Presence_choice__list_0::ALT_priority:
delete single_value.field_priority;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Presence_choice__list_0_template& Presence_choice__list_0_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Presence_choice__list_0_template& Presence_choice__list_0_template::operator=(const Presence_choice__list_0& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Presence_choice__list_0_template& Presence_choice__list_0_template::operator=(const OPTIONAL<Presence_choice__list_0>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
return *this;
}

Presence_choice__list_0_template& Presence_choice__list_0_template::operator=(const Presence_choice__list_0_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Presence_choice__list_0_template::match(const Presence_choice__list_0& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Presence_choice__list_0::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Presence_choice__list_0::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Presence_choice__list_0::ALT_show:
return single_value.field_show->match(other_value.show());
case Presence_choice__list_0::ALT_status:
return single_value.field_status->match(other_value.status());
case Presence_choice__list_0::ALT_priority:
return single_value.field_priority->match(other_value.priority());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
return FALSE;
}

boolean Presence_choice__list_0_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
return single_value.field_show->is_value();
case Presence_choice__list_0::ALT_status:
return single_value.field_status->is_value();
case Presence_choice__list_0::ALT_priority:
return single_value.field_priority->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
}

Presence_choice__list_0 Presence_choice__list_0_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @jabber_client.Presence.choice_list.CHOICE.");
Presence_choice__list_0 ret_val;
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
ret_val.show() = single_value.field_show->valueof();
break;
case Presence_choice__list_0::ALT_status:
ret_val.status() = single_value.field_status->valueof();
break;
case Presence_choice__list_0::ALT_priority:
ret_val.priority() = single_value.field_priority->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
return ret_val;
}

Presence_choice__list_0_template& Presence_choice__list_0_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @jabber_client.Presence.choice_list.CHOICE.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @jabber_client.Presence.choice_list.CHOICE.");
return value_list.list_value[list_index];
}
void Presence_choice__list_0_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @jabber_client.Presence.choice_list.CHOICE.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Presence_choice__list_0_template[list_length];
}

Show_template& Presence_choice__list_0_template::show()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Presence_choice__list_0::ALT_show) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_show = new Show_template(ANY_VALUE);
else single_value.field_show = new Show_template;
single_value.union_selection = Presence_choice__list_0::ALT_show;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_show;
}

const Show_template& Presence_choice__list_0_template::show() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field show in a non-specific template of union type @jabber_client.Presence.choice_list.CHOICE.");
if (single_value.union_selection != Presence_choice__list_0::ALT_show) TTCN_error("Accessing non-selected field show in a template of union type @jabber_client.Presence.choice_list.CHOICE.");
return *single_value.field_show;
}

Status_template& Presence_choice__list_0_template::status()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Presence_choice__list_0::ALT_status) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_status = new Status_template(ANY_VALUE);
else single_value.field_status = new Status_template;
single_value.union_selection = Presence_choice__list_0::ALT_status;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_status;
}

const Status_template& Presence_choice__list_0_template::status() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field status in a non-specific template of union type @jabber_client.Presence.choice_list.CHOICE.");
if (single_value.union_selection != Presence_choice__list_0::ALT_status) TTCN_error("Accessing non-selected field status in a template of union type @jabber_client.Presence.choice_list.CHOICE.");
return *single_value.field_status;
}

INTEGER_template& Presence_choice__list_0_template::priority()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Presence_choice__list_0::ALT_priority) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_priority = new INTEGER_template(ANY_VALUE);
else single_value.field_priority = new INTEGER_template;
single_value.union_selection = Presence_choice__list_0::ALT_priority;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_priority;
}

const INTEGER_template& Presence_choice__list_0_template::priority() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field priority in a non-specific template of union type @jabber_client.Presence.choice_list.CHOICE.");
if (single_value.union_selection != Presence_choice__list_0::ALT_priority) TTCN_error("Accessing non-selected field priority in a template of union type @jabber_client.Presence.choice_list.CHOICE.");
return *single_value.field_priority;
}

boolean Presence_choice__list_0_template::ischosen(Presence_choice__list_0::union_selection_type checked_selection) const
{
if (checked_selection == Presence_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @jabber_client.Presence.choice_list.CHOICE.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Presence_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @jabber_client.Presence.choice_list.CHOICE.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @jabber_client.Presence.choice_list.CHOICE containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @jabber_client.Presence.choice_list.CHOICE, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @jabber_client.Presence.choice_list.CHOICE");
}
return FALSE;
}

void Presence_choice__list_0_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
TTCN_Logger::log_event_str("{ show := ");
single_value.field_show->log();
TTCN_Logger::log_event_str(" }");
break;
case Presence_choice__list_0::ALT_status:
TTCN_Logger::log_event_str("{ status := ");
single_value.field_status->log();
TTCN_Logger::log_event_str(" }");
break;
case Presence_choice__list_0::ALT_priority:
TTCN_Logger::log_event_str("{ priority := ");
single_value.field_priority->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Presence_choice__list_0_template::log_match(const Presence_choice__list_0& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".show");
single_value.field_show->log_match(match_value.show());
} else {
TTCN_Logger::log_event_str("{ show := ");
single_value.field_show->log_match(match_value.show());
TTCN_Logger::log_event_str(" }");
}
break;
case Presence_choice__list_0::ALT_status:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".status");
single_value.field_status->log_match(match_value.status());
} else {
TTCN_Logger::log_event_str("{ status := ");
single_value.field_status->log_match(match_value.status());
TTCN_Logger::log_event_str(" }");
}
break;
case Presence_choice__list_0::ALT_priority:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".priority");
single_value.field_priority->log_match(match_value.priority());
} else {
TTCN_Logger::log_event_str("{ priority := ");
single_value.field_priority->log_match(match_value.priority());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Presence_choice__list_0_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
single_value.field_show->encode_text(text_buf);
break;
case Presence_choice__list_0::ALT_status:
single_value.field_status->encode_text(text_buf);
break;
case Presence_choice__list_0::ALT_priority:
single_value.field_priority->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @jabber_client.Presence.choice_list.CHOICE.");
}
}

void Presence_choice__list_0_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Presence_choice__list_0::UNBOUND_VALUE;
Presence_choice__list_0::union_selection_type new_selection = (Presence_choice__list_0::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Presence_choice__list_0::ALT_show:
single_value.field_show = new Show_template;
single_value.field_show->decode_text(text_buf);
break;
case Presence_choice__list_0::ALT_status:
single_value.field_status = new Status_template;
single_value.field_status->decode_text(text_buf);
break;
case Presence_choice__list_0::ALT_priority:
single_value.field_priority = new INTEGER_template;
single_value.field_priority->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @jabber_client.Presence.choice_list.CHOICE.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Presence_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @jabber_client.Presence.choice_list.CHOICE.");
}
}

boolean Presence_choice__list_0_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Presence_choice__list_0_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Presence_choice__list_0_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@jabber_client.Presence.choice_list.CHOICE'");
    }
    if (strcmp("show", param_field) == 0) {
      show().set_param(param);
      return;
    } else if (strcmp("status", param_field) == 0) {
      status().set_param(param);
      return;
    } else if (strcmp("priority", param_field) == 0) {
      priority().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@jabber_client.Presence.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@jabber_client.Presence.choice_list.CHOICE");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "show")) {
      show().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "status")) {
      status().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "priority")) {
      priority().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @jabber_client.Presence.choice_list.CHOICE.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@jabber_client.Presence.choice_list.CHOICE");
  }
  is_ifpresent = param.get_ifpresent();
}

void Presence_choice__list_0_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Presence_choice__list_0::ALT_show:
single_value.field_show->check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence.choice_list.CHOICE");
return;
case Presence_choice__list_0::ALT_status:
single_value.field_status->check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence.choice_list.CHOICE");
return;
case Presence_choice__list_0::ALT_priority:
single_value.field_priority->check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence.choice_list.CHOICE");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @jabber_client.Presence.choice_list.CHOICE.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Presence.choice_list.CHOICE");
}

Show::Show()
{
enum_value = UNBOUND_VALUE;
}

Show::Show(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @jabber_client.Show with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Show::Show(enum_type other_value)
{
enum_value = other_value;
}

Show::Show(const Show& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @jabber_client.Show.");
enum_value = other_value.enum_value;
}

Show& Show::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @jabber_client.Show.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Show& Show::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Show& Show::operator=(const Show& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Show.");
enum_value = other_value.enum_value;
return *this;
}

boolean Show::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value == other_value;
}

boolean Show::operator==(const Show& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value == other_value.enum_value;
}

boolean Show::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value < other_value;
}

boolean Show::operator<(const Show& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value < other_value.enum_value;
}

boolean Show::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value > other_value;
}

boolean Show::operator>(const Show& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Show.");
return enum_value > other_value.enum_value;
}

const char *Show::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case away: return "away";
case chat: return "chat";
case dnd: return "dnd";
case xa: return "xa";
default: return "<unknown>";
}
}

Show::enum_type Show::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "away")) return away;
else if (!strcmp(str_par, "chat")) return chat;
else if (!strcmp(str_par, "dnd")) return dnd;
else if (!strcmp(str_par, "xa")) return xa;
else return UNKNOWN_VALUE;
}

boolean Show::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
return TRUE;
default:
return FALSE;
}
}

int Show::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Show.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Show::enum2int(const Show& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Show.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Show::operator Show::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @jabber_client.Show.");
return enum_value;
}

void Show::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Show::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@jabber_client.Show");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @jabber_client.Show.");
  }
}

void Show::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @jabber_client.Show.");
text_buf.push_int(enum_value);
}

void Show::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @jabber_client.Show.", enum_value);
}

void Show::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Show::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Show::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Show::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Show::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Show::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @jabber_client.Show.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Show::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Show_template::copy_template(const Show_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Show_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @jabber_client.Show.");
}
}

Show_template::Show_template()
{
}

Show_template::Show_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Show_template::Show_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Show::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @jabber_client.Show with unknown numeric value %d.", other_value);
single_value = (Show::enum_type)other_value;
}

Show_template::Show_template(Show::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Show_template::Show_template(const Show& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Show::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @jabber_client.Show.");
single_value = other_value.enum_value;
}

Show_template::Show_template(const OPTIONAL<Show>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Show::enum_type)(const Show&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @jabber_client.Show from an unbound optional field.");
}
}

Show_template::Show_template(const Show_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Show_template::~Show_template()
{
clean_up();
}

boolean Show_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Show_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Show::UNBOUND_VALUE;
}

void Show_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Show_template& Show_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Show_template& Show_template::operator=(int other_value)
{
if (!Show::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @jabber_client.Show.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Show::enum_type)other_value;
return *this;
}

Show_template& Show_template::operator=(Show::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Show_template& Show_template::operator=(const Show& other_value)
{
if (other_value.enum_value == Show::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Show to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Show_template& Show_template::operator=(const OPTIONAL<Show>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Show::enum_type)(const Show&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @jabber_client.Show.");
}
return *this;
}

Show_template& Show_template::operator=(const Show_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Show_template::match(Show::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @jabber_client.Show.");
}
return FALSE;
}

boolean Show_template::match(const Show& other_value) const
{
if (other_value.enum_value == Show::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @jabber_client.Show with an unbound value.");
return match(other_value.enum_value);
}

Show::enum_type Show_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @jabber_client.Show.");
return single_value;
}

void Show_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @jabber_client.Show.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Show_template[list_length];
}

Show_template& Show_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @jabber_client.Show.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @jabber_client.Show.");
return value_list.list_value[list_index];
}

void Show_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Show::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Show_template::log_match(const Show& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Show_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @jabber_client.Show.");
}
}

void Show_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Show::enum_type)text_buf.pull_int().get_val();
if (!Show::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @jabber_client.Show.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Show_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @jabber_client.Show.");
}
}

boolean Show_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Show_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Show_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Show::enum_type enum_val = Show::str_to_enum(param.get_enumerated());
    if (!Show::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @jabber_client.Show.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@jabber_client.Show");
  }
  is_ifpresent = param.get_ifpresent();
}

void Show_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Show");
}

Status::Status()
{
  bound_flag = FALSE;
}

Status::Status(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base)
  :   field_lang(par_lang),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Status::Status(const Status& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Status.");
bound_flag = TRUE;
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Status::clean_up()
{
field_lang.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Status& Status::operator=(const Status& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Status.");
  bound_flag = TRUE;
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Status::operator==(const Status& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_lang==other_value.field_lang
  && field_base==other_value.field_base;
}

boolean Status::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Status::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Status::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Status");
  int ret_val = 1;
  if (field_lang.ispresent()) ret_val++;
  return ret_val;
}

void Status::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Status::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Status'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Status'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @jabber_client.Status has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Status: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Status");
  }
}

void Status::set_implicit_omit()
{
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Status::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Status.");
field_lang.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Status::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_lang.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Status::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Status::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Status::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_lang.collect_ns(Status_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Status_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Status::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (CHARSTRING::can_start(name, uri, Status_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Status_base_xer_, flavor)) return true;
  return false;
}

int Status::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Status_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Status_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Status::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Status_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Status_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Status_lang_xer_, 1) && check_namespace(ns_uri, Status_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Status_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Status_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Status_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Status::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Status.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Status_lang_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Status_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Status::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Status_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Status_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Status_template::single_value_struct {
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_base;
};

void Status_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_lang = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Status_template::copy_value(const Status& other_value)
{
single_value = new single_value_struct;
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Status_template::copy_template(const Status_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Status_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Status.");
break;
}
set_selection(other_value);
}

Status_template::Status_template()
{
}

Status_template::Status_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Status_template::Status_template(const Status& other_value)
{
copy_value(other_value);
}

Status_template::Status_template(const OPTIONAL<Status>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Status&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Status from an unbound optional field.");
}
}

Status_template::Status_template(const Status_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Status_template::~Status_template()
{
clean_up();
}

Status_template& Status_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Status_template& Status_template::operator=(const Status& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Status_template& Status_template::operator=(const OPTIONAL<Status>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Status&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Status.");
}
return *this;
}

Status_template& Status_template::operator=(const Status_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Status_template::match(const Status& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Status.");
}
return FALSE;
}

boolean Status_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Status_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Status_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Status Status_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Status.");
Status ret_val;
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Status_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Status.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Status_template[list_length];
}

Status_template& Status_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Status.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Status.");
return value_list.list_value[list_index];
}

CHARSTRING_template& Status_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Status_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Status.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Status_template::base()
{
set_specific();
return single_value->field_base;
}

const UNIVERSAL_CHARSTRING_template& Status_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @jabber_client.Status.");
return single_value->field_base;
}

int Status_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Status which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_lang.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Status containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Status containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Status containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Status containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Status containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Status.");
  }
  return 0;
}

void Status_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Status_template::log_match(const Status& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Status_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_lang.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Status.");
}
}

void Status_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_lang.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Status_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Status.");
}
}

void Status_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Status'");
    }
    if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Status'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @jabber_client.Status has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Status: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Status");
  }
  is_ifpresent = param.get_ifpresent();
}

void Status_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Status");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@jabber_client.Status");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Status");
}

boolean Status_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Status_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const UNIVERSAL_CHARSTRING Presence_elem__list::UNBOUND_ELEM;
Presence_elem__list::Presence_elem__list()
{
val_ptr = NULL;
}

Presence_elem__list::Presence_elem__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Presence_elem__list::Presence_elem__list(const Presence_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Presence.elem_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Presence_elem__list::~Presence_elem__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Presence_elem__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Presence_elem__list& Presence_elem__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Presence_elem__list& Presence_elem__list::operator=(const Presence_elem__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @jabber_client.Presence.elem_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Presence_elem__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Presence.elem_list.");
return val_ptr->n_elements == 0 ;
}

boolean Presence_elem__list::operator==(const Presence_elem__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @jabber_client.Presence.elem_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Presence.elem_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

UNIVERSAL_CHARSTRING& Presence_elem__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Presence.elem_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new UNIVERSAL_CHARSTRING;
}
return *val_ptr->value_elements[index_value];
}

UNIVERSAL_CHARSTRING& Presence_elem__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Presence.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING& Presence_elem__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @jabber_client.Presence.elem_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @jabber_client.Presence.elem_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @jabber_client.Presence.elem_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const UNIVERSAL_CHARSTRING& Presence_elem__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @jabber_client.Presence.elem_list.");
return (*this)[(int)index_value];
}

Presence_elem__list Presence_elem__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Presence_elem__list Presence_elem__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Presence_elem__list Presence_elem__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Presence_elem__list Presence_elem__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @jabber_client.Presence.elem_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Presence_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Presence_elem__list Presence_elem__list::operator+(const Presence_elem__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @jabber_client.Presence.elem_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Presence_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Presence_elem__list Presence_elem__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @jabber_client.Presence.elem_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@jabber_client.Presence.elem_list","element");
Presence_elem__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Presence_elem__list Presence_elem__list::replace(int index, int len, const Presence_elem__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @jabber_client.Presence.elem_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @jabber_client.Presence.elem_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@jabber_client.Presence.elem_list","element");
Presence_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new UNIVERSAL_CHARSTRING(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Presence_elem__list Presence_elem__list::replace(int index, int len, const Presence_elem__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Presence_elem__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @jabber_client.Presence.elem_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @jabber_client.Presence.elem_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Presence_elem__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Presence_elem__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @jabber_client.Presence.elem_list.");
return val_ptr->n_elements;
}

int Presence_elem__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @jabber_client.Presence.elem_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Presence_elem__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Presence_elem__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@jabber_client.Presence.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@jabber_client.Presence.elem_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@jabber_client.Presence.elem_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Presence_elem__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Presence_elem__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @jabber_client.Presence.elem_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Presence_elem__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @jabber_client.Presence.elem_list.");
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Presence_elem__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Presence_elem__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Presence_elem__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) {
    if (Error::can_start(name, uri, Presence_error___xer_, flavor)) return FALSE;
    return TRUE;
  }
  return UNIVERSAL_CHARSTRING::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Presence_elem__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Presence_elem__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (e_xer && (p_td.xer_bits & ANY_ATTRIBUTES)) {
      static const universal_char sp = { 0,0,0,' ' };
      static const universal_char tb = { 0,0,0,9 };
      size_t buf_len = p_buf.get_len(), shorter = 0;
      const unsigned char * const buf_data = p_buf.get_data();
      if (buf_data[buf_len - 1 - shorter] == '\n') ++shorter;
      if (buf_data[buf_len - 1 - shorter] == '>' ) ++shorter;
      unsigned char saved[4];
      memcpy(saved, buf_data + (buf_len - shorter), shorter);
      p_buf.increase_length(-shorter);
      for (int i = 0; i < val_ptr->n_elements; ++i) {
        TTCN_EncDec_ErrorContext ec_0("Attribute %d: ", i);
        if (val_ptr->value_elements[i] == NULL) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
            "Encoding an unbound universal charstring value.");
          continue;
        }
        size_t len = val_ptr->value_elements[i]->lengthof();
        for (;;) {
          const UNIVERSAL_CHARSTRING_ELEMENT& ue = (*val_ptr->value_elements[i])[len - 1];
          if (sp == ue || tb == ue) --len;
          else break;
        }
        size_t j, sp_at = 0;
        for (j = 0; j < len; j++) {
          UNIVERSAL_CHARSTRING_ELEMENT ue = (*val_ptr->value_elements[i])[j];
          if (sp_at) {
            if (sp == ue || tb == ue) {}
            else break;
          } else {
            if (sp == ue || tb == ue) sp_at = j;
          }
        } // next j
        size_t buf_start = p_buf.get_len();
        if (sp_at > 0) {
          char * ns = mprintf(" xmlns:b%d='", i);
          size_t ns_len = mstrlen(ns);
          p_buf.put_s(ns_len, (const unsigned char*)ns);
          UNIVERSAL_CHARSTRING before(sp_at, (const universal_char*)(*val_ptr->value_elements[i]));
          before.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            TTCN_Buffer ns_buf;
            before.encode_utf8(ns_buf);
            CHARSTRING cs;
            ns_buf.get_string(cs);
            check_namespace_restrictions(p_td, (const char*)cs);
          }
          p_buf.put_c('\'');
          p_buf.put_c(' ');
          p_buf.put_s(ns_len - 9, (const unsigned char*)ns + 7);
          p_buf.put_c(':');
          Free(ns);
        }
        else {
          p_buf.put_c(' ');
          j = 0;
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            check_namespace_restrictions(p_td, NULL);
          }
        }
        UNIVERSAL_CHARSTRING after(len - j, (const universal_char*)(*val_ptr->value_elements[i]) + j);
        after.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
        TTCN_Buffer check_buf;
        check_buf.put_s(2, (unsigned char*)"<a");
        check_buf.put_s(p_buf.get_len() - buf_start, p_buf.get_data() + buf_start);
        check_buf.put_s(2, (unsigned char*)"/>");        XmlReaderWrap checker(check_buf);
        while (1 == checker.Read()) ;
      }
      p_buf.put_s(shorter, saved);
    } else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Presence_elem__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          if (e_xer && (p_td.xer_bits & ANY_ELEMENT)) {
            (*this)[val_ptr->n_elements] = (const char*)p_reader.ReadOuterXml();
            for (rd_ok = p_reader.Read(); rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) {}
            if (p_reader.NodeType() != XML_READER_TYPE_ELEMENT) rd_ok = p_reader.Read();
          } else          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Presence_elem__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Presence.elem_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Presence_elem__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    UNIVERSAL_CHARSTRING* val = new UNIVERSAL_CHARSTRING;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Presence_elem__list_template::copy_value(const Presence_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @jabber_client.Presence.elem_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Presence_elem__list_template::copy_template(const Presence_elem__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Presence_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Presence.elem_list.");
break;
}
set_selection(other_value);
}

boolean Presence_elem__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Presence_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Presence_elem__list*)value_ptr)[value_index]);
else return ((const Presence_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Presence_elem__list_template::Presence_elem__list_template()
{
}

Presence_elem__list_template::Presence_elem__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Presence_elem__list_template::Presence_elem__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Presence_elem__list_template::Presence_elem__list_template(const Presence_elem__list& other_value)
{
copy_value(other_value);
}

Presence_elem__list_template::Presence_elem__list_template(const OPTIONAL<Presence_elem__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Presence.elem_list from an unbound optional field.");
}
}

Presence_elem__list_template::Presence_elem__list_template(const Presence_elem__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Presence_elem__list_template::~Presence_elem__list_template()
{
clean_up();
}

void Presence_elem__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Presence_elem__list_template& Presence_elem__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Presence_elem__list_template& Presence_elem__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Presence_elem__list_template& Presence_elem__list_template::operator=(const Presence_elem__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Presence_elem__list_template& Presence_elem__list_template::operator=(const OPTIONAL<Presence_elem__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Presence.elem_list.");
}
return *this;
}

Presence_elem__list_template& Presence_elem__list_template::operator=(const Presence_elem__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

UNIVERSAL_CHARSTRING_template& Presence_elem__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Presence.elem_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Presence.elem_list.");
    break;
}
return *single_value.value_elements[index_value];
}

UNIVERSAL_CHARSTRING_template& Presence_elem__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Presence.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING_template& Presence_elem__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @jabber_client.Presence.elem_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @jabber_client.Presence.elem_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @jabber_client.Presence.elem_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const UNIVERSAL_CHARSTRING_template& Presence_elem__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @jabber_client.Presence.elem_list.");
return (*this)[(int)index_value];
}

void Presence_elem__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @jabber_client.Presence.elem_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Presence_elem__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Presence_elem__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @jabber_client.Presence.elem_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @jabber_client.Presence.elem_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @jabber_client.Presence.elem_list");
}

boolean Presence_elem__list_template::match(const Presence_elem__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @jabber_client.Presence.elem_list.");
}
return FALSE;
}

boolean Presence_elem__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Presence_elem__list Presence_elem__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @jabber_client.Presence.elem_list.");
Presence_elem__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Presence_elem__list Presence_elem__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Presence_elem__list Presence_elem__list_template::replace(int index, int len, const Presence_elem__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Presence_elem__list Presence_elem__list_template::replace(int index, int len, const Presence_elem__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Presence_elem__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Presence_elem__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @jabber_client.Presence.elem_list.");
}
set_selection(template_type);
}

Presence_elem__list_template& Presence_elem__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @jabber_client.Presence.elem_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @jabber_client.Presence.elem_list.");
return value_list.list_value[list_index];
}

void Presence_elem__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Presence_elem__list_template::log_match(const Presence_elem__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Presence_elem__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Presence.elem_list.");
}
}

void Presence_elem__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @jabber_client.Presence.elem_list.");
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Presence_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @jabber_client.Presence.elem_list.");
}
}

boolean Presence_elem__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Presence_elem__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Presence_elem__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@jabber_client.Presence.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@jabber_client.Presence.elem_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Presence_elem__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence.elem_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Presence.elem_list");
}

Presence::Presence()
{
  bound_flag = FALSE;
}

Presence::Presence(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_from__,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_id,
    const OPTIONAL<CHARSTRING>& par_lang,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_to__,
    const OPTIONAL<Presence_type__>& par_type__,
    const Presence_choice__list& par_choice__list,
    const Presence_elem__list& par_elem__list,
    const OPTIONAL<Error>& par_error__)
  :   field_from__(par_from__),
  field_id(par_id),
  field_lang(par_lang),
  field_to__(par_to__),
  field_type__(par_type__),
  field_choice__list(par_choice__list),
  field_elem__list(par_elem__list),
  field_error__(par_error__)
{
  bound_flag = TRUE;
}

Presence::Presence(const Presence& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Presence.");
bound_flag = TRUE;
if (other_value.from__().is_bound()) field_from__ = other_value.from__();
else field_from__.clean_up();
if (other_value.id().is_bound()) field_id = other_value.id();
else field_id.clean_up();
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.to__().is_bound()) field_to__ = other_value.to__();
else field_to__.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.choice__list().is_bound()) field_choice__list = other_value.choice__list();
else field_choice__list.clean_up();
if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
else field_elem__list.clean_up();
if (other_value.error__().is_bound()) field_error__ = other_value.error__();
else field_error__.clean_up();
}

void Presence::clean_up()
{
field_from__.clean_up();
field_id.clean_up();
field_lang.clean_up();
field_to__.clean_up();
field_type__.clean_up();
field_choice__list.clean_up();
field_elem__list.clean_up();
field_error__.clean_up();
bound_flag = FALSE;
}

Presence& Presence::operator=(const Presence& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Presence.");
  bound_flag = TRUE;
  if (other_value.from__().is_bound()) field_from__ = other_value.from__();
  else field_from__.clean_up();
  if (other_value.id().is_bound()) field_id = other_value.id();
  else field_id.clean_up();
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.to__().is_bound()) field_to__ = other_value.to__();
  else field_to__.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.choice__list().is_bound()) field_choice__list = other_value.choice__list();
  else field_choice__list.clean_up();
  if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
  else field_elem__list.clean_up();
  if (other_value.error__().is_bound()) field_error__ = other_value.error__();
  else field_error__.clean_up();
}
return *this;
}

boolean Presence::operator==(const Presence& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_from__==other_value.field_from__
  && field_id==other_value.field_id
  && field_lang==other_value.field_lang
  && field_to__==other_value.field_to__
  && field_type__==other_value.field_type__
  && field_choice__list==other_value.field_choice__list
  && field_elem__list==other_value.field_elem__list
  && field_error__==other_value.field_error__;
}

boolean Presence::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_from__.get_selection() || field_from__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_id.get_selection() || field_id.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_to__.get_selection() || field_to__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_type__.get_selection() || field_type__.is_bound()) return TRUE;
if(field_choice__list.is_bound()) return TRUE;
if(field_elem__list.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_error__.get_selection() || field_error__.is_bound()) return TRUE;
return FALSE;
}
boolean Presence::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_from__.get_selection() && !field_from__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_id.get_selection() && !field_id.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_to__.get_selection() && !field_to__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_type__.get_selection() && !field_type__.is_value()) return FALSE;
if(!field_choice__list.is_value()) return FALSE;
if(!field_elem__list.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_error__.get_selection() && !field_error__.is_value()) return FALSE;
return TRUE;
}
int Presence::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Presence");
  int ret_val = 2;
  if (field_from__.ispresent()) ret_val++;
  if (field_id.ispresent()) ret_val++;
  if (field_lang.ispresent()) ret_val++;
  if (field_to__.ispresent()) ret_val++;
  if (field_type__.ispresent()) ret_val++;
  if (field_error__.ispresent()) ret_val++;
  return ret_val;
}

void Presence::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ from_ := ");
field_from__.log();
TTCN_Logger::log_event_str(", id := ");
field_id.log();
TTCN_Logger::log_event_str(", lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", choice_list := ");
field_choice__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
field_elem__list.log();
TTCN_Logger::log_event_str(", error_ := ");
field_error__.log();
TTCN_Logger::log_event_str(" }");
}

void Presence::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Presence'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Presence'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (8<param.get_size()) {
      param.error("record value of type @jabber_client.Presence has 8 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) choice__list().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(7));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Presence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Presence");
  }
}

void Presence::set_implicit_omit()
{
if (!from__().is_bound()) from__() = OMIT_VALUE;
else from__().set_implicit_omit();
if (!id().is_bound()) id() = OMIT_VALUE;
else id().set_implicit_omit();
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (!to__().is_bound()) to__() = OMIT_VALUE;
else to__().set_implicit_omit();
if (!type__().is_bound()) type__() = OMIT_VALUE;
else type__().set_implicit_omit();
if (choice__list().is_bound()) choice__list().set_implicit_omit();
if (elem__list().is_bound()) elem__list().set_implicit_omit();
if (!error__().is_bound()) error__() = OMIT_VALUE;
else error__().set_implicit_omit();
}

void Presence::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Presence.");
field_from__.encode_text(text_buf);
field_id.encode_text(text_buf);
field_lang.encode_text(text_buf);
field_to__.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_choice__list.encode_text(text_buf);
field_elem__list.encode_text(text_buf);
field_error__.encode_text(text_buf);
}

void Presence::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_from__.decode_text(text_buf);
field_id.decode_text(text_buf);
field_lang.decode_text(text_buf);
field_to__.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_choice__list.decode_text(text_buf);
field_elem__list.decode_text(text_buf);
field_error__.decode_text(text_buf);
}

void Presence::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Presence::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Presence::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_from__.collect_ns(Presence_from___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_id.collect_ns(Presence_id_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_lang.collect_ns(Presence_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_to__.collect_ns(Presence_to___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Presence_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_choice__list.collect_ns(Presence_choice__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem__list.collect_ns(Presence_elem__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_error__.collect_ns(Presence_error___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Presence::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Presence_from___xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Presence_id_xer_, flavor)) return true;
  else if (CHARSTRING::can_start(name, uri, Presence_lang_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Presence_to___xer_, flavor)) return true;
  else if (Presence_type__::can_start(name, uri, Presence_type___xer_, flavor)) return true;
  else if (Presence_choice__list::can_start(name, uri, Presence_choice__list_xer_, flavor)) return true;
  return false;
}

int Presence::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("from_': ");
  tmp_len = field_from__.XER_encode(Presence_from___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("id': ");
  tmp_len = field_id.XER_encode(Presence_id_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Presence_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("to_': ");
  tmp_len = field_to__.XER_encode(Presence_to___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Presence_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("choice_list': ");
  sub_len += field_choice__list.XER_encode(Presence_choice__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("elem_list': ");
  sub_len += field_elem__list.XER_encode(Presence_elem__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("error_': ");
  sub_len += field_error__.XER_encode(Presence_error___xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Presence::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Presence_from___xer_.dfeValue) field_from__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Presence_from___xer_.dfeValue);
  else field_from__ = OMIT_VALUE;
  if (Presence_id_xer_.dfeValue) field_id = *static_cast<const UNIVERSAL_CHARSTRING*>(Presence_id_xer_.dfeValue);
  else field_id = OMIT_VALUE;
  if (Presence_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Presence_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  if (Presence_to___xer_.dfeValue) field_to__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Presence_to___xer_.dfeValue);
  else field_to__ = OMIT_VALUE;
  if (Presence_type___xer_.dfeValue) field_type__ = *static_cast<const Presence_type__*>(Presence_type___xer_.dfeValue);
  else field_type__ = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Presence_from___xer_, 1) && check_namespace(ns_uri, Presence_from___xer_)) {
      ec_1.set_msg("from_': ");
      field_from__.XER_decode(Presence_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Presence_id_xer_, 1) && check_namespace(ns_uri, Presence_id_xer_)) {
      ec_1.set_msg("id': ");
      field_id.XER_decode(Presence_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Presence_lang_xer_, 1) && check_namespace(ns_uri, Presence_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Presence_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Presence_to___xer_, 1) && check_namespace(ns_uri, Presence_to___xer_)) {
      ec_1.set_msg("to_': ");
      field_to__.XER_decode(Presence_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Presence_type___xer_, 1) && check_namespace(ns_uri, Presence_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Presence_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("from_': ");
    field_from__.XER_decode(Presence_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("id': ");
    field_id.XER_decode(Presence_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Presence_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("to_': ");
    field_to__.XER_decode(Presence_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Presence_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  {
    ec_1.set_msg("choice_list': ");
    field_choice__list.XER_decode(Presence_choice__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  {
    ec_1.set_msg("elem_list': ");
    field_elem__list.XER_decode(Presence_elem__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_error__ = *static_cast<const Error*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("error_': ");
    field_error__.XER_decode(Presence_error___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Presence::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Presence.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_from__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "from_");
    enc_len += field_from__.JSON_encode(Presence_from___descr_, p_tok);
  }

  if (field_id.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "id");
    enc_len += field_id.JSON_encode(Presence_id_descr_, p_tok);
  }

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Presence_lang_descr_, p_tok);
  }

  if (field_to__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "to_");
    enc_len += field_to__.JSON_encode(Presence_to___descr_, p_tok);
  }

  if (field_type__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Presence_type___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice_list");
    enc_len += field_choice__list.JSON_encode(Presence_choice__list_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem_list");
    enc_len += field_elem__list.JSON_encode(Presence_elem__list_descr_, p_tok);
  }

  if (field_error__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "error_");
    enc_len += field_error__.JSON_encode(Presence_error___descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Presence::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (5 == name_len && 0 == strncmp(fld_name, "from_", name_len)) {
        int ret_val = field_from__.JSON_decode(Presence_from___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "from_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (2 == name_len && 0 == strncmp(fld_name, "id", name_len)) {
        int ret_val = field_id.JSON_decode(Presence_id_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "id");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Presence_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "to_", name_len)) {
        int ret_val = field_to__.JSON_decode(Presence_to___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "to_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Presence_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (11 == name_len && 0 == strncmp(fld_name, "choice_list", name_len)) {
        int ret_val = field_choice__list.JSON_decode(Presence_choice__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "elem_list", name_len)) {
        int ret_val = field_elem__list.JSON_decode(Presence_elem__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (6 == name_len && 0 == strncmp(fld_name, "error_", name_len)) {
        int ret_val = field_error__.JSON_decode(Presence_error___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "error_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_from__.is_bound()) {
    field_from__ = OMIT_VALUE;
  }
  if (!field_id.is_bound()) {
    field_id = OMIT_VALUE;
  }
  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_to__.is_bound()) {
    field_to__ = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    field_type__ = OMIT_VALUE;
  }
  if (!field_choice__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "choice_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_elem__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem_list");
    return JSON_ERROR_FATAL;
  }
  if (!field_error__.is_bound()) {
    field_error__ = OMIT_VALUE;
  }

  return dec_len;
}

struct Presence_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_from__;
UNIVERSAL_CHARSTRING_template field_id;
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_to__;
Presence_type___template field_type__;
Presence_choice__list_template field_choice__list;
Presence_elem__list_template field_elem__list;
Error_template field_error__;
};

void Presence_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_from__ = ANY_OR_OMIT;
single_value->field_id = ANY_OR_OMIT;
single_value->field_lang = ANY_OR_OMIT;
single_value->field_to__ = ANY_OR_OMIT;
single_value->field_type__ = ANY_OR_OMIT;
single_value->field_choice__list = ANY_VALUE;
single_value->field_elem__list = ANY_VALUE;
single_value->field_error__ = ANY_OR_OMIT;
}
}
}

void Presence_template::copy_value(const Presence& other_value)
{
single_value = new single_value_struct;
if (other_value.from__().is_bound()) {
  if (other_value.from__().ispresent()) single_value->field_from__ = other_value.from__()();
  else single_value->field_from__ = OMIT_VALUE;
} else {
  single_value->field_from__.clean_up();
}
if (other_value.id().is_bound()) {
  if (other_value.id().ispresent()) single_value->field_id = other_value.id()();
  else single_value->field_id = OMIT_VALUE;
} else {
  single_value->field_id.clean_up();
}
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.to__().is_bound()) {
  if (other_value.to__().ispresent()) single_value->field_to__ = other_value.to__()();
  else single_value->field_to__ = OMIT_VALUE;
} else {
  single_value->field_to__.clean_up();
}
if (other_value.type__().is_bound()) {
  if (other_value.type__().ispresent()) single_value->field_type__ = other_value.type__()();
  else single_value->field_type__ = OMIT_VALUE;
} else {
  single_value->field_type__.clean_up();
}
if (other_value.choice__list().is_bound()) {
  single_value->field_choice__list = other_value.choice__list();
} else {
  single_value->field_choice__list.clean_up();
}
if (other_value.elem__list().is_bound()) {
  single_value->field_elem__list = other_value.elem__list();
} else {
  single_value->field_elem__list.clean_up();
}
if (other_value.error__().is_bound()) {
  if (other_value.error__().ispresent()) single_value->field_error__ = other_value.error__()();
  else single_value->field_error__ = OMIT_VALUE;
} else {
  single_value->field_error__.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Presence_template::copy_template(const Presence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.from__().get_selection()) {
single_value->field_from__ = other_value.from__();
} else {
single_value->field_from__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.id().get_selection()) {
single_value->field_id = other_value.id();
} else {
single_value->field_id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.to__().get_selection()) {
single_value->field_to__ = other_value.to__();
} else {
single_value->field_to__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.choice__list().get_selection()) {
single_value->field_choice__list = other_value.choice__list();
} else {
single_value->field_choice__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem__list().get_selection()) {
single_value->field_elem__list = other_value.elem__list();
} else {
single_value->field_elem__list.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.error__().get_selection()) {
single_value->field_error__ = other_value.error__();
} else {
single_value->field_error__.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Presence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Presence.");
break;
}
set_selection(other_value);
}

Presence_template::Presence_template()
{
}

Presence_template::Presence_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Presence_template::Presence_template(const Presence& other_value)
{
copy_value(other_value);
}

Presence_template::Presence_template(const OPTIONAL<Presence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Presence from an unbound optional field.");
}
}

Presence_template::Presence_template(const Presence_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Presence_template::~Presence_template()
{
clean_up();
}

Presence_template& Presence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Presence_template& Presence_template::operator=(const Presence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Presence_template& Presence_template::operator=(const OPTIONAL<Presence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Presence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Presence.");
}
return *this;
}

Presence_template& Presence_template::operator=(const Presence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Presence_template::match(const Presence& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.from__().is_bound()) return FALSE;
if((other_value.from__().ispresent() ? !single_value->field_from__.match((const UNIVERSAL_CHARSTRING&)other_value.from__()) : !single_value->field_from__.match_omit()))return FALSE;
if(!other_value.id().is_bound()) return FALSE;
if((other_value.id().ispresent() ? !single_value->field_id.match((const UNIVERSAL_CHARSTRING&)other_value.id()) : !single_value->field_id.match_omit()))return FALSE;
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.to__().is_bound()) return FALSE;
if((other_value.to__().ispresent() ? !single_value->field_to__.match((const UNIVERSAL_CHARSTRING&)other_value.to__()) : !single_value->field_to__.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if((other_value.type__().ispresent() ? !single_value->field_type__.match((const Presence_type__&)other_value.type__()) : !single_value->field_type__.match_omit()))return FALSE;
if(!other_value.choice__list().is_bound()) return FALSE;
if(!single_value->field_choice__list.match(other_value.choice__list()))return FALSE;
if(!other_value.elem__list().is_bound()) return FALSE;
if(!single_value->field_elem__list.match(other_value.elem__list()))return FALSE;
if(!other_value.error__().is_bound()) return FALSE;
if((other_value.error__().ispresent() ? !single_value->field_error__.match((const Error&)other_value.error__()) : !single_value->field_error__.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Presence.");
}
return FALSE;
}

boolean Presence_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_from__.is_omit() || single_value->field_from__.is_bound()) return TRUE;
if (single_value->field_id.is_omit() || single_value->field_id.is_bound()) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_to__.is_omit() || single_value->field_to__.is_bound()) return TRUE;
if (single_value->field_type__.is_omit() || single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_choice__list.is_bound()) return TRUE;
if (single_value->field_elem__list.is_bound()) return TRUE;
if (single_value->field_error__.is_omit() || single_value->field_error__.is_bound()) return TRUE;
return FALSE;
}

boolean Presence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_from__.is_omit() && !single_value->field_from__.is_value()) return FALSE;
if (!single_value->field_id.is_omit() && !single_value->field_id.is_value()) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_to__.is_omit() && !single_value->field_to__.is_value()) return FALSE;
if (!single_value->field_type__.is_omit() && !single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_choice__list.is_value()) return FALSE;
if (!single_value->field_elem__list.is_value()) return FALSE;
if (!single_value->field_error__.is_omit() && !single_value->field_error__.is_value()) return FALSE;
return TRUE;
}

void Presence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Presence Presence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Presence.");
Presence ret_val;
if (single_value->field_from__.is_omit()) ret_val.from__() = OMIT_VALUE;
else if (single_value->field_from__.is_bound()) {
ret_val.from__() = single_value->field_from__.valueof();
}
if (single_value->field_id.is_omit()) ret_val.id() = OMIT_VALUE;
else if (single_value->field_id.is_bound()) {
ret_val.id() = single_value->field_id.valueof();
}
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_to__.is_omit()) ret_val.to__() = OMIT_VALUE;
else if (single_value->field_to__.is_bound()) {
ret_val.to__() = single_value->field_to__.valueof();
}
if (single_value->field_type__.is_omit()) ret_val.type__() = OMIT_VALUE;
else if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_choice__list.is_bound()) {
ret_val.choice__list() = single_value->field_choice__list.valueof();
}
if (single_value->field_elem__list.is_bound()) {
ret_val.elem__list() = single_value->field_elem__list.valueof();
}
if (single_value->field_error__.is_omit()) ret_val.error__() = OMIT_VALUE;
else if (single_value->field_error__.is_bound()) {
ret_val.error__() = single_value->field_error__.valueof();
}
return ret_val;
}

void Presence_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Presence.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Presence_template[list_length];
}

Presence_template& Presence_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Presence.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Presence.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Presence_template::from__()
{
set_specific();
return single_value->field_from__;
}

const UNIVERSAL_CHARSTRING_template& Presence_template::from__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field from_ of a non-specific template of type @jabber_client.Presence.");
return single_value->field_from__;
}

UNIVERSAL_CHARSTRING_template& Presence_template::id()
{
set_specific();
return single_value->field_id;
}

const UNIVERSAL_CHARSTRING_template& Presence_template::id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field id of a non-specific template of type @jabber_client.Presence.");
return single_value->field_id;
}

CHARSTRING_template& Presence_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Presence_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Presence.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Presence_template::to__()
{
set_specific();
return single_value->field_to__;
}

const UNIVERSAL_CHARSTRING_template& Presence_template::to__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field to_ of a non-specific template of type @jabber_client.Presence.");
return single_value->field_to__;
}

Presence_type___template& Presence_template::type__()
{
set_specific();
return single_value->field_type__;
}

const Presence_type___template& Presence_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @jabber_client.Presence.");
return single_value->field_type__;
}

Presence_choice__list_template& Presence_template::choice__list()
{
set_specific();
return single_value->field_choice__list;
}

const Presence_choice__list_template& Presence_template::choice__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field choice_list of a non-specific template of type @jabber_client.Presence.");
return single_value->field_choice__list;
}

Presence_elem__list_template& Presence_template::elem__list()
{
set_specific();
return single_value->field_elem__list;
}

const Presence_elem__list_template& Presence_template::elem__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem_list of a non-specific template of type @jabber_client.Presence.");
return single_value->field_elem__list;
}

Error_template& Presence_template::error__()
{
set_specific();
return single_value->field_error__;
}

const Error_template& Presence_template::error__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field error_ of a non-specific template of type @jabber_client.Presence.");
return single_value->field_error__;
}

int Presence_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Presence which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_from__.is_present()) ret_val++;
      if (single_value->field_id.is_present()) ret_val++;
      if (single_value->field_lang.is_present()) ret_val++;
      if (single_value->field_to__.is_present()) ret_val++;
      if (single_value->field_type__.is_present()) ret_val++;
      if (single_value->field_error__.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Presence containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Presence containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Presence containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Presence containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Presence containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Presence.");
  }
  return 0;
}

void Presence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ from_ := ");
single_value->field_from__.log();
TTCN_Logger::log_event_str(", id := ");
single_value->field_id.log();
TTCN_Logger::log_event_str(", lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
single_value->field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", choice_list := ");
single_value->field_choice__list.log();
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log();
TTCN_Logger::log_event_str(", error_ := ");
single_value->field_error__.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Presence_template::log_match(const Presence& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.from__().ispresent()){
if(!single_value->field_from__.match(match_value.from__())){
TTCN_Logger::log_logmatch_info(".from_");
single_value->field_from__.log_match(match_value.from__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_from__.match_omit()){
 TTCN_Logger::log_logmatch_info(".from_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_from__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.id().ispresent()){
if(!single_value->field_id.match(match_value.id())){
TTCN_Logger::log_logmatch_info(".id");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_id.match_omit()){
 TTCN_Logger::log_logmatch_info(".id := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_id.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.to__().ispresent()){
if(!single_value->field_to__.match(match_value.to__())){
TTCN_Logger::log_logmatch_info(".to_");
single_value->field_to__.log_match(match_value.to__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_to__.match_omit()){
 TTCN_Logger::log_logmatch_info(".to_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_to__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.type__().ispresent()){
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_type__.match_omit()){
 TTCN_Logger::log_logmatch_info(".type_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_type__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_choice__list.match(match_value.choice__list())){
TTCN_Logger::log_logmatch_info(".choice_list");
single_value->field_choice__list.log_match(match_value.choice__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_elem__list.match(match_value.elem__list())){
TTCN_Logger::log_logmatch_info(".elem_list");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.error__().ispresent()){
if(!single_value->field_error__.match(match_value.error__())){
TTCN_Logger::log_logmatch_info(".error_");
single_value->field_error__.log_match(match_value.error__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_error__.match_omit()){
 TTCN_Logger::log_logmatch_info(".error_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_error__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ from_ := ");
if (match_value.from__().ispresent()) single_value->field_from__.log_match(match_value.from__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_from__.log();
if (single_value->field_from__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", id := ");
if (match_value.id().ispresent()) single_value->field_id.log_match(match_value.id());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_id.log();
if (single_value->field_id.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", to_ := ");
if (match_value.to__().ispresent()) single_value->field_to__.log_match(match_value.to__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_to__.log();
if (single_value->field_to__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
if (match_value.type__().ispresent()) single_value->field_type__.log_match(match_value.type__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_type__.log();
if (single_value->field_type__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", choice_list := ");
single_value->field_choice__list.log_match(match_value.choice__list());
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::log_event_str(", error_ := ");
if (match_value.error__().ispresent()) single_value->field_error__.log_match(match_value.error__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_error__.log();
if (single_value->field_error__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Presence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_from__.encode_text(text_buf);
single_value->field_id.encode_text(text_buf);
single_value->field_lang.encode_text(text_buf);
single_value->field_to__.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_choice__list.encode_text(text_buf);
single_value->field_elem__list.encode_text(text_buf);
single_value->field_error__.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Presence.");
}
}

void Presence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_from__.decode_text(text_buf);
single_value->field_id.decode_text(text_buf);
single_value->field_lang.decode_text(text_buf);
single_value->field_to__.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_choice__list.decode_text(text_buf);
single_value->field_elem__list.decode_text(text_buf);
single_value->field_error__.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Presence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Presence.");
}
}

void Presence_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Presence'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Presence'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (8<param.get_size()) {
      param.error("record template of type @jabber_client.Presence has 8 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) choice__list().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(7));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Presence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Presence");
  }
  is_ifpresent = param.get_ifpresent();
}

void Presence_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_from__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_id.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_to__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_choice__list.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_elem__list.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
single_value->field_error__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Presence");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Presence");
}

boolean Presence_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Presence_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Presence_type__::Presence_type__()
{
enum_value = UNBOUND_VALUE;
}

Presence_type__::Presence_type__(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @jabber_client.Presence.type_ with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Presence_type__::Presence_type__(enum_type other_value)
{
enum_value = other_value;
}

Presence_type__::Presence_type__(const Presence_type__& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @jabber_client.Presence.type_.");
enum_value = other_value.enum_value;
}

Presence_type__& Presence_type__::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @jabber_client.Presence.type_.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Presence_type__& Presence_type__::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Presence_type__& Presence_type__::operator=(const Presence_type__& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Presence.type_.");
enum_value = other_value.enum_value;
return *this;
}

boolean Presence_type__::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value == other_value;
}

boolean Presence_type__::operator==(const Presence_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value == other_value.enum_value;
}

boolean Presence_type__::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value < other_value;
}

boolean Presence_type__::operator<(const Presence_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value < other_value.enum_value;
}

boolean Presence_type__::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value > other_value;
}

boolean Presence_type__::operator>(const Presence_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Presence.type_.");
return enum_value > other_value.enum_value;
}

const char *Presence_type__::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case error__: if (txt) return "error"; else return "error_";
case probe: return "probe";
case subscribe: return "subscribe";
case subscribed: return "subscribed";
case unavailable: return "unavailable";
case unsubscribe: return "unsubscribe";
case unsubscribed: return "unsubscribed";
default: return "<unknown>";
}
}

Presence_type__::enum_type Presence_type__::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "error") || !strcmp(str_par, "error_")) return error__;
else if (!strcmp(str_par, "probe")) return probe;
else if (!strcmp(str_par, "subscribe")) return subscribe;
else if (!strcmp(str_par, "subscribed")) return subscribed;
else if (!strcmp(str_par, "unavailable")) return unavailable;
else if (!strcmp(str_par, "unsubscribe")) return unsubscribe;
else if (!strcmp(str_par, "unsubscribed")) return unsubscribed;
else return UNKNOWN_VALUE;
}

boolean Presence_type__::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
case 6:
return TRUE;
default:
return FALSE;
}
}

int Presence_type__::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Presence.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Presence_type__::enum2int(const Presence_type__& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Presence.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Presence_type__::operator Presence_type__::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @jabber_client.Presence.type_.");
return enum_value;
}

void Presence_type__::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Presence_type__::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@jabber_client.Presence.type_");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @jabber_client.Presence.type_.");
  }
}

void Presence_type__::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @jabber_client.Presence.type_.");
text_buf.push_int(enum_value);
}

void Presence_type__::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @jabber_client.Presence.type_.", enum_value);
}

void Presence_type__::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Presence_type__::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Presence_type__::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Presence_type__::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Presence_type__::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Presence_type__::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @jabber_client.Presence.type_.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Presence_type__::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Presence_type___template::copy_template(const Presence_type___template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Presence_type___template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @jabber_client.Presence.type_.");
}
}

Presence_type___template::Presence_type___template()
{
}

Presence_type___template::Presence_type___template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Presence_type___template::Presence_type___template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Presence_type__::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @jabber_client.Presence.type_ with unknown numeric value %d.", other_value);
single_value = (Presence_type__::enum_type)other_value;
}

Presence_type___template::Presence_type___template(Presence_type__::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Presence_type___template::Presence_type___template(const Presence_type__& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Presence_type__::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @jabber_client.Presence.type_.");
single_value = other_value.enum_value;
}

Presence_type___template::Presence_type___template(const OPTIONAL<Presence_type__>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Presence_type__::enum_type)(const Presence_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @jabber_client.Presence.type_ from an unbound optional field.");
}
}

Presence_type___template::Presence_type___template(const Presence_type___template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Presence_type___template::~Presence_type___template()
{
clean_up();
}

boolean Presence_type___template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Presence_type___template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Presence_type__::UNBOUND_VALUE;
}

void Presence_type___template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Presence_type___template& Presence_type___template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Presence_type___template& Presence_type___template::operator=(int other_value)
{
if (!Presence_type__::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @jabber_client.Presence.type_.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Presence_type__::enum_type)other_value;
return *this;
}

Presence_type___template& Presence_type___template::operator=(Presence_type__::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Presence_type___template& Presence_type___template::operator=(const Presence_type__& other_value)
{
if (other_value.enum_value == Presence_type__::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Presence.type_ to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Presence_type___template& Presence_type___template::operator=(const OPTIONAL<Presence_type__>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Presence_type__::enum_type)(const Presence_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @jabber_client.Presence.type_.");
}
return *this;
}

Presence_type___template& Presence_type___template::operator=(const Presence_type___template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Presence_type___template::match(Presence_type__::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @jabber_client.Presence.type_.");
}
return FALSE;
}

boolean Presence_type___template::match(const Presence_type__& other_value) const
{
if (other_value.enum_value == Presence_type__::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @jabber_client.Presence.type_ with an unbound value.");
return match(other_value.enum_value);
}

Presence_type__::enum_type Presence_type___template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @jabber_client.Presence.type_.");
return single_value;
}

void Presence_type___template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @jabber_client.Presence.type_.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Presence_type___template[list_length];
}

Presence_type___template& Presence_type___template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @jabber_client.Presence.type_.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @jabber_client.Presence.type_.");
return value_list.list_value[list_index];
}

void Presence_type___template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Presence_type__::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Presence_type___template::log_match(const Presence_type__& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Presence_type___template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @jabber_client.Presence.type_.");
}
}

void Presence_type___template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Presence_type__::enum_type)text_buf.pull_int().get_val();
if (!Presence_type__::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @jabber_client.Presence.type_.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Presence_type___template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @jabber_client.Presence.type_.");
}
}

boolean Presence_type___template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Presence_type___template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Presence_type___template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Presence_type__::enum_type enum_val = Presence_type__::str_to_enum(param.get_enumerated());
    if (!Presence_type__::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @jabber_client.Presence.type_.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@jabber_client.Presence.type_");
  }
  is_ifpresent = param.get_ifpresent();
}

void Presence_type___template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Presence.type_");
}

Iq_type__::Iq_type__()
{
enum_value = UNBOUND_VALUE;
}

Iq_type__::Iq_type__(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @jabber_client.Iq.type_ with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Iq_type__::Iq_type__(enum_type other_value)
{
enum_value = other_value;
}

Iq_type__::Iq_type__(const Iq_type__& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @jabber_client.Iq.type_.");
enum_value = other_value.enum_value;
}

Iq_type__& Iq_type__::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @jabber_client.Iq.type_.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Iq_type__& Iq_type__::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Iq_type__& Iq_type__::operator=(const Iq_type__& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Iq.type_.");
enum_value = other_value.enum_value;
return *this;
}

boolean Iq_type__::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value == other_value;
}

boolean Iq_type__::operator==(const Iq_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value == other_value.enum_value;
}

boolean Iq_type__::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value < other_value;
}

boolean Iq_type__::operator<(const Iq_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value < other_value.enum_value;
}

boolean Iq_type__::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value > other_value;
}

boolean Iq_type__::operator>(const Iq_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @jabber_client.Iq.type_.");
return enum_value > other_value.enum_value;
}

const char *Iq_type__::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case error__: if (txt) return "error"; else return "error_";
case get: return "get";
case result: return "result";
case set__: if (txt) return "set"; else return "set_";
default: return "<unknown>";
}
}

Iq_type__::enum_type Iq_type__::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "error") || !strcmp(str_par, "error_")) return error__;
else if (!strcmp(str_par, "get")) return get;
else if (!strcmp(str_par, "result")) return result;
else if (!strcmp(str_par, "set") || !strcmp(str_par, "set_")) return set__;
else return UNKNOWN_VALUE;
}

boolean Iq_type__::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
return TRUE;
default:
return FALSE;
}
}

int Iq_type__::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Iq.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Iq_type__::enum2int(const Iq_type__& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @jabber_client.Iq.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Iq_type__::operator Iq_type__::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @jabber_client.Iq.type_.");
return enum_value;
}

void Iq_type__::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Iq_type__::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@jabber_client.Iq.type_");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @jabber_client.Iq.type_.");
  }
}

void Iq_type__::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @jabber_client.Iq.type_.");
text_buf.push_int(enum_value);
}

void Iq_type__::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @jabber_client.Iq.type_.", enum_value);
}

void Iq_type__::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Iq_type__::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Iq_type__::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Iq_type__::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Iq_type__::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Iq_type__::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @jabber_client.Iq.type_.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Iq_type__::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Iq_type___template::copy_template(const Iq_type___template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Iq_type___template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @jabber_client.Iq.type_.");
}
}

Iq_type___template::Iq_type___template()
{
}

Iq_type___template::Iq_type___template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Iq_type___template::Iq_type___template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Iq_type__::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @jabber_client.Iq.type_ with unknown numeric value %d.", other_value);
single_value = (Iq_type__::enum_type)other_value;
}

Iq_type___template::Iq_type___template(Iq_type__::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Iq_type___template::Iq_type___template(const Iq_type__& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Iq_type__::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @jabber_client.Iq.type_.");
single_value = other_value.enum_value;
}

Iq_type___template::Iq_type___template(const OPTIONAL<Iq_type__>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Iq_type__::enum_type)(const Iq_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @jabber_client.Iq.type_ from an unbound optional field.");
}
}

Iq_type___template::Iq_type___template(const Iq_type___template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Iq_type___template::~Iq_type___template()
{
clean_up();
}

boolean Iq_type___template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Iq_type___template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Iq_type__::UNBOUND_VALUE;
}

void Iq_type___template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Iq_type___template& Iq_type___template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Iq_type___template& Iq_type___template::operator=(int other_value)
{
if (!Iq_type__::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @jabber_client.Iq.type_.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Iq_type__::enum_type)other_value;
return *this;
}

Iq_type___template& Iq_type___template::operator=(Iq_type__::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Iq_type___template& Iq_type___template::operator=(const Iq_type__& other_value)
{
if (other_value.enum_value == Iq_type__::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @jabber_client.Iq.type_ to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Iq_type___template& Iq_type___template::operator=(const OPTIONAL<Iq_type__>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Iq_type__::enum_type)(const Iq_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @jabber_client.Iq.type_.");
}
return *this;
}

Iq_type___template& Iq_type___template::operator=(const Iq_type___template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Iq_type___template::match(Iq_type__::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @jabber_client.Iq.type_.");
}
return FALSE;
}

boolean Iq_type___template::match(const Iq_type__& other_value) const
{
if (other_value.enum_value == Iq_type__::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @jabber_client.Iq.type_ with an unbound value.");
return match(other_value.enum_value);
}

Iq_type__::enum_type Iq_type___template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @jabber_client.Iq.type_.");
return single_value;
}

void Iq_type___template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @jabber_client.Iq.type_.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Iq_type___template[list_length];
}

Iq_type___template& Iq_type___template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @jabber_client.Iq.type_.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @jabber_client.Iq.type_.");
return value_list.list_value[list_index];
}

void Iq_type___template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Iq_type__::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Iq_type___template::log_match(const Iq_type__& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Iq_type___template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @jabber_client.Iq.type_.");
}
}

void Iq_type___template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Iq_type__::enum_type)text_buf.pull_int().get_val();
if (!Iq_type__::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @jabber_client.Iq.type_.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Iq_type___template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @jabber_client.Iq.type_.");
}
}

boolean Iq_type___template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Iq_type___template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Iq_type___template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Iq_type__::enum_type enum_val = Iq_type__::str_to_enum(param.get_enumerated());
    if (!Iq_type__::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @jabber_client.Iq.type_.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@jabber_client.Iq.type_");
  }
  is_ifpresent = param.get_ifpresent();
}

void Iq_type___template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Iq.type_");
}

Iq::Iq()
{
  bound_flag = FALSE;
}

Iq::Iq(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_from__,
    const UNIVERSAL_CHARSTRING& par_id,
    const OPTIONAL<CHARSTRING>& par_lang,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_to__,
    const Iq_type__& par_type__,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_elem,
    const OPTIONAL<Error>& par_error__)
  :   field_from__(par_from__),
  field_id(par_id),
  field_lang(par_lang),
  field_to__(par_to__),
  field_type__(par_type__),
  field_elem(par_elem),
  field_error__(par_error__)
{
  bound_flag = TRUE;
}

Iq::Iq(const Iq& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @jabber_client.Iq.");
bound_flag = TRUE;
if (other_value.from__().is_bound()) field_from__ = other_value.from__();
else field_from__.clean_up();
if (other_value.id().is_bound()) field_id = other_value.id();
else field_id.clean_up();
if (other_value.lang().is_bound()) field_lang = other_value.lang();
else field_lang.clean_up();
if (other_value.to__().is_bound()) field_to__ = other_value.to__();
else field_to__.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.elem().is_bound()) field_elem = other_value.elem();
else field_elem.clean_up();
if (other_value.error__().is_bound()) field_error__ = other_value.error__();
else field_error__.clean_up();
}

void Iq::clean_up()
{
field_from__.clean_up();
field_id.clean_up();
field_lang.clean_up();
field_to__.clean_up();
field_type__.clean_up();
field_elem.clean_up();
field_error__.clean_up();
bound_flag = FALSE;
}

Iq& Iq::operator=(const Iq& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @jabber_client.Iq.");
  bound_flag = TRUE;
  if (other_value.from__().is_bound()) field_from__ = other_value.from__();
  else field_from__.clean_up();
  if (other_value.id().is_bound()) field_id = other_value.id();
  else field_id.clean_up();
  if (other_value.lang().is_bound()) field_lang = other_value.lang();
  else field_lang.clean_up();
  if (other_value.to__().is_bound()) field_to__ = other_value.to__();
  else field_to__.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.elem().is_bound()) field_elem = other_value.elem();
  else field_elem.clean_up();
  if (other_value.error__().is_bound()) field_error__ = other_value.error__();
  else field_error__.clean_up();
}
return *this;
}

boolean Iq::operator==(const Iq& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_from__==other_value.field_from__
  && field_id==other_value.field_id
  && field_lang==other_value.field_lang
  && field_to__==other_value.field_to__
  && field_type__==other_value.field_type__
  && field_elem==other_value.field_elem
  && field_error__==other_value.field_error__;
}

boolean Iq::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_from__.get_selection() || field_from__.is_bound()) return TRUE;
if(field_id.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_lang.get_selection() || field_lang.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_to__.get_selection() || field_to__.is_bound()) return TRUE;
if(field_type__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_elem.get_selection() || field_elem.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_error__.get_selection() || field_error__.is_bound()) return TRUE;
return FALSE;
}
boolean Iq::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_from__.get_selection() && !field_from__.is_value()) return FALSE;
if(!field_id.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_lang.get_selection() && !field_lang.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_to__.get_selection() && !field_to__.is_value()) return FALSE;
if(!field_type__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_elem.get_selection() && !field_elem.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_error__.get_selection() && !field_error__.is_value()) return FALSE;
return TRUE;
}
int Iq::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @jabber_client.Iq");
  int ret_val = 2;
  if (field_from__.ispresent()) ret_val++;
  if (field_lang.ispresent()) ret_val++;
  if (field_to__.ispresent()) ret_val++;
  if (field_elem.ispresent()) ret_val++;
  if (field_error__.ispresent()) ret_val++;
  return ret_val;
}

void Iq::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ from_ := ");
field_from__.log();
TTCN_Logger::log_event_str(", id := ");
field_id.log();
TTCN_Logger::log_event_str(", lang := ");
field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", elem := ");
field_elem.log();
TTCN_Logger::log_event_str(", error_ := ");
field_error__.log();
TTCN_Logger::log_event_str(" }");
}

void Iq::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@jabber_client.Iq'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@jabber_client.Iq'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record value of type @jabber_client.Iq has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Iq: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@jabber_client.Iq");
  }
}

void Iq::set_implicit_omit()
{
if (!from__().is_bound()) from__() = OMIT_VALUE;
else from__().set_implicit_omit();
if (id().is_bound()) id().set_implicit_omit();
if (!lang().is_bound()) lang() = OMIT_VALUE;
else lang().set_implicit_omit();
if (!to__().is_bound()) to__() = OMIT_VALUE;
else to__().set_implicit_omit();
if (type__().is_bound()) type__().set_implicit_omit();
if (!elem().is_bound()) elem() = OMIT_VALUE;
else elem().set_implicit_omit();
if (!error__().is_bound()) error__() = OMIT_VALUE;
else error__().set_implicit_omit();
}

void Iq::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @jabber_client.Iq.");
field_from__.encode_text(text_buf);
field_id.encode_text(text_buf);
field_lang.encode_text(text_buf);
field_to__.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_elem.encode_text(text_buf);
field_error__.encode_text(text_buf);
}

void Iq::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_from__.decode_text(text_buf);
field_id.decode_text(text_buf);
field_lang.decode_text(text_buf);
field_to__.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_elem.decode_text(text_buf);
field_error__.decode_text(text_buf);
}

void Iq::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Iq::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Iq::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_from__.collect_ns(Iq_from___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_id.collect_ns(Iq_id_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_lang.collect_ns(Iq_lang_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_to__.collect_ns(Iq_to___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Iq_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem.collect_ns(Iq_elem_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_error__.collect_ns(Iq_error___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Iq::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Iq_from___xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Iq_id_xer_, flavor)) return true;
  return false;
}

int Iq::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("from_': ");
  tmp_len = field_from__.XER_encode(Iq_from___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("id': ");
  tmp_len = field_id.XER_encode(Iq_id_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("lang': ");
  tmp_len = field_lang.XER_encode(Iq_lang_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("to_': ");
  tmp_len = field_to__.XER_encode(Iq_to___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Iq_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("elem': ");
  sub_len += field_elem.XER_encode(Iq_elem_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("error_': ");
  sub_len += field_error__.XER_encode(Iq_error___xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Iq::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Iq_from___xer_.dfeValue) field_from__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Iq_from___xer_.dfeValue);
  else field_from__ = OMIT_VALUE;
  if (Iq_id_xer_.dfeValue) field_id = *static_cast<const UNIVERSAL_CHARSTRING*>(Iq_id_xer_.dfeValue);
  if (Iq_lang_xer_.dfeValue) field_lang = *static_cast<const CHARSTRING*>(Iq_lang_xer_.dfeValue);
  else field_lang = OMIT_VALUE;
  if (Iq_to___xer_.dfeValue) field_to__ = *static_cast<const UNIVERSAL_CHARSTRING*>(Iq_to___xer_.dfeValue);
  else field_to__ = OMIT_VALUE;
  if (Iq_type___xer_.dfeValue) field_type__ = *static_cast<const Iq_type__*>(Iq_type___xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Iq_from___xer_, 1) && check_namespace(ns_uri, Iq_from___xer_)) {
      ec_1.set_msg("from_': ");
      field_from__.XER_decode(Iq_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Iq_id_xer_, 1) && check_namespace(ns_uri, Iq_id_xer_)) {
      ec_1.set_msg("id': ");
      field_id.XER_decode(Iq_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Iq_lang_xer_, 1) && check_namespace(ns_uri, Iq_lang_xer_)) {
      ec_1.set_msg("lang': ");
      field_lang.XER_decode(Iq_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Iq_to___xer_, 1) && check_namespace(ns_uri, Iq_to___xer_)) {
      ec_1.set_msg("to_': ");
      field_to__.XER_decode(Iq_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Iq_type___xer_, 1) && check_namespace(ns_uri, Iq_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Iq_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_id.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'id'");
  if (!field_type__.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'type_'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("from_': ");
    field_from__.XER_decode(Iq_from___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("id': ");
    field_id.XER_decode(Iq_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("lang': ");
    field_lang.XER_decode(Iq_lang_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("to_': ");
    field_to__.XER_decode(Iq_to___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Iq_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  {
    ec_1.set_msg("elem': ");
    if (field_elem.XER_check_any_elem(p_reader, "error__", tag_closed))
      field_elem.XER_decode(Iq_elem_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_error__ = *static_cast<const Error*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("error_': ");
    field_error__.XER_decode(Iq_error___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Iq::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @jabber_client.Iq.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_from__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "from_");
    enc_len += field_from__.JSON_encode(Iq_from___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "id");
    enc_len += field_id.JSON_encode(Iq_id_descr_, p_tok);
  }

  if (field_lang.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "lang");
    enc_len += field_lang.JSON_encode(Iq_lang_descr_, p_tok);
  }

  if (field_to__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "to_");
    enc_len += field_to__.JSON_encode(Iq_to___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Iq_type___descr_, p_tok);
  }

  if (field_elem.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem");
    enc_len += field_elem.JSON_encode(Iq_elem_descr_, p_tok);
  }

  if (field_error__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "error_");
    enc_len += field_error__.JSON_encode(Iq_error___descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Iq::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (5 == name_len && 0 == strncmp(fld_name, "from_", name_len)) {
        int ret_val = field_from__.JSON_decode(Iq_from___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "from_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (2 == name_len && 0 == strncmp(fld_name, "id", name_len)) {
        int ret_val = field_id.JSON_decode(Iq_id_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "id");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "lang", name_len)) {
        int ret_val = field_lang.JSON_decode(Iq_lang_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "lang");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "to_", name_len)) {
        int ret_val = field_to__.JSON_decode(Iq_to___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "to_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Iq_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "elem", name_len)) {
        int ret_val = field_elem.JSON_decode(Iq_elem_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (6 == name_len && 0 == strncmp(fld_name, "error_", name_len)) {
        int ret_val = field_error__.JSON_decode(Iq_error___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "error_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_from__.is_bound()) {
    field_from__ = OMIT_VALUE;
  }
  if (!field_id.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "id");
    return JSON_ERROR_FATAL;
  }
  if (!field_lang.is_bound()) {
    field_lang = OMIT_VALUE;
  }
  if (!field_to__.is_bound()) {
    field_to__ = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "type_");
    return JSON_ERROR_FATAL;
  }
  if (!field_elem.is_bound()) {
    field_elem = OMIT_VALUE;
  }
  if (!field_error__.is_bound()) {
    field_error__ = OMIT_VALUE;
  }

  return dec_len;
}

struct Iq_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_from__;
UNIVERSAL_CHARSTRING_template field_id;
CHARSTRING_template field_lang;
UNIVERSAL_CHARSTRING_template field_to__;
Iq_type___template field_type__;
UNIVERSAL_CHARSTRING_template field_elem;
Error_template field_error__;
};

void Iq_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_from__ = ANY_OR_OMIT;
single_value->field_id = ANY_VALUE;
single_value->field_lang = ANY_OR_OMIT;
single_value->field_to__ = ANY_OR_OMIT;
single_value->field_type__ = ANY_VALUE;
single_value->field_elem = ANY_OR_OMIT;
single_value->field_error__ = ANY_OR_OMIT;
}
}
}

void Iq_template::copy_value(const Iq& other_value)
{
single_value = new single_value_struct;
if (other_value.from__().is_bound()) {
  if (other_value.from__().ispresent()) single_value->field_from__ = other_value.from__()();
  else single_value->field_from__ = OMIT_VALUE;
} else {
  single_value->field_from__.clean_up();
}
if (other_value.id().is_bound()) {
  single_value->field_id = other_value.id();
} else {
  single_value->field_id.clean_up();
}
if (other_value.lang().is_bound()) {
  if (other_value.lang().ispresent()) single_value->field_lang = other_value.lang()();
  else single_value->field_lang = OMIT_VALUE;
} else {
  single_value->field_lang.clean_up();
}
if (other_value.to__().is_bound()) {
  if (other_value.to__().ispresent()) single_value->field_to__ = other_value.to__()();
  else single_value->field_to__ = OMIT_VALUE;
} else {
  single_value->field_to__.clean_up();
}
if (other_value.type__().is_bound()) {
  single_value->field_type__ = other_value.type__();
} else {
  single_value->field_type__.clean_up();
}
if (other_value.elem().is_bound()) {
  if (other_value.elem().ispresent()) single_value->field_elem = other_value.elem()();
  else single_value->field_elem = OMIT_VALUE;
} else {
  single_value->field_elem.clean_up();
}
if (other_value.error__().is_bound()) {
  if (other_value.error__().ispresent()) single_value->field_error__ = other_value.error__()();
  else single_value->field_error__ = OMIT_VALUE;
} else {
  single_value->field_error__.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Iq_template::copy_template(const Iq_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.from__().get_selection()) {
single_value->field_from__ = other_value.from__();
} else {
single_value->field_from__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.id().get_selection()) {
single_value->field_id = other_value.id();
} else {
single_value->field_id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.lang().get_selection()) {
single_value->field_lang = other_value.lang();
} else {
single_value->field_lang.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.to__().get_selection()) {
single_value->field_to__ = other_value.to__();
} else {
single_value->field_to__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem().get_selection()) {
single_value->field_elem = other_value.elem();
} else {
single_value->field_elem.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.error__().get_selection()) {
single_value->field_error__ = other_value.error__();
} else {
single_value->field_error__.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Iq_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @jabber_client.Iq.");
break;
}
set_selection(other_value);
}

Iq_template::Iq_template()
{
}

Iq_template::Iq_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Iq_template::Iq_template(const Iq& other_value)
{
copy_value(other_value);
}

Iq_template::Iq_template(const OPTIONAL<Iq>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Iq&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @jabber_client.Iq from an unbound optional field.");
}
}

Iq_template::Iq_template(const Iq_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Iq_template::~Iq_template()
{
clean_up();
}

Iq_template& Iq_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Iq_template& Iq_template::operator=(const Iq& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Iq_template& Iq_template::operator=(const OPTIONAL<Iq>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Iq&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @jabber_client.Iq.");
}
return *this;
}

Iq_template& Iq_template::operator=(const Iq_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Iq_template::match(const Iq& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.from__().is_bound()) return FALSE;
if((other_value.from__().ispresent() ? !single_value->field_from__.match((const UNIVERSAL_CHARSTRING&)other_value.from__()) : !single_value->field_from__.match_omit()))return FALSE;
if(!other_value.id().is_bound()) return FALSE;
if(!single_value->field_id.match(other_value.id()))return FALSE;
if(!other_value.lang().is_bound()) return FALSE;
if((other_value.lang().ispresent() ? !single_value->field_lang.match((const CHARSTRING&)other_value.lang()) : !single_value->field_lang.match_omit()))return FALSE;
if(!other_value.to__().is_bound()) return FALSE;
if((other_value.to__().ispresent() ? !single_value->field_to__.match((const UNIVERSAL_CHARSTRING&)other_value.to__()) : !single_value->field_to__.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if(!single_value->field_type__.match(other_value.type__()))return FALSE;
if(!other_value.elem().is_bound()) return FALSE;
if((other_value.elem().ispresent() ? !single_value->field_elem.match((const UNIVERSAL_CHARSTRING&)other_value.elem()) : !single_value->field_elem.match_omit()))return FALSE;
if(!other_value.error__().is_bound()) return FALSE;
if((other_value.error__().ispresent() ? !single_value->field_error__.match((const Error&)other_value.error__()) : !single_value->field_error__.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @jabber_client.Iq.");
}
return FALSE;
}

boolean Iq_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_from__.is_omit() || single_value->field_from__.is_bound()) return TRUE;
if (single_value->field_id.is_bound()) return TRUE;
if (single_value->field_lang.is_omit() || single_value->field_lang.is_bound()) return TRUE;
if (single_value->field_to__.is_omit() || single_value->field_to__.is_bound()) return TRUE;
if (single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_elem.is_omit() || single_value->field_elem.is_bound()) return TRUE;
if (single_value->field_error__.is_omit() || single_value->field_error__.is_bound()) return TRUE;
return FALSE;
}

boolean Iq_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_from__.is_omit() && !single_value->field_from__.is_value()) return FALSE;
if (!single_value->field_id.is_value()) return FALSE;
if (!single_value->field_lang.is_omit() && !single_value->field_lang.is_value()) return FALSE;
if (!single_value->field_to__.is_omit() && !single_value->field_to__.is_value()) return FALSE;
if (!single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_elem.is_omit() && !single_value->field_elem.is_value()) return FALSE;
if (!single_value->field_error__.is_omit() && !single_value->field_error__.is_value()) return FALSE;
return TRUE;
}

void Iq_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Iq Iq_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @jabber_client.Iq.");
Iq ret_val;
if (single_value->field_from__.is_omit()) ret_val.from__() = OMIT_VALUE;
else if (single_value->field_from__.is_bound()) {
ret_val.from__() = single_value->field_from__.valueof();
}
if (single_value->field_id.is_bound()) {
ret_val.id() = single_value->field_id.valueof();
}
if (single_value->field_lang.is_omit()) ret_val.lang() = OMIT_VALUE;
else if (single_value->field_lang.is_bound()) {
ret_val.lang() = single_value->field_lang.valueof();
}
if (single_value->field_to__.is_omit()) ret_val.to__() = OMIT_VALUE;
else if (single_value->field_to__.is_bound()) {
ret_val.to__() = single_value->field_to__.valueof();
}
if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_elem.is_omit()) ret_val.elem() = OMIT_VALUE;
else if (single_value->field_elem.is_bound()) {
ret_val.elem() = single_value->field_elem.valueof();
}
if (single_value->field_error__.is_omit()) ret_val.error__() = OMIT_VALUE;
else if (single_value->field_error__.is_bound()) {
ret_val.error__() = single_value->field_error__.valueof();
}
return ret_val;
}

void Iq_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @jabber_client.Iq.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Iq_template[list_length];
}

Iq_template& Iq_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @jabber_client.Iq.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @jabber_client.Iq.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Iq_template::from__()
{
set_specific();
return single_value->field_from__;
}

const UNIVERSAL_CHARSTRING_template& Iq_template::from__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field from_ of a non-specific template of type @jabber_client.Iq.");
return single_value->field_from__;
}

UNIVERSAL_CHARSTRING_template& Iq_template::id()
{
set_specific();
return single_value->field_id;
}

const UNIVERSAL_CHARSTRING_template& Iq_template::id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field id of a non-specific template of type @jabber_client.Iq.");
return single_value->field_id;
}

CHARSTRING_template& Iq_template::lang()
{
set_specific();
return single_value->field_lang;
}

const CHARSTRING_template& Iq_template::lang() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field lang of a non-specific template of type @jabber_client.Iq.");
return single_value->field_lang;
}

UNIVERSAL_CHARSTRING_template& Iq_template::to__()
{
set_specific();
return single_value->field_to__;
}

const UNIVERSAL_CHARSTRING_template& Iq_template::to__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field to_ of a non-specific template of type @jabber_client.Iq.");
return single_value->field_to__;
}

Iq_type___template& Iq_template::type__()
{
set_specific();
return single_value->field_type__;
}

const Iq_type___template& Iq_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @jabber_client.Iq.");
return single_value->field_type__;
}

UNIVERSAL_CHARSTRING_template& Iq_template::elem()
{
set_specific();
return single_value->field_elem;
}

const UNIVERSAL_CHARSTRING_template& Iq_template::elem() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem of a non-specific template of type @jabber_client.Iq.");
return single_value->field_elem;
}

Error_template& Iq_template::error__()
{
set_specific();
return single_value->field_error__;
}

const Error_template& Iq_template::error__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field error_ of a non-specific template of type @jabber_client.Iq.");
return single_value->field_error__;
}

int Iq_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Iq which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_from__.is_present()) ret_val++;
      if (single_value->field_lang.is_present()) ret_val++;
      if (single_value->field_to__.is_present()) ret_val++;
      if (single_value->field_elem.is_present()) ret_val++;
      if (single_value->field_error__.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @jabber_client.Iq containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Iq containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Iq containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Iq containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @jabber_client.Iq containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @jabber_client.Iq.");
  }
  return 0;
}

void Iq_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ from_ := ");
single_value->field_from__.log();
TTCN_Logger::log_event_str(", id := ");
single_value->field_id.log();
TTCN_Logger::log_event_str(", lang := ");
single_value->field_lang.log();
TTCN_Logger::log_event_str(", to_ := ");
single_value->field_to__.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", elem := ");
single_value->field_elem.log();
TTCN_Logger::log_event_str(", error_ := ");
single_value->field_error__.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Iq_template::log_match(const Iq& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.from__().ispresent()){
if(!single_value->field_from__.match(match_value.from__())){
TTCN_Logger::log_logmatch_info(".from_");
single_value->field_from__.log_match(match_value.from__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_from__.match_omit()){
 TTCN_Logger::log_logmatch_info(".from_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_from__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_id.match(match_value.id())){
TTCN_Logger::log_logmatch_info(".id");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.lang().ispresent()){
if(!single_value->field_lang.match(match_value.lang())){
TTCN_Logger::log_logmatch_info(".lang");
single_value->field_lang.log_match(match_value.lang());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_lang.match_omit()){
 TTCN_Logger::log_logmatch_info(".lang := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_lang.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.to__().ispresent()){
if(!single_value->field_to__.match(match_value.to__())){
TTCN_Logger::log_logmatch_info(".to_");
single_value->field_to__.log_match(match_value.to__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_to__.match_omit()){
 TTCN_Logger::log_logmatch_info(".to_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_to__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.elem().ispresent()){
if(!single_value->field_elem.match(match_value.elem())){
TTCN_Logger::log_logmatch_info(".elem");
single_value->field_elem.log_match(match_value.elem());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_elem.match_omit()){
 TTCN_Logger::log_logmatch_info(".elem := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_elem.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.error__().ispresent()){
if(!single_value->field_error__.match(match_value.error__())){
TTCN_Logger::log_logmatch_info(".error_");
single_value->field_error__.log_match(match_value.error__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_error__.match_omit()){
 TTCN_Logger::log_logmatch_info(".error_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_error__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ from_ := ");
if (match_value.from__().ispresent()) single_value->field_from__.log_match(match_value.from__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_from__.log();
if (single_value->field_from__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", id := ");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::log_event_str(", lang := ");
if (match_value.lang().ispresent()) single_value->field_lang.log_match(match_value.lang());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_lang.log();
if (single_value->field_lang.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", to_ := ");
if (match_value.to__().ispresent()) single_value->field_to__.log_match(match_value.to__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_to__.log();
if (single_value->field_to__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::log_event_str(", elem := ");
if (match_value.elem().ispresent()) single_value->field_elem.log_match(match_value.elem());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_elem.log();
if (single_value->field_elem.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", error_ := ");
if (match_value.error__().ispresent()) single_value->field_error__.log_match(match_value.error__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_error__.log();
if (single_value->field_error__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Iq_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_from__.encode_text(text_buf);
single_value->field_id.encode_text(text_buf);
single_value->field_lang.encode_text(text_buf);
single_value->field_to__.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_elem.encode_text(text_buf);
single_value->field_error__.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @jabber_client.Iq.");
}
}

void Iq_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_from__.decode_text(text_buf);
single_value->field_id.decode_text(text_buf);
single_value->field_lang.decode_text(text_buf);
single_value->field_to__.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_elem.decode_text(text_buf);
single_value->field_error__.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Iq_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @jabber_client.Iq.");
}
}

void Iq_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@jabber_client.Iq'");
    }
    if (strcmp("from_", param_field) == 0) {
      from__().set_param(param);
      return;
    } else if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("lang", param_field) == 0) {
      lang().set_param(param);
      return;
    } else if (strcmp("to_", param_field) == 0) {
      to__().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else if (strcmp("error_", param_field) == 0) {
      error__().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@jabber_client.Iq'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record template of type @jabber_client.Iq has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) from__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) lang().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) to__().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) error__().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "from_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          from__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "lang")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          lang().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "to_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          to__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "error_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          error__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @jabber_client.Iq: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@jabber_client.Iq");
  }
  is_ifpresent = param.get_ifpresent();
}

void Iq_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_from__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_id.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_lang.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_to__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_elem.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
single_value->field_error__.check_restriction(t_res, t_name ? t_name : "@jabber_client.Iq");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@jabber_client.Iq");
}

boolean Iq_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Iq_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const Message_choice__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Message.choice_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Message_elem__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Message.elem_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Presence_choice__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Presence.choice_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Presence_elem__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @jabber_client.Presence.elem_list.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
urn__ietf__params__xml__ns__xmpp__stanzas::module_object.pre_init_module();
Message_type___dfe = Message_type__::normal;
}

static void post_init_module()
{
urn__ietf__params__xml__ns__xmpp__stanzas::module_object.post_init_module();
}


} /* end of namespace */
