// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:40:58 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "TCP_Types.hh"

namespace TCP__Types {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char os_0_octets[] = { 0, 0, 0, 0 };
static const OCTETSTRING os_0(4, os_0_octets);
static const unsigned char module_checksum[] = { 0x67, 0x63, 0x09, 0xf1, 0x76, 0xaa, 0x72, 0xbe, 0x55, 0xbb, 0x07, 0x6c, 0xdc, 0xb4, 0x93, 0x85 };

/* Global variable definitions */

const XERdescriptor_t       IP__Address_xer_ = { {"IP_Address>\n", "IP_Address>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IP__Address_descr_ = { "@TCP_Types.IP_Address", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &IP__Address_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static OCTETSTRING const_f__enc__PDU__TCP_pl__ip__source_defval;
const OCTETSTRING& f__enc__PDU__TCP_pl__ip__source_defval = const_f__enc__PDU__TCP_pl__ip__source_defval;
static OCTETSTRING const_f__enc__PDU__TCP_pl__ip__dest_defval;
const OCTETSTRING& f__enc__PDU__TCP_pl__ip__dest_defval = const_f__enc__PDU__TCP_pl__ip__dest_defval;
static BOOLEAN const_f__enc__PDU__TCP_pl__autoDataOffset_defval;
const BOOLEAN& f__enc__PDU__TCP_pl__autoDataOffset_defval = const_f__enc__PDU__TCP_pl__autoDataOffset_defval;
static BOOLEAN const_f__enc__PDU__TCP_pl__autoCheckSum_defval;
const BOOLEAN& f__enc__PDU__TCP_pl__autoCheckSum_defval = const_f__enc__PDU__TCP_pl__autoCheckSum_defval;
const TTCN_RAWdescriptor_t TCP__Control__bits_urg_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_urg_xer_ = { {"urg>\n", "urg>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_urg_descr_ = { "@TCP_Types.TCP_Control_bits.urg", &BITSTRING_ber_, &TCP__Control__bits_urg_raw_, NULL, &TCP__Control__bits_urg_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_ack_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_ack_xer_ = { {"ack>\n", "ack>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_ack_descr_ = { "@TCP_Types.TCP_Control_bits.ack", &BITSTRING_ber_, &TCP__Control__bits_ack_raw_, NULL, &TCP__Control__bits_ack_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_psh_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_psh_xer_ = { {"psh>\n", "psh>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_psh_descr_ = { "@TCP_Types.TCP_Control_bits.psh", &BITSTRING_ber_, &TCP__Control__bits_psh_raw_, NULL, &TCP__Control__bits_psh_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_rst_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_rst_xer_ = { {"rst>\n", "rst>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_rst_descr_ = { "@TCP_Types.TCP_Control_bits.rst", &BITSTRING_ber_, &TCP__Control__bits_rst_raw_, NULL, &TCP__Control__bits_rst_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_syn_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_syn_xer_ = { {"syn>\n", "syn>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_syn_descr_ = { "@TCP_Types.TCP_Control_bits.syn", &BITSTRING_ber_, &TCP__Control__bits_syn_raw_, NULL, &TCP__Control__bits_syn_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_fin_raw_ = {1,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,1};
const XERdescriptor_t       TCP__Control__bits_fin_xer_ = { {"fin>\n", "fin>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_fin_descr_ = { "@TCP_Types.TCP_Control_bits.fin", &BITSTRING_ber_, &TCP__Control__bits_fin_raw_, NULL, &TCP__Control__bits_fin_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t TCP__Control__bits_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for TCP__Control__bits
const TTCN_JSONdescriptor_t TCP__Control__bits_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t TCP__Control__bits_descr_ = { "@TCP_Types.TCP_Control_bits", NULL, &TCP__Control__bits_raw_, NULL, NULL, &TCP__Control__bits_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_source__port_raw_ = {16,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_source__port_xer_ = { {"source_port>\n", "source_port>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_source__port_descr_ = { "@TCP_Types.PDU_TCP.source_port", &INTEGER_ber_, &PDU__TCP_source__port_raw_, &INTEGER_text_, &PDU__TCP_source__port_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_dest__port_raw_ = {16,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_dest__port_xer_ = { {"dest_port>\n", "dest_port>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_dest__port_descr_ = { "@TCP_Types.PDU_TCP.dest_port", &INTEGER_ber_, &PDU__TCP_dest__port_raw_, &INTEGER_text_, &PDU__TCP_dest__port_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_sequence__number_raw_ = {32,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_sequence__number_xer_ = { {"sequence_number>\n", "sequence_number>\n"}, {17, 17}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_sequence__number_descr_ = { "@TCP_Types.PDU_TCP.sequence_number", &INTEGER_ber_, &PDU__TCP_sequence__number_raw_, &INTEGER_text_, &PDU__TCP_sequence__number_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_acknowledgment__number_raw_ = {32,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_acknowledgment__number_xer_ = { {"acknowledgment_number>\n", "acknowledgment_number>\n"}, {23, 23}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_acknowledgment__number_descr_ = { "@TCP_Types.PDU_TCP.acknowledgment_number", &INTEGER_ber_, &PDU__TCP_acknowledgment__number_raw_, &INTEGER_text_, &PDU__TCP_acknowledgment__number_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_data__offset_raw_ = {4,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_data__offset_xer_ = { {"data_offset>\n", "data_offset>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_data__offset_descr_ = { "@TCP_Types.PDU_TCP.data_offset", &INTEGER_ber_, &PDU__TCP_data__offset_raw_, &INTEGER_text_, &PDU__TCP_data__offset_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_reserved_raw_ = {6,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,6};
const XERdescriptor_t       PDU__TCP_reserved_xer_ = { {"reserved>\n", "reserved>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_reserved_descr_ = { "@TCP_Types.PDU_TCP.reserved", &BITSTRING_ber_, &PDU__TCP_reserved_raw_, NULL, &PDU__TCP_reserved_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_control__bits_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for PDU__TCP_control__bits
const TTCN_Typedescriptor_t PDU__TCP_control__bits_descr_ = { "@TCP_Types.PDU_TCP.control_bits", NULL, &PDU__TCP_control__bits_raw_, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_window_raw_ = {16,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_window_xer_ = { {"window>\n", "window>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_window_descr_ = { "@TCP_Types.PDU_TCP.window", &INTEGER_ber_, &PDU__TCP_window_raw_, &INTEGER_text_, &PDU__TCP_window_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_checksum_raw_ = {16,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,2};
const XERdescriptor_t       PDU__TCP_checksum_xer_ = { {"checksum>\n", "checksum>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_checksum_descr_ = { "@TCP_Types.PDU_TCP.checksum", &OCTETSTRING_ber_, &PDU__TCP_checksum_raw_, &OCTETSTRING_text_, &PDU__TCP_checksum_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_urgent__pointer_raw_ = {16,SG_NO,ORDER_MSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_urgent__pointer_xer_ = { {"urgent_pointer>\n", "urgent_pointer>\n"}, {16, 16}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_urgent__pointer_descr_ = { "@TCP_Types.PDU_TCP.urgent_pointer", &INTEGER_ber_, &PDU__TCP_urgent__pointer_raw_, &INTEGER_text_, &PDU__TCP_urgent__pointer_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
// No XER for PDU__TCP
const TTCN_JSONdescriptor_t PDU__TCP_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t PDU__TCP_descr_ = { "@TCP_Types.PDU_TCP", NULL, &PDU__TCP_raw_, NULL, NULL, &PDU__TCP_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_options_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_options_xer_ = { {"options>\n", "options>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_options_descr_ = { "@TCP_Types.PDU_TCP.options", &OCTETSTRING_ber_, &PDU__TCP_options_raw_, &OCTETSTRING_text_, &PDU__TCP_options_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t PDU__TCP_data_raw_ = {0,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_MSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       PDU__TCP_data_xer_ = { {"data>\n", "data>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PDU__TCP_data_descr_ = { "@TCP_Types.PDU_TCP.data", &OCTETSTRING_ber_, &PDU__TCP_data_raw_, &OCTETSTRING_text_, &PDU__TCP_data_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("TCP_Types", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

TCP__Control__bits::TCP__Control__bits()
{
  bound_flag = FALSE;
}

TCP__Control__bits::TCP__Control__bits(const BITSTRING& par_urg,
    const BITSTRING& par_ack,
    const BITSTRING& par_psh,
    const BITSTRING& par_rst,
    const BITSTRING& par_syn,
    const BITSTRING& par_fin)
  :   field_urg(par_urg),
  field_ack(par_ack),
  field_psh(par_psh),
  field_rst(par_rst),
  field_syn(par_syn),
  field_fin(par_fin)
{
  bound_flag = TRUE;
}

TCP__Control__bits::TCP__Control__bits(const TCP__Control__bits& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TCP_Types.TCP_Control_bits.");
bound_flag = TRUE;
if (other_value.urg().is_bound()) field_urg = other_value.urg();
else field_urg.clean_up();
if (other_value.ack().is_bound()) field_ack = other_value.ack();
else field_ack.clean_up();
if (other_value.psh().is_bound()) field_psh = other_value.psh();
else field_psh.clean_up();
if (other_value.rst().is_bound()) field_rst = other_value.rst();
else field_rst.clean_up();
if (other_value.syn().is_bound()) field_syn = other_value.syn();
else field_syn.clean_up();
if (other_value.fin().is_bound()) field_fin = other_value.fin();
else field_fin.clean_up();
}

void TCP__Control__bits::clean_up()
{
field_urg.clean_up();
field_ack.clean_up();
field_psh.clean_up();
field_rst.clean_up();
field_syn.clean_up();
field_fin.clean_up();
bound_flag = FALSE;
}

TCP__Control__bits& TCP__Control__bits::operator=(const TCP__Control__bits& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TCP_Types.TCP_Control_bits.");
  bound_flag = TRUE;
  if (other_value.urg().is_bound()) field_urg = other_value.urg();
  else field_urg.clean_up();
  if (other_value.ack().is_bound()) field_ack = other_value.ack();
  else field_ack.clean_up();
  if (other_value.psh().is_bound()) field_psh = other_value.psh();
  else field_psh.clean_up();
  if (other_value.rst().is_bound()) field_rst = other_value.rst();
  else field_rst.clean_up();
  if (other_value.syn().is_bound()) field_syn = other_value.syn();
  else field_syn.clean_up();
  if (other_value.fin().is_bound()) field_fin = other_value.fin();
  else field_fin.clean_up();
}
return *this;
}

boolean TCP__Control__bits::operator==(const TCP__Control__bits& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_urg==other_value.field_urg
  && field_ack==other_value.field_ack
  && field_psh==other_value.field_psh
  && field_rst==other_value.field_rst
  && field_syn==other_value.field_syn
  && field_fin==other_value.field_fin;
}

boolean TCP__Control__bits::is_bound() const
{
if (bound_flag) return TRUE;
if(field_urg.is_bound()) return TRUE;
if(field_ack.is_bound()) return TRUE;
if(field_psh.is_bound()) return TRUE;
if(field_rst.is_bound()) return TRUE;
if(field_syn.is_bound()) return TRUE;
if(field_fin.is_bound()) return TRUE;
return FALSE;
}
boolean TCP__Control__bits::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_urg.is_value()) return FALSE;
if(!field_ack.is_value()) return FALSE;
if(!field_psh.is_value()) return FALSE;
if(!field_rst.is_value()) return FALSE;
if(!field_syn.is_value()) return FALSE;
if(!field_fin.is_value()) return FALSE;
return TRUE;
}
int TCP__Control__bits::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TCP_Types.TCP_Control_bits");
  return 6;
}

void TCP__Control__bits::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ urg := ");
field_urg.log();
TTCN_Logger::log_event_str(", ack := ");
field_ack.log();
TTCN_Logger::log_event_str(", psh := ");
field_psh.log();
TTCN_Logger::log_event_str(", rst := ");
field_rst.log();
TTCN_Logger::log_event_str(", syn := ");
field_syn.log();
TTCN_Logger::log_event_str(", fin := ");
field_fin.log();
TTCN_Logger::log_event_str(" }");
}

void TCP__Control__bits::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TCP_Types.TCP_Control_bits'");
    }
    if (strcmp("urg", param_field) == 0) {
      urg().set_param(param);
      return;
    } else if (strcmp("ack", param_field) == 0) {
      ack().set_param(param);
      return;
    } else if (strcmp("psh", param_field) == 0) {
      psh().set_param(param);
      return;
    } else if (strcmp("rst", param_field) == 0) {
      rst().set_param(param);
      return;
    } else if (strcmp("syn", param_field) == 0) {
      syn().set_param(param);
      return;
    } else if (strcmp("fin", param_field) == 0) {
      fin().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TCP_Types.TCP_Control_bits'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record value of type @TCP_Types.TCP_Control_bits has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) urg().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) ack().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) psh().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) rst().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) syn().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) fin().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "urg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          urg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ack")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ack().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "psh")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          psh().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rst")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rst().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "syn")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          syn().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "fin")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          fin().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @TCP_Types.TCP_Control_bits: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TCP_Types.TCP_Control_bits");
  }
}

void TCP__Control__bits::set_implicit_omit()
{
if (urg().is_bound()) urg().set_implicit_omit();
if (ack().is_bound()) ack().set_implicit_omit();
if (psh().is_bound()) psh().set_implicit_omit();
if (rst().is_bound()) rst().set_implicit_omit();
if (syn().is_bound()) syn().set_implicit_omit();
if (fin().is_bound()) fin().set_implicit_omit();
}

void TCP__Control__bits::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TCP_Types.TCP_Control_bits.");
field_urg.encode_text(text_buf);
field_ack.encode_text(text_buf);
field_psh.encode_text(text_buf);
field_rst.encode_text(text_buf);
field_syn.encode_text(text_buf);
field_fin.encode_text(text_buf);
}

void TCP__Control__bits::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_urg.decode_text(text_buf);
field_ack.decode_text(text_buf);
field_psh.decode_text(text_buf);
field_rst.decode_text(text_buf);
field_syn.decode_text(text_buf);
field_fin.decode_text(text_buf);
}

void TCP__Control__bits::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void TCP__Control__bits::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int TCP__Control__bits::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_urg.RAW_decode(TCP__Control__bits_urg_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_ack.RAW_decode(TCP__Control__bits_ack_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_psh.RAW_decode(TCP__Control__bits_psh_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_rst.RAW_decode(TCP__Control__bits_rst_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_syn.RAW_decode(TCP__Control__bits_syn_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_fin.RAW_decode(TCP__Control__bits_fin_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int TCP__Control__bits::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 6;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(6);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, TCP__Control__bits_urg_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, TCP__Control__bits_ack_descr_.raw);
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, TCP__Control__bits_psh_descr_.raw);
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, TCP__Control__bits_rst_descr_.raw);
  myleaf.body.node.nodes[4] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 4, TCP__Control__bits_syn_descr_.raw);
  myleaf.body.node.nodes[5] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 5, TCP__Control__bits_fin_descr_.raw);
  encoded_length += field_urg.RAW_encode(TCP__Control__bits_urg_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_ack.RAW_encode(TCP__Control__bits_ack_descr_, *myleaf.body.node.nodes[1]);
  encoded_length += field_psh.RAW_encode(TCP__Control__bits_psh_descr_, *myleaf.body.node.nodes[2]);
  encoded_length += field_rst.RAW_encode(TCP__Control__bits_rst_descr_, *myleaf.body.node.nodes[3]);
  encoded_length += field_syn.RAW_encode(TCP__Control__bits_syn_descr_, *myleaf.body.node.nodes[4]);
  encoded_length += field_fin.RAW_encode(TCP__Control__bits_fin_descr_, *myleaf.body.node.nodes[5]);
  return myleaf.length = encoded_length;
}

int TCP__Control__bits::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TCP_Types.TCP_Control_bits.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "urg");
    enc_len += field_urg.JSON_encode(TCP__Control__bits_urg_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "ack");
    enc_len += field_ack.JSON_encode(TCP__Control__bits_ack_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "psh");
    enc_len += field_psh.JSON_encode(TCP__Control__bits_psh_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "rst");
    enc_len += field_rst.JSON_encode(TCP__Control__bits_rst_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "syn");
    enc_len += field_syn.JSON_encode(TCP__Control__bits_syn_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "fin");
    enc_len += field_fin.JSON_encode(TCP__Control__bits_fin_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int TCP__Control__bits::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "urg", name_len)) {
        int ret_val = field_urg.JSON_decode(TCP__Control__bits_urg_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "urg");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "ack", name_len)) {
        int ret_val = field_ack.JSON_decode(TCP__Control__bits_ack_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "ack");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "psh", name_len)) {
        int ret_val = field_psh.JSON_decode(TCP__Control__bits_psh_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "psh");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "rst", name_len)) {
        int ret_val = field_rst.JSON_decode(TCP__Control__bits_rst_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "rst");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "syn", name_len)) {
        int ret_val = field_syn.JSON_decode(TCP__Control__bits_syn_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "syn");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (3 == name_len && 0 == strncmp(fld_name, "fin", name_len)) {
        int ret_val = field_fin.JSON_decode(TCP__Control__bits_fin_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "fin");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_urg.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "urg");
    return JSON_ERROR_FATAL;
  }
  if (!field_ack.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "ack");
    return JSON_ERROR_FATAL;
  }
  if (!field_psh.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "psh");
    return JSON_ERROR_FATAL;
  }
  if (!field_rst.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "rst");
    return JSON_ERROR_FATAL;
  }
  if (!field_syn.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "syn");
    return JSON_ERROR_FATAL;
  }
  if (!field_fin.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "fin");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct TCP__Control__bits_template::single_value_struct {
BITSTRING_template field_urg;
BITSTRING_template field_ack;
BITSTRING_template field_psh;
BITSTRING_template field_rst;
BITSTRING_template field_syn;
BITSTRING_template field_fin;
};

void TCP__Control__bits_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_urg = ANY_VALUE;
single_value->field_ack = ANY_VALUE;
single_value->field_psh = ANY_VALUE;
single_value->field_rst = ANY_VALUE;
single_value->field_syn = ANY_VALUE;
single_value->field_fin = ANY_VALUE;
}
}
}

void TCP__Control__bits_template::copy_value(const TCP__Control__bits& other_value)
{
single_value = new single_value_struct;
if (other_value.urg().is_bound()) {
  single_value->field_urg = other_value.urg();
} else {
  single_value->field_urg.clean_up();
}
if (other_value.ack().is_bound()) {
  single_value->field_ack = other_value.ack();
} else {
  single_value->field_ack.clean_up();
}
if (other_value.psh().is_bound()) {
  single_value->field_psh = other_value.psh();
} else {
  single_value->field_psh.clean_up();
}
if (other_value.rst().is_bound()) {
  single_value->field_rst = other_value.rst();
} else {
  single_value->field_rst.clean_up();
}
if (other_value.syn().is_bound()) {
  single_value->field_syn = other_value.syn();
} else {
  single_value->field_syn.clean_up();
}
if (other_value.fin().is_bound()) {
  single_value->field_fin = other_value.fin();
} else {
  single_value->field_fin.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void TCP__Control__bits_template::copy_template(const TCP__Control__bits_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.urg().get_selection()) {
single_value->field_urg = other_value.urg();
} else {
single_value->field_urg.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ack().get_selection()) {
single_value->field_ack = other_value.ack();
} else {
single_value->field_ack.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.psh().get_selection()) {
single_value->field_psh = other_value.psh();
} else {
single_value->field_psh.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rst().get_selection()) {
single_value->field_rst = other_value.rst();
} else {
single_value->field_rst.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.syn().get_selection()) {
single_value->field_syn = other_value.syn();
} else {
single_value->field_syn.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.fin().get_selection()) {
single_value->field_fin = other_value.fin();
} else {
single_value->field_fin.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new TCP__Control__bits_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TCP_Types.TCP_Control_bits.");
break;
}
set_selection(other_value);
}

TCP__Control__bits_template::TCP__Control__bits_template()
{
}

TCP__Control__bits_template::TCP__Control__bits_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

TCP__Control__bits_template::TCP__Control__bits_template(const TCP__Control__bits& other_value)
{
copy_value(other_value);
}

TCP__Control__bits_template::TCP__Control__bits_template(const OPTIONAL<TCP__Control__bits>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TCP__Control__bits&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TCP_Types.TCP_Control_bits from an unbound optional field.");
}
}

TCP__Control__bits_template::TCP__Control__bits_template(const TCP__Control__bits_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

TCP__Control__bits_template::~TCP__Control__bits_template()
{
clean_up();
}

TCP__Control__bits_template& TCP__Control__bits_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

TCP__Control__bits_template& TCP__Control__bits_template::operator=(const TCP__Control__bits& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

TCP__Control__bits_template& TCP__Control__bits_template::operator=(const OPTIONAL<TCP__Control__bits>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const TCP__Control__bits&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TCP_Types.TCP_Control_bits.");
}
return *this;
}

TCP__Control__bits_template& TCP__Control__bits_template::operator=(const TCP__Control__bits_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean TCP__Control__bits_template::match(const TCP__Control__bits& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.urg().is_bound()) return FALSE;
if(!single_value->field_urg.match(other_value.urg()))return FALSE;
if(!other_value.ack().is_bound()) return FALSE;
if(!single_value->field_ack.match(other_value.ack()))return FALSE;
if(!other_value.psh().is_bound()) return FALSE;
if(!single_value->field_psh.match(other_value.psh()))return FALSE;
if(!other_value.rst().is_bound()) return FALSE;
if(!single_value->field_rst.match(other_value.rst()))return FALSE;
if(!other_value.syn().is_bound()) return FALSE;
if(!single_value->field_syn.match(other_value.syn()))return FALSE;
if(!other_value.fin().is_bound()) return FALSE;
if(!single_value->field_fin.match(other_value.fin()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TCP_Types.TCP_Control_bits.");
}
return FALSE;
}

boolean TCP__Control__bits_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_urg.is_bound()) return TRUE;
if (single_value->field_ack.is_bound()) return TRUE;
if (single_value->field_psh.is_bound()) return TRUE;
if (single_value->field_rst.is_bound()) return TRUE;
if (single_value->field_syn.is_bound()) return TRUE;
if (single_value->field_fin.is_bound()) return TRUE;
return FALSE;
}

boolean TCP__Control__bits_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_urg.is_value()) return FALSE;
if (!single_value->field_ack.is_value()) return FALSE;
if (!single_value->field_psh.is_value()) return FALSE;
if (!single_value->field_rst.is_value()) return FALSE;
if (!single_value->field_syn.is_value()) return FALSE;
if (!single_value->field_fin.is_value()) return FALSE;
return TRUE;
}

void TCP__Control__bits_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

TCP__Control__bits TCP__Control__bits_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TCP_Types.TCP_Control_bits.");
TCP__Control__bits ret_val;
if (single_value->field_urg.is_bound()) {
ret_val.urg() = single_value->field_urg.valueof();
}
if (single_value->field_ack.is_bound()) {
ret_val.ack() = single_value->field_ack.valueof();
}
if (single_value->field_psh.is_bound()) {
ret_val.psh() = single_value->field_psh.valueof();
}
if (single_value->field_rst.is_bound()) {
ret_val.rst() = single_value->field_rst.valueof();
}
if (single_value->field_syn.is_bound()) {
ret_val.syn() = single_value->field_syn.valueof();
}
if (single_value->field_fin.is_bound()) {
ret_val.fin() = single_value->field_fin.valueof();
}
return ret_val;
}

void TCP__Control__bits_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TCP_Types.TCP_Control_bits.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new TCP__Control__bits_template[list_length];
}

TCP__Control__bits_template& TCP__Control__bits_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TCP_Types.TCP_Control_bits.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TCP_Types.TCP_Control_bits.");
return value_list.list_value[list_index];
}

BITSTRING_template& TCP__Control__bits_template::urg()
{
set_specific();
return single_value->field_urg;
}

const BITSTRING_template& TCP__Control__bits_template::urg() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field urg of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_urg;
}

BITSTRING_template& TCP__Control__bits_template::ack()
{
set_specific();
return single_value->field_ack;
}

const BITSTRING_template& TCP__Control__bits_template::ack() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ack of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_ack;
}

BITSTRING_template& TCP__Control__bits_template::psh()
{
set_specific();
return single_value->field_psh;
}

const BITSTRING_template& TCP__Control__bits_template::psh() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field psh of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_psh;
}

BITSTRING_template& TCP__Control__bits_template::rst()
{
set_specific();
return single_value->field_rst;
}

const BITSTRING_template& TCP__Control__bits_template::rst() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rst of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_rst;
}

BITSTRING_template& TCP__Control__bits_template::syn()
{
set_specific();
return single_value->field_syn;
}

const BITSTRING_template& TCP__Control__bits_template::syn() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field syn of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_syn;
}

BITSTRING_template& TCP__Control__bits_template::fin()
{
set_specific();
return single_value->field_fin;
}

const BITSTRING_template& TCP__Control__bits_template::fin() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field fin of a non-specific template of type @TCP_Types.TCP_Control_bits.");
return single_value->field_fin;
}

int TCP__Control__bits_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 6;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.TCP_Control_bits containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TCP_Types.TCP_Control_bits.");
  }
  return 0;
}

void TCP__Control__bits_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ urg := ");
single_value->field_urg.log();
TTCN_Logger::log_event_str(", ack := ");
single_value->field_ack.log();
TTCN_Logger::log_event_str(", psh := ");
single_value->field_psh.log();
TTCN_Logger::log_event_str(", rst := ");
single_value->field_rst.log();
TTCN_Logger::log_event_str(", syn := ");
single_value->field_syn.log();
TTCN_Logger::log_event_str(", fin := ");
single_value->field_fin.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void TCP__Control__bits_template::log_match(const TCP__Control__bits& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_urg.match(match_value.urg())){
TTCN_Logger::log_logmatch_info(".urg");
single_value->field_urg.log_match(match_value.urg());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ack.match(match_value.ack())){
TTCN_Logger::log_logmatch_info(".ack");
single_value->field_ack.log_match(match_value.ack());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_psh.match(match_value.psh())){
TTCN_Logger::log_logmatch_info(".psh");
single_value->field_psh.log_match(match_value.psh());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rst.match(match_value.rst())){
TTCN_Logger::log_logmatch_info(".rst");
single_value->field_rst.log_match(match_value.rst());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_syn.match(match_value.syn())){
TTCN_Logger::log_logmatch_info(".syn");
single_value->field_syn.log_match(match_value.syn());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_fin.match(match_value.fin())){
TTCN_Logger::log_logmatch_info(".fin");
single_value->field_fin.log_match(match_value.fin());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ urg := ");
single_value->field_urg.log_match(match_value.urg());
TTCN_Logger::log_event_str(", ack := ");
single_value->field_ack.log_match(match_value.ack());
TTCN_Logger::log_event_str(", psh := ");
single_value->field_psh.log_match(match_value.psh());
TTCN_Logger::log_event_str(", rst := ");
single_value->field_rst.log_match(match_value.rst());
TTCN_Logger::log_event_str(", syn := ");
single_value->field_syn.log_match(match_value.syn());
TTCN_Logger::log_event_str(", fin := ");
single_value->field_fin.log_match(match_value.fin());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void TCP__Control__bits_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_urg.encode_text(text_buf);
single_value->field_ack.encode_text(text_buf);
single_value->field_psh.encode_text(text_buf);
single_value->field_rst.encode_text(text_buf);
single_value->field_syn.encode_text(text_buf);
single_value->field_fin.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TCP_Types.TCP_Control_bits.");
}
}

void TCP__Control__bits_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_urg.decode_text(text_buf);
single_value->field_ack.decode_text(text_buf);
single_value->field_psh.decode_text(text_buf);
single_value->field_rst.decode_text(text_buf);
single_value->field_syn.decode_text(text_buf);
single_value->field_fin.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new TCP__Control__bits_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TCP_Types.TCP_Control_bits.");
}
}

void TCP__Control__bits_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TCP_Types.TCP_Control_bits'");
    }
    if (strcmp("urg", param_field) == 0) {
      urg().set_param(param);
      return;
    } else if (strcmp("ack", param_field) == 0) {
      ack().set_param(param);
      return;
    } else if (strcmp("psh", param_field) == 0) {
      psh().set_param(param);
      return;
    } else if (strcmp("rst", param_field) == 0) {
      rst().set_param(param);
      return;
    } else if (strcmp("syn", param_field) == 0) {
      syn().set_param(param);
      return;
    } else if (strcmp("fin", param_field) == 0) {
      fin().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TCP_Types.TCP_Control_bits'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record template of type @TCP_Types.TCP_Control_bits has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) urg().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) ack().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) psh().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) rst().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) syn().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) fin().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "urg")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          urg().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ack")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ack().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "psh")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          psh().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rst")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rst().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "syn")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          syn().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "fin")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          fin().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @TCP_Types.TCP_Control_bits: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TCP_Types.TCP_Control_bits");
  }
  is_ifpresent = param.get_ifpresent();
}

void TCP__Control__bits_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_urg.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
single_value->field_ack.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
single_value->field_psh.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
single_value->field_rst.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
single_value->field_syn.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
single_value->field_fin.check_restriction(t_res, t_name ? t_name : "@TCP_Types.TCP_Control_bits");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TCP_Types.TCP_Control_bits");
}

boolean TCP__Control__bits_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean TCP__Control__bits_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

PDU__TCP::PDU__TCP()
{
  bound_flag = FALSE;
}

PDU__TCP::PDU__TCP(const INTEGER& par_source__port,
    const INTEGER& par_dest__port,
    const INTEGER& par_sequence__number,
    const INTEGER& par_acknowledgment__number,
    const INTEGER& par_data__offset,
    const BITSTRING& par_reserved,
    const TCP__Control__bits& par_control__bits,
    const INTEGER& par_window,
    const OCTETSTRING& par_checksum,
    const INTEGER& par_urgent__pointer,
    const OPTIONAL<OCTETSTRING>& par_options,
    const OPTIONAL<OCTETSTRING>& par_data)
  :   field_source__port(par_source__port),
  field_dest__port(par_dest__port),
  field_sequence__number(par_sequence__number),
  field_acknowledgment__number(par_acknowledgment__number),
  field_data__offset(par_data__offset),
  field_reserved(par_reserved),
  field_control__bits(par_control__bits),
  field_window(par_window),
  field_checksum(par_checksum),
  field_urgent__pointer(par_urgent__pointer),
  field_options(par_options),
  field_data(par_data)
{
  bound_flag = TRUE;
}

PDU__TCP::PDU__TCP(const PDU__TCP& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @TCP_Types.PDU_TCP.");
bound_flag = TRUE;
if (other_value.source__port().is_bound()) field_source__port = other_value.source__port();
else field_source__port.clean_up();
if (other_value.dest__port().is_bound()) field_dest__port = other_value.dest__port();
else field_dest__port.clean_up();
if (other_value.sequence__number().is_bound()) field_sequence__number = other_value.sequence__number();
else field_sequence__number.clean_up();
if (other_value.acknowledgment__number().is_bound()) field_acknowledgment__number = other_value.acknowledgment__number();
else field_acknowledgment__number.clean_up();
if (other_value.data__offset().is_bound()) field_data__offset = other_value.data__offset();
else field_data__offset.clean_up();
if (other_value.reserved().is_bound()) field_reserved = other_value.reserved();
else field_reserved.clean_up();
if (other_value.control__bits().is_bound()) field_control__bits = other_value.control__bits();
else field_control__bits.clean_up();
if (other_value.window().is_bound()) field_window = other_value.window();
else field_window.clean_up();
if (other_value.checksum().is_bound()) field_checksum = other_value.checksum();
else field_checksum.clean_up();
if (other_value.urgent__pointer().is_bound()) field_urgent__pointer = other_value.urgent__pointer();
else field_urgent__pointer.clean_up();
if (other_value.options().is_bound()) field_options = other_value.options();
else field_options.clean_up();
if (other_value.data().is_bound()) field_data = other_value.data();
else field_data.clean_up();
}

void PDU__TCP::clean_up()
{
field_source__port.clean_up();
field_dest__port.clean_up();
field_sequence__number.clean_up();
field_acknowledgment__number.clean_up();
field_data__offset.clean_up();
field_reserved.clean_up();
field_control__bits.clean_up();
field_window.clean_up();
field_checksum.clean_up();
field_urgent__pointer.clean_up();
field_options.clean_up();
field_data.clean_up();
bound_flag = FALSE;
}

PDU__TCP& PDU__TCP::operator=(const PDU__TCP& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @TCP_Types.PDU_TCP.");
  bound_flag = TRUE;
  if (other_value.source__port().is_bound()) field_source__port = other_value.source__port();
  else field_source__port.clean_up();
  if (other_value.dest__port().is_bound()) field_dest__port = other_value.dest__port();
  else field_dest__port.clean_up();
  if (other_value.sequence__number().is_bound()) field_sequence__number = other_value.sequence__number();
  else field_sequence__number.clean_up();
  if (other_value.acknowledgment__number().is_bound()) field_acknowledgment__number = other_value.acknowledgment__number();
  else field_acknowledgment__number.clean_up();
  if (other_value.data__offset().is_bound()) field_data__offset = other_value.data__offset();
  else field_data__offset.clean_up();
  if (other_value.reserved().is_bound()) field_reserved = other_value.reserved();
  else field_reserved.clean_up();
  if (other_value.control__bits().is_bound()) field_control__bits = other_value.control__bits();
  else field_control__bits.clean_up();
  if (other_value.window().is_bound()) field_window = other_value.window();
  else field_window.clean_up();
  if (other_value.checksum().is_bound()) field_checksum = other_value.checksum();
  else field_checksum.clean_up();
  if (other_value.urgent__pointer().is_bound()) field_urgent__pointer = other_value.urgent__pointer();
  else field_urgent__pointer.clean_up();
  if (other_value.options().is_bound()) field_options = other_value.options();
  else field_options.clean_up();
  if (other_value.data().is_bound()) field_data = other_value.data();
  else field_data.clean_up();
}
return *this;
}

boolean PDU__TCP::operator==(const PDU__TCP& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_source__port==other_value.field_source__port
  && field_dest__port==other_value.field_dest__port
  && field_sequence__number==other_value.field_sequence__number
  && field_acknowledgment__number==other_value.field_acknowledgment__number
  && field_data__offset==other_value.field_data__offset
  && field_reserved==other_value.field_reserved
  && field_control__bits==other_value.field_control__bits
  && field_window==other_value.field_window
  && field_checksum==other_value.field_checksum
  && field_urgent__pointer==other_value.field_urgent__pointer
  && field_options==other_value.field_options
  && field_data==other_value.field_data;
}

boolean PDU__TCP::is_bound() const
{
if (bound_flag) return TRUE;
if(field_source__port.is_bound()) return TRUE;
if(field_dest__port.is_bound()) return TRUE;
if(field_sequence__number.is_bound()) return TRUE;
if(field_acknowledgment__number.is_bound()) return TRUE;
if(field_data__offset.is_bound()) return TRUE;
if(field_reserved.is_bound()) return TRUE;
if(field_control__bits.is_bound()) return TRUE;
if(field_window.is_bound()) return TRUE;
if(field_checksum.is_bound()) return TRUE;
if(field_urgent__pointer.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_options.get_selection() || field_options.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_data.get_selection() || field_data.is_bound()) return TRUE;
return FALSE;
}
boolean PDU__TCP::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_source__port.is_value()) return FALSE;
if(!field_dest__port.is_value()) return FALSE;
if(!field_sequence__number.is_value()) return FALSE;
if(!field_acknowledgment__number.is_value()) return FALSE;
if(!field_data__offset.is_value()) return FALSE;
if(!field_reserved.is_value()) return FALSE;
if(!field_control__bits.is_value()) return FALSE;
if(!field_window.is_value()) return FALSE;
if(!field_checksum.is_value()) return FALSE;
if(!field_urgent__pointer.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_options.get_selection() && !field_options.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_data.get_selection() && !field_data.is_value()) return FALSE;
return TRUE;
}
int PDU__TCP::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @TCP_Types.PDU_TCP");
  int ret_val = 10;
  if (field_options.ispresent()) ret_val++;
  if (field_data.ispresent()) ret_val++;
  return ret_val;
}

void PDU__TCP::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ source_port := ");
field_source__port.log();
TTCN_Logger::log_event_str(", dest_port := ");
field_dest__port.log();
TTCN_Logger::log_event_str(", sequence_number := ");
field_sequence__number.log();
TTCN_Logger::log_event_str(", acknowledgment_number := ");
field_acknowledgment__number.log();
TTCN_Logger::log_event_str(", data_offset := ");
field_data__offset.log();
TTCN_Logger::log_event_str(", reserved := ");
field_reserved.log();
TTCN_Logger::log_event_str(", control_bits := ");
field_control__bits.log();
TTCN_Logger::log_event_str(", window := ");
field_window.log();
TTCN_Logger::log_event_str(", checksum := ");
field_checksum.log();
TTCN_Logger::log_event_str(", urgent_pointer := ");
field_urgent__pointer.log();
TTCN_Logger::log_event_str(", options := ");
field_options.log();
TTCN_Logger::log_event_str(", data := ");
field_data.log();
TTCN_Logger::log_event_str(" }");
}

void PDU__TCP::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@TCP_Types.PDU_TCP'");
    }
    if (strcmp("source_port", param_field) == 0) {
      source__port().set_param(param);
      return;
    } else if (strcmp("dest_port", param_field) == 0) {
      dest__port().set_param(param);
      return;
    } else if (strcmp("sequence_number", param_field) == 0) {
      sequence__number().set_param(param);
      return;
    } else if (strcmp("acknowledgment_number", param_field) == 0) {
      acknowledgment__number().set_param(param);
      return;
    } else if (strcmp("data_offset", param_field) == 0) {
      data__offset().set_param(param);
      return;
    } else if (strcmp("reserved", param_field) == 0) {
      reserved().set_param(param);
      return;
    } else if (strcmp("control_bits", param_field) == 0) {
      control__bits().set_param(param);
      return;
    } else if (strcmp("window", param_field) == 0) {
      window().set_param(param);
      return;
    } else if (strcmp("checksum", param_field) == 0) {
      checksum().set_param(param);
      return;
    } else if (strcmp("urgent_pointer", param_field) == 0) {
      urgent__pointer().set_param(param);
      return;
    } else if (strcmp("options", param_field) == 0) {
      options().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@TCP_Types.PDU_TCP'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (12<param.get_size()) {
      param.error("record value of type @TCP_Types.PDU_TCP has 12 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) source__port().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) dest__port().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) sequence__number().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) acknowledgment__number().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) data__offset().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) reserved().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) control__bits().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) window().set_param(*param.get_elem(7));
    if (param.get_size()>8 && param.get_elem(8)->get_type()!=Module_Param::MP_NotUsed) checksum().set_param(*param.get_elem(8));
    if (param.get_size()>9 && param.get_elem(9)->get_type()!=Module_Param::MP_NotUsed) urgent__pointer().set_param(*param.get_elem(9));
    if (param.get_size()>10 && param.get_elem(10)->get_type()!=Module_Param::MP_NotUsed) options().set_param(*param.get_elem(10));
    if (param.get_size()>11 && param.get_elem(11)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*param.get_elem(11));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "source_port")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          source__port().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "dest_port")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          dest__port().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence_number")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence__number().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "acknowledgment_number")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          acknowledgment__number().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data_offset")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data__offset().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "reserved")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          reserved().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "control_bits")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          control__bits().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "window")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          window().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "checksum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          checksum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "urgent_pointer")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          urgent__pointer().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @TCP_Types.PDU_TCP: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@TCP_Types.PDU_TCP");
  }
}

void PDU__TCP::set_implicit_omit()
{
if (source__port().is_bound()) source__port().set_implicit_omit();
if (dest__port().is_bound()) dest__port().set_implicit_omit();
if (sequence__number().is_bound()) sequence__number().set_implicit_omit();
if (acknowledgment__number().is_bound()) acknowledgment__number().set_implicit_omit();
if (data__offset().is_bound()) data__offset().set_implicit_omit();
if (reserved().is_bound()) reserved().set_implicit_omit();
if (control__bits().is_bound()) control__bits().set_implicit_omit();
if (window().is_bound()) window().set_implicit_omit();
if (checksum().is_bound()) checksum().set_implicit_omit();
if (urgent__pointer().is_bound()) urgent__pointer().set_implicit_omit();
if (!options().is_bound()) options() = OMIT_VALUE;
else options().set_implicit_omit();
if (!data().is_bound()) data() = OMIT_VALUE;
else data().set_implicit_omit();
}

void PDU__TCP::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @TCP_Types.PDU_TCP.");
field_source__port.encode_text(text_buf);
field_dest__port.encode_text(text_buf);
field_sequence__number.encode_text(text_buf);
field_acknowledgment__number.encode_text(text_buf);
field_data__offset.encode_text(text_buf);
field_reserved.encode_text(text_buf);
field_control__bits.encode_text(text_buf);
field_window.encode_text(text_buf);
field_checksum.encode_text(text_buf);
field_urgent__pointer.encode_text(text_buf);
field_options.encode_text(text_buf);
field_data.encode_text(text_buf);
}

void PDU__TCP::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_source__port.decode_text(text_buf);
field_dest__port.decode_text(text_buf);
field_sequence__number.decode_text(text_buf);
field_acknowledgment__number.decode_text(text_buf);
field_data__offset.decode_text(text_buf);
field_reserved.decode_text(text_buf);
field_control__bits.decode_text(text_buf);
field_window.decode_text(text_buf);
field_checksum.decode_text(text_buf);
field_urgent__pointer.decode_text(text_buf);
field_options.decode_text(text_buf);
field_data.decode_text(text_buf);
}

void PDU__TCP::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void PDU__TCP::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

int PDU__TCP::RAW_decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, int limit, raw_order_t top_bit_ord, boolean no_err, int, boolean)
{ (void)no_err;
  bound_flag = TRUE;
  int prepaddlength=p_buf.increase_pos_padd(p_td.raw->prepadding);
  limit-=prepaddlength;
  size_t last_decoded_pos = p_buf.get_pos_bit();
  int decoded_length = 0;
  int decoded_field_length = 0;
  raw_order_t local_top_order;
  if(p_td.raw->top_bit_order==TOP_BIT_INHERITED)local_top_order=top_bit_ord;
  else if(p_td.raw->top_bit_order==TOP_BIT_RIGHT)local_top_order=ORDER_MSB;
  else local_top_order=ORDER_LSB;
  decoded_field_length = field_source__port.RAW_decode(PDU__TCP_source__port_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_dest__port.RAW_decode(PDU__TCP_dest__port_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_sequence__number.RAW_decode(PDU__TCP_sequence__number_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_acknowledgment__number.RAW_decode(PDU__TCP_acknowledgment__number_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_data__offset.RAW_decode(PDU__TCP_data__offset_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_reserved.RAW_decode(PDU__TCP_reserved_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_control__bits.RAW_decode(PDU__TCP_control__bits_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_window.RAW_decode(PDU__TCP_window_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_checksum.RAW_decode(PDU__TCP_checksum_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  decoded_field_length = field_urgent__pointer.RAW_decode(PDU__TCP_urgent__pointer_descr_, p_buf, limit, local_top_order, no_err);
  if (decoded_field_length < 0) return decoded_field_length;
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_options().RAW_decode(PDU__TCP_options_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_options = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_options=OMIT_VALUE;
  if (limit > 0){
  size_t fl_start_pos = p_buf.get_pos_bit();
  decoded_field_length = field_data().RAW_decode(PDU__TCP_data_descr_, p_buf, limit, local_top_order, TRUE);
  if (decoded_field_length < 1) {
  field_data = OMIT_VALUE;
  p_buf.set_pos_bit(fl_start_pos);
  } else {
  decoded_length+=decoded_field_length;
  limit-=decoded_field_length;
  last_decoded_pos=bigger(last_decoded_pos, p_buf.get_pos_bit());
  }
  }
  else field_data=OMIT_VALUE;
  p_buf.set_pos_bit(last_decoded_pos);
  return decoded_length+prepaddlength+p_buf.increase_pos_padd(p_td.raw->padding);
}

int PDU__TCP::RAW_encode(const TTCN_Typedescriptor_t&, RAW_enc_tree& myleaf) const {
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  int encoded_length = 0;
  myleaf.isleaf = false;
  myleaf.body.node.num_of_nodes = 12;
  myleaf.body.node.nodes = init_nodes_of_enc_tree(12);
  myleaf.body.node.nodes[0] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 0, PDU__TCP_source__port_descr_.raw);
  myleaf.body.node.nodes[1] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 1, PDU__TCP_dest__port_descr_.raw);
  myleaf.body.node.nodes[2] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 2, PDU__TCP_sequence__number_descr_.raw);
  myleaf.body.node.nodes[3] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 3, PDU__TCP_acknowledgment__number_descr_.raw);
  myleaf.body.node.nodes[4] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 4, PDU__TCP_data__offset_descr_.raw);
  myleaf.body.node.nodes[5] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 5, PDU__TCP_reserved_descr_.raw);
  myleaf.body.node.nodes[6] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 6, PDU__TCP_control__bits_descr_.raw);
  myleaf.body.node.nodes[7] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 7, PDU__TCP_window_descr_.raw);
  myleaf.body.node.nodes[8] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 8, PDU__TCP_checksum_descr_.raw);
  myleaf.body.node.nodes[9] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 9, PDU__TCP_urgent__pointer_descr_.raw);
  if (field_options.ispresent()) {
  myleaf.body.node.nodes[10] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 10, PDU__TCP_options_descr_.raw);
  }
  else myleaf.body.node.nodes[10] = NULL;
  if (field_data.ispresent()) {
  myleaf.body.node.nodes[11] = new RAW_enc_tree(true, &myleaf, &(myleaf.curr_pos), 11, PDU__TCP_data_descr_.raw);
  }
  else myleaf.body.node.nodes[11] = NULL;
  encoded_length += field_source__port.RAW_encode(PDU__TCP_source__port_descr_, *myleaf.body.node.nodes[0]);
  encoded_length += field_dest__port.RAW_encode(PDU__TCP_dest__port_descr_, *myleaf.body.node.nodes[1]);
  encoded_length += field_sequence__number.RAW_encode(PDU__TCP_sequence__number_descr_, *myleaf.body.node.nodes[2]);
  encoded_length += field_acknowledgment__number.RAW_encode(PDU__TCP_acknowledgment__number_descr_, *myleaf.body.node.nodes[3]);
  encoded_length += field_data__offset.RAW_encode(PDU__TCP_data__offset_descr_, *myleaf.body.node.nodes[4]);
  encoded_length += field_reserved.RAW_encode(PDU__TCP_reserved_descr_, *myleaf.body.node.nodes[5]);
  encoded_length += field_control__bits.RAW_encode(PDU__TCP_control__bits_descr_, *myleaf.body.node.nodes[6]);
  encoded_length += field_window.RAW_encode(PDU__TCP_window_descr_, *myleaf.body.node.nodes[7]);
  encoded_length += field_checksum.RAW_encode(PDU__TCP_checksum_descr_, *myleaf.body.node.nodes[8]);
  encoded_length += field_urgent__pointer.RAW_encode(PDU__TCP_urgent__pointer_descr_, *myleaf.body.node.nodes[9]);
  if (field_options.ispresent()) {
  encoded_length += field_options().RAW_encode(PDU__TCP_options_descr_, *myleaf.body.node.nodes[10]);
  }
  if (field_data.ispresent()) {
  encoded_length += field_data().RAW_encode(PDU__TCP_data_descr_, *myleaf.body.node.nodes[11]);
  }
  return myleaf.length = encoded_length;
}

int PDU__TCP::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @TCP_Types.PDU_TCP.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "source_port");
    enc_len += field_source__port.JSON_encode(PDU__TCP_source__port_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "dest_port");
    enc_len += field_dest__port.JSON_encode(PDU__TCP_dest__port_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence_number");
    enc_len += field_sequence__number.JSON_encode(PDU__TCP_sequence__number_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "acknowledgment_number");
    enc_len += field_acknowledgment__number.JSON_encode(PDU__TCP_acknowledgment__number_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "data_offset");
    enc_len += field_data__offset.JSON_encode(PDU__TCP_data__offset_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "reserved");
    enc_len += field_reserved.JSON_encode(PDU__TCP_reserved_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "control_bits");
    enc_len += field_control__bits.JSON_encode(PDU__TCP_control__bits_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "window");
    enc_len += field_window.JSON_encode(PDU__TCP_window_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "checksum");
    enc_len += field_checksum.JSON_encode(PDU__TCP_checksum_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "urgent_pointer");
    enc_len += field_urgent__pointer.JSON_encode(PDU__TCP_urgent__pointer_descr_, p_tok);
  }

  if (field_options.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "options");
    enc_len += field_options.JSON_encode(PDU__TCP_options_descr_, p_tok);
  }

  if (field_data.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "data");
    enc_len += field_data.JSON_encode(PDU__TCP_data_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int PDU__TCP::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (11 == name_len && 0 == strncmp(fld_name, "source_port", name_len)) {
        int ret_val = field_source__port.JSON_decode(PDU__TCP_source__port_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "source_port");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "dest_port", name_len)) {
        int ret_val = field_dest__port.JSON_decode(PDU__TCP_dest__port_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "dest_port");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (15 == name_len && 0 == strncmp(fld_name, "sequence_number", name_len)) {
        int ret_val = field_sequence__number.JSON_decode(PDU__TCP_sequence__number_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence_number");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (21 == name_len && 0 == strncmp(fld_name, "acknowledgment_number", name_len)) {
        int ret_val = field_acknowledgment__number.JSON_decode(PDU__TCP_acknowledgment__number_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "acknowledgment_number");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (11 == name_len && 0 == strncmp(fld_name, "data_offset", name_len)) {
        int ret_val = field_data__offset.JSON_decode(PDU__TCP_data__offset_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "data_offset");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (8 == name_len && 0 == strncmp(fld_name, "reserved", name_len)) {
        int ret_val = field_reserved.JSON_decode(PDU__TCP_reserved_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "reserved");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (12 == name_len && 0 == strncmp(fld_name, "control_bits", name_len)) {
        int ret_val = field_control__bits.JSON_decode(PDU__TCP_control__bits_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "control_bits");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (6 == name_len && 0 == strncmp(fld_name, "window", name_len)) {
        int ret_val = field_window.JSON_decode(PDU__TCP_window_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "window");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (8 == name_len && 0 == strncmp(fld_name, "checksum", name_len)) {
        int ret_val = field_checksum.JSON_decode(PDU__TCP_checksum_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "checksum");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (14 == name_len && 0 == strncmp(fld_name, "urgent_pointer", name_len)) {
        int ret_val = field_urgent__pointer.JSON_decode(PDU__TCP_urgent__pointer_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "urgent_pointer");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (7 == name_len && 0 == strncmp(fld_name, "options", name_len)) {
        int ret_val = field_options.JSON_decode(PDU__TCP_options_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "options");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "data", name_len)) {
        int ret_val = field_data.JSON_decode(PDU__TCP_data_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "data");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_source__port.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "source_port");
    return JSON_ERROR_FATAL;
  }
  if (!field_dest__port.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "dest_port");
    return JSON_ERROR_FATAL;
  }
  if (!field_sequence__number.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "sequence_number");
    return JSON_ERROR_FATAL;
  }
  if (!field_acknowledgment__number.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "acknowledgment_number");
    return JSON_ERROR_FATAL;
  }
  if (!field_data__offset.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "data_offset");
    return JSON_ERROR_FATAL;
  }
  if (!field_reserved.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "reserved");
    return JSON_ERROR_FATAL;
  }
  if (!field_control__bits.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "control_bits");
    return JSON_ERROR_FATAL;
  }
  if (!field_window.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "window");
    return JSON_ERROR_FATAL;
  }
  if (!field_checksum.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "checksum");
    return JSON_ERROR_FATAL;
  }
  if (!field_urgent__pointer.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "urgent_pointer");
    return JSON_ERROR_FATAL;
  }
  if (!field_options.is_bound()) {
    field_options = OMIT_VALUE;
  }
  if (!field_data.is_bound()) {
    field_data = OMIT_VALUE;
  }

  return dec_len;
}

struct PDU__TCP_template::single_value_struct {
INTEGER_template field_source__port;
INTEGER_template field_dest__port;
INTEGER_template field_sequence__number;
INTEGER_template field_acknowledgment__number;
INTEGER_template field_data__offset;
BITSTRING_template field_reserved;
TCP__Control__bits_template field_control__bits;
INTEGER_template field_window;
OCTETSTRING_template field_checksum;
INTEGER_template field_urgent__pointer;
OCTETSTRING_template field_options;
OCTETSTRING_template field_data;
};

void PDU__TCP_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_source__port = ANY_VALUE;
single_value->field_dest__port = ANY_VALUE;
single_value->field_sequence__number = ANY_VALUE;
single_value->field_acknowledgment__number = ANY_VALUE;
single_value->field_data__offset = ANY_VALUE;
single_value->field_reserved = ANY_VALUE;
single_value->field_control__bits = ANY_VALUE;
single_value->field_window = ANY_VALUE;
single_value->field_checksum = ANY_VALUE;
single_value->field_urgent__pointer = ANY_VALUE;
single_value->field_options = ANY_OR_OMIT;
single_value->field_data = ANY_OR_OMIT;
}
}
}

void PDU__TCP_template::copy_value(const PDU__TCP& other_value)
{
single_value = new single_value_struct;
if (other_value.source__port().is_bound()) {
  single_value->field_source__port = other_value.source__port();
} else {
  single_value->field_source__port.clean_up();
}
if (other_value.dest__port().is_bound()) {
  single_value->field_dest__port = other_value.dest__port();
} else {
  single_value->field_dest__port.clean_up();
}
if (other_value.sequence__number().is_bound()) {
  single_value->field_sequence__number = other_value.sequence__number();
} else {
  single_value->field_sequence__number.clean_up();
}
if (other_value.acknowledgment__number().is_bound()) {
  single_value->field_acknowledgment__number = other_value.acknowledgment__number();
} else {
  single_value->field_acknowledgment__number.clean_up();
}
if (other_value.data__offset().is_bound()) {
  single_value->field_data__offset = other_value.data__offset();
} else {
  single_value->field_data__offset.clean_up();
}
if (other_value.reserved().is_bound()) {
  single_value->field_reserved = other_value.reserved();
} else {
  single_value->field_reserved.clean_up();
}
if (other_value.control__bits().is_bound()) {
  single_value->field_control__bits = other_value.control__bits();
} else {
  single_value->field_control__bits.clean_up();
}
if (other_value.window().is_bound()) {
  single_value->field_window = other_value.window();
} else {
  single_value->field_window.clean_up();
}
if (other_value.checksum().is_bound()) {
  single_value->field_checksum = other_value.checksum();
} else {
  single_value->field_checksum.clean_up();
}
if (other_value.urgent__pointer().is_bound()) {
  single_value->field_urgent__pointer = other_value.urgent__pointer();
} else {
  single_value->field_urgent__pointer.clean_up();
}
if (other_value.options().is_bound()) {
  if (other_value.options().ispresent()) single_value->field_options = other_value.options()();
  else single_value->field_options = OMIT_VALUE;
} else {
  single_value->field_options.clean_up();
}
if (other_value.data().is_bound()) {
  if (other_value.data().ispresent()) single_value->field_data = other_value.data()();
  else single_value->field_data = OMIT_VALUE;
} else {
  single_value->field_data.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void PDU__TCP_template::copy_template(const PDU__TCP_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.source__port().get_selection()) {
single_value->field_source__port = other_value.source__port();
} else {
single_value->field_source__port.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.dest__port().get_selection()) {
single_value->field_dest__port = other_value.dest__port();
} else {
single_value->field_dest__port.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sequence__number().get_selection()) {
single_value->field_sequence__number = other_value.sequence__number();
} else {
single_value->field_sequence__number.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.acknowledgment__number().get_selection()) {
single_value->field_acknowledgment__number = other_value.acknowledgment__number();
} else {
single_value->field_acknowledgment__number.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.data__offset().get_selection()) {
single_value->field_data__offset = other_value.data__offset();
} else {
single_value->field_data__offset.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.reserved().get_selection()) {
single_value->field_reserved = other_value.reserved();
} else {
single_value->field_reserved.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.control__bits().get_selection()) {
single_value->field_control__bits = other_value.control__bits();
} else {
single_value->field_control__bits.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.window().get_selection()) {
single_value->field_window = other_value.window();
} else {
single_value->field_window.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.checksum().get_selection()) {
single_value->field_checksum = other_value.checksum();
} else {
single_value->field_checksum.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.urgent__pointer().get_selection()) {
single_value->field_urgent__pointer = other_value.urgent__pointer();
} else {
single_value->field_urgent__pointer.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.options().get_selection()) {
single_value->field_options = other_value.options();
} else {
single_value->field_options.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.data().get_selection()) {
single_value->field_data = other_value.data();
} else {
single_value->field_data.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new PDU__TCP_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @TCP_Types.PDU_TCP.");
break;
}
set_selection(other_value);
}

PDU__TCP_template::PDU__TCP_template()
{
}

PDU__TCP_template::PDU__TCP_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

PDU__TCP_template::PDU__TCP_template(const PDU__TCP& other_value)
{
copy_value(other_value);
}

PDU__TCP_template::PDU__TCP_template(const OPTIONAL<PDU__TCP>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const PDU__TCP&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @TCP_Types.PDU_TCP from an unbound optional field.");
}
}

PDU__TCP_template::PDU__TCP_template(const PDU__TCP_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

PDU__TCP_template::~PDU__TCP_template()
{
clean_up();
}

PDU__TCP_template& PDU__TCP_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

PDU__TCP_template& PDU__TCP_template::operator=(const PDU__TCP& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

PDU__TCP_template& PDU__TCP_template::operator=(const OPTIONAL<PDU__TCP>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const PDU__TCP&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @TCP_Types.PDU_TCP.");
}
return *this;
}

PDU__TCP_template& PDU__TCP_template::operator=(const PDU__TCP_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean PDU__TCP_template::match(const PDU__TCP& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.source__port().is_bound()) return FALSE;
if(!single_value->field_source__port.match(other_value.source__port()))return FALSE;
if(!other_value.dest__port().is_bound()) return FALSE;
if(!single_value->field_dest__port.match(other_value.dest__port()))return FALSE;
if(!other_value.sequence__number().is_bound()) return FALSE;
if(!single_value->field_sequence__number.match(other_value.sequence__number()))return FALSE;
if(!other_value.acknowledgment__number().is_bound()) return FALSE;
if(!single_value->field_acknowledgment__number.match(other_value.acknowledgment__number()))return FALSE;
if(!other_value.data__offset().is_bound()) return FALSE;
if(!single_value->field_data__offset.match(other_value.data__offset()))return FALSE;
if(!other_value.reserved().is_bound()) return FALSE;
if(!single_value->field_reserved.match(other_value.reserved()))return FALSE;
if(!other_value.control__bits().is_bound()) return FALSE;
if(!single_value->field_control__bits.match(other_value.control__bits()))return FALSE;
if(!other_value.window().is_bound()) return FALSE;
if(!single_value->field_window.match(other_value.window()))return FALSE;
if(!other_value.checksum().is_bound()) return FALSE;
if(!single_value->field_checksum.match(other_value.checksum()))return FALSE;
if(!other_value.urgent__pointer().is_bound()) return FALSE;
if(!single_value->field_urgent__pointer.match(other_value.urgent__pointer()))return FALSE;
if(!other_value.options().is_bound()) return FALSE;
if((other_value.options().ispresent() ? !single_value->field_options.match((const OCTETSTRING&)other_value.options()) : !single_value->field_options.match_omit()))return FALSE;
if(!other_value.data().is_bound()) return FALSE;
if((other_value.data().ispresent() ? !single_value->field_data.match((const OCTETSTRING&)other_value.data()) : !single_value->field_data.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @TCP_Types.PDU_TCP.");
}
return FALSE;
}

boolean PDU__TCP_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_source__port.is_bound()) return TRUE;
if (single_value->field_dest__port.is_bound()) return TRUE;
if (single_value->field_sequence__number.is_bound()) return TRUE;
if (single_value->field_acknowledgment__number.is_bound()) return TRUE;
if (single_value->field_data__offset.is_bound()) return TRUE;
if (single_value->field_reserved.is_bound()) return TRUE;
if (single_value->field_control__bits.is_bound()) return TRUE;
if (single_value->field_window.is_bound()) return TRUE;
if (single_value->field_checksum.is_bound()) return TRUE;
if (single_value->field_urgent__pointer.is_bound()) return TRUE;
if (single_value->field_options.is_omit() || single_value->field_options.is_bound()) return TRUE;
if (single_value->field_data.is_omit() || single_value->field_data.is_bound()) return TRUE;
return FALSE;
}

boolean PDU__TCP_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_source__port.is_value()) return FALSE;
if (!single_value->field_dest__port.is_value()) return FALSE;
if (!single_value->field_sequence__number.is_value()) return FALSE;
if (!single_value->field_acknowledgment__number.is_value()) return FALSE;
if (!single_value->field_data__offset.is_value()) return FALSE;
if (!single_value->field_reserved.is_value()) return FALSE;
if (!single_value->field_control__bits.is_value()) return FALSE;
if (!single_value->field_window.is_value()) return FALSE;
if (!single_value->field_checksum.is_value()) return FALSE;
if (!single_value->field_urgent__pointer.is_value()) return FALSE;
if (!single_value->field_options.is_omit() && !single_value->field_options.is_value()) return FALSE;
if (!single_value->field_data.is_omit() && !single_value->field_data.is_value()) return FALSE;
return TRUE;
}

void PDU__TCP_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

PDU__TCP PDU__TCP_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @TCP_Types.PDU_TCP.");
PDU__TCP ret_val;
if (single_value->field_source__port.is_bound()) {
ret_val.source__port() = single_value->field_source__port.valueof();
}
if (single_value->field_dest__port.is_bound()) {
ret_val.dest__port() = single_value->field_dest__port.valueof();
}
if (single_value->field_sequence__number.is_bound()) {
ret_val.sequence__number() = single_value->field_sequence__number.valueof();
}
if (single_value->field_acknowledgment__number.is_bound()) {
ret_val.acknowledgment__number() = single_value->field_acknowledgment__number.valueof();
}
if (single_value->field_data__offset.is_bound()) {
ret_val.data__offset() = single_value->field_data__offset.valueof();
}
if (single_value->field_reserved.is_bound()) {
ret_val.reserved() = single_value->field_reserved.valueof();
}
if (single_value->field_control__bits.is_bound()) {
ret_val.control__bits() = single_value->field_control__bits.valueof();
}
if (single_value->field_window.is_bound()) {
ret_val.window() = single_value->field_window.valueof();
}
if (single_value->field_checksum.is_bound()) {
ret_val.checksum() = single_value->field_checksum.valueof();
}
if (single_value->field_urgent__pointer.is_bound()) {
ret_val.urgent__pointer() = single_value->field_urgent__pointer.valueof();
}
if (single_value->field_options.is_omit()) ret_val.options() = OMIT_VALUE;
else if (single_value->field_options.is_bound()) {
ret_val.options() = single_value->field_options.valueof();
}
if (single_value->field_data.is_omit()) ret_val.data() = OMIT_VALUE;
else if (single_value->field_data.is_bound()) {
ret_val.data() = single_value->field_data.valueof();
}
return ret_val;
}

void PDU__TCP_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @TCP_Types.PDU_TCP.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new PDU__TCP_template[list_length];
}

PDU__TCP_template& PDU__TCP_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @TCP_Types.PDU_TCP.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @TCP_Types.PDU_TCP.");
return value_list.list_value[list_index];
}

INTEGER_template& PDU__TCP_template::source__port()
{
set_specific();
return single_value->field_source__port;
}

const INTEGER_template& PDU__TCP_template::source__port() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field source_port of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_source__port;
}

INTEGER_template& PDU__TCP_template::dest__port()
{
set_specific();
return single_value->field_dest__port;
}

const INTEGER_template& PDU__TCP_template::dest__port() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field dest_port of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_dest__port;
}

INTEGER_template& PDU__TCP_template::sequence__number()
{
set_specific();
return single_value->field_sequence__number;
}

const INTEGER_template& PDU__TCP_template::sequence__number() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sequence_number of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_sequence__number;
}

INTEGER_template& PDU__TCP_template::acknowledgment__number()
{
set_specific();
return single_value->field_acknowledgment__number;
}

const INTEGER_template& PDU__TCP_template::acknowledgment__number() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field acknowledgment_number of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_acknowledgment__number;
}

INTEGER_template& PDU__TCP_template::data__offset()
{
set_specific();
return single_value->field_data__offset;
}

const INTEGER_template& PDU__TCP_template::data__offset() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field data_offset of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_data__offset;
}

BITSTRING_template& PDU__TCP_template::reserved()
{
set_specific();
return single_value->field_reserved;
}

const BITSTRING_template& PDU__TCP_template::reserved() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field reserved of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_reserved;
}

TCP__Control__bits_template& PDU__TCP_template::control__bits()
{
set_specific();
return single_value->field_control__bits;
}

const TCP__Control__bits_template& PDU__TCP_template::control__bits() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field control_bits of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_control__bits;
}

INTEGER_template& PDU__TCP_template::window()
{
set_specific();
return single_value->field_window;
}

const INTEGER_template& PDU__TCP_template::window() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field window of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_window;
}

OCTETSTRING_template& PDU__TCP_template::checksum()
{
set_specific();
return single_value->field_checksum;
}

const OCTETSTRING_template& PDU__TCP_template::checksum() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field checksum of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_checksum;
}

INTEGER_template& PDU__TCP_template::urgent__pointer()
{
set_specific();
return single_value->field_urgent__pointer;
}

const INTEGER_template& PDU__TCP_template::urgent__pointer() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field urgent_pointer of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_urgent__pointer;
}

OCTETSTRING_template& PDU__TCP_template::options()
{
set_specific();
return single_value->field_options;
}

const OCTETSTRING_template& PDU__TCP_template::options() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field options of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_options;
}

OCTETSTRING_template& PDU__TCP_template::data()
{
set_specific();
return single_value->field_data;
}

const OCTETSTRING_template& PDU__TCP_template::data() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field data of a non-specific template of type @TCP_Types.PDU_TCP.");
return single_value->field_data;
}

int PDU__TCP_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 10;
      if (single_value->field_options.is_present()) ret_val++;
      if (single_value->field_data.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @TCP_Types.PDU_TCP containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @TCP_Types.PDU_TCP.");
  }
  return 0;
}

void PDU__TCP_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ source_port := ");
single_value->field_source__port.log();
TTCN_Logger::log_event_str(", dest_port := ");
single_value->field_dest__port.log();
TTCN_Logger::log_event_str(", sequence_number := ");
single_value->field_sequence__number.log();
TTCN_Logger::log_event_str(", acknowledgment_number := ");
single_value->field_acknowledgment__number.log();
TTCN_Logger::log_event_str(", data_offset := ");
single_value->field_data__offset.log();
TTCN_Logger::log_event_str(", reserved := ");
single_value->field_reserved.log();
TTCN_Logger::log_event_str(", control_bits := ");
single_value->field_control__bits.log();
TTCN_Logger::log_event_str(", window := ");
single_value->field_window.log();
TTCN_Logger::log_event_str(", checksum := ");
single_value->field_checksum.log();
TTCN_Logger::log_event_str(", urgent_pointer := ");
single_value->field_urgent__pointer.log();
TTCN_Logger::log_event_str(", options := ");
single_value->field_options.log();
TTCN_Logger::log_event_str(", data := ");
single_value->field_data.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void PDU__TCP_template::log_match(const PDU__TCP& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_source__port.match(match_value.source__port())){
TTCN_Logger::log_logmatch_info(".source_port");
single_value->field_source__port.log_match(match_value.source__port());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_dest__port.match(match_value.dest__port())){
TTCN_Logger::log_logmatch_info(".dest_port");
single_value->field_dest__port.log_match(match_value.dest__port());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_sequence__number.match(match_value.sequence__number())){
TTCN_Logger::log_logmatch_info(".sequence_number");
single_value->field_sequence__number.log_match(match_value.sequence__number());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_acknowledgment__number.match(match_value.acknowledgment__number())){
TTCN_Logger::log_logmatch_info(".acknowledgment_number");
single_value->field_acknowledgment__number.log_match(match_value.acknowledgment__number());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_data__offset.match(match_value.data__offset())){
TTCN_Logger::log_logmatch_info(".data_offset");
single_value->field_data__offset.log_match(match_value.data__offset());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_reserved.match(match_value.reserved())){
TTCN_Logger::log_logmatch_info(".reserved");
single_value->field_reserved.log_match(match_value.reserved());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_control__bits.match(match_value.control__bits())){
TTCN_Logger::log_logmatch_info(".control_bits");
single_value->field_control__bits.log_match(match_value.control__bits());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_window.match(match_value.window())){
TTCN_Logger::log_logmatch_info(".window");
single_value->field_window.log_match(match_value.window());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_checksum.match(match_value.checksum())){
TTCN_Logger::log_logmatch_info(".checksum");
single_value->field_checksum.log_match(match_value.checksum());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_urgent__pointer.match(match_value.urgent__pointer())){
TTCN_Logger::log_logmatch_info(".urgent_pointer");
single_value->field_urgent__pointer.log_match(match_value.urgent__pointer());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.options().ispresent()){
if(!single_value->field_options.match(match_value.options())){
TTCN_Logger::log_logmatch_info(".options");
single_value->field_options.log_match(match_value.options());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_options.match_omit()){
 TTCN_Logger::log_logmatch_info(".options := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_options.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.data().ispresent()){
if(!single_value->field_data.match(match_value.data())){
TTCN_Logger::log_logmatch_info(".data");
single_value->field_data.log_match(match_value.data());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_data.match_omit()){
 TTCN_Logger::log_logmatch_info(".data := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_data.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ source_port := ");
single_value->field_source__port.log_match(match_value.source__port());
TTCN_Logger::log_event_str(", dest_port := ");
single_value->field_dest__port.log_match(match_value.dest__port());
TTCN_Logger::log_event_str(", sequence_number := ");
single_value->field_sequence__number.log_match(match_value.sequence__number());
TTCN_Logger::log_event_str(", acknowledgment_number := ");
single_value->field_acknowledgment__number.log_match(match_value.acknowledgment__number());
TTCN_Logger::log_event_str(", data_offset := ");
single_value->field_data__offset.log_match(match_value.data__offset());
TTCN_Logger::log_event_str(", reserved := ");
single_value->field_reserved.log_match(match_value.reserved());
TTCN_Logger::log_event_str(", control_bits := ");
single_value->field_control__bits.log_match(match_value.control__bits());
TTCN_Logger::log_event_str(", window := ");
single_value->field_window.log_match(match_value.window());
TTCN_Logger::log_event_str(", checksum := ");
single_value->field_checksum.log_match(match_value.checksum());
TTCN_Logger::log_event_str(", urgent_pointer := ");
single_value->field_urgent__pointer.log_match(match_value.urgent__pointer());
TTCN_Logger::log_event_str(", options := ");
if (match_value.options().ispresent()) single_value->field_options.log_match(match_value.options());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_options.log();
if (single_value->field_options.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", data := ");
if (match_value.data().ispresent()) single_value->field_data.log_match(match_value.data());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_data.log();
if (single_value->field_data.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void PDU__TCP_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_source__port.encode_text(text_buf);
single_value->field_dest__port.encode_text(text_buf);
single_value->field_sequence__number.encode_text(text_buf);
single_value->field_acknowledgment__number.encode_text(text_buf);
single_value->field_data__offset.encode_text(text_buf);
single_value->field_reserved.encode_text(text_buf);
single_value->field_control__bits.encode_text(text_buf);
single_value->field_window.encode_text(text_buf);
single_value->field_checksum.encode_text(text_buf);
single_value->field_urgent__pointer.encode_text(text_buf);
single_value->field_options.encode_text(text_buf);
single_value->field_data.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @TCP_Types.PDU_TCP.");
}
}

void PDU__TCP_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_source__port.decode_text(text_buf);
single_value->field_dest__port.decode_text(text_buf);
single_value->field_sequence__number.decode_text(text_buf);
single_value->field_acknowledgment__number.decode_text(text_buf);
single_value->field_data__offset.decode_text(text_buf);
single_value->field_reserved.decode_text(text_buf);
single_value->field_control__bits.decode_text(text_buf);
single_value->field_window.decode_text(text_buf);
single_value->field_checksum.decode_text(text_buf);
single_value->field_urgent__pointer.decode_text(text_buf);
single_value->field_options.decode_text(text_buf);
single_value->field_data.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new PDU__TCP_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @TCP_Types.PDU_TCP.");
}
}

void PDU__TCP_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@TCP_Types.PDU_TCP'");
    }
    if (strcmp("source_port", param_field) == 0) {
      source__port().set_param(param);
      return;
    } else if (strcmp("dest_port", param_field) == 0) {
      dest__port().set_param(param);
      return;
    } else if (strcmp("sequence_number", param_field) == 0) {
      sequence__number().set_param(param);
      return;
    } else if (strcmp("acknowledgment_number", param_field) == 0) {
      acknowledgment__number().set_param(param);
      return;
    } else if (strcmp("data_offset", param_field) == 0) {
      data__offset().set_param(param);
      return;
    } else if (strcmp("reserved", param_field) == 0) {
      reserved().set_param(param);
      return;
    } else if (strcmp("control_bits", param_field) == 0) {
      control__bits().set_param(param);
      return;
    } else if (strcmp("window", param_field) == 0) {
      window().set_param(param);
      return;
    } else if (strcmp("checksum", param_field) == 0) {
      checksum().set_param(param);
      return;
    } else if (strcmp("urgent_pointer", param_field) == 0) {
      urgent__pointer().set_param(param);
      return;
    } else if (strcmp("options", param_field) == 0) {
      options().set_param(param);
      return;
    } else if (strcmp("data", param_field) == 0) {
      data().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@TCP_Types.PDU_TCP'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (12<param.get_size()) {
      param.error("record template of type @TCP_Types.PDU_TCP has 12 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) source__port().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) dest__port().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) sequence__number().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) acknowledgment__number().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) data__offset().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) reserved().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) control__bits().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) window().set_param(*param.get_elem(7));
    if (param.get_size()>8 && param.get_elem(8)->get_type()!=Module_Param::MP_NotUsed) checksum().set_param(*param.get_elem(8));
    if (param.get_size()>9 && param.get_elem(9)->get_type()!=Module_Param::MP_NotUsed) urgent__pointer().set_param(*param.get_elem(9));
    if (param.get_size()>10 && param.get_elem(10)->get_type()!=Module_Param::MP_NotUsed) options().set_param(*param.get_elem(10));
    if (param.get_size()>11 && param.get_elem(11)->get_type()!=Module_Param::MP_NotUsed) data().set_param(*param.get_elem(11));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "source_port")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          source__port().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "dest_port")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          dest__port().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence_number")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence__number().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "acknowledgment_number")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          acknowledgment__number().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data_offset")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data__offset().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "reserved")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          reserved().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "control_bits")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          control__bits().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "window")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          window().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "checksum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          checksum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "urgent_pointer")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          urgent__pointer().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "data")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          data().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @TCP_Types.PDU_TCP: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@TCP_Types.PDU_TCP");
  }
  is_ifpresent = param.get_ifpresent();
}

void PDU__TCP_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_source__port.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_dest__port.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_sequence__number.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_acknowledgment__number.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_data__offset.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_reserved.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_control__bits.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_window.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_checksum.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_urgent__pointer.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_options.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
single_value->field_data.check_restriction(t_res, t_name ? t_name : "@TCP_Types.PDU_TCP");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@TCP_Types.PDU_TCP");
}

boolean PDU__TCP_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean PDU__TCP_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of static functions */

static void pre_init_module()
{
General__Types::module_object.pre_init_module();
module_object.add_function("f_enc_PDU_TCP", (genericfunc_t)&f__enc__PDU__TCP, NULL);
module_object.add_function("f_dec_PDU_TCP", (genericfunc_t)&f__dec__PDU__TCP, NULL);
module_object.add_function("f_TCP_verify_checksum", (genericfunc_t)&f__TCP__verify__checksum, NULL);
}

static void post_init_module()
{
General__Types::module_object.post_init_module();
const_f__enc__PDU__TCP_pl__ip__source_defval = os_0;
const_f__enc__PDU__TCP_pl__ip__dest_defval = os_0;
const_f__enc__PDU__TCP_pl__autoDataOffset_defval = TRUE;
const_f__enc__PDU__TCP_pl__autoCheckSum_defval = TRUE;
}


} /* end of namespace */
