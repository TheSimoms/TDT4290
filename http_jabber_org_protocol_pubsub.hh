// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef http__jabber__org__protocol__pubsub_HH
#define http__jabber__org__protocol__pubsub_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "jabber_x_data.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef http__jabber__org__protocol__pubsub_HH
#endif

namespace http__jabber__org__protocol__pubsub {

/* Forward declarations of classes */

class Pubsub_choice;
class Pubsub_choice_template;
class Empty;
class Empty_template;
class Create;
class Create_template;
class Pubsub_choice_sequence;
class Pubsub_choice_sequence_template;
class Configure;
class Configure_template;
class Configure_choice;
class Configure_choice_template;
class Pubsub_choice_sequence__1;
class Pubsub_choice_sequence__1_template;
class Subscribe;
class Subscribe_template;
class Options;
class Options_template;
class Options_sequence;
class Options_sequence_template;
class Pubsub_choice_choice__list;
class Pubsub_choice_choice__list_template;
class Pubsub_choice_choice__list_0;
class Pubsub_choice_choice__list_0_template;
class Affiliations_affiliation__list;
class Affiliations_affiliation__list_template;
class Affiliation_affiliation;
class Affiliation_affiliation_template;
class Affiliation;
class Affiliation_template;
class Affiliations;
class Affiliations_template;
class Default;
class Default_template;
class Default_type__;
class Default_type___template;
class Items_item__list;
class Items_item__list_template;
class Item;
class Item_template;
class Item_sequence;
class Item_sequence_template;
class Items;
class Items_template;
class Publish_item__list;
class Publish_item__list_template;
class Publish;
class Publish_template;
class Retract_item__list;
class Retract_item__list_template;
class Retract;
class Retract_template;
class Subscription;
class Subscription_template;
class Subscription_subscription;
class Subscription_subscription_template;
class Subscribe__options;
class Subscribe__options_template;
class Subscriptions_sequence__list;
class Subscriptions_sequence__list_template;
class Subscriptions_sequence__list_0;
class Subscriptions_sequence__list_0_template;
class Subscriptions;
class Subscriptions_template;
class Unsubscribe;
class Unsubscribe_template;
class Pubsub;
class Pubsub_template;

} /* end of namespace */

#ifndef http__jabber__org__protocol__pubsub_HH
#define http__jabber__org__protocol__pubsub_HH

namespace http__jabber__org__protocol__pubsub {

/* Class definitions */

class Pubsub_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_sequence = 1, ALT_sequence__1 = 2, ALT_choice__list = 3 };
private:
union_selection_type union_selection;
union {
Pubsub_choice_sequence *field_sequence;
Pubsub_choice_sequence__1 *field_sequence__1;
Pubsub_choice_choice__list *field_choice__list;
};
void copy_value(const Pubsub_choice& other_value);

public:
Pubsub_choice();
Pubsub_choice(const Pubsub_choice& other_value);
~Pubsub_choice();
Pubsub_choice& operator=(const Pubsub_choice& other_value);
boolean operator==(const Pubsub_choice& other_value) const;
inline boolean operator!=(const Pubsub_choice& other_value) const { return !(*this == other_value); }
Pubsub_choice_sequence& sequence();
const Pubsub_choice_sequence& sequence() const;
Pubsub_choice_sequence__1& sequence__1();
const Pubsub_choice_sequence__1& sequence__1() const;
Pubsub_choice_choice__list& choice__list();
const Pubsub_choice_choice__list& choice__list() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Pubsub_choice_template : public Base_Template {
union {
struct {
Pubsub_choice::union_selection_type union_selection;
union {
Pubsub_choice_sequence_template *field_sequence;
Pubsub_choice_sequence__1_template *field_sequence__1;
Pubsub_choice_choice__list_template *field_choice__list;
};
} single_value;
struct {
unsigned int n_values;
Pubsub_choice_template *list_value;
} value_list;
};
void copy_value(const Pubsub_choice& other_value);

void copy_template(const Pubsub_choice_template& other_value);

public:
Pubsub_choice_template();
Pubsub_choice_template(template_sel other_value);
Pubsub_choice_template(const Pubsub_choice& other_value);
Pubsub_choice_template(const OPTIONAL<Pubsub_choice>& other_value);
Pubsub_choice_template(const Pubsub_choice_template& other_value);
~Pubsub_choice_template();
void clean_up();
Pubsub_choice_template& operator=(template_sel other_value);
Pubsub_choice_template& operator=(const Pubsub_choice& other_value);
Pubsub_choice_template& operator=(const OPTIONAL<Pubsub_choice>& other_value);
Pubsub_choice_template& operator=(const Pubsub_choice_template& other_value);
boolean match(const Pubsub_choice& other_value) const;
boolean is_value() const;Pubsub_choice valueof() const;
Pubsub_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Pubsub_choice_sequence_template& sequence();
const Pubsub_choice_sequence_template& sequence() const;
Pubsub_choice_sequence__1_template& sequence__1();
const Pubsub_choice_sequence__1_template& sequence__1() const;
Pubsub_choice_choice__list_template& choice__list();
const Pubsub_choice_choice__list_template& choice__list() const;
boolean ischosen(Pubsub_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Pubsub_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Create : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Create();
  Create(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Empty& par_base);
  Create(const Create& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Create& operator=(const Create& other_value);
  boolean operator==(const Create& other_value) const;
  inline boolean operator!=(const Create& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Create_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Create_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Create& other_value);
void copy_template(const Create_template& other_value);

public:
Create_template();
Create_template(template_sel other_value);
Create_template(const Create& other_value);
Create_template(const OPTIONAL<Create>& other_value);
Create_template(const Create_template& other_value);
~Create_template();
Create_template& operator=(template_sel other_value);
Create_template& operator=(const Create& other_value);
Create_template& operator=(const OPTIONAL<Create>& other_value);
Create_template& operator=(const Create_template& other_value);
boolean match(const Create& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Create valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Create_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Create& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Pubsub_choice_sequence : public Base_Type {
  Create field_create__;
  OPTIONAL<Configure> field_configure;
  boolean bound_flag;
public:
  Pubsub_choice_sequence();
  Pubsub_choice_sequence(const Create& par_create__,
    const OPTIONAL<Configure>& par_configure);
  Pubsub_choice_sequence(const Pubsub_choice_sequence& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Pubsub_choice_sequence& operator=(const Pubsub_choice_sequence& other_value);
  boolean operator==(const Pubsub_choice_sequence& other_value) const;
  inline boolean operator!=(const Pubsub_choice_sequence& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Create& create__()
    {return field_create__;}
  inline const Create& create__() const
    {return field_create__;}
  inline OPTIONAL<Configure>& configure()
    {return field_configure;}
  inline const OPTIONAL<Configure>& configure() const
    {return field_configure;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Pubsub_choice_sequence_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Pubsub_choice_sequence_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Pubsub_choice_sequence& other_value);
void copy_template(const Pubsub_choice_sequence_template& other_value);

public:
Pubsub_choice_sequence_template();
Pubsub_choice_sequence_template(template_sel other_value);
Pubsub_choice_sequence_template(const Pubsub_choice_sequence& other_value);
Pubsub_choice_sequence_template(const OPTIONAL<Pubsub_choice_sequence>& other_value);
Pubsub_choice_sequence_template(const Pubsub_choice_sequence_template& other_value);
~Pubsub_choice_sequence_template();
Pubsub_choice_sequence_template& operator=(template_sel other_value);
Pubsub_choice_sequence_template& operator=(const Pubsub_choice_sequence& other_value);
Pubsub_choice_sequence_template& operator=(const OPTIONAL<Pubsub_choice_sequence>& other_value);
Pubsub_choice_sequence_template& operator=(const Pubsub_choice_sequence_template& other_value);
boolean match(const Pubsub_choice_sequence& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Pubsub_choice_sequence valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Pubsub_choice_sequence_template& list_item(unsigned int list_index) const;
Create_template& create__();
const Create_template& create__() const;
Configure_template& configure();
const Configure_template& configure() const;
int size_of() const;
void log() const;
void log_match(const Pubsub_choice_sequence& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configure : public Base_Type {
  OPTIONAL<Configure_choice> field_choice;
  boolean bound_flag;
public:
  Configure();
  Configure(const OPTIONAL<Configure_choice>& par_choice);
  Configure(const Configure& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Configure& operator=(const Configure& other_value);
  boolean operator==(const Configure& other_value) const;
  inline boolean operator!=(const Configure& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Configure_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Configure_choice>& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Configure_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Configure_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Configure& other_value);
void copy_template(const Configure_template& other_value);

public:
Configure_template();
Configure_template(template_sel other_value);
Configure_template(const Configure& other_value);
Configure_template(const OPTIONAL<Configure>& other_value);
Configure_template(const Configure_template& other_value);
~Configure_template();
Configure_template& operator=(template_sel other_value);
Configure_template& operator=(const Configure& other_value);
Configure_template& operator=(const OPTIONAL<Configure>& other_value);
Configure_template& operator=(const Configure_template& other_value);
boolean match(const Configure& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Configure valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Configure_template& list_item(unsigned int list_index) const;
Configure_choice_template& choice();
const Configure_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Configure& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Configure_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_x = 1 };
private:
union_selection_type union_selection;
union {
jabber__x__data::X *field_x;
};
void copy_value(const Configure_choice& other_value);

public:
Configure_choice();
Configure_choice(const Configure_choice& other_value);
~Configure_choice();
Configure_choice& operator=(const Configure_choice& other_value);
boolean operator==(const Configure_choice& other_value) const;
inline boolean operator!=(const Configure_choice& other_value) const { return !(*this == other_value); }
jabber__x__data::X& x();
const jabber__x__data::X& x() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Configure_choice_template : public Base_Template {
union {
struct {
Configure_choice::union_selection_type union_selection;
union {
jabber__x__data::X_template *field_x;
};
} single_value;
struct {
unsigned int n_values;
Configure_choice_template *list_value;
} value_list;
};
void copy_value(const Configure_choice& other_value);

void copy_template(const Configure_choice_template& other_value);

public:
Configure_choice_template();
Configure_choice_template(template_sel other_value);
Configure_choice_template(const Configure_choice& other_value);
Configure_choice_template(const OPTIONAL<Configure_choice>& other_value);
Configure_choice_template(const Configure_choice_template& other_value);
~Configure_choice_template();
void clean_up();
Configure_choice_template& operator=(template_sel other_value);
Configure_choice_template& operator=(const Configure_choice& other_value);
Configure_choice_template& operator=(const OPTIONAL<Configure_choice>& other_value);
Configure_choice_template& operator=(const Configure_choice_template& other_value);
boolean match(const Configure_choice& other_value) const;
boolean is_value() const;Configure_choice valueof() const;
Configure_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
jabber__x__data::X_template& x();
const jabber__x__data::X_template& x() const;
boolean ischosen(Configure_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Configure_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Pubsub_choice_sequence__1 : public Base_Type {
  OPTIONAL<Subscribe> field_subscribe;
  OPTIONAL<Options> field_options;
  boolean bound_flag;
public:
  Pubsub_choice_sequence__1();
  Pubsub_choice_sequence__1(const OPTIONAL<Subscribe>& par_subscribe,
    const OPTIONAL<Options>& par_options);
  Pubsub_choice_sequence__1(const Pubsub_choice_sequence__1& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Pubsub_choice_sequence__1& operator=(const Pubsub_choice_sequence__1& other_value);
  boolean operator==(const Pubsub_choice_sequence__1& other_value) const;
  inline boolean operator!=(const Pubsub_choice_sequence__1& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Subscribe>& subscribe()
    {return field_subscribe;}
  inline const OPTIONAL<Subscribe>& subscribe() const
    {return field_subscribe;}
  inline OPTIONAL<Options>& options()
    {return field_options;}
  inline const OPTIONAL<Options>& options() const
    {return field_options;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Pubsub_choice_sequence__1_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Pubsub_choice_sequence__1_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Pubsub_choice_sequence__1& other_value);
void copy_template(const Pubsub_choice_sequence__1_template& other_value);

public:
Pubsub_choice_sequence__1_template();
Pubsub_choice_sequence__1_template(template_sel other_value);
Pubsub_choice_sequence__1_template(const Pubsub_choice_sequence__1& other_value);
Pubsub_choice_sequence__1_template(const OPTIONAL<Pubsub_choice_sequence__1>& other_value);
Pubsub_choice_sequence__1_template(const Pubsub_choice_sequence__1_template& other_value);
~Pubsub_choice_sequence__1_template();
Pubsub_choice_sequence__1_template& operator=(template_sel other_value);
Pubsub_choice_sequence__1_template& operator=(const Pubsub_choice_sequence__1& other_value);
Pubsub_choice_sequence__1_template& operator=(const OPTIONAL<Pubsub_choice_sequence__1>& other_value);
Pubsub_choice_sequence__1_template& operator=(const Pubsub_choice_sequence__1_template& other_value);
boolean match(const Pubsub_choice_sequence__1& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Pubsub_choice_sequence__1 valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Pubsub_choice_sequence__1_template& list_item(unsigned int list_index) const;
Subscribe_template& subscribe();
const Subscribe_template& subscribe() const;
Options_template& options();
const Options_template& options() const;
int size_of() const;
void log() const;
void log_match(const Pubsub_choice_sequence__1& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscribe : public Base_Type {
  UNIVERSAL_CHARSTRING field_jid;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Subscribe();
  Subscribe(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Empty& par_base);
  Subscribe(const Subscribe& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscribe& operator=(const Subscribe& other_value);
  boolean operator==(const Subscribe& other_value) const;
  inline boolean operator!=(const Subscribe& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscribe_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscribe_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscribe& other_value);
void copy_template(const Subscribe_template& other_value);

public:
Subscribe_template();
Subscribe_template(template_sel other_value);
Subscribe_template(const Subscribe& other_value);
Subscribe_template(const OPTIONAL<Subscribe>& other_value);
Subscribe_template(const Subscribe_template& other_value);
~Subscribe_template();
Subscribe_template& operator=(template_sel other_value);
Subscribe_template& operator=(const Subscribe& other_value);
Subscribe_template& operator=(const OPTIONAL<Subscribe>& other_value);
Subscribe_template& operator=(const Subscribe_template& other_value);
boolean match(const Subscribe& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscribe valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscribe_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Subscribe& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Options : public Base_Type {
  UNIVERSAL_CHARSTRING field_jid;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_subid;
  OPTIONAL<Options_sequence> field_sequence;
  boolean bound_flag;
public:
  Options();
  Options(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const OPTIONAL<Options_sequence>& par_sequence);
  Options(const Options& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Options& operator=(const Options& other_value);
  boolean operator==(const Options& other_value) const;
  inline boolean operator!=(const Options& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& subid()
    {return field_subid;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& subid() const
    {return field_subid;}
  inline OPTIONAL<Options_sequence>& sequence()
    {return field_sequence;}
  inline const OPTIONAL<Options_sequence>& sequence() const
    {return field_sequence;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Options_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Options_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Options& other_value);
void copy_template(const Options_template& other_value);

public:
Options_template();
Options_template(template_sel other_value);
Options_template(const Options& other_value);
Options_template(const OPTIONAL<Options>& other_value);
Options_template(const Options_template& other_value);
~Options_template();
Options_template& operator=(template_sel other_value);
Options_template& operator=(const Options& other_value);
Options_template& operator=(const OPTIONAL<Options>& other_value);
Options_template& operator=(const Options_template& other_value);
boolean match(const Options& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Options valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Options_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& subid();
const UNIVERSAL_CHARSTRING_template& subid() const;
Options_sequence_template& sequence();
const Options_sequence_template& sequence() const;
int size_of() const;
void log() const;
void log_match(const Options& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Options_sequence : public Base_Type {
  UNIVERSAL_CHARSTRING field_elem;
  boolean bound_flag;
public:
  Options_sequence();
  Options_sequence(const UNIVERSAL_CHARSTRING& par_elem);
  Options_sequence(const Options_sequence& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Options_sequence& operator=(const Options_sequence& other_value);
  boolean operator==(const Options_sequence& other_value) const;
  inline boolean operator!=(const Options_sequence& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& elem()
    {return field_elem;}
  inline const UNIVERSAL_CHARSTRING& elem() const
    {return field_elem;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Options_sequence_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Options_sequence_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Options_sequence& other_value);
void copy_template(const Options_sequence_template& other_value);

public:
Options_sequence_template();
Options_sequence_template(template_sel other_value);
Options_sequence_template(const Options_sequence& other_value);
Options_sequence_template(const OPTIONAL<Options_sequence>& other_value);
Options_sequence_template(const Options_sequence_template& other_value);
~Options_sequence_template();
Options_sequence_template& operator=(template_sel other_value);
Options_sequence_template& operator=(const Options_sequence& other_value);
Options_sequence_template& operator=(const OPTIONAL<Options_sequence>& other_value);
Options_sequence_template& operator=(const Options_sequence_template& other_value);
boolean match(const Options_sequence& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Options_sequence valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Options_sequence_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& elem();
const UNIVERSAL_CHARSTRING_template& elem() const;
int size_of() const;
void log() const;
void log_match(const Options_sequence& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Pubsub_choice_choice__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Pubsub_choice_choice__list_0 **value_elements;
} *val_ptr;

static const Pubsub_choice_choice__list_0 UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Pubsub_choice_choice__list& other_value);

public:
  typedef Pubsub_choice_choice__list_0 of_type;
Pubsub_choice_choice__list();
Pubsub_choice_choice__list(null_type other_value);
Pubsub_choice_choice__list(const Pubsub_choice_choice__list& other_value);
~Pubsub_choice_choice__list();

void clean_up();
Pubsub_choice_choice__list& operator=(null_type other_value);
Pubsub_choice_choice__list& operator=(const Pubsub_choice_choice__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Pubsub_choice_choice__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Pubsub_choice_choice__list& other_value) const { return !(*this == other_value); }

Pubsub_choice_choice__list_0& operator[](int index_value);
Pubsub_choice_choice__list_0& operator[](const INTEGER& index_value);
const Pubsub_choice_choice__list_0& operator[](int index_value) const;
const Pubsub_choice_choice__list_0& operator[](const INTEGER& index_value) const;

Pubsub_choice_choice__list operator<<=(int rotate_count) const;
Pubsub_choice_choice__list operator<<=(const INTEGER& rotate_count) const;
Pubsub_choice_choice__list operator>>=(int rotate_count) const;
Pubsub_choice_choice__list operator>>=(const INTEGER& rotate_count) const;

Pubsub_choice_choice__list operator+(const Pubsub_choice_choice__list& other_value) const;

Pubsub_choice_choice__list substr(int index, int returncount) const;

Pubsub_choice_choice__list replace(int index, int len, const Pubsub_choice_choice__list& repl) const;

Pubsub_choice_choice__list replace(int index, int len, const Pubsub_choice_choice__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Pubsub_choice_choice__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Pubsub_choice_choice__list_0_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Pubsub_choice_choice__list_template *list_value;
} value_list;
};
void copy_value(const Pubsub_choice_choice__list& other_value);
void copy_template(const Pubsub_choice_choice__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Pubsub_choice_choice__list_template();
Pubsub_choice_choice__list_template(template_sel other_value);
Pubsub_choice_choice__list_template(null_type other_value);
Pubsub_choice_choice__list_template(const Pubsub_choice_choice__list& other_value);
Pubsub_choice_choice__list_template(const OPTIONAL<Pubsub_choice_choice__list>& other_value);
Pubsub_choice_choice__list_template(const Pubsub_choice_choice__list_template& other_value);
~Pubsub_choice_choice__list_template();

void clean_up();
Pubsub_choice_choice__list_template& operator=(template_sel other_value);
Pubsub_choice_choice__list_template& operator=(null_type other_value);
Pubsub_choice_choice__list_template& operator=(const Pubsub_choice_choice__list& other_value);
Pubsub_choice_choice__list_template& operator=(const OPTIONAL<Pubsub_choice_choice__list>& other_value);
Pubsub_choice_choice__list_template& operator=(const Pubsub_choice_choice__list_template& other_value);

Pubsub_choice_choice__list_0_template& operator[](int index_value);
Pubsub_choice_choice__list_0_template& operator[](const INTEGER& index_value);
const Pubsub_choice_choice__list_0_template& operator[](int index_value) const;
const Pubsub_choice_choice__list_0_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Pubsub_choice_choice__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Pubsub_choice_choice__list valueof() const;
Pubsub_choice_choice__list substr(int index, int returncount) const;

Pubsub_choice_choice__list replace(int index, int len, const Pubsub_choice_choice__list_template& repl) const;

Pubsub_choice_choice__list replace(int index, int len, const Pubsub_choice_choice__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Pubsub_choice_choice__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Pubsub_choice_choice__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Pubsub_choice_choice__list_0 : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_affiliations = 1, ALT_default__ = 2, ALT_items = 3, ALT_publish = 4, ALT_retract = 5, ALT_subscription = 6, ALT_subscriptions = 7, ALT_unsubscribe = 8 };
private:
union_selection_type union_selection;
union {
Affiliations *field_affiliations;
Default *field_default__;
Items *field_items;
Publish *field_publish;
Retract *field_retract;
Subscription *field_subscription;
Subscriptions *field_subscriptions;
Unsubscribe *field_unsubscribe;
};
void copy_value(const Pubsub_choice_choice__list_0& other_value);

public:
Pubsub_choice_choice__list_0();
Pubsub_choice_choice__list_0(const Pubsub_choice_choice__list_0& other_value);
~Pubsub_choice_choice__list_0();
Pubsub_choice_choice__list_0& operator=(const Pubsub_choice_choice__list_0& other_value);
boolean operator==(const Pubsub_choice_choice__list_0& other_value) const;
inline boolean operator!=(const Pubsub_choice_choice__list_0& other_value) const { return !(*this == other_value); }
Affiliations& affiliations();
const Affiliations& affiliations() const;
Default& default__();
const Default& default__() const;
Items& items();
const Items& items() const;
Publish& publish();
const Publish& publish() const;
Retract& retract();
const Retract& retract() const;
Subscription& subscription();
const Subscription& subscription() const;
Subscriptions& subscriptions();
const Subscriptions& subscriptions() const;
Unsubscribe& unsubscribe();
const Unsubscribe& unsubscribe() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Pubsub_choice_choice__list_0_template : public Base_Template {
union {
struct {
Pubsub_choice_choice__list_0::union_selection_type union_selection;
union {
Affiliations_template *field_affiliations;
Default_template *field_default__;
Items_template *field_items;
Publish_template *field_publish;
Retract_template *field_retract;
Subscription_template *field_subscription;
Subscriptions_template *field_subscriptions;
Unsubscribe_template *field_unsubscribe;
};
} single_value;
struct {
unsigned int n_values;
Pubsub_choice_choice__list_0_template *list_value;
} value_list;
};
void copy_value(const Pubsub_choice_choice__list_0& other_value);

void copy_template(const Pubsub_choice_choice__list_0_template& other_value);

public:
Pubsub_choice_choice__list_0_template();
Pubsub_choice_choice__list_0_template(template_sel other_value);
Pubsub_choice_choice__list_0_template(const Pubsub_choice_choice__list_0& other_value);
Pubsub_choice_choice__list_0_template(const OPTIONAL<Pubsub_choice_choice__list_0>& other_value);
Pubsub_choice_choice__list_0_template(const Pubsub_choice_choice__list_0_template& other_value);
~Pubsub_choice_choice__list_0_template();
void clean_up();
Pubsub_choice_choice__list_0_template& operator=(template_sel other_value);
Pubsub_choice_choice__list_0_template& operator=(const Pubsub_choice_choice__list_0& other_value);
Pubsub_choice_choice__list_0_template& operator=(const OPTIONAL<Pubsub_choice_choice__list_0>& other_value);
Pubsub_choice_choice__list_0_template& operator=(const Pubsub_choice_choice__list_0_template& other_value);
boolean match(const Pubsub_choice_choice__list_0& other_value) const;
boolean is_value() const;Pubsub_choice_choice__list_0 valueof() const;
Pubsub_choice_choice__list_0_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliations_template& affiliations();
const Affiliations_template& affiliations() const;
Default_template& default__();
const Default_template& default__() const;
Items_template& items();
const Items_template& items() const;
Publish_template& publish();
const Publish_template& publish() const;
Retract_template& retract();
const Retract_template& retract() const;
Subscription_template& subscription();
const Subscription_template& subscription() const;
Subscriptions_template& subscriptions();
const Subscriptions_template& subscriptions() const;
Unsubscribe_template& unsubscribe();
const Unsubscribe_template& unsubscribe() const;
boolean ischosen(Pubsub_choice_choice__list_0::union_selection_type checked_selection) const;
void log() const;
void log_match(const Pubsub_choice_choice__list_0& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliations_affiliation__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Affiliation **value_elements;
} *val_ptr;

static const Affiliation UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Affiliations_affiliation__list& other_value);

public:
  typedef Affiliation of_type;
Affiliations_affiliation__list();
Affiliations_affiliation__list(null_type other_value);
Affiliations_affiliation__list(const Affiliations_affiliation__list& other_value);
~Affiliations_affiliation__list();

void clean_up();
Affiliations_affiliation__list& operator=(null_type other_value);
Affiliations_affiliation__list& operator=(const Affiliations_affiliation__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Affiliations_affiliation__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Affiliations_affiliation__list& other_value) const { return !(*this == other_value); }

Affiliation& operator[](int index_value);
Affiliation& operator[](const INTEGER& index_value);
const Affiliation& operator[](int index_value) const;
const Affiliation& operator[](const INTEGER& index_value) const;

Affiliations_affiliation__list operator<<=(int rotate_count) const;
Affiliations_affiliation__list operator<<=(const INTEGER& rotate_count) const;
Affiliations_affiliation__list operator>>=(int rotate_count) const;
Affiliations_affiliation__list operator>>=(const INTEGER& rotate_count) const;

Affiliations_affiliation__list operator+(const Affiliations_affiliation__list& other_value) const;

Affiliations_affiliation__list substr(int index, int returncount) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list& repl) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Affiliations_affiliation__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Affiliation_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Affiliations_affiliation__list_template *list_value;
} value_list;
};
void copy_value(const Affiliations_affiliation__list& other_value);
void copy_template(const Affiliations_affiliation__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Affiliations_affiliation__list_template();
Affiliations_affiliation__list_template(template_sel other_value);
Affiliations_affiliation__list_template(null_type other_value);
Affiliations_affiliation__list_template(const Affiliations_affiliation__list& other_value);
Affiliations_affiliation__list_template(const OPTIONAL<Affiliations_affiliation__list>& other_value);
Affiliations_affiliation__list_template(const Affiliations_affiliation__list_template& other_value);
~Affiliations_affiliation__list_template();

void clean_up();
Affiliations_affiliation__list_template& operator=(template_sel other_value);
Affiliations_affiliation__list_template& operator=(null_type other_value);
Affiliations_affiliation__list_template& operator=(const Affiliations_affiliation__list& other_value);
Affiliations_affiliation__list_template& operator=(const OPTIONAL<Affiliations_affiliation__list>& other_value);
Affiliations_affiliation__list_template& operator=(const Affiliations_affiliation__list_template& other_value);

Affiliation_template& operator[](int index_value);
Affiliation_template& operator[](const INTEGER& index_value);
const Affiliation_template& operator[](int index_value) const;
const Affiliation_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Affiliations_affiliation__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Affiliations_affiliation__list valueof() const;
Affiliations_affiliation__list substr(int index, int returncount) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list_template& repl) const;

Affiliations_affiliation__list replace(int index, int len, const Affiliations_affiliation__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Affiliations_affiliation__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Affiliations_affiliation__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliation_affiliation : public Base_Type { // enum
friend class Affiliation_affiliation_template;
public:
enum enum_type { member = 0, none__ = 1, outcast = 2, owner = 3, publisher = 4, publish__only = 5, UNKNOWN_VALUE = 6, UNBOUND_VALUE = 7 };
private:
enum_type enum_value;

public:
Affiliation_affiliation();
Affiliation_affiliation(int other_value);
Affiliation_affiliation(enum_type other_value);
Affiliation_affiliation(const Affiliation_affiliation& other_value);

Affiliation_affiliation& operator=(int other_value);
Affiliation_affiliation& operator=(enum_type other_value);
Affiliation_affiliation& operator=(const Affiliation_affiliation& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Affiliation_affiliation& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Affiliation_affiliation& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Affiliation_affiliation& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Affiliation_affiliation& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Affiliation_affiliation& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Affiliation_affiliation& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Affiliation_affiliation& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Affiliation_affiliation_template : public Base_Template {
union {
Affiliation_affiliation::enum_type single_value;
struct {
unsigned int n_values;
Affiliation_affiliation_template *list_value;
} value_list;
};

void copy_template(const Affiliation_affiliation_template& other_value);

public:
Affiliation_affiliation_template();
Affiliation_affiliation_template(template_sel other_value);
Affiliation_affiliation_template(int other_value);
Affiliation_affiliation_template(Affiliation_affiliation::enum_type other_value);
Affiliation_affiliation_template(const Affiliation_affiliation& other_value);
Affiliation_affiliation_template(const OPTIONAL<Affiliation_affiliation>& other_value);
Affiliation_affiliation_template(const Affiliation_affiliation_template& other_value);
~Affiliation_affiliation_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliation_affiliation_template& operator=(template_sel other_value);
Affiliation_affiliation_template& operator=(int other_value);
Affiliation_affiliation_template& operator=(Affiliation_affiliation::enum_type other_value);
Affiliation_affiliation_template& operator=(const Affiliation_affiliation& other_value);
Affiliation_affiliation_template& operator=(const OPTIONAL<Affiliation_affiliation>& other_value);
Affiliation_affiliation_template& operator=(const Affiliation_affiliation_template& other_value);

boolean match(Affiliation_affiliation::enum_type other_value) const;
boolean match(const Affiliation_affiliation& other_value) const;
Affiliation_affiliation::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliation_affiliation_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Affiliation_affiliation& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Affiliation : public Base_Type {
  Affiliation_affiliation field_affiliation;
  UNIVERSAL_CHARSTRING field_node;
  Empty field_base;
  boolean bound_flag;
public:
  Affiliation();
  Affiliation(const Affiliation_affiliation& par_affiliation,
    const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base);
  Affiliation(const Affiliation& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Affiliation& operator=(const Affiliation& other_value);
  boolean operator==(const Affiliation& other_value) const;
  inline boolean operator!=(const Affiliation& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Affiliation_affiliation& affiliation()
    {return field_affiliation;}
  inline const Affiliation_affiliation& affiliation() const
    {return field_affiliation;}
  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Affiliation_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Affiliation_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Affiliation& other_value);
void copy_template(const Affiliation_template& other_value);

public:
Affiliation_template();
Affiliation_template(template_sel other_value);
Affiliation_template(const Affiliation& other_value);
Affiliation_template(const OPTIONAL<Affiliation>& other_value);
Affiliation_template(const Affiliation_template& other_value);
~Affiliation_template();
Affiliation_template& operator=(template_sel other_value);
Affiliation_template& operator=(const Affiliation& other_value);
Affiliation_template& operator=(const OPTIONAL<Affiliation>& other_value);
Affiliation_template& operator=(const Affiliation_template& other_value);
boolean match(const Affiliation& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliation valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliation_template& list_item(unsigned int list_index) const;
Affiliation_affiliation_template& affiliation();
const Affiliation_affiliation_template& affiliation() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Affiliation& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Affiliations : public Base_Type {
  Affiliations_affiliation__list field_affiliation__list;
  boolean bound_flag;
public:
  Affiliations();
  Affiliations(const Affiliations_affiliation__list& par_affiliation__list);
  Affiliations(const Affiliations& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Affiliations& operator=(const Affiliations& other_value);
  boolean operator==(const Affiliations& other_value) const;
  inline boolean operator!=(const Affiliations& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Affiliations_affiliation__list& affiliation__list()
    {return field_affiliation__list;}
  inline const Affiliations_affiliation__list& affiliation__list() const
    {return field_affiliation__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Affiliations_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Affiliations_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Affiliations& other_value);
void copy_template(const Affiliations_template& other_value);

public:
Affiliations_template();
Affiliations_template(template_sel other_value);
Affiliations_template(const Affiliations& other_value);
Affiliations_template(const OPTIONAL<Affiliations>& other_value);
Affiliations_template(const Affiliations_template& other_value);
~Affiliations_template();
Affiliations_template& operator=(template_sel other_value);
Affiliations_template& operator=(const Affiliations& other_value);
Affiliations_template& operator=(const OPTIONAL<Affiliations>& other_value);
Affiliations_template& operator=(const Affiliations_template& other_value);
boolean match(const Affiliations& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Affiliations valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Affiliations_template& list_item(unsigned int list_index) const;
Affiliations_affiliation__list_template& affiliation__list();
const Affiliations_affiliation__list_template& affiliation__list() const;
int size_of() const;
void log() const;
void log_match(const Affiliations& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Default : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<Default_type__> field_type__;
  Empty field_base;
  boolean bound_flag;
public:
  Default();
  Default(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<Default_type__>& par_type__,
    const Empty& par_base);
  Default(const Default& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Default& operator=(const Default& other_value);
  boolean operator==(const Default& other_value) const;
  inline boolean operator!=(const Default& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<Default_type__>& type__()
    {return field_type__;}
  inline const OPTIONAL<Default_type__>& type__() const
    {return field_type__;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Default_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Default_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Default& other_value);
void copy_template(const Default_template& other_value);

public:
Default_template();
Default_template(template_sel other_value);
Default_template(const Default& other_value);
Default_template(const OPTIONAL<Default>& other_value);
Default_template(const Default_template& other_value);
~Default_template();
Default_template& operator=(template_sel other_value);
Default_template& operator=(const Default& other_value);
Default_template& operator=(const OPTIONAL<Default>& other_value);
Default_template& operator=(const Default_template& other_value);
boolean match(const Default& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Default valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Default_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Default_type___template& type__();
const Default_type___template& type__() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Default& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Default_type__ : public Base_Type { // enum
friend class Default_type___template;
public:
enum enum_type { collection = 0, leaf = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
Default_type__();
Default_type__(int other_value);
Default_type__(enum_type other_value);
Default_type__(const Default_type__& other_value);

Default_type__& operator=(int other_value);
Default_type__& operator=(enum_type other_value);
Default_type__& operator=(const Default_type__& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Default_type__& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Default_type__& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Default_type__& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Default_type__& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Default_type__& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Default_type__& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Default_type__& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Default_type___template : public Base_Template {
union {
Default_type__::enum_type single_value;
struct {
unsigned int n_values;
Default_type___template *list_value;
} value_list;
};

void copy_template(const Default_type___template& other_value);

public:
Default_type___template();
Default_type___template(template_sel other_value);
Default_type___template(int other_value);
Default_type___template(Default_type__::enum_type other_value);
Default_type___template(const Default_type__& other_value);
Default_type___template(const OPTIONAL<Default_type__>& other_value);
Default_type___template(const Default_type___template& other_value);
~Default_type___template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Default_type___template& operator=(template_sel other_value);
Default_type___template& operator=(int other_value);
Default_type___template& operator=(Default_type__::enum_type other_value);
Default_type___template& operator=(const Default_type__& other_value);
Default_type___template& operator=(const OPTIONAL<Default_type__>& other_value);
Default_type___template& operator=(const Default_type___template& other_value);

boolean match(Default_type__::enum_type other_value) const;
boolean match(const Default_type__& other_value) const;
Default_type__::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Default_type___template& list_item(unsigned int list_index);
void log() const;
void log_match(const Default_type__& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Items_item__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Item **value_elements;
} *val_ptr;

static const Item UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Items_item__list& other_value);

public:
  typedef Item of_type;
Items_item__list();
Items_item__list(null_type other_value);
Items_item__list(const Items_item__list& other_value);
~Items_item__list();

void clean_up();
Items_item__list& operator=(null_type other_value);
Items_item__list& operator=(const Items_item__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Items_item__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Items_item__list& other_value) const { return !(*this == other_value); }

Item& operator[](int index_value);
Item& operator[](const INTEGER& index_value);
const Item& operator[](int index_value) const;
const Item& operator[](const INTEGER& index_value) const;

Items_item__list operator<<=(int rotate_count) const;
Items_item__list operator<<=(const INTEGER& rotate_count) const;
Items_item__list operator>>=(int rotate_count) const;
Items_item__list operator>>=(const INTEGER& rotate_count) const;

Items_item__list operator+(const Items_item__list& other_value) const;

Items_item__list substr(int index, int returncount) const;

Items_item__list replace(int index, int len, const Items_item__list& repl) const;

Items_item__list replace(int index, int len, const Items_item__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Items_item__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Item_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Items_item__list_template *list_value;
} value_list;
};
void copy_value(const Items_item__list& other_value);
void copy_template(const Items_item__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Items_item__list_template();
Items_item__list_template(template_sel other_value);
Items_item__list_template(null_type other_value);
Items_item__list_template(const Items_item__list& other_value);
Items_item__list_template(const OPTIONAL<Items_item__list>& other_value);
Items_item__list_template(const Items_item__list_template& other_value);
~Items_item__list_template();

void clean_up();
Items_item__list_template& operator=(template_sel other_value);
Items_item__list_template& operator=(null_type other_value);
Items_item__list_template& operator=(const Items_item__list& other_value);
Items_item__list_template& operator=(const OPTIONAL<Items_item__list>& other_value);
Items_item__list_template& operator=(const Items_item__list_template& other_value);

Item_template& operator[](int index_value);
Item_template& operator[](const INTEGER& index_value);
const Item_template& operator[](int index_value) const;
const Item_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Items_item__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Items_item__list valueof() const;
Items_item__list substr(int index, int returncount) const;

Items_item__list replace(int index, int len, const Items_item__list_template& repl) const;

Items_item__list replace(int index, int len, const Items_item__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Items_item__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Items_item__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Item : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_id;
  OPTIONAL<Item_sequence> field_sequence;
  boolean bound_flag;
public:
  Item();
  Item(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_id,
    const OPTIONAL<Item_sequence>& par_sequence);
  Item(const Item& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Item& operator=(const Item& other_value);
  boolean operator==(const Item& other_value) const;
  inline boolean operator!=(const Item& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& id()
    {return field_id;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& id() const
    {return field_id;}
  inline OPTIONAL<Item_sequence>& sequence()
    {return field_sequence;}
  inline const OPTIONAL<Item_sequence>& sequence() const
    {return field_sequence;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Item_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Item_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Item& other_value);
void copy_template(const Item_template& other_value);

public:
Item_template();
Item_template(template_sel other_value);
Item_template(const Item& other_value);
Item_template(const OPTIONAL<Item>& other_value);
Item_template(const Item_template& other_value);
~Item_template();
Item_template& operator=(template_sel other_value);
Item_template& operator=(const Item& other_value);
Item_template& operator=(const OPTIONAL<Item>& other_value);
Item_template& operator=(const Item_template& other_value);
boolean match(const Item& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Item valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Item_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& id();
const UNIVERSAL_CHARSTRING_template& id() const;
Item_sequence_template& sequence();
const Item_sequence_template& sequence() const;
int size_of() const;
void log() const;
void log_match(const Item& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Item_sequence : public Base_Type {
  UNIVERSAL_CHARSTRING field_elem;
  boolean bound_flag;
public:
  Item_sequence();
  Item_sequence(const UNIVERSAL_CHARSTRING& par_elem);
  Item_sequence(const Item_sequence& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Item_sequence& operator=(const Item_sequence& other_value);
  boolean operator==(const Item_sequence& other_value) const;
  inline boolean operator!=(const Item_sequence& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& elem()
    {return field_elem;}
  inline const UNIVERSAL_CHARSTRING& elem() const
    {return field_elem;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Item_sequence_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Item_sequence_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Item_sequence& other_value);
void copy_template(const Item_sequence_template& other_value);

public:
Item_sequence_template();
Item_sequence_template(template_sel other_value);
Item_sequence_template(const Item_sequence& other_value);
Item_sequence_template(const OPTIONAL<Item_sequence>& other_value);
Item_sequence_template(const Item_sequence_template& other_value);
~Item_sequence_template();
Item_sequence_template& operator=(template_sel other_value);
Item_sequence_template& operator=(const Item_sequence& other_value);
Item_sequence_template& operator=(const OPTIONAL<Item_sequence>& other_value);
Item_sequence_template& operator=(const Item_sequence_template& other_value);
boolean match(const Item_sequence& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Item_sequence valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Item_sequence_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& elem();
const UNIVERSAL_CHARSTRING_template& elem() const;
int size_of() const;
void log() const;
void log_match(const Item_sequence& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Items : public Base_Type {
  OPTIONAL<INTEGER> field_max__items;
  UNIVERSAL_CHARSTRING field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_subid;
  Items_item__list field_item__list;
  boolean bound_flag;
public:
  Items();
  Items(const OPTIONAL<INTEGER>& par_max__items,
    const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const Items_item__list& par_item__list);
  Items(const Items& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Items& operator=(const Items& other_value);
  boolean operator==(const Items& other_value) const;
  inline boolean operator!=(const Items& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<INTEGER>& max__items()
    {return field_max__items;}
  inline const OPTIONAL<INTEGER>& max__items() const
    {return field_max__items;}
  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& subid()
    {return field_subid;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& subid() const
    {return field_subid;}
  inline Items_item__list& item__list()
    {return field_item__list;}
  inline const Items_item__list& item__list() const
    {return field_item__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Items_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Items_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Items& other_value);
void copy_template(const Items_template& other_value);

public:
Items_template();
Items_template(template_sel other_value);
Items_template(const Items& other_value);
Items_template(const OPTIONAL<Items>& other_value);
Items_template(const Items_template& other_value);
~Items_template();
Items_template& operator=(template_sel other_value);
Items_template& operator=(const Items& other_value);
Items_template& operator=(const OPTIONAL<Items>& other_value);
Items_template& operator=(const Items_template& other_value);
boolean match(const Items& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Items valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Items_template& list_item(unsigned int list_index) const;
INTEGER_template& max__items();
const INTEGER_template& max__items() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& subid();
const UNIVERSAL_CHARSTRING_template& subid() const;
Items_item__list_template& item__list();
const Items_item__list_template& item__list() const;
int size_of() const;
void log() const;
void log_match(const Items& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Publish_item__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Item **value_elements;
} *val_ptr;

static const Item UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Publish_item__list& other_value);

public:
  typedef Item of_type;
Publish_item__list();
Publish_item__list(null_type other_value);
Publish_item__list(const Publish_item__list& other_value);
~Publish_item__list();

void clean_up();
Publish_item__list& operator=(null_type other_value);
Publish_item__list& operator=(const Publish_item__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Publish_item__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Publish_item__list& other_value) const { return !(*this == other_value); }

Item& operator[](int index_value);
Item& operator[](const INTEGER& index_value);
const Item& operator[](int index_value) const;
const Item& operator[](const INTEGER& index_value) const;

Publish_item__list operator<<=(int rotate_count) const;
Publish_item__list operator<<=(const INTEGER& rotate_count) const;
Publish_item__list operator>>=(int rotate_count) const;
Publish_item__list operator>>=(const INTEGER& rotate_count) const;

Publish_item__list operator+(const Publish_item__list& other_value) const;

Publish_item__list substr(int index, int returncount) const;

Publish_item__list replace(int index, int len, const Publish_item__list& repl) const;

Publish_item__list replace(int index, int len, const Publish_item__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Publish_item__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Item_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Publish_item__list_template *list_value;
} value_list;
};
void copy_value(const Publish_item__list& other_value);
void copy_template(const Publish_item__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Publish_item__list_template();
Publish_item__list_template(template_sel other_value);
Publish_item__list_template(null_type other_value);
Publish_item__list_template(const Publish_item__list& other_value);
Publish_item__list_template(const OPTIONAL<Publish_item__list>& other_value);
Publish_item__list_template(const Publish_item__list_template& other_value);
~Publish_item__list_template();

void clean_up();
Publish_item__list_template& operator=(template_sel other_value);
Publish_item__list_template& operator=(null_type other_value);
Publish_item__list_template& operator=(const Publish_item__list& other_value);
Publish_item__list_template& operator=(const OPTIONAL<Publish_item__list>& other_value);
Publish_item__list_template& operator=(const Publish_item__list_template& other_value);

Item_template& operator[](int index_value);
Item_template& operator[](const INTEGER& index_value);
const Item_template& operator[](int index_value) const;
const Item_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Publish_item__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Publish_item__list valueof() const;
Publish_item__list substr(int index, int returncount) const;

Publish_item__list replace(int index, int len, const Publish_item__list_template& repl) const;

Publish_item__list replace(int index, int len, const Publish_item__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Publish_item__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Publish_item__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Publish : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  Publish_item__list field_item__list;
  boolean bound_flag;
public:
  Publish();
  Publish(const UNIVERSAL_CHARSTRING& par_node,
    const Publish_item__list& par_item__list);
  Publish(const Publish& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Publish& operator=(const Publish& other_value);
  boolean operator==(const Publish& other_value) const;
  inline boolean operator!=(const Publish& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline Publish_item__list& item__list()
    {return field_item__list;}
  inline const Publish_item__list& item__list() const
    {return field_item__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Publish_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Publish_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Publish& other_value);
void copy_template(const Publish_template& other_value);

public:
Publish_template();
Publish_template(template_sel other_value);
Publish_template(const Publish& other_value);
Publish_template(const OPTIONAL<Publish>& other_value);
Publish_template(const Publish_template& other_value);
~Publish_template();
Publish_template& operator=(template_sel other_value);
Publish_template& operator=(const Publish& other_value);
Publish_template& operator=(const OPTIONAL<Publish>& other_value);
Publish_template& operator=(const Publish_template& other_value);
boolean match(const Publish& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Publish valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Publish_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Publish_item__list_template& item__list();
const Publish_item__list_template& item__list() const;
int size_of() const;
void log() const;
void log_match(const Publish& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Retract_item__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Item **value_elements;
} *val_ptr;

static const Item UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Retract_item__list& other_value);

public:
  typedef Item of_type;
Retract_item__list();
Retract_item__list(null_type other_value);
Retract_item__list(const Retract_item__list& other_value);
~Retract_item__list();

void clean_up();
Retract_item__list& operator=(null_type other_value);
Retract_item__list& operator=(const Retract_item__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Retract_item__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Retract_item__list& other_value) const { return !(*this == other_value); }

Item& operator[](int index_value);
Item& operator[](const INTEGER& index_value);
const Item& operator[](int index_value) const;
const Item& operator[](const INTEGER& index_value) const;

Retract_item__list operator<<=(int rotate_count) const;
Retract_item__list operator<<=(const INTEGER& rotate_count) const;
Retract_item__list operator>>=(int rotate_count) const;
Retract_item__list operator>>=(const INTEGER& rotate_count) const;

Retract_item__list operator+(const Retract_item__list& other_value) const;

Retract_item__list substr(int index, int returncount) const;

Retract_item__list replace(int index, int len, const Retract_item__list& repl) const;

Retract_item__list replace(int index, int len, const Retract_item__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Retract_item__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Item_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Retract_item__list_template *list_value;
} value_list;
};
void copy_value(const Retract_item__list& other_value);
void copy_template(const Retract_item__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Retract_item__list_template();
Retract_item__list_template(template_sel other_value);
Retract_item__list_template(null_type other_value);
Retract_item__list_template(const Retract_item__list& other_value);
Retract_item__list_template(const OPTIONAL<Retract_item__list>& other_value);
Retract_item__list_template(const Retract_item__list_template& other_value);
~Retract_item__list_template();

void clean_up();
Retract_item__list_template& operator=(template_sel other_value);
Retract_item__list_template& operator=(null_type other_value);
Retract_item__list_template& operator=(const Retract_item__list& other_value);
Retract_item__list_template& operator=(const OPTIONAL<Retract_item__list>& other_value);
Retract_item__list_template& operator=(const Retract_item__list_template& other_value);

Item_template& operator[](int index_value);
Item_template& operator[](const INTEGER& index_value);
const Item_template& operator[](int index_value) const;
const Item_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Retract_item__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Retract_item__list valueof() const;
Retract_item__list substr(int index, int returncount) const;

Retract_item__list replace(int index, int len, const Retract_item__list_template& repl) const;

Retract_item__list replace(int index, int len, const Retract_item__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Retract_item__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Retract_item__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Retract : public Base_Type {
  UNIVERSAL_CHARSTRING field_node;
  OPTIONAL<BOOLEAN> field_notify;
  Retract_item__list field_item__list;
  boolean bound_flag;
public:
  Retract();
  Retract(const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<BOOLEAN>& par_notify,
    const Retract_item__list& par_item__list);
  Retract(const Retract& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Retract& operator=(const Retract& other_value);
  boolean operator==(const Retract& other_value) const;
  inline boolean operator!=(const Retract& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& node()
    {return field_node;}
  inline const UNIVERSAL_CHARSTRING& node() const
    {return field_node;}
  inline OPTIONAL<BOOLEAN>& notify()
    {return field_notify;}
  inline const OPTIONAL<BOOLEAN>& notify() const
    {return field_notify;}
  inline Retract_item__list& item__list()
    {return field_item__list;}
  inline const Retract_item__list& item__list() const
    {return field_item__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Retract_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Retract_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Retract& other_value);
void copy_template(const Retract_template& other_value);

public:
Retract_template();
Retract_template(template_sel other_value);
Retract_template(const Retract& other_value);
Retract_template(const OPTIONAL<Retract>& other_value);
Retract_template(const Retract_template& other_value);
~Retract_template();
Retract_template& operator=(template_sel other_value);
Retract_template& operator=(const Retract& other_value);
Retract_template& operator=(const OPTIONAL<Retract>& other_value);
Retract_template& operator=(const Retract_template& other_value);
boolean match(const Retract& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Retract valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Retract_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
BOOLEAN_template& notify();
const BOOLEAN_template& notify() const;
Retract_item__list_template& item__list();
const Retract_item__list_template& item__list() const;
int size_of() const;
void log() const;
void log_match(const Retract& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscription : public Base_Type {
  UNIVERSAL_CHARSTRING field_jid;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_subid;
  OPTIONAL<Subscription_subscription> field_subscription;
  OPTIONAL<Subscribe__options> field_subscribe__options;
  boolean bound_flag;
public:
  Subscription();
  Subscription(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const OPTIONAL<Subscription_subscription>& par_subscription,
    const OPTIONAL<Subscribe__options>& par_subscribe__options);
  Subscription(const Subscription& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscription& operator=(const Subscription& other_value);
  boolean operator==(const Subscription& other_value) const;
  inline boolean operator!=(const Subscription& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& subid()
    {return field_subid;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& subid() const
    {return field_subid;}
  inline OPTIONAL<Subscription_subscription>& subscription()
    {return field_subscription;}
  inline const OPTIONAL<Subscription_subscription>& subscription() const
    {return field_subscription;}
  inline OPTIONAL<Subscribe__options>& subscribe__options()
    {return field_subscribe__options;}
  inline const OPTIONAL<Subscribe__options>& subscribe__options() const
    {return field_subscribe__options;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscription_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscription_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscription& other_value);
void copy_template(const Subscription_template& other_value);

public:
Subscription_template();
Subscription_template(template_sel other_value);
Subscription_template(const Subscription& other_value);
Subscription_template(const OPTIONAL<Subscription>& other_value);
Subscription_template(const Subscription_template& other_value);
~Subscription_template();
Subscription_template& operator=(template_sel other_value);
Subscription_template& operator=(const Subscription& other_value);
Subscription_template& operator=(const OPTIONAL<Subscription>& other_value);
Subscription_template& operator=(const Subscription_template& other_value);
boolean match(const Subscription& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& subid();
const UNIVERSAL_CHARSTRING_template& subid() const;
Subscription_subscription_template& subscription();
const Subscription_subscription_template& subscription() const;
Subscribe__options_template& subscribe__options();
const Subscribe__options_template& subscribe__options() const;
int size_of() const;
void log() const;
void log_match(const Subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscription_subscription : public Base_Type { // enum
friend class Subscription_subscription_template;
public:
enum enum_type { none__ = 0, pending = 1, subscribed = 2, unconfigured = 3, UNKNOWN_VALUE = 4, UNBOUND_VALUE = 5 };
private:
enum_type enum_value;

public:
Subscription_subscription();
Subscription_subscription(int other_value);
Subscription_subscription(enum_type other_value);
Subscription_subscription(const Subscription_subscription& other_value);

Subscription_subscription& operator=(int other_value);
Subscription_subscription& operator=(enum_type other_value);
Subscription_subscription& operator=(const Subscription_subscription& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Subscription_subscription& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Subscription_subscription& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Subscription_subscription& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Subscription_subscription& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Subscription_subscription& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Subscription_subscription& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Subscription_subscription& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Subscription_subscription_template : public Base_Template {
union {
Subscription_subscription::enum_type single_value;
struct {
unsigned int n_values;
Subscription_subscription_template *list_value;
} value_list;
};

void copy_template(const Subscription_subscription_template& other_value);

public:
Subscription_subscription_template();
Subscription_subscription_template(template_sel other_value);
Subscription_subscription_template(int other_value);
Subscription_subscription_template(Subscription_subscription::enum_type other_value);
Subscription_subscription_template(const Subscription_subscription& other_value);
Subscription_subscription_template(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template(const Subscription_subscription_template& other_value);
~Subscription_subscription_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscription_subscription_template& operator=(template_sel other_value);
Subscription_subscription_template& operator=(int other_value);
Subscription_subscription_template& operator=(Subscription_subscription::enum_type other_value);
Subscription_subscription_template& operator=(const Subscription_subscription& other_value);
Subscription_subscription_template& operator=(const OPTIONAL<Subscription_subscription>& other_value);
Subscription_subscription_template& operator=(const Subscription_subscription_template& other_value);

boolean match(Subscription_subscription::enum_type other_value) const;
boolean match(const Subscription_subscription& other_value) const;
Subscription_subscription::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscription_subscription_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Subscription_subscription& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Subscribe__options : public Base_Type {
  OPTIONAL<Empty> field_required;
  boolean bound_flag;
public:
  Subscribe__options();
  Subscribe__options(const OPTIONAL<Empty>& par_required);
  Subscribe__options(const Subscribe__options& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscribe__options& operator=(const Subscribe__options& other_value);
  boolean operator==(const Subscribe__options& other_value) const;
  inline boolean operator!=(const Subscribe__options& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Empty>& required()
    {return field_required;}
  inline const OPTIONAL<Empty>& required() const
    {return field_required;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscribe__options_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscribe__options_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscribe__options& other_value);
void copy_template(const Subscribe__options_template& other_value);

public:
Subscribe__options_template();
Subscribe__options_template(template_sel other_value);
Subscribe__options_template(const Subscribe__options& other_value);
Subscribe__options_template(const OPTIONAL<Subscribe__options>& other_value);
Subscribe__options_template(const Subscribe__options_template& other_value);
~Subscribe__options_template();
Subscribe__options_template& operator=(template_sel other_value);
Subscribe__options_template& operator=(const Subscribe__options& other_value);
Subscribe__options_template& operator=(const OPTIONAL<Subscribe__options>& other_value);
Subscribe__options_template& operator=(const Subscribe__options_template& other_value);
boolean match(const Subscribe__options& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscribe__options valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscribe__options_template& list_item(unsigned int list_index) const;
Empty_template& required();
const Empty_template& required() const;
int size_of() const;
void log() const;
void log_match(const Subscribe__options& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscriptions_sequence__list : public Base_Type {
struct recordof_setof_struct {
int ref_count;
int n_elements;
Subscriptions_sequence__list_0 **value_elements;
} *val_ptr;

static const Subscriptions_sequence__list_0 UNBOUND_ELEM;
private:
friend boolean operator==(null_type null_value, const Subscriptions_sequence__list& other_value);

public:
  typedef Subscriptions_sequence__list_0 of_type;
Subscriptions_sequence__list();
Subscriptions_sequence__list(null_type other_value);
Subscriptions_sequence__list(const Subscriptions_sequence__list& other_value);
~Subscriptions_sequence__list();

void clean_up();
Subscriptions_sequence__list& operator=(null_type other_value);
Subscriptions_sequence__list& operator=(const Subscriptions_sequence__list& other_value);

boolean operator==(null_type other_value) const;
boolean operator==(const Subscriptions_sequence__list& other_value) const;
inline boolean operator!=(null_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Subscriptions_sequence__list& other_value) const { return !(*this == other_value); }

Subscriptions_sequence__list_0& operator[](int index_value);
Subscriptions_sequence__list_0& operator[](const INTEGER& index_value);
const Subscriptions_sequence__list_0& operator[](int index_value) const;
const Subscriptions_sequence__list_0& operator[](const INTEGER& index_value) const;

Subscriptions_sequence__list operator<<=(int rotate_count) const;
Subscriptions_sequence__list operator<<=(const INTEGER& rotate_count) const;
Subscriptions_sequence__list operator>>=(int rotate_count) const;
Subscriptions_sequence__list operator>>=(const INTEGER& rotate_count) const;

Subscriptions_sequence__list operator+(const Subscriptions_sequence__list& other_value) const;

Subscriptions_sequence__list substr(int index, int returncount) const;

Subscriptions_sequence__list replace(int index, int len, const Subscriptions_sequence__list& repl) const;

Subscriptions_sequence__list replace(int index, int len, const Subscriptions_sequence__list_template& repl) const;

void set_size(int new_size);
inline boolean is_bound() const {return val_ptr != NULL; }
inline boolean is_present() const { return is_bound(); }
boolean is_value() const;
int size_of() const;
int n_elem() const { return size_of(); }
int lengthof() const;
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Subscriptions_sequence__list_template : public Record_Of_Template {
union {
struct {
int n_elements;
Subscriptions_sequence__list_0_template **value_elements;
} single_value;
struct {
unsigned int n_values;
Subscriptions_sequence__list_template *list_value;
} value_list;
};
void copy_value(const Subscriptions_sequence__list& other_value);
void copy_template(const Subscriptions_sequence__list_template& other_value);
static boolean match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index);

public:
Subscriptions_sequence__list_template();
Subscriptions_sequence__list_template(template_sel other_value);
Subscriptions_sequence__list_template(null_type other_value);
Subscriptions_sequence__list_template(const Subscriptions_sequence__list& other_value);
Subscriptions_sequence__list_template(const OPTIONAL<Subscriptions_sequence__list>& other_value);
Subscriptions_sequence__list_template(const Subscriptions_sequence__list_template& other_value);
~Subscriptions_sequence__list_template();

void clean_up();
Subscriptions_sequence__list_template& operator=(template_sel other_value);
Subscriptions_sequence__list_template& operator=(null_type other_value);
Subscriptions_sequence__list_template& operator=(const Subscriptions_sequence__list& other_value);
Subscriptions_sequence__list_template& operator=(const OPTIONAL<Subscriptions_sequence__list>& other_value);
Subscriptions_sequence__list_template& operator=(const Subscriptions_sequence__list_template& other_value);

Subscriptions_sequence__list_0_template& operator[](int index_value);
Subscriptions_sequence__list_0_template& operator[](const INTEGER& index_value);
const Subscriptions_sequence__list_0_template& operator[](int index_value) const;
const Subscriptions_sequence__list_0_template& operator[](const INTEGER& index_value) const;

void set_size(int new_size);
int n_elem() const;
int size_of(boolean is_size) const;
inline int size_of() const { return size_of(TRUE); }
inline int lengthof() const { return size_of(FALSE); }
boolean match(const Subscriptions_sequence__list& other_value) const;
inline boolean is_bound() const 
  {return template_selection != UNINITIALIZED_TEMPLATE; }
boolean is_value() const;
Subscriptions_sequence__list valueof() const;
Subscriptions_sequence__list substr(int index, int returncount) const;

Subscriptions_sequence__list replace(int index, int len, const Subscriptions_sequence__list_template& repl) const;

Subscriptions_sequence__list replace(int index, int len, const Subscriptions_sequence__list& repl) const;

void set_type(template_sel template_type, unsigned int list_length);
Subscriptions_sequence__list_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Subscriptions_sequence__list& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Subscriptions_sequence__list_0 : public Base_Type {
  Subscription field_subscription;
  boolean bound_flag;
public:
  Subscriptions_sequence__list_0();
  Subscriptions_sequence__list_0(const Subscription& par_subscription);
  Subscriptions_sequence__list_0(const Subscriptions_sequence__list_0& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscriptions_sequence__list_0& operator=(const Subscriptions_sequence__list_0& other_value);
  boolean operator==(const Subscriptions_sequence__list_0& other_value) const;
  inline boolean operator!=(const Subscriptions_sequence__list_0& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Subscription& subscription()
    {return field_subscription;}
  inline const Subscription& subscription() const
    {return field_subscription;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscriptions_sequence__list_0_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscriptions_sequence__list_0_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscriptions_sequence__list_0& other_value);
void copy_template(const Subscriptions_sequence__list_0_template& other_value);

public:
Subscriptions_sequence__list_0_template();
Subscriptions_sequence__list_0_template(template_sel other_value);
Subscriptions_sequence__list_0_template(const Subscriptions_sequence__list_0& other_value);
Subscriptions_sequence__list_0_template(const OPTIONAL<Subscriptions_sequence__list_0>& other_value);
Subscriptions_sequence__list_0_template(const Subscriptions_sequence__list_0_template& other_value);
~Subscriptions_sequence__list_0_template();
Subscriptions_sequence__list_0_template& operator=(template_sel other_value);
Subscriptions_sequence__list_0_template& operator=(const Subscriptions_sequence__list_0& other_value);
Subscriptions_sequence__list_0_template& operator=(const OPTIONAL<Subscriptions_sequence__list_0>& other_value);
Subscriptions_sequence__list_0_template& operator=(const Subscriptions_sequence__list_0_template& other_value);
boolean match(const Subscriptions_sequence__list_0& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscriptions_sequence__list_0 valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscriptions_sequence__list_0_template& list_item(unsigned int list_index) const;
Subscription_template& subscription();
const Subscription_template& subscription() const;
int size_of() const;
void log() const;
void log_match(const Subscriptions_sequence__list_0& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Subscriptions : public Base_Type {
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  Subscriptions_sequence__list field_sequence__list;
  boolean bound_flag;
public:
  Subscriptions();
  Subscriptions(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Subscriptions_sequence__list& par_sequence__list);
  Subscriptions(const Subscriptions& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Subscriptions& operator=(const Subscriptions& other_value);
  boolean operator==(const Subscriptions& other_value) const;
  inline boolean operator!=(const Subscriptions& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline Subscriptions_sequence__list& sequence__list()
    {return field_sequence__list;}
  inline const Subscriptions_sequence__list& sequence__list() const
    {return field_sequence__list;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Subscriptions_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Subscriptions_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Subscriptions& other_value);
void copy_template(const Subscriptions_template& other_value);

public:
Subscriptions_template();
Subscriptions_template(template_sel other_value);
Subscriptions_template(const Subscriptions& other_value);
Subscriptions_template(const OPTIONAL<Subscriptions>& other_value);
Subscriptions_template(const Subscriptions_template& other_value);
~Subscriptions_template();
Subscriptions_template& operator=(template_sel other_value);
Subscriptions_template& operator=(const Subscriptions& other_value);
Subscriptions_template& operator=(const OPTIONAL<Subscriptions>& other_value);
Subscriptions_template& operator=(const Subscriptions_template& other_value);
boolean match(const Subscriptions& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Subscriptions valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Subscriptions_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
Subscriptions_sequence__list_template& sequence__list();
const Subscriptions_sequence__list_template& sequence__list() const;
int size_of() const;
void log() const;
void log_match(const Subscriptions& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Unsubscribe : public Base_Type {
  UNIVERSAL_CHARSTRING field_jid;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_node;
  OPTIONAL<UNIVERSAL_CHARSTRING> field_subid;
  Empty field_base;
  boolean bound_flag;
public:
  Unsubscribe();
  Unsubscribe(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const Empty& par_base);
  Unsubscribe(const Unsubscribe& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Unsubscribe& operator=(const Unsubscribe& other_value);
  boolean operator==(const Unsubscribe& other_value) const;
  inline boolean operator!=(const Unsubscribe& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline UNIVERSAL_CHARSTRING& jid()
    {return field_jid;}
  inline const UNIVERSAL_CHARSTRING& jid() const
    {return field_jid;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& node()
    {return field_node;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& node() const
    {return field_node;}
  inline OPTIONAL<UNIVERSAL_CHARSTRING>& subid()
    {return field_subid;}
  inline const OPTIONAL<UNIVERSAL_CHARSTRING>& subid() const
    {return field_subid;}
  inline Empty& base()
    {return field_base;}
  inline const Empty& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Unsubscribe_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Unsubscribe_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Unsubscribe& other_value);
void copy_template(const Unsubscribe_template& other_value);

public:
Unsubscribe_template();
Unsubscribe_template(template_sel other_value);
Unsubscribe_template(const Unsubscribe& other_value);
Unsubscribe_template(const OPTIONAL<Unsubscribe>& other_value);
Unsubscribe_template(const Unsubscribe_template& other_value);
~Unsubscribe_template();
Unsubscribe_template& operator=(template_sel other_value);
Unsubscribe_template& operator=(const Unsubscribe& other_value);
Unsubscribe_template& operator=(const OPTIONAL<Unsubscribe>& other_value);
Unsubscribe_template& operator=(const Unsubscribe_template& other_value);
boolean match(const Unsubscribe& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Unsubscribe valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Unsubscribe_template& list_item(unsigned int list_index) const;
UNIVERSAL_CHARSTRING_template& jid();
const UNIVERSAL_CHARSTRING_template& jid() const;
UNIVERSAL_CHARSTRING_template& node();
const UNIVERSAL_CHARSTRING_template& node() const;
UNIVERSAL_CHARSTRING_template& subid();
const UNIVERSAL_CHARSTRING_template& subid() const;
Empty_template& base();
const Empty_template& base() const;
int size_of() const;
void log() const;
void log_match(const Unsubscribe& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Pubsub : public Base_Type {
  Pubsub_choice field_choice;
  boolean bound_flag;
public:
  Pubsub();
  Pubsub(const Pubsub_choice& par_choice);
  Pubsub(const Pubsub& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Pubsub& operator=(const Pubsub& other_value);
  boolean operator==(const Pubsub& other_value) const;
  inline boolean operator!=(const Pubsub& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline Pubsub_choice& choice()
    {return field_choice;}
  inline const Pubsub_choice& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Pubsub_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Pubsub_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Pubsub& other_value);
void copy_template(const Pubsub_template& other_value);

public:
Pubsub_template();
Pubsub_template(template_sel other_value);
Pubsub_template(const Pubsub& other_value);
Pubsub_template(const OPTIONAL<Pubsub>& other_value);
Pubsub_template(const Pubsub_template& other_value);
~Pubsub_template();
Pubsub_template& operator=(template_sel other_value);
Pubsub_template& operator=(const Pubsub& other_value);
Pubsub_template& operator=(const OPTIONAL<Pubsub>& other_value);
Pubsub_template& operator=(const Pubsub_template& other_value);
boolean match(const Pubsub& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Pubsub valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Pubsub_template& list_item(unsigned int list_index) const;
Pubsub_choice_template& choice();
const Pubsub_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Pubsub& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Function prototypes */

extern boolean operator==(null_type null_value, const Pubsub_choice_choice__list& other_value);
inline boolean operator!=(null_type null_value, const Pubsub_choice_choice__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Affiliations_affiliation__list& other_value);
inline boolean operator!=(null_type null_value, const Affiliations_affiliation__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Items_item__list& other_value);
inline boolean operator!=(null_type null_value, const Items_item__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Publish_item__list& other_value);
inline boolean operator!=(null_type null_value, const Publish_item__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Retract_item__list& other_value);
inline boolean operator!=(null_type null_value, const Retract_item__list& other_value) { return !(null_value == other_value); }
extern boolean operator==(null_type null_value, const Subscriptions_sequence__list& other_value);
inline boolean operator!=(null_type null_value, const Subscriptions_sequence__list& other_value) { return !(null_value == other_value); }

/* Global variable declarations */

extern const XERdescriptor_t Pubsub_choice_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_descr_;
extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Create_base_xer_;
extern const TTCN_Typedescriptor_t Create_base_descr_;
extern const XERdescriptor_t Create_xer_;
extern const TTCN_JSONdescriptor_t Create_json_;
extern const TTCN_Typedescriptor_t Create_descr_;
extern const XERdescriptor_t Create_node_xer_;
extern const TTCN_Typedescriptor_t Create_node_descr_;
extern const XERdescriptor_t Pubsub_choice_sequence_create___xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence_create___descr_;
extern const XERdescriptor_t Pubsub_choice_sequence_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_sequence_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence_descr_;
extern const XERdescriptor_t Configure_xer_;
extern const TTCN_JSONdescriptor_t Configure_json_;
extern const TTCN_Typedescriptor_t Configure_descr_;
extern const XERdescriptor_t Configure_choice_xer_;
extern const TTCN_JSONdescriptor_t Configure_choice_json_;
extern const TTCN_Typedescriptor_t Configure_choice_descr_;
extern const XERdescriptor_t Configure_choice_x_xer_;
extern const TTCN_Typedescriptor_t Configure_choice_x_descr_;
extern const XERdescriptor_t Pubsub_choice_sequence_configure_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence_configure_descr_;
extern const XERdescriptor_t Pubsub_choice_sequence__1_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_sequence__1_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_descr_;
extern const XERdescriptor_t Subscribe_jid_xer_;
extern const TTCN_Typedescriptor_t Subscribe_jid_descr_;
extern const XERdescriptor_t Subscribe_base_xer_;
extern const TTCN_Typedescriptor_t Subscribe_base_descr_;
extern const XERdescriptor_t Subscribe_xer_;
extern const TTCN_JSONdescriptor_t Subscribe_json_;
extern const TTCN_Typedescriptor_t Subscribe_descr_;
extern const XERdescriptor_t Subscribe_node_xer_;
extern const TTCN_Typedescriptor_t Subscribe_node_descr_;
extern const XERdescriptor_t Pubsub_choice_sequence__1_subscribe_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_subscribe_descr_;
extern const XERdescriptor_t Options_jid_xer_;
extern const TTCN_Typedescriptor_t Options_jid_descr_;
extern const XERdescriptor_t Options_xer_;
extern const TTCN_JSONdescriptor_t Options_json_;
extern const TTCN_Typedescriptor_t Options_descr_;
extern const XERdescriptor_t Options_node_xer_;
extern const TTCN_Typedescriptor_t Options_node_descr_;
extern const XERdescriptor_t Options_subid_xer_;
extern const TTCN_Typedescriptor_t Options_subid_descr_;
extern const XERdescriptor_t Options_sequence_elem_xer_;
extern const TTCN_Typedescriptor_t Options_sequence_elem_descr_;
extern const XERdescriptor_t Options_sequence_xer_;
extern const TTCN_JSONdescriptor_t Options_sequence_json_;
extern const TTCN_Typedescriptor_t Options_sequence_descr_;
extern const XERdescriptor_t Pubsub_choice_sequence__1_options_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_options_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_choice__list_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_choice_choice__list_0_json_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_descr_;
extern const XERdescriptor_t Affiliations_affiliation__list_xer_;
extern const TTCN_JSONdescriptor_t Affiliations_affiliation__list_json_;
extern const TTCN_Typedescriptor_t Affiliations_affiliation__list_descr_;
extern const XERdescriptor_t Affiliation_affiliation_xer_;
extern const TTCN_JSONdescriptor_t Affiliation_affiliation_json_;
extern const TTCN_Typedescriptor_t Affiliation_affiliation_descr_;
extern const XERdescriptor_t Affiliation_node_xer_;
extern const TTCN_Typedescriptor_t Affiliation_node_descr_;
extern const XERdescriptor_t Affiliation_base_xer_;
extern const TTCN_Typedescriptor_t Affiliation_base_descr_;
extern const XERdescriptor_t Affiliation_xer_;
extern const TTCN_JSONdescriptor_t Affiliation_json_;
extern const TTCN_Typedescriptor_t Affiliation_descr_;
extern const XERdescriptor_t Affiliations_affiliation__list_0_xer_;
extern const TTCN_Typedescriptor_t Affiliations_affiliation__list_0_descr_;
extern const XERdescriptor_t Affiliations_xer_;
extern const TTCN_JSONdescriptor_t Affiliations_json_;
extern const TTCN_Typedescriptor_t Affiliations_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_affiliations_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_affiliations_descr_;
extern const XERdescriptor_t Default_base_xer_;
extern const TTCN_Typedescriptor_t Default_base_descr_;
extern const XERdescriptor_t Default_xer_;
extern const TTCN_JSONdescriptor_t Default_json_;
extern const TTCN_Typedescriptor_t Default_descr_;
extern const XERdescriptor_t Default_node_xer_;
extern const TTCN_Typedescriptor_t Default_node_descr_;
extern const XERdescriptor_t Default_type___xer_;
extern Default_type__ Default_type___dfe;
extern const TTCN_JSONdescriptor_t Default_type___json_;
extern const TTCN_Typedescriptor_t Default_type___descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_default___xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_default___descr_;
extern const XERdescriptor_t Items_node_xer_;
extern const TTCN_Typedescriptor_t Items_node_descr_;
extern const XERdescriptor_t Items_item__list_xer_;
extern const TTCN_JSONdescriptor_t Items_item__list_json_;
extern const TTCN_Typedescriptor_t Items_item__list_descr_;
extern const XERdescriptor_t Item_xer_;
extern const TTCN_JSONdescriptor_t Item_json_;
extern const TTCN_Typedescriptor_t Item_descr_;
extern const XERdescriptor_t Item_id_xer_;
extern const TTCN_Typedescriptor_t Item_id_descr_;
extern const XERdescriptor_t Item_sequence_elem_xer_;
extern const TTCN_Typedescriptor_t Item_sequence_elem_descr_;
extern const XERdescriptor_t Item_sequence_xer_;
extern const TTCN_JSONdescriptor_t Item_sequence_json_;
extern const TTCN_Typedescriptor_t Item_sequence_descr_;
extern const XERdescriptor_t Items_item__list_0_xer_;
extern const TTCN_Typedescriptor_t Items_item__list_0_descr_;
extern const XERdescriptor_t Items_xer_;
extern const TTCN_JSONdescriptor_t Items_json_;
extern const TTCN_Typedescriptor_t Items_descr_;
extern const XERdescriptor_t Items_max__items_xer_;
extern const TTCN_Typedescriptor_t Items_max__items_descr_;
extern const XERdescriptor_t Items_subid_xer_;
extern const TTCN_Typedescriptor_t Items_subid_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_items_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_items_descr_;
extern const XERdescriptor_t Publish_node_xer_;
extern const TTCN_Typedescriptor_t Publish_node_descr_;
extern const XERdescriptor_t Publish_item__list_xer_;
extern const TTCN_JSONdescriptor_t Publish_item__list_json_;
extern const TTCN_Typedescriptor_t Publish_item__list_descr_;
extern const XERdescriptor_t Publish_item__list_0_xer_;
extern const TTCN_Typedescriptor_t Publish_item__list_0_descr_;
extern const XERdescriptor_t Publish_xer_;
extern const TTCN_JSONdescriptor_t Publish_json_;
extern const TTCN_Typedescriptor_t Publish_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_publish_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_publish_descr_;
extern const XERdescriptor_t Retract_node_xer_;
extern const TTCN_Typedescriptor_t Retract_node_descr_;
extern const XERdescriptor_t Retract_item__list_xer_;
extern const TTCN_JSONdescriptor_t Retract_item__list_json_;
extern const TTCN_Typedescriptor_t Retract_item__list_descr_;
extern const XERdescriptor_t Retract_item__list_0_xer_;
extern const TTCN_Typedescriptor_t Retract_item__list_0_descr_;
extern const XERdescriptor_t Retract_xer_;
extern const TTCN_JSONdescriptor_t Retract_json_;
extern const TTCN_Typedescriptor_t Retract_descr_;
extern const XERdescriptor_t Retract_notify_xer_;
extern const TTCN_Typedescriptor_t Retract_notify_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_retract_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_retract_descr_;
extern const XERdescriptor_t Subscription_jid_xer_;
extern const TTCN_Typedescriptor_t Subscription_jid_descr_;
extern const XERdescriptor_t Subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_descr_;
extern const XERdescriptor_t Subscription_node_xer_;
extern const TTCN_Typedescriptor_t Subscription_node_descr_;
extern const XERdescriptor_t Subscription_subid_xer_;
extern const TTCN_Typedescriptor_t Subscription_subid_descr_;
extern const XERdescriptor_t Subscription_subscription_xer_;
extern const TTCN_JSONdescriptor_t Subscription_subscription_json_;
extern const TTCN_Typedescriptor_t Subscription_subscription_descr_;
extern const XERdescriptor_t Subscribe__options_xer_;
extern const TTCN_JSONdescriptor_t Subscribe__options_json_;
extern const TTCN_Typedescriptor_t Subscribe__options_descr_;
extern const XERdescriptor_t Subscribe__options_required_xer_;
extern const TTCN_Typedescriptor_t Subscribe__options_required_descr_;
extern const XERdescriptor_t Subscription_subscribe__options_xer_;
extern const TTCN_Typedescriptor_t Subscription_subscribe__options_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_subscription_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_subscription_descr_;
extern const XERdescriptor_t Subscriptions_sequence__list_xer_;
extern const TTCN_JSONdescriptor_t Subscriptions_sequence__list_json_;
extern const TTCN_Typedescriptor_t Subscriptions_sequence__list_descr_;
extern const XERdescriptor_t Subscriptions_sequence__list_0_subscription_xer_;
extern const TTCN_Typedescriptor_t Subscriptions_sequence__list_0_subscription_descr_;
extern const XERdescriptor_t Subscriptions_sequence__list_0_xer_;
extern const TTCN_JSONdescriptor_t Subscriptions_sequence__list_0_json_;
extern const TTCN_Typedescriptor_t Subscriptions_sequence__list_0_descr_;
extern const XERdescriptor_t Subscriptions_xer_;
extern const TTCN_JSONdescriptor_t Subscriptions_json_;
extern const TTCN_Typedescriptor_t Subscriptions_descr_;
extern const XERdescriptor_t Subscriptions_node_xer_;
extern const TTCN_Typedescriptor_t Subscriptions_node_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_subscriptions_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_subscriptions_descr_;
extern const XERdescriptor_t Unsubscribe_jid_xer_;
extern const TTCN_Typedescriptor_t Unsubscribe_jid_descr_;
extern const XERdescriptor_t Unsubscribe_base_xer_;
extern const TTCN_Typedescriptor_t Unsubscribe_base_descr_;
extern const XERdescriptor_t Unsubscribe_xer_;
extern const TTCN_JSONdescriptor_t Unsubscribe_json_;
extern const TTCN_Typedescriptor_t Unsubscribe_descr_;
extern const XERdescriptor_t Unsubscribe_node_xer_;
extern const TTCN_Typedescriptor_t Unsubscribe_node_descr_;
extern const XERdescriptor_t Unsubscribe_subid_xer_;
extern const TTCN_Typedescriptor_t Unsubscribe_subid_descr_;
extern const XERdescriptor_t Pubsub_choice_choice__list_0_unsubscribe_xer_;
extern const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_unsubscribe_descr_;
extern const XERdescriptor_t Pubsub_xer_;
extern const TTCN_JSONdescriptor_t Pubsub_json_;
extern const TTCN_Typedescriptor_t Pubsub_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
