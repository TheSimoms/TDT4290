// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef CoffeeSuite_HH
#define CoffeeSuite_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include <TTCN3.hh>

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef CoffeeSuite_HH
#endif

namespace CoffeeSuite {

/* Forward declarations of classes */

class IntegerInputPortType_BASE;
class IntegerInputPortType;
class CharstringOutputPortType_BASE;
class CharstringOutputPortType;
class IntegerOutputPortType_BASE;
class IntegerOutputPortType;
class CharstringInputPortType_BASE;
class CharstringInputPortType;

} /* end of namespace */

#ifndef CoffeeSuite_HH
#define CoffeeSuite_HH

namespace CoffeeSuite {

/* Type definitions */

typedef COMPONENT CoffeeMachineComponentType;
typedef COMPONENT_template CoffeeMachineComponentType_template;
typedef COMPONENT CoffeeDrinkerComponentType;
typedef COMPONENT_template CoffeeDrinkerComponentType_template;
typedef COMPONENT EmptyComponentType;
typedef COMPONENT_template EmptyComponentType_template;

/* Class definitions */

class IntegerInputPortType_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
INTEGER *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
IntegerInputPortType_BASE(const char *par_port_name);
~IntegerInputPortType_BASE();
protected:
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const INTEGER_template& value_template, INTEGER *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const INTEGER_template& value_template, INTEGER *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const INTEGER_template& value_template, INTEGER *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const INTEGER& incoming_par, component sender_component);
protected:
inline void incoming_message(const INTEGER& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};

class CharstringOutputPortType_BASE : public PORT {
public:
CharstringOutputPortType_BASE(const char *par_port_name);
void send(const CHARSTRING& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING& send_par);
void send(const CHARSTRING_template& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING_template& send_par);
protected:
virtual void outgoing_send(const CHARSTRING& send_par) = 0;
public:
private:
protected:
};

class IntegerOutputPortType_BASE : public PORT {
public:
IntegerOutputPortType_BASE(const char *par_port_name);
void send(const INTEGER& send_par, const COMPONENT& destination_component);
void send(const INTEGER& send_par);
void send(const INTEGER_template& send_par, const COMPONENT& destination_component);
void send(const INTEGER_template& send_par);
protected:
virtual void outgoing_send(const INTEGER& send_par) = 0;
public:
private:
protected:
};

class CharstringInputPortType_BASE : public PORT {
enum msg_selection { MESSAGE_0 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
CHARSTRING *message_0;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
CharstringInputPortType_BASE(const char *par_port_name);
~CharstringInputPortType_BASE();
protected:
public:
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const CHARSTRING_template& value_template, CHARSTRING *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const CHARSTRING_template& value_template, CHARSTRING *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const CHARSTRING_template& value_template, CHARSTRING *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const CHARSTRING& incoming_par, component sender_component);
protected:
inline void incoming_message(const CHARSTRING& incoming_par) { incoming_message(incoming_par, SYSTEM_COMPREF); }
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Function prototypes */

extern void CoffeeMachineFunction();
extern void start_CoffeeMachineFunction(const COMPONENT& component_reference);
extern void CoffeeDrinkerFunction();
extern void start_CoffeeDrinkerFunction(const COMPONENT& component_reference);
extern verdicttype testcase_TwoCoffeesPlease(boolean has_timer, double timer_value);

/* Global variable declarations */

extern const TTCN_Typedescriptor_t& CoffeeMachineComponentType_descr_;
extern IntegerInputPortType CoffeeMachineComponentType_component_InputPort;
extern CharstringOutputPortType CoffeeMachineComponentType_component_OutputPort;
extern const TTCN_Typedescriptor_t& CoffeeDrinkerComponentType_descr_;
extern CharstringInputPortType CoffeeDrinkerComponentType_component_InputPort;
extern IntegerOutputPortType CoffeeDrinkerComponentType_component_OutputPort;
extern const TTCN_Typedescriptor_t& EmptyComponentType_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

/* Test port header files */

#include "IntegerInputPortType.hh"
#include "CharstringOutputPortType.hh"
#include "IntegerOutputPortType.hh"
#include "CharstringInputPortType.hh"

#endif
