// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 11:34:10 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "XSD.hh"

namespace XSD {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const CHARSTRING cs_3(30, "(-([1-9][0-9]#(0,))#(,1))#(,1)"),
cs_8(18, "(.[0-9]#(1,))#(,1)"),
cs_2(62, "(0(0(0[1-9]|[1-9][0-9])|[1-9][0-9][0-9])|[1-9][0-9][0-9][0-9])"),
cs_4(15, "(0[1-9]|1[0-2])"),
cs_5(24, "(0[1-9]|[12][0-9]|3[01])"),
cs_12(147, "(T[0-9]#(1,)(H([0-9]#(1,)(M([0-9]#(1,)(S|.[0-9]#(1,)S))#(,1)|.[0-9]#(1,)S|S))#(,1)|M([0-9]#(1,)(S|.[0-9]#(1,)S)|.[0-9]#(1,)M)#(,1)|S|.[0-9]#(1,)S))"),
cs_11(47, "(Z|[+-]((0[0-9]|1[0-3]):[0-5][0-9]|14:00))#(,1)"),
cs_7(12, "([0-5][0-9])"),
cs_6(18, "([01][0-9]|2[0-3])"),
cs_0('-'),
cs_9(22, "24:00:00(.0#(1,))#(,1)"),
cs_1(':'),
cs_10(10, "[0-9]#(1,)");
static const unsigned char module_checksum[] = { 0x32, 0x15, 0x52, 0xc4, 0x4c, 0x54, 0x9e, 0x65, 0x89, 0xcd, 0x8c, 0x54, 0xc3, 0x9a, 0xe9, 0x36 };

/* Global variable definitions */

const XERdescriptor_t       _T_dash_xer_ = { {"CHARSTRING>\n", "CHARSTRING>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t _T_dash_descr_ = { "@XSD.dash.<type>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &_T_dash_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static CHARSTRING const_dash;
const CHARSTRING& dash = const_dash;
static CHARSTRING const_cln;
const CHARSTRING& cln = const_cln;
static CHARSTRING const_year;
const CHARSTRING& year = const_year;
static CHARSTRING const_yearExpansion;
const CHARSTRING& yearExpansion = const_yearExpansion;
static CHARSTRING const_month;
const CHARSTRING& month = const_month;
static CHARSTRING const_dayOfMonth;
const CHARSTRING& dayOfMonth = const_dayOfMonth;
static CHARSTRING const_hour;
const CHARSTRING& hour = const_hour;
static CHARSTRING const_minute;
const CHARSTRING& minute = const_minute;
static CHARSTRING const_second;
const CHARSTRING& second = const_second;
static CHARSTRING const_sFraction;
const CHARSTRING& sFraction = const_sFraction;
static CHARSTRING const_endOfDayExt;
const CHARSTRING& endOfDayExt = const_endOfDayExt;
static CHARSTRING const_nums;
const CHARSTRING& nums = const_nums;
static CHARSTRING const_ZorTimeZoneExt;
const CHARSTRING& ZorTimeZoneExt = const_ZorTimeZoneExt;
static CHARSTRING const_durTime;
const CHARSTRING& durTime = const_durTime;
const XERdescriptor_t       XMLCompatibleString_xer_ = { {"XMLCompatibleString>\n", "XMLCompatibleString>\n"}, {21, 21}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t XMLCompatibleString_descr_ = { "@XSD.XMLCompatibleString", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLCompatibleString_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnySimpleType_xer_ = { {"AnySimpleType>\n", "AnySimpleType>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t AnySimpleType_descr_ = { "@XSD.AnySimpleType", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnySimpleType_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_attr_xer_ = { {"attr>\n", "attr>\n"}, {6, 6}, ANY_ATTRIBUTES |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &String_xer_ };
const TTCN_JSONdescriptor_t AnyType_attr_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t AnyType_attr_descr_ = { "@XSD.AnyType.attr", NULL, NULL, NULL, &AnyType_attr_xer_, &AnyType_attr_json_, &String_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       String_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t String_descr_ = { "@XSD.String", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &String_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_attr_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t AnyType_attr_0_descr_ = { "@XSD.AnyType.attr.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyType_attr_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_elem__list_xer_ = { {"elem_list>\n", "elem_list>\n"}, {11, 11}, 0 |ANY_ELEMENT |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &AnyType_elem__list_0_xer_ };
const TTCN_JSONdescriptor_t AnyType_elem__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t AnyType_elem__list_descr_ = { "@XSD.AnyType.elem_list", NULL, NULL, NULL, &AnyType_elem__list_xer_, &AnyType_elem__list_json_, &AnyType_elem__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_elem__list_0_xer_ = { {"String>\n", "String>\n"}, {8, 8}, 0 |ANY_ELEMENT |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t AnyType_elem__list_0_descr_ = { "@XSD.AnyType.elem_list.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyType_elem__list_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyType_xer_ = { {"AnyType>\n", "AnyType>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_JSONdescriptor_t AnyType_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t AnyType_descr_ = { "@XSD.AnyType", NULL, NULL, NULL, &AnyType_xer_, &AnyType_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       XMLStringWithNoCRLFHT_xer_ = { {"XMLStringWithNoCRLFHT>\n", "XMLStringWithNoCRLFHT>\n"}, {23, 23}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t XMLStringWithNoCRLFHT_descr_ = { "@XSD.XMLStringWithNoCRLFHT", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLStringWithNoCRLFHT_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NormalizedString_xer_ = { {"NormalizedString>\n", "NormalizedString>\n"}, {18, 18}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NormalizedString_descr_ = { "@XSD.NormalizedString", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NormalizedString_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Token_xer_ = { {"Token>\n", "Token>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Token_descr_ = { "@XSD.Token", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Token_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       XMLStringWithNoWhitespace_xer_ = { {"XMLStringWithNoWhitespace>\n", "XMLStringWithNoWhitespace>\n"}, {27, 27}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t XMLStringWithNoWhitespace_descr_ = { "@XSD.XMLStringWithNoWhitespace", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &XMLStringWithNoWhitespace_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Name_xer_ = { {"Name>\n", "Name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Name_descr_ = { "@XSD.Name", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Name_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKEN_xer_ = { {"NMTOKEN>\n", "NMTOKEN>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NMTOKEN_descr_ = { "@XSD.NMTOKEN", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NMTOKEN_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NCName_xer_ = { {"NCName>\n", "NCName>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NCName_descr_ = { "@XSD.NCName", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NCName_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ID_xer_ = { {"ID>\n", "ID>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ID_descr_ = { "@XSD.ID", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ID_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREF_xer_ = { {"IDREF>\n", "IDREF>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IDREF_descr_ = { "@XSD.IDREF", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &IDREF_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITY_xer_ = { {"ENTITY>\n", "ENTITY>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ENTITY_descr_ = { "@XSD.ENTITY", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ENTITY_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       HexBinary_xer_ = { {"HexBinary>\n", "HexBinary>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t HexBinary_descr_ = { "@XSD.HexBinary", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &HexBinary_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Base64Binary_xer_ = { {"Base64Binary>\n", "Base64Binary>\n"}, {14, 14}, 0 |BASE_64 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Base64Binary_descr_ = { "@XSD.Base64Binary", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &Base64Binary_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       AnyURI_xer_ = { {"AnyURI>\n", "AnyURI>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t AnyURI_descr_ = { "@XSD.AnyURI", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &AnyURI_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Language_xer_ = { {"Language>\n", "Language>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Language_descr_ = { "@XSD.Language", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Language_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Integer_xer_ = { {"Integer>\n", "Integer>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Integer_descr_ = { "@XSD.Integer", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &Integer_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       PositiveInteger_xer_ = { {"PositiveInteger>\n", "PositiveInteger>\n"}, {17, 17}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t PositiveInteger_descr_ = { "@XSD.PositiveInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &PositiveInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NonPositiveInteger_xer_ = { {"NonPositiveInteger>\n", "NonPositiveInteger>\n"}, {20, 20}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NonPositiveInteger_descr_ = { "@XSD.NonPositiveInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NonPositiveInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NegativeInteger_xer_ = { {"NegativeInteger>\n", "NegativeInteger>\n"}, {17, 17}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NegativeInteger_descr_ = { "@XSD.NegativeInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NegativeInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NonNegativeInteger_xer_ = { {"NonNegativeInteger>\n", "NonNegativeInteger>\n"}, {20, 20}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NonNegativeInteger_descr_ = { "@XSD.NonNegativeInteger", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &NonNegativeInteger_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Long_xer_ = { {"Long>\n", "Long>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Long_descr_ = { "@XSD.Long", &INTEGER_ber_, &UsefulTtcn3Types::longlong_raw_, &INTEGER_text_, &Long_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedLong_xer_ = { {"UnsignedLong>\n", "UnsignedLong>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UnsignedLong_descr_ = { "@XSD.UnsignedLong", &INTEGER_ber_, &UsefulTtcn3Types::unsignedlonglong_raw_, &INTEGER_text_, &UnsignedLong_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Int_xer_ = { {"Int>\n", "Int>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Int_descr_ = { "@XSD.Int", &INTEGER_ber_, &UsefulTtcn3Types::long__raw_, &INTEGER_text_, &Int_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedInt_xer_ = { {"UnsignedInt>\n", "UnsignedInt>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UnsignedInt_descr_ = { "@XSD.UnsignedInt", &INTEGER_ber_, &UsefulTtcn3Types::unsignedlong_raw_, &INTEGER_text_, &UnsignedInt_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Short_xer_ = { {"Short>\n", "Short>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Short_descr_ = { "@XSD.Short", &INTEGER_ber_, &UsefulTtcn3Types::short__raw_, &INTEGER_text_, &Short_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedShort_xer_ = { {"UnsignedShort>\n", "UnsignedShort>\n"}, {15, 15}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UnsignedShort_descr_ = { "@XSD.UnsignedShort", &INTEGER_ber_, &UsefulTtcn3Types::unsignedshort_raw_, &INTEGER_text_, &UnsignedShort_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Byte_xer_ = { {"Byte>\n", "Byte>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Byte_descr_ = { "@XSD.Byte", &INTEGER_ber_, &UsefulTtcn3Types::byte_raw_, &INTEGER_text_, &Byte_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UnsignedByte_xer_ = { {"UnsignedByte>\n", "UnsignedByte>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UnsignedByte_descr_ = { "@XSD.UnsignedByte", &INTEGER_ber_, &UsefulTtcn3Types::unsignedbyte_raw_, &INTEGER_text_, &UnsignedByte_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Decimal_xer_ = { {"Decimal>\n", "Decimal>\n"}, {9, 9}, 0 |XER_DECIMAL |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Decimal_descr_ = { "@XSD.Decimal", &FLOAT_ber_, &FLOAT_raw_, NULL, &Decimal_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Float_xer_ = { {"Float>\n", "Float>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Float_descr_ = { "@XSD.Float", &FLOAT_ber_, &UsefulTtcn3Types::IEEE754float_raw_, NULL, &Float_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Double_xer_ = { {"Double>\n", "Double>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Double_descr_ = { "@XSD.Double", &FLOAT_ber_, &UsefulTtcn3Types::IEEE754double_raw_, NULL, &Double_xer_, &FLOAT_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Duration_xer_ = { {"Duration>\n", "Duration>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Duration_descr_ = { "@XSD.Duration", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Duration_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DateTime_xer_ = { {"DateTime>\n", "DateTime>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DateTime_descr_ = { "@XSD.DateTime", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &DateTime_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Time_xer_ = { {"Time>\n", "Time>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Time_descr_ = { "@XSD.Time", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Time_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Date_xer_ = { {"Date>\n", "Date>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Date_descr_ = { "@XSD.Date", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &Date_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GYearMonth_xer_ = { {"GYearMonth>\n", "GYearMonth>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t GYearMonth_descr_ = { "@XSD.GYearMonth", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GYearMonth_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GYear_xer_ = { {"GYear>\n", "GYear>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t GYear_descr_ = { "@XSD.GYear", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GYear_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GMonthDay_xer_ = { {"GMonthDay>\n", "GMonthDay>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t GMonthDay_descr_ = { "@XSD.GMonthDay", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GMonthDay_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GDay_xer_ = { {"GDay>\n", "GDay>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t GDay_descr_ = { "@XSD.GDay", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GDay_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       GMonth_xer_ = { {"GMonth>\n", "GMonth>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t GMonth_descr_ = { "@XSD.GMonth", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &GMonth_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKENS_xer_ = { {"NMTOKENS>\n", "NMTOKENS>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &NMTOKEN_xer_ };
const TTCN_Typedescriptor_t NMTOKENS_descr_ = { "@XSD.NMTOKENS", NULL, NULL, NULL, &NMTOKENS_xer_, NULL, &NMTOKEN_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       NMTOKENS_0_xer_ = { {"NMTOKEN>\n", "NMTOKEN>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t NMTOKENS_0_descr_ = { "@XSD.NMTOKENS.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &NMTOKENS_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREFS_xer_ = { {"IDREFS>\n", "IDREFS>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &IDREF_xer_ };
const TTCN_Typedescriptor_t IDREFS_descr_ = { "@XSD.IDREFS", NULL, NULL, NULL, &IDREFS_xer_, NULL, &IDREF_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       IDREFS_0_xer_ = { {"IDREF>\n", "IDREF>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t IDREFS_0_descr_ = { "@XSD.IDREFS.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &IDREFS_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITIES_xer_ = { {"ENTITIES>\n", "ENTITIES>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, &ENTITY_xer_ };
const TTCN_Typedescriptor_t ENTITIES_descr_ = { "@XSD.ENTITIES", NULL, NULL, NULL, &ENTITIES_xer_, NULL, &ENTITY_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ENTITIES_0_xer_ = { {"ENTITY>\n", "ENTITY>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ENTITIES_0_descr_ = { "@XSD.ENTITIES.<oftype>", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &ENTITIES_0_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t QName_name_descr_ = { "@XSD.QName.name", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &QName_name_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_xer_ = { {"QName>\n", "QName>\n"}, {7, 7}, 0 |USE_QNAME |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_JSONdescriptor_t QName_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t QName_descr_ = { "@XSD.QName", NULL, NULL, NULL, &QName_xer_, &QName_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QName_uri_xer_ = { {"uri>\n", "uri>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t QName_uri_descr_ = { "@XSD.QName.uri", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &QName_uri_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Boolean_xer_ = { {"Boolean>\n", "Boolean>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t Boolean_descr_ = { "@XSD.Boolean", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &Boolean_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("XSD", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */


const UNIVERSAL_CHARSTRING AnyType_elem__list::UNBOUND_ELEM;
AnyType_elem__list::AnyType_elem__list()
{
val_ptr = NULL;
}

AnyType_elem__list::AnyType_elem__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

AnyType_elem__list::AnyType_elem__list(const AnyType_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @XSD.AnyType.elem_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

AnyType_elem__list::~AnyType_elem__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void AnyType_elem__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

AnyType_elem__list& AnyType_elem__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

AnyType_elem__list& AnyType_elem__list::operator=(const AnyType_elem__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @XSD.AnyType.elem_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean AnyType_elem__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @XSD.AnyType.elem_list.");
return val_ptr->n_elements == 0 ;
}

boolean AnyType_elem__list::operator==(const AnyType_elem__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @XSD.AnyType.elem_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @XSD.AnyType.elem_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

UNIVERSAL_CHARSTRING& AnyType_elem__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @XSD.AnyType.elem_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new UNIVERSAL_CHARSTRING;
}
return *val_ptr->value_elements[index_value];
}

UNIVERSAL_CHARSTRING& AnyType_elem__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @XSD.AnyType.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING& AnyType_elem__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @XSD.AnyType.elem_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @XSD.AnyType.elem_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @XSD.AnyType.elem_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const UNIVERSAL_CHARSTRING& AnyType_elem__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @XSD.AnyType.elem_list.");
return (*this)[(int)index_value];
}

AnyType_elem__list AnyType_elem__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

AnyType_elem__list AnyType_elem__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

AnyType_elem__list AnyType_elem__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

AnyType_elem__list AnyType_elem__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @XSD.AnyType.elem_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
AnyType_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

AnyType_elem__list AnyType_elem__list::operator+(const AnyType_elem__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @XSD.AnyType.elem_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
AnyType_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

AnyType_elem__list AnyType_elem__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @XSD.AnyType.elem_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@XSD.AnyType.elem_list","element");
AnyType_elem__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

AnyType_elem__list AnyType_elem__list::replace(int index, int len, const AnyType_elem__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @XSD.AnyType.elem_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @XSD.AnyType.elem_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@XSD.AnyType.elem_list","element");
AnyType_elem__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new UNIVERSAL_CHARSTRING(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new UNIVERSAL_CHARSTRING(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

AnyType_elem__list AnyType_elem__list::replace(int index, int len, const AnyType_elem__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void AnyType_elem__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @XSD.AnyType.elem_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @XSD.AnyType.elem_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean AnyType_elem__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int AnyType_elem__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @XSD.AnyType.elem_list.");
return val_ptr->n_elements;
}

int AnyType_elem__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @XSD.AnyType.elem_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void AnyType_elem__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void AnyType_elem__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@XSD.AnyType.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@XSD.AnyType.elem_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@XSD.AnyType.elem_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void AnyType_elem__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void AnyType_elem__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @XSD.AnyType.elem_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void AnyType_elem__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @XSD.AnyType.elem_list.");
val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new UNIVERSAL_CHARSTRING;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void AnyType_elem__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void AnyType_elem__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean AnyType_elem__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return UNIVERSAL_CHARSTRING::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** AnyType_elem__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int AnyType_elem__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (e_xer && (p_td.xer_bits & ANY_ATTRIBUTES)) {
      static const universal_char sp = { 0,0,0,' ' };
      static const universal_char tb = { 0,0,0,9 };
      size_t buf_len = p_buf.get_len(), shorter = 0;
      const unsigned char * const buf_data = p_buf.get_data();
      if (buf_data[buf_len - 1 - shorter] == '\n') ++shorter;
      if (buf_data[buf_len - 1 - shorter] == '>' ) ++shorter;
      unsigned char saved[4];
      memcpy(saved, buf_data + (buf_len - shorter), shorter);
      p_buf.increase_length(-shorter);
      for (int i = 0; i < val_ptr->n_elements; ++i) {
        TTCN_EncDec_ErrorContext ec_0("Attribute %d: ", i);
        if (val_ptr->value_elements[i] == NULL) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
            "Encoding an unbound universal charstring value.");
          continue;
        }
        size_t len = val_ptr->value_elements[i]->lengthof();
        for (;;) {
          const UNIVERSAL_CHARSTRING_ELEMENT& ue = (*val_ptr->value_elements[i])[len - 1];
          if (sp == ue || tb == ue) --len;
          else break;
        }
        size_t j, sp_at = 0;
        for (j = 0; j < len; j++) {
          UNIVERSAL_CHARSTRING_ELEMENT ue = (*val_ptr->value_elements[i])[j];
          if (sp_at) {
            if (sp == ue || tb == ue) {}
            else break;
          } else {
            if (sp == ue || tb == ue) sp_at = j;
          }
        } // next j
        size_t buf_start = p_buf.get_len();
        if (sp_at > 0) {
          char * ns = mprintf(" xmlns:b%d='", i);
          size_t ns_len = mstrlen(ns);
          p_buf.put_s(ns_len, (const unsigned char*)ns);
          UNIVERSAL_CHARSTRING before(sp_at, (const universal_char*)(*val_ptr->value_elements[i]));
          before.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            TTCN_Buffer ns_buf;
            before.encode_utf8(ns_buf);
            CHARSTRING cs;
            ns_buf.get_string(cs);
            check_namespace_restrictions(p_td, (const char*)cs);
          }
          p_buf.put_c('\'');
          p_buf.put_c(' ');
          p_buf.put_s(ns_len - 9, (const unsigned char*)ns + 7);
          p_buf.put_c(':');
          Free(ns);
        }
        else {
          p_buf.put_c(' ');
          j = 0;
          if (p_td.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
            check_namespace_restrictions(p_td, NULL);
          }
        }
        UNIVERSAL_CHARSTRING after(len - j, (const universal_char*)(*val_ptr->value_elements[i]) + j);
        after.XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | ANY_ATTRIBUTES, p_indent, 0);
        TTCN_Buffer check_buf;
        check_buf.put_s(2, (unsigned char*)"<a");
        check_buf.put_s(p_buf.get_len() - buf_start, p_buf.get_data() + buf_start);
        check_buf.put_s(2, (unsigned char*)"/>");        XmlReaderWrap checker(check_buf);
        while (1 == checker.Read()) ;
      }
      p_buf.put_s(shorter, saved);
    } else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int AnyType_elem__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          if (e_xer && (p_td.xer_bits & ANY_ELEMENT)) {
            (*this)[val_ptr->n_elements] = (const char*)p_reader.ReadOuterXml();
            for (rd_ok = p_reader.Read(); rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) {}
            if (p_reader.NodeType() != XML_READER_TYPE_ELEMENT) rd_ok = p_reader.Read();
          } else          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int AnyType_elem__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @XSD.AnyType.elem_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int AnyType_elem__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    UNIVERSAL_CHARSTRING* val = new UNIVERSAL_CHARSTRING;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (UNIVERSAL_CHARSTRING**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void AnyType_elem__list_template::copy_value(const AnyType_elem__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @XSD.AnyType.elem_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void AnyType_elem__list_template::copy_template(const AnyType_elem__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new AnyType_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @XSD.AnyType.elem_list.");
break;
}
set_selection(other_value);
}

boolean AnyType_elem__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const AnyType_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const AnyType_elem__list*)value_ptr)[value_index]);
else return ((const AnyType_elem__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

AnyType_elem__list_template::AnyType_elem__list_template()
{
}

AnyType_elem__list_template::AnyType_elem__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

AnyType_elem__list_template::AnyType_elem__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

AnyType_elem__list_template::AnyType_elem__list_template(const AnyType_elem__list& other_value)
{
copy_value(other_value);
}

AnyType_elem__list_template::AnyType_elem__list_template(const OPTIONAL<AnyType_elem__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @XSD.AnyType.elem_list from an unbound optional field.");
}
}

AnyType_elem__list_template::AnyType_elem__list_template(const AnyType_elem__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

AnyType_elem__list_template::~AnyType_elem__list_template()
{
clean_up();
}

void AnyType_elem__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

AnyType_elem__list_template& AnyType_elem__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

AnyType_elem__list_template& AnyType_elem__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

AnyType_elem__list_template& AnyType_elem__list_template::operator=(const AnyType_elem__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

AnyType_elem__list_template& AnyType_elem__list_template::operator=(const OPTIONAL<AnyType_elem__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType_elem__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @XSD.AnyType.elem_list.");
}
return *this;
}

AnyType_elem__list_template& AnyType_elem__list_template::operator=(const AnyType_elem__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

UNIVERSAL_CHARSTRING_template& AnyType_elem__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @XSD.AnyType.elem_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @XSD.AnyType.elem_list.");
    break;
}
return *single_value.value_elements[index_value];
}

UNIVERSAL_CHARSTRING_template& AnyType_elem__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @XSD.AnyType.elem_list.");
return (*this)[(int)index_value];
}

const UNIVERSAL_CHARSTRING_template& AnyType_elem__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @XSD.AnyType.elem_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @XSD.AnyType.elem_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @XSD.AnyType.elem_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const UNIVERSAL_CHARSTRING_template& AnyType_elem__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @XSD.AnyType.elem_list.");
return (*this)[(int)index_value];
}

void AnyType_elem__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @XSD.AnyType.elem_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int AnyType_elem__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int AnyType_elem__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @XSD.AnyType.elem_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @XSD.AnyType.elem_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @XSD.AnyType.elem_list");
}

boolean AnyType_elem__list_template::match(const AnyType_elem__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @XSD.AnyType.elem_list.");
}
return FALSE;
}

boolean AnyType_elem__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

AnyType_elem__list AnyType_elem__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @XSD.AnyType.elem_list.");
AnyType_elem__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

AnyType_elem__list AnyType_elem__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

AnyType_elem__list AnyType_elem__list_template::replace(int index, int len, const AnyType_elem__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

AnyType_elem__list AnyType_elem__list_template::replace(int index, int len, const AnyType_elem__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void AnyType_elem__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new AnyType_elem__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @XSD.AnyType.elem_list.");
}
set_selection(template_type);
}

AnyType_elem__list_template& AnyType_elem__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @XSD.AnyType.elem_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @XSD.AnyType.elem_list.");
return value_list.list_value[list_index];
}

void AnyType_elem__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void AnyType_elem__list_template::log_match(const AnyType_elem__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void AnyType_elem__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @XSD.AnyType.elem_list.");
}
}

void AnyType_elem__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @XSD.AnyType.elem_list.");
single_value.value_elements = (UNIVERSAL_CHARSTRING_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new UNIVERSAL_CHARSTRING_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new AnyType_elem__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @XSD.AnyType.elem_list.");
}
}

boolean AnyType_elem__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean AnyType_elem__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void AnyType_elem__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@XSD.AnyType.elem_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@XSD.AnyType.elem_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void AnyType_elem__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@XSD.AnyType.elem_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@XSD.AnyType.elem_list");
}

AnyType::AnyType()
{
  bound_flag = FALSE;
}

AnyType::AnyType(const AnyType_attr& par_attr,
    const AnyType_elem__list& par_elem__list)
  :   field_attr(par_attr),
  field_elem__list(par_elem__list)
{
  bound_flag = TRUE;
}

AnyType::AnyType(const AnyType& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @XSD.AnyType.");
bound_flag = TRUE;
if (other_value.attr().is_bound()) field_attr = other_value.attr();
else field_attr.clean_up();
if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
else field_elem__list.clean_up();
}

void AnyType::clean_up()
{
field_attr.clean_up();
field_elem__list.clean_up();
bound_flag = FALSE;
}

AnyType& AnyType::operator=(const AnyType& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @XSD.AnyType.");
  bound_flag = TRUE;
  if (other_value.attr().is_bound()) field_attr = other_value.attr();
  else field_attr.clean_up();
  if (other_value.elem__list().is_bound()) field_elem__list = other_value.elem__list();
  else field_elem__list.clean_up();
}
return *this;
}

boolean AnyType::operator==(const AnyType& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_attr==other_value.field_attr
  && field_elem__list==other_value.field_elem__list;
}

boolean AnyType::is_bound() const
{
if (bound_flag) return TRUE;
if(field_attr.is_bound()) return TRUE;
if(field_elem__list.is_bound()) return TRUE;
return FALSE;
}
boolean AnyType::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_attr.is_value()) return FALSE;
if(!field_elem__list.is_value()) return FALSE;
return TRUE;
}
int AnyType::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @XSD.AnyType");
  return 2;
}

void AnyType::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ attr := ");
field_attr.log();
TTCN_Logger::log_event_str(", elem_list := ");
field_elem__list.log();
TTCN_Logger::log_event_str(" }");
}

void AnyType::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@XSD.AnyType'");
    }
    if (strcmp("attr", param_field) == 0) {
      attr().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@XSD.AnyType'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @XSD.AnyType has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) attr().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "attr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          attr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.AnyType: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@XSD.AnyType");
  }
}

void AnyType::set_implicit_omit()
{
if (attr().is_bound()) attr().set_implicit_omit();
if (elem__list().is_bound()) elem__list().set_implicit_omit();
}

void AnyType::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @XSD.AnyType.");
field_attr.encode_text(text_buf);
field_elem__list.encode_text(text_buf);
}

void AnyType::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_attr.decode_text(text_buf);
field_elem__list.decode_text(text_buf);
}

void AnyType::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void AnyType::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** AnyType::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_attr.collect_ns(AnyType_attr_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_elem__list.collect_ns(AnyType_elem__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean AnyType::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (AnyType_attr::can_start(name, uri, AnyType_attr_xer_, flavor)) return true;
  return false;
}

int AnyType::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (!e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    ec_1.set_msg("attr': ");
    sub_len += field_attr.XER_encode(AnyType_attr_xer_, p_buf, p_flavor, p_indent+1, 0);
  }
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("attr': ");
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    if (field_attr.size_of() > 0) {
      sub_len += field_attr[0].XER_encode(UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
    }
  }
  else if ( !(p_td.xer_bits & EMBED_VALUES)) {
    field_attr.XER_encode(AnyType_attr_xer_, p_buf, p_flavor, p_indent+1, 0);
  }
  embed_values_enc_struct_t* emb_val = 0;
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) && field_attr.size_of() > 1) {
    emb_val = new embed_values_enc_struct_t;
    emb_val->embval_array_reg = (const PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING*)&field_attr;
    emb_val->embval_array_opt = NULL;
    emb_val->embval_index = 1;
  }
  ec_1.set_msg("elem_list': ");
  sub_len += field_elem__list.XER_encode(AnyType_elem__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, emb_val);
  if (e_xer && (p_td.xer_bits & EMBED_VALUES) && 0 != emb_val &&
      emb_val->embval_index < field_attr.size_of()) {
    field_attr[emb_val->embval_index].XER_encode(
      UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
    ++emb_val->embval_index;
  }
  if (0 != emb_val) {
    if (emb_val->embval_index < field_attr.size_of()) {
      ec_1.set_msg("attr': ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_CONSTRAINT,
        "Too many EMBED-VALUEs specified: %d (expected %d or less)",
        field_attr.size_of(), emb_val->embval_index);
    }
    delete emb_val;
  }
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int AnyType::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  field_attr.set_size(0);
  size_t num_aa = 0;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    {
      TTCN_EncDec_ErrorContext ec_0("Attribute %d: ", (int)num_aa);
      UNIVERSAL_CHARSTRING& new_elem = field_attr[num_aa++];
      TTCN_Buffer aabuf;
      const xmlChar *x_name = p_reader.LocalName();
      const xmlChar *x_val  = p_reader.Value();
      const xmlChar *x_uri  = p_reader.NamespaceUri();
      if (AnyType_attr_xer_.xer_bits & (ANY_FROM | ANY_EXCEPT)) {
        check_namespace_restrictions(AnyType_attr_xer_, (const char*)x_uri);
      }
      aabuf.put_s(x_uri ? strlen((const char*)x_uri) : 0, x_uri);
      if (x_uri && *x_uri) aabuf.put_c(' ');
      aabuf.put_s(x_name ? strlen((const char*)x_name) : 0, x_name);
      aabuf.put_c('=');
      aabuf.put_c('"');
      aabuf.put_s(x_val ? strlen((const char*)x_val) : 0, x_val);
      aabuf.put_c('"');
      new_elem.decode_utf8(aabuf.get_len(), aabuf.get_data());
    } 
  }
  if (!field_attr.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'attr'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("attr': ");
    field_attr.XER_decode(AnyType_attr_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  embed_values_dec_struct_t* emb_val = 0;
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) {
    emb_val = new embed_values_dec_struct_t;
    emb_val->embval_array_reg = (PreGenRecordOf::PREGEN__RECORD__OF__UNIVERSAL__CHARSTRING*)&field_attr;
    emb_val->embval_array_opt = NULL;
    emb_val->embval_index = 0;
    field_attr.set_size(0);
  }
  int last_embval_index = 0;
  if (0 != emb_val) {
    if (p_reader.NodeType()==XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      field_attr[emb_val->embval_index] = emb_ustr;
    }
    if (last_embval_index == emb_val->embval_index) {
      ++emb_val->embval_index;
    }
    last_embval_index = emb_val->embval_index;
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_elem__list = *static_cast<const AnyType_elem__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("elem_list': ");
    field_elem__list.XER_decode(AnyType_elem__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), emb_val);
  }
  if (!field_elem__list.is_present()) {
    last_embval_index = -1;
  }
  if (0 != emb_val) {
    if (p_reader.NodeType()==XML_READER_TYPE_TEXT) {
      UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
      field_attr[emb_val->embval_index] = emb_ustr;
    }
    if (last_embval_index == emb_val->embval_index) {
      ++emb_val->embval_index;
    }
  }
  if (0 != emb_val) {
    AnyType_attr::of_type empty_string("");
    for (int j_j = 0; j_j < emb_val->embval_index; ++j_j) {
      if (!field_attr[j_j].is_bound()) field_attr[j_j] = empty_string;
    }
    delete emb_val;
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int AnyType::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @XSD.AnyType.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "attr");
    enc_len += field_attr.JSON_encode(AnyType_attr_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem_list");
    enc_len += field_elem__list.JSON_encode(AnyType_elem__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int AnyType::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "attr", name_len)) {
        int ret_val = field_attr.JSON_decode(AnyType_attr_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "attr");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "elem_list", name_len)) {
        int ret_val = field_elem__list.JSON_decode(AnyType_elem__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_attr.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "attr");
    return JSON_ERROR_FATAL;
  }
  if (!field_elem__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct AnyType_template::single_value_struct {
AnyType_attr_template field_attr;
AnyType_elem__list_template field_elem__list;
};

void AnyType_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_attr = ANY_VALUE;
single_value->field_elem__list = ANY_VALUE;
}
}
}

void AnyType_template::copy_value(const AnyType& other_value)
{
single_value = new single_value_struct;
if (other_value.attr().is_bound()) {
  single_value->field_attr = other_value.attr();
} else {
  single_value->field_attr.clean_up();
}
if (other_value.elem__list().is_bound()) {
  single_value->field_elem__list = other_value.elem__list();
} else {
  single_value->field_elem__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void AnyType_template::copy_template(const AnyType_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.attr().get_selection()) {
single_value->field_attr = other_value.attr();
} else {
single_value->field_attr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.elem__list().get_selection()) {
single_value->field_elem__list = other_value.elem__list();
} else {
single_value->field_elem__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new AnyType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @XSD.AnyType.");
break;
}
set_selection(other_value);
}

AnyType_template::AnyType_template()
{
}

AnyType_template::AnyType_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

AnyType_template::AnyType_template(const AnyType& other_value)
{
copy_value(other_value);
}

AnyType_template::AnyType_template(const OPTIONAL<AnyType>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @XSD.AnyType from an unbound optional field.");
}
}

AnyType_template::AnyType_template(const AnyType_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

AnyType_template::~AnyType_template()
{
clean_up();
}

AnyType_template& AnyType_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

AnyType_template& AnyType_template::operator=(const AnyType& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

AnyType_template& AnyType_template::operator=(const OPTIONAL<AnyType>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const AnyType&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @XSD.AnyType.");
}
return *this;
}

AnyType_template& AnyType_template::operator=(const AnyType_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean AnyType_template::match(const AnyType& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.attr().is_bound()) return FALSE;
if(!single_value->field_attr.match(other_value.attr()))return FALSE;
if(!other_value.elem__list().is_bound()) return FALSE;
if(!single_value->field_elem__list.match(other_value.elem__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @XSD.AnyType.");
}
return FALSE;
}

boolean AnyType_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_attr.is_bound()) return TRUE;
if (single_value->field_elem__list.is_bound()) return TRUE;
return FALSE;
}

boolean AnyType_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_attr.is_value()) return FALSE;
if (!single_value->field_elem__list.is_value()) return FALSE;
return TRUE;
}

void AnyType_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

AnyType AnyType_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @XSD.AnyType.");
AnyType ret_val;
if (single_value->field_attr.is_bound()) {
ret_val.attr() = single_value->field_attr.valueof();
}
if (single_value->field_elem__list.is_bound()) {
ret_val.elem__list() = single_value->field_elem__list.valueof();
}
return ret_val;
}

void AnyType_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @XSD.AnyType.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new AnyType_template[list_length];
}

AnyType_template& AnyType_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @XSD.AnyType.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @XSD.AnyType.");
return value_list.list_value[list_index];
}

AnyType_attr_template& AnyType_template::attr()
{
set_specific();
return single_value->field_attr;
}

const AnyType_attr_template& AnyType_template::attr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field attr of a non-specific template of type @XSD.AnyType.");
return single_value->field_attr;
}

AnyType_elem__list_template& AnyType_template::elem__list()
{
set_specific();
return single_value->field_elem__list;
}

const AnyType_elem__list_template& AnyType_template::elem__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem_list of a non-specific template of type @XSD.AnyType.");
return single_value->field_elem__list;
}

int AnyType_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @XSD.AnyType containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.AnyType containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @XSD.AnyType.");
  }
  return 0;
}

void AnyType_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ attr := ");
single_value->field_attr.log();
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void AnyType_template::log_match(const AnyType& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_attr.match(match_value.attr())){
TTCN_Logger::log_logmatch_info(".attr");
single_value->field_attr.log_match(match_value.attr());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_elem__list.match(match_value.elem__list())){
TTCN_Logger::log_logmatch_info(".elem_list");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ attr := ");
single_value->field_attr.log_match(match_value.attr());
TTCN_Logger::log_event_str(", elem_list := ");
single_value->field_elem__list.log_match(match_value.elem__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void AnyType_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_attr.encode_text(text_buf);
single_value->field_elem__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @XSD.AnyType.");
}
}

void AnyType_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_attr.decode_text(text_buf);
single_value->field_elem__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new AnyType_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @XSD.AnyType.");
}
}

void AnyType_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@XSD.AnyType'");
    }
    if (strcmp("attr", param_field) == 0) {
      attr().set_param(param);
      return;
    } else if (strcmp("elem_list", param_field) == 0) {
      elem__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@XSD.AnyType'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @XSD.AnyType has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) attr().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) elem__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "attr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          attr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.AnyType: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@XSD.AnyType");
  }
  is_ifpresent = param.get_ifpresent();
}

void AnyType_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_attr.check_restriction(t_res, t_name ? t_name : "@XSD.AnyType");
single_value->field_elem__list.check_restriction(t_res, t_name ? t_name : "@XSD.AnyType");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@XSD.AnyType");
}

boolean AnyType_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean AnyType_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

QName::QName()
{
  bound_flag = FALSE;
}

QName::QName(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_uri,
    const UNIVERSAL_CHARSTRING& par_name)
  :   field_uri(par_uri),
  field_name(par_name)
{
  bound_flag = TRUE;
}

QName::QName(const QName& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @XSD.QName.");
bound_flag = TRUE;
if (other_value.uri().is_bound()) field_uri = other_value.uri();
else field_uri.clean_up();
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
}

void QName::clean_up()
{
field_uri.clean_up();
field_name.clean_up();
bound_flag = FALSE;
}

QName& QName::operator=(const QName& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @XSD.QName.");
  bound_flag = TRUE;
  if (other_value.uri().is_bound()) field_uri = other_value.uri();
  else field_uri.clean_up();
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
}
return *this;
}

boolean QName::operator==(const QName& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_uri==other_value.field_uri
  && field_name==other_value.field_name;
}

boolean QName::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_uri.get_selection() || field_uri.is_bound()) return TRUE;
if(field_name.is_bound()) return TRUE;
return FALSE;
}
boolean QName::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_uri.get_selection() && !field_uri.is_value()) return FALSE;
if(!field_name.is_value()) return FALSE;
return TRUE;
}
int QName::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @XSD.QName");
  int ret_val = 1;
  if (field_uri.ispresent()) ret_val++;
  return ret_val;
}

void QName::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ uri := ");
field_uri.log();
TTCN_Logger::log_event_str(", name := ");
field_name.log();
TTCN_Logger::log_event_str(" }");
}

void QName::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@XSD.QName'");
    }
    if (strcmp("uri", param_field) == 0) {
      uri().set_param(param);
      return;
    } else if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@XSD.QName'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @XSD.QName has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) uri().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "uri")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          uri().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.QName: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@XSD.QName");
  }
}

void QName::set_implicit_omit()
{
if (!uri().is_bound()) uri() = OMIT_VALUE;
else uri().set_implicit_omit();
if (name().is_bound()) name().set_implicit_omit();
}

void QName::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @XSD.QName.");
field_uri.encode_text(text_buf);
field_name.encode_text(text_buf);
}

void QName::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_uri.decode_text(text_buf);
field_name.decode_text(text_buf);
}

void QName::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void QName::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** QName::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_uri.collect_ns(QName_uri_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_name.collect_ns(QName_name_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean QName::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, QName_uri_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, QName_name_xer_, flavor)) return true;
  return false;
}

int QName::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  if (e_xer && (p_td.xer_bits & USE_QNAME)) {
    if (field_uri.is_value()) {
      p_buf.put_s(11, (cbyte*)" xmlns:b0='");
      field_uri.XER_encode(QName_uri_xer_, p_buf, p_flavor | XER_LIST, p_indent+1, 0);
      p_buf.put_c('\'');
    }
    if (p_td.xer_bits & XER_ATTRIBUTE) begin_attribute(p_td, p_buf);
    else  p_buf.put_c('>');
    if (field_uri.is_value()) {
      p_buf.put_s(3, (cbyte*)"b0:");
      sub_len += 3;
    }
    sub_len += field_name.XER_encode(QName_name_xer_, p_buf, p_flavor | XER_LIST, p_indent+1, 0);
    if (p_td.xer_bits & XER_ATTRIBUTE) p_buf.put_c('\'');
  } else  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("uri': ");
  sub_len += field_uri.XER_encode(QName_uri_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("name': ");
  sub_len += field_name.XER_encode(QName_name_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int QName::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if (e_xer && (p_td.xer_bits & USE_QNAME)) {
    if (p_td.xer_bits & XER_ATTRIBUTE) rd_ok = 1;
    else for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (type == XML_READER_TYPE_TEXT) break;
    }
    if (rd_ok==1) {
      xmlChar *new_val = p_reader.NewValue();
      xmlChar *v_npfx = (xmlChar*)strchr((char*)new_val, ':');
      xmlChar *v_pfx;
      if (v_npfx != NULL) {
        *v_npfx++ = '\0';
        v_pfx = new_val;
      }
      else {
        v_npfx = new_val;
        v_pfx  = NULL;
      }
      xmlChar *q_ns = p_reader.LookupNamespace(v_pfx);
      if (q_ns) field_uri = (const char*)q_ns;
      else      field_uri = OMIT_VALUE;
      field_name = (const char*)v_npfx;
      xmlFree(q_ns);
      xmlFree(new_val);
    }
  } else {
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("uri': ");
    field_uri.XER_decode(QName_uri_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_name = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("name': ");
    field_name.XER_decode(QName_name_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // qn
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int QName::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @XSD.QName.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_uri.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "uri");
    enc_len += field_uri.JSON_encode(AnyURI_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "name");
    enc_len += field_name.JSON_encode(NCName_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int QName::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "uri", name_len)) {
        int ret_val = field_uri.JSON_decode(AnyURI_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "uri");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "name", name_len)) {
        int ret_val = field_name.JSON_decode(NCName_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "name");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_uri.is_bound()) {
    field_uri = OMIT_VALUE;
  }
  if (!field_name.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "name");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct QName_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_uri;
UNIVERSAL_CHARSTRING_template field_name;
};

void QName_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_uri = ANY_OR_OMIT;
single_value->field_name = ANY_VALUE;
}
}
}

void QName_template::copy_value(const QName& other_value)
{
single_value = new single_value_struct;
if (other_value.uri().is_bound()) {
  if (other_value.uri().ispresent()) single_value->field_uri = other_value.uri()();
  else single_value->field_uri = OMIT_VALUE;
} else {
  single_value->field_uri.clean_up();
}
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void QName_template::copy_template(const QName_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.uri().get_selection()) {
single_value->field_uri = other_value.uri();
} else {
single_value->field_uri.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new QName_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @XSD.QName.");
break;
}
set_selection(other_value);
}

QName_template::QName_template()
{
}

QName_template::QName_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

QName_template::QName_template(const QName& other_value)
{
copy_value(other_value);
}

QName_template::QName_template(const OPTIONAL<QName>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QName&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @XSD.QName from an unbound optional field.");
}
}

QName_template::QName_template(const QName_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

QName_template::~QName_template()
{
clean_up();
}

QName_template& QName_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

QName_template& QName_template::operator=(const QName& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

QName_template& QName_template::operator=(const OPTIONAL<QName>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QName&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @XSD.QName.");
}
return *this;
}

QName_template& QName_template::operator=(const QName_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean QName_template::match(const QName& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.uri().is_bound()) return FALSE;
if((other_value.uri().ispresent() ? !single_value->field_uri.match((const UNIVERSAL_CHARSTRING&)other_value.uri()) : !single_value->field_uri.match_omit()))return FALSE;
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @XSD.QName.");
}
return FALSE;
}

boolean QName_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_uri.is_omit() || single_value->field_uri.is_bound()) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
return FALSE;
}

boolean QName_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_uri.is_omit() && !single_value->field_uri.is_value()) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
return TRUE;
}

void QName_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

QName QName_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @XSD.QName.");
QName ret_val;
if (single_value->field_uri.is_omit()) ret_val.uri() = OMIT_VALUE;
else if (single_value->field_uri.is_bound()) {
ret_val.uri() = single_value->field_uri.valueof();
}
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
return ret_val;
}

void QName_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @XSD.QName.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new QName_template[list_length];
}

QName_template& QName_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @XSD.QName.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @XSD.QName.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& QName_template::uri()
{
set_specific();
return single_value->field_uri;
}

const UNIVERSAL_CHARSTRING_template& QName_template::uri() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field uri of a non-specific template of type @XSD.QName.");
return single_value->field_uri;
}

UNIVERSAL_CHARSTRING_template& QName_template::name()
{
set_specific();
return single_value->field_name;
}

const UNIVERSAL_CHARSTRING_template& QName_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @XSD.QName.");
return single_value->field_name;
}

int QName_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @XSD.QName which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_uri.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @XSD.QName containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @XSD.QName containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @XSD.QName.");
  }
  return 0;
}

void QName_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ uri := ");
single_value->field_uri.log();
TTCN_Logger::log_event_str(", name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void QName_template::log_match(const QName& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.uri().ispresent()){
if(!single_value->field_uri.match(match_value.uri())){
TTCN_Logger::log_logmatch_info(".uri");
single_value->field_uri.log_match(match_value.uri());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_uri.match_omit()){
 TTCN_Logger::log_logmatch_info(".uri := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_uri.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_name.match(match_value.name())){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ uri := ");
if (match_value.uri().ispresent()) single_value->field_uri.log_match(match_value.uri());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_uri.log();
if (single_value->field_uri.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", name := ");
single_value->field_name.log_match(match_value.name());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void QName_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_uri.encode_text(text_buf);
single_value->field_name.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @XSD.QName.");
}
}

void QName_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_uri.decode_text(text_buf);
single_value->field_name.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new QName_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @XSD.QName.");
}
}

void QName_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@XSD.QName'");
    }
    if (strcmp("uri", param_field) == 0) {
      uri().set_param(param);
      return;
    } else if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@XSD.QName'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @XSD.QName has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) uri().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "uri")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          uri().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @XSD.QName: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@XSD.QName");
  }
  is_ifpresent = param.get_ifpresent();
}

void QName_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_uri.check_restriction(t_res, t_name ? t_name : "@XSD.QName");
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@XSD.QName");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@XSD.QName");
}

boolean QName_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean QName_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const AnyType_elem__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @XSD.AnyType.elem_list.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
UsefulTtcn3Types::module_object.pre_init_module();
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 7 */
const_dash = cs_0;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 8 */
const_cln = cs_1;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 9 */
const_year = cs_2;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 10 */
const_yearExpansion = cs_3;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 11 */
const_month = cs_4;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 12 */
const_dayOfMonth = cs_5;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 13 */
const_hour = cs_6;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 14 */
const_minute = cs_7;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 15 */
const_second = cs_7;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 16 */
const_sFraction = cs_8;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 17 */
const_endOfDayExt = cs_9;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 18 */
const_nums = cs_10;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 19 */
const_ZorTimeZoneExt = cs_11;
/* /work/TDT4290/src/xmpp/protocols/XSD.ttcn, line 20 */
const_durTime = cs_12;
}

static void post_init_module()
{
UsefulTtcn3Types::module_object.post_init_module();
}


} /* end of namespace */
