// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Sep 25 13:42:36 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "DNS_Types.hh"

namespace DNS__Types {

/* Prototypes of static functions */

static void pre_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0x72, 0x30, 0x39, 0x37, 0xd3, 0xe4, 0xff, 0xf9, 0xe7, 0x59, 0xd7, 0x71, 0xcb, 0xc8, 0x35, 0xe9 };

/* Global variable definitions */

const XERdescriptor_t       UInt16_xer_ = { {"UInt16>\n", "UInt16>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UInt16_descr_ = { "@DNS_Types.UInt16", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &UInt16_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_id_xer_ = { {"id>\n", "id>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_id_descr_ = { "@DNS_Types.DnsHeader.id", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_id_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for QueryOrResponse
const TTCN_Typedescriptor_t QueryOrResponse_descr_ = { "@DNS_Types.QueryOrResponse", NULL, NULL, NULL, NULL, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       OpCode_xer_ = { {"OpCode>\n", "OpCode>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t OpCode_descr_ = { "@DNS_Types.OpCode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &OpCode_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_opCode_xer_ = { {"opCode>\n", "opCode>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_opCode_descr_ = { "@DNS_Types.DnsHeader.opCode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_opCode_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_aa_xer_ = { {"aa>\n", "aa>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_aa_descr_ = { "@DNS_Types.DnsHeader.aa", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &DnsHeader_aa_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_tc_xer_ = { {"tc>\n", "tc>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_tc_descr_ = { "@DNS_Types.DnsHeader.tc", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &DnsHeader_tc_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_rd_xer_ = { {"rd>\n", "rd>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_rd_descr_ = { "@DNS_Types.DnsHeader.rd", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &DnsHeader_rd_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_ra_xer_ = { {"ra>\n", "ra>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_ra_descr_ = { "@DNS_Types.DnsHeader.ra", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &DnsHeader_ra_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t DnsHeader_z_raw_ = {3,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       DnsHeader_z_xer_ = { {"z>\n", "z>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_z_descr_ = { "@DNS_Types.DnsHeader.z", &BITSTRING_ber_, &DnsHeader_z_raw_, NULL, &DnsHeader_z_xer_, &BITSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResponseCode_xer_ = { {"ResponseCode>\n", "ResponseCode>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResponseCode_descr_ = { "@DNS_Types.ResponseCode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ResponseCode_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_rCode_xer_ = { {"rCode>\n", "rCode>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_rCode_descr_ = { "@DNS_Types.DnsHeader.rCode", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_rCode_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_qdCount_xer_ = { {"qdCount>\n", "qdCount>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_qdCount_descr_ = { "@DNS_Types.DnsHeader.qdCount", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_qdCount_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_anCount_xer_ = { {"anCount>\n", "anCount>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_anCount_descr_ = { "@DNS_Types.DnsHeader.anCount", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_anCount_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_nsCount_xer_ = { {"nsCount>\n", "nsCount>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_nsCount_descr_ = { "@DNS_Types.DnsHeader.nsCount", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_nsCount_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DnsHeader_arCount_xer_ = { {"arCount>\n", "arCount>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DnsHeader_arCount_descr_ = { "@DNS_Types.DnsHeader.arCount", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &DnsHeader_arCount_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for DnsHeader
const TTCN_Typedescriptor_t DnsHeader_descr_ = { "@DNS_Types.DnsHeader", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for QResourceRecords
const TTCN_Typedescriptor_t QResourceRecords_descr_ = { "@DNS_Types.QResourceRecords", NULL, NULL, NULL, NULL, NULL, &QResourceRecord_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       CharStr255_xer_ = { {"CharStr255>\n", "CharStr255>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t CharStr255_descr_ = { "@DNS_Types.CharStr255", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &CharStr255_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       DomainName_xer_ = { {"DomainName>\n", "DomainName>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t DomainName_descr_ = { "@DNS_Types.DomainName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &DomainName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QResourceRecord_qName_xer_ = { {"qName>\n", "qName>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t QResourceRecord_qName_descr_ = { "@DNS_Types.QResourceRecord.qName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &QResourceRecord_qName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RRType_xer_ = { {"RRType>\n", "RRType>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RRType_descr_ = { "@DNS_Types.RRType", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RRType_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QResourceRecord_qType_xer_ = { {"qType>\n", "qType>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t QResourceRecord_qType_descr_ = { "@DNS_Types.QResourceRecord.qType", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &QResourceRecord_qType_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RRClass_xer_ = { {"RRClass>\n", "RRClass>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RRClass_descr_ = { "@DNS_Types.RRClass", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RRClass_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       QResourceRecord_qClass_xer_ = { {"qClass>\n", "qClass>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t QResourceRecord_qClass_descr_ = { "@DNS_Types.QResourceRecord.qClass", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &QResourceRecord_qClass_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for QResourceRecord
const TTCN_Typedescriptor_t QResourceRecord_descr_ = { "@DNS_Types.QResourceRecord", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ResourceRecords
const TTCN_Typedescriptor_t ResourceRecords_descr_ = { "@DNS_Types.ResourceRecords", NULL, NULL, NULL, NULL, NULL, &ResourceRecord_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceRecord_name_xer_ = { {"name>\n", "name>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceRecord_name_descr_ = { "@DNS_Types.ResourceRecord.name", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceRecord_name_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceRecord_rrType_xer_ = { {"rrType>\n", "rrType>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceRecord_rrType_descr_ = { "@DNS_Types.ResourceRecord.rrType", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ResourceRecord_rrType_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceRecord_rrClass_xer_ = { {"rrClass>\n", "rrClass>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceRecord_rrClass_descr_ = { "@DNS_Types.ResourceRecord.rrClass", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ResourceRecord_rrClass_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t UInt32_raw_ = {32,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       UInt32_xer_ = { {"UInt32>\n", "UInt32>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UInt32_descr_ = { "@DNS_Types.UInt32", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &UInt32_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceRecord_ttl_xer_ = { {"ttl>\n", "ttl>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceRecord_ttl_descr_ = { "@DNS_Types.ResourceRecord.ttl", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &ResourceRecord_ttl_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceRecord_rdLength_xer_ = { {"rdLength>\n", "rdLength>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceRecord_rdLength_descr_ = { "@DNS_Types.ResourceRecord.rdLength", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &ResourceRecord_rdLength_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ResourceData
const TTCN_Typedescriptor_t ResourceData_descr_ = { "@DNS_Types.ResourceData", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataCName_xer_ = { {"RDataCName>\n", "RDataCName>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataCName_descr_ = { "@DNS_Types.RDataCName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataCName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_cName_xer_ = { {"cName>\n", "cName>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_cName_descr_ = { "@DNS_Types.ResourceData.cName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_cName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataHInfo_cpu_xer_ = { {"cpu>\n", "cpu>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataHInfo_cpu_descr_ = { "@DNS_Types.RDataHInfo.cpu", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataHInfo_cpu_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataHInfo_os_xer_ = { {"os>\n", "os>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataHInfo_os_descr_ = { "@DNS_Types.RDataHInfo.os", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataHInfo_os_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataHInfo
const TTCN_Typedescriptor_t RDataHInfo_descr_ = { "@DNS_Types.RDataHInfo", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMB_xer_ = { {"RDataMB>\n", "RDataMB>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMB_descr_ = { "@DNS_Types.RDataMB", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMB_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_mb_xer_ = { {"mb>\n", "mb>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_mb_descr_ = { "@DNS_Types.ResourceData.mb", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_mb_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMD_xer_ = { {"RDataMD>\n", "RDataMD>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMD_descr_ = { "@DNS_Types.RDataMD", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMD_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_md_xer_ = { {"md>\n", "md>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_md_descr_ = { "@DNS_Types.ResourceData.md", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_md_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMF_xer_ = { {"RDataMF>\n", "RDataMF>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMF_descr_ = { "@DNS_Types.RDataMF", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMF_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_mf_xer_ = { {"mf>\n", "mf>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_mf_descr_ = { "@DNS_Types.ResourceData.mf", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_mf_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMG_xer_ = { {"RDataMG>\n", "RDataMG>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMG_descr_ = { "@DNS_Types.RDataMG", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMG_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_mg_xer_ = { {"mg>\n", "mg>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_mg_descr_ = { "@DNS_Types.ResourceData.mg", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_mg_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMInfo_rMailBx_xer_ = { {"rMailBx>\n", "rMailBx>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMInfo_rMailBx_descr_ = { "@DNS_Types.RDataMInfo.rMailBx", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMInfo_rMailBx_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMInfo_eMailBx_xer_ = { {"eMailBx>\n", "eMailBx>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMInfo_eMailBx_descr_ = { "@DNS_Types.RDataMInfo.eMailBx", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMInfo_eMailBx_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataMInfo
const TTCN_Typedescriptor_t RDataMInfo_descr_ = { "@DNS_Types.RDataMInfo", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMR_xer_ = { {"RDataMR>\n", "RDataMR>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMR_descr_ = { "@DNS_Types.RDataMR", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMR_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_mr_xer_ = { {"mr>\n", "mr>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_mr_descr_ = { "@DNS_Types.ResourceData.mr", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_mr_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMX_preference_xer_ = { {"preference>\n", "preference>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMX_preference_descr_ = { "@DNS_Types.RDataMX.preference", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataMX_preference_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataMX_exchange_xer_ = { {"exchange>\n", "exchange>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataMX_exchange_descr_ = { "@DNS_Types.RDataMX.exchange", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataMX_exchange_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataMX
const TTCN_Typedescriptor_t RDataMX_descr_ = { "@DNS_Types.RDataMX", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNull_xer_ = { {"RDataNull>\n", "RDataNull>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNull_descr_ = { "@DNS_Types.RDataNull", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &RDataNull_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_rd__null_xer_ = { {"rd_null>\n", "rd_null>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_rd__null_descr_ = { "@DNS_Types.ResourceData.rd_null", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &ResourceData_rd__null_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNS_xer_ = { {"RDataNS>\n", "RDataNS>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNS_descr_ = { "@DNS_Types.RDataNS", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataNS_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_ns_xer_ = { {"ns>\n", "ns>\n"}, {4, 4}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_ns_descr_ = { "@DNS_Types.ResourceData.ns", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_ns_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataPTR_xer_ = { {"RDataPTR>\n", "RDataPTR>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataPTR_descr_ = { "@DNS_Types.RDataPTR", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataPTR_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_ptr_xer_ = { {"ptr>\n", "ptr>\n"}, {5, 5}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_ptr_descr_ = { "@DNS_Types.ResourceData.ptr", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &ResourceData_ptr_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_mName_xer_ = { {"mName>\n", "mName>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_mName_descr_ = { "@DNS_Types.RDataSOA.mName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataSOA_mName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_rName_xer_ = { {"rName>\n", "rName>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_rName_descr_ = { "@DNS_Types.RDataSOA.rName", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataSOA_rName_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_serial_xer_ = { {"serial>\n", "serial>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_serial_descr_ = { "@DNS_Types.RDataSOA.serial", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataSOA_serial_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_refresh_xer_ = { {"refresh>\n", "refresh>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_refresh_descr_ = { "@DNS_Types.RDataSOA.refresh", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataSOA_refresh_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_retry_xer_ = { {"retry>\n", "retry>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_retry_descr_ = { "@DNS_Types.RDataSOA.retry", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataSOA_retry_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_expire_xer_ = { {"expire>\n", "expire>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_expire_descr_ = { "@DNS_Types.RDataSOA.expire", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataSOA_expire_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSOA_minimum_xer_ = { {"minimum>\n", "minimum>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSOA_minimum_descr_ = { "@DNS_Types.RDataSOA.minimum", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataSOA_minimum_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataSOA
const TTCN_Typedescriptor_t RDataSOA_descr_ = { "@DNS_Types.RDataSOA", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataTXT
const TTCN_Typedescriptor_t RDataTXT_descr_ = { "@DNS_Types.RDataTXT", NULL, NULL, NULL, NULL, NULL, &CharStr255_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataTXT_0_xer_ = { {"CharStr255>\n", "CharStr255>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataTXT_0_descr_ = { "@DNS_Types.RDataTXT.<oftype>", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataTXT_0_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataA_xer_ = { {"RDataA>\n", "RDataA>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataA_descr_ = { "@DNS_Types.RDataA", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataA_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_a_xer_ = { {"a>\n", "a>\n"}, {3, 3}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_a_descr_ = { "@DNS_Types.ResourceData.a", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &ResourceData_a_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataWKS_addr_xer_ = { {"addr>\n", "addr>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataWKS_addr_descr_ = { "@DNS_Types.RDataWKS.addr", &OCTETSTRING_ber_, &UInt32_raw_, &OCTETSTRING_text_, &RDataWKS_addr_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       UInt8_xer_ = { {"UInt8>\n", "UInt8>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t UInt8_descr_ = { "@DNS_Types.UInt8", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &UInt8_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataWKS_protocol_xer_ = { {"protocol>\n", "protocol>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataWKS_protocol_descr_ = { "@DNS_Types.RDataWKS.protocol", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataWKS_protocol_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataWKS_bitmap_xer_ = { {"bitmap>\n", "bitmap>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataWKS_bitmap_descr_ = { "@DNS_Types.RDataWKS.bitmap", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &RDataWKS_bitmap_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataWKS
const TTCN_Typedescriptor_t RDataWKS_descr_ = { "@DNS_Types.RDataWKS", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSRV_priority_xer_ = { {"priority>\n", "priority>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSRV_priority_descr_ = { "@DNS_Types.RDataSRV.priority", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataSRV_priority_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSRV_weight_xer_ = { {"weight>\n", "weight>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSRV_weight_descr_ = { "@DNS_Types.RDataSRV.weight", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataSRV_weight_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSRV_portnum_xer_ = { {"portnum>\n", "portnum>\n"}, {9, 9}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSRV_portnum_descr_ = { "@DNS_Types.RDataSRV.portnum", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataSRV_portnum_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataSRV_target_xer_ = { {"target>\n", "target>\n"}, {8, 8}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataSRV_target_descr_ = { "@DNS_Types.RDataSRV.target", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataSRV_target_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataSRV
const TTCN_Typedescriptor_t RDataSRV_descr_ = { "@DNS_Types.RDataSRV", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_order_xer_ = { {"order>\n", "order>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_order_descr_ = { "@DNS_Types.RDataNAPTR.order", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataNAPTR_order_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_preference_xer_ = { {"preference>\n", "preference>\n"}, {12, 12}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_preference_descr_ = { "@DNS_Types.RDataNAPTR.preference", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &RDataNAPTR_preference_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_flags_xer_ = { {"flags>\n", "flags>\n"}, {7, 7}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_flags_descr_ = { "@DNS_Types.RDataNAPTR.flags", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataNAPTR_flags_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_services_xer_ = { {"services>\n", "services>\n"}, {10, 10}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_services_descr_ = { "@DNS_Types.RDataNAPTR.services", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataNAPTR_services_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_regexpString_xer_ = { {"regexpString>\n", "regexpString>\n"}, {14, 14}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_regexpString_descr_ = { "@DNS_Types.RDataNAPTR.regexpString", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataNAPTR_regexpString_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       RDataNAPTR_replacement_xer_ = { {"replacement>\n", "replacement>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataNAPTR_replacement_descr_ = { "@DNS_Types.RDataNAPTR.replacement", NULL, &CHARSTRING_raw_, &CHARSTRING_text_, &RDataNAPTR_replacement_xer_, &CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for RDataNAPTR
const TTCN_Typedescriptor_t RDataNAPTR_descr_ = { "@DNS_Types.RDataNAPTR", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const TTCN_RAWdescriptor_t RDataAAAA_raw_ = {128,SG_NO,ORDER_LSB,ORDER_LSB,ORDER_LSB,ORDER_LSB,EXT_BIT_NO,ORDER_LSB,ORDER_LSB,TOP_BIT_INHERITED,0,0,0,8,0,NULL,-1};
const XERdescriptor_t       RDataAAAA_xer_ = { {"RDataAAAA>\n", "RDataAAAA>\n"}, {11, 11}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t RDataAAAA_descr_ = { "@DNS_Types.RDataAAAA", &OCTETSTRING_ber_, &RDataAAAA_raw_, &OCTETSTRING_text_, &RDataAAAA_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_aaaa_xer_ = { {"aaaa>\n", "aaaa>\n"}, {6, 6}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_aaaa_descr_ = { "@DNS_Types.ResourceData.aaaa", &OCTETSTRING_ber_, &RDataAAAA_raw_, &OCTETSTRING_text_, &ResourceData_aaaa_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_unsupported_xer_ = { {"unsupported>\n", "unsupported>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_unsupported_descr_ = { "@DNS_Types.ResourceData.unsupported", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &ResourceData_unsupported_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       ResourceData_undecodable_xer_ = { {"undecodable>\n", "undecodable>\n"}, {13, 13}, 0 |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, -1, 0, NULL, NULL };
const TTCN_Typedescriptor_t ResourceData_undecodable_descr_ = { "@DNS_Types.ResourceData.undecodable", &OCTETSTRING_ber_, &OCTETSTRING_raw_, &OCTETSTRING_text_, &ResourceData_undecodable_xer_, &OCTETSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for ResourceRecord
const TTCN_Typedescriptor_t ResourceRecord_descr_ = { "@DNS_Types.ResourceRecord", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
// No XER for PDU__DNS
const TTCN_Typedescriptor_t PDU__DNS_descr_ = { "@DNS_Types.PDU_DNS", NULL, NULL, NULL, NULL, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
static INTEGER const_DNS__OP__QUERY;
const INTEGER& DNS__OP__QUERY = const_DNS__OP__QUERY;
static INTEGER const_DNS__OP__IQUERY;
const INTEGER& DNS__OP__IQUERY = const_DNS__OP__IQUERY;
static INTEGER const_DNS__OP__STATUS;
const INTEGER& DNS__OP__STATUS = const_DNS__OP__STATUS;
static INTEGER const_DNS__OP__UPDATE;
const INTEGER& DNS__OP__UPDATE = const_DNS__OP__UPDATE;
static INTEGER const_DNS__NO__ERROR;
const INTEGER& DNS__NO__ERROR = const_DNS__NO__ERROR;
static INTEGER const_DNS__FORMAT__ERROR;
const INTEGER& DNS__FORMAT__ERROR = const_DNS__FORMAT__ERROR;
static INTEGER const_DNS__SERVER__FAILURE;
const INTEGER& DNS__SERVER__FAILURE = const_DNS__SERVER__FAILURE;
static INTEGER const_DNS__NAME__ERROR;
const INTEGER& DNS__NAME__ERROR = const_DNS__NAME__ERROR;
static INTEGER const_DNS__NOT__IMPLEMENTED;
const INTEGER& DNS__NOT__IMPLEMENTED = const_DNS__NOT__IMPLEMENTED;
static INTEGER const_DNS__REFUSED;
const INTEGER& DNS__REFUSED = const_DNS__REFUSED;
static INTEGER const_DNS__YXDOMAIN;
const INTEGER& DNS__YXDOMAIN = const_DNS__YXDOMAIN;
static INTEGER const_DNS__YXRRSET;
const INTEGER& DNS__YXRRSET = const_DNS__YXRRSET;
static INTEGER const_DNS__NXRRSET;
const INTEGER& DNS__NXRRSET = const_DNS__NXRRSET;
static INTEGER const_DNS__NOTAUTH;
const INTEGER& DNS__NOTAUTH = const_DNS__NOTAUTH;
static INTEGER const_DNS__NOTZONE;
const INTEGER& DNS__NOTZONE = const_DNS__NOTZONE;
static INTEGER const_DNS__A;
const INTEGER& DNS__A = const_DNS__A;
static INTEGER const_DNS__NS;
const INTEGER& DNS__NS = const_DNS__NS;
static INTEGER const_DNS__MD;
const INTEGER& DNS__MD = const_DNS__MD;
static INTEGER const_DNS__MF;
const INTEGER& DNS__MF = const_DNS__MF;
static INTEGER const_DNS__CNAME;
const INTEGER& DNS__CNAME = const_DNS__CNAME;
static INTEGER const_DNS__SOA;
const INTEGER& DNS__SOA = const_DNS__SOA;
static INTEGER const_DNS__MB;
const INTEGER& DNS__MB = const_DNS__MB;
static INTEGER const_DNS__MG;
const INTEGER& DNS__MG = const_DNS__MG;
static INTEGER const_DNS__MR;
const INTEGER& DNS__MR = const_DNS__MR;
static INTEGER const_DNS__NULL;
const INTEGER& DNS__NULL = const_DNS__NULL;
static INTEGER const_DNS__WKS;
const INTEGER& DNS__WKS = const_DNS__WKS;
static INTEGER const_DNS__PTR;
const INTEGER& DNS__PTR = const_DNS__PTR;
static INTEGER const_DNS__HINFO;
const INTEGER& DNS__HINFO = const_DNS__HINFO;
static INTEGER const_DNS__MINFO;
const INTEGER& DNS__MINFO = const_DNS__MINFO;
static INTEGER const_DNS__MX;
const INTEGER& DNS__MX = const_DNS__MX;
static INTEGER const_DNS__TXT;
const INTEGER& DNS__TXT = const_DNS__TXT;
static INTEGER const_DNS__AAAA;
const INTEGER& DNS__AAAA = const_DNS__AAAA;
static INTEGER const_DNS__SRV;
const INTEGER& DNS__SRV = const_DNS__SRV;
static INTEGER const_DNS__NAPTR;
const INTEGER& DNS__NAPTR = const_DNS__NAPTR;
static INTEGER const_DNS__AXFR;
const INTEGER& DNS__AXFR = const_DNS__AXFR;
static INTEGER const_DNS__MAILB;
const INTEGER& DNS__MAILB = const_DNS__MAILB;
static INTEGER const_DNS__MAILA;
const INTEGER& DNS__MAILA = const_DNS__MAILA;
static INTEGER const_DNS__ALLRECORDS;
const INTEGER& DNS__ALLRECORDS = const_DNS__ALLRECORDS;
static INTEGER const_DNS__IN;
const INTEGER& DNS__IN = const_DNS__IN;
static INTEGER const_DNS__CS;
const INTEGER& DNS__CS = const_DNS__CS;
static INTEGER const_DNS__CH;
const INTEGER& DNS__CH = const_DNS__CH;
static INTEGER const_DNS__HS;
const INTEGER& DNS__HS = const_DNS__HS;
static INTEGER const_DNS__ANYCLASS;
const INTEGER& DNS__ANYCLASS = const_DNS__ANYCLASS;
static INTEGER const_DNS__NONE;
const INTEGER& DNS__NONE = const_DNS__NONE;
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "", "" }
};

TTCN_Module module_object("DNS_Types", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, NULL, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

QueryOrResponse::QueryOrResponse()
{
enum_value = UNBOUND_VALUE;
}

QueryOrResponse::QueryOrResponse(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @DNS_Types.QueryOrResponse with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

QueryOrResponse::QueryOrResponse(enum_type other_value)
{
enum_value = other_value;
}

QueryOrResponse::QueryOrResponse(const QueryOrResponse& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
enum_value = other_value.enum_value;
}

QueryOrResponse& QueryOrResponse::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @DNS_Types.QueryOrResponse.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

QueryOrResponse& QueryOrResponse::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

QueryOrResponse& QueryOrResponse::operator=(const QueryOrResponse& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
enum_value = other_value.enum_value;
return *this;
}

boolean QueryOrResponse::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value == other_value;
}

boolean QueryOrResponse::operator==(const QueryOrResponse& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value == other_value.enum_value;
}

boolean QueryOrResponse::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value < other_value;
}

boolean QueryOrResponse::operator<(const QueryOrResponse& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value < other_value.enum_value;
}

boolean QueryOrResponse::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value > other_value;
}

boolean QueryOrResponse::operator>(const QueryOrResponse& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value > other_value.enum_value;
}

const char *QueryOrResponse::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case DNS__QUERY: return "DNS_QUERY";
case DNS__RESPONSE: return "DNS_RESPONSE";
default: return "<unknown>";
}
}

QueryOrResponse::enum_type QueryOrResponse::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "DNS_QUERY")) return DNS__QUERY;
else if (!strcmp(str_par, "DNS_RESPONSE")) return DNS__RESPONSE;
else return UNKNOWN_VALUE;
}

boolean QueryOrResponse::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int QueryOrResponse::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @DNS_Types.QueryOrResponse.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int QueryOrResponse::enum2int(const QueryOrResponse& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @DNS_Types.QueryOrResponse.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

QueryOrResponse::operator QueryOrResponse::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @DNS_Types.QueryOrResponse.");
return enum_value;
}

void QueryOrResponse::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void QueryOrResponse::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@DNS_Types.QueryOrResponse");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @DNS_Types.QueryOrResponse.");
  }
}

void QueryOrResponse::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
text_buf.push_int(enum_value);
}

void QueryOrResponse::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @DNS_Types.QueryOrResponse.", enum_value);
}

void QueryOrResponse_template::copy_template(const QueryOrResponse_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new QueryOrResponse_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @DNS_Types.QueryOrResponse.");
}
}

QueryOrResponse_template::QueryOrResponse_template()
{
}

QueryOrResponse_template::QueryOrResponse_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

QueryOrResponse_template::QueryOrResponse_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!QueryOrResponse::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @DNS_Types.QueryOrResponse with unknown numeric value %d.", other_value);
single_value = (QueryOrResponse::enum_type)other_value;
}

QueryOrResponse_template::QueryOrResponse_template(QueryOrResponse::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

QueryOrResponse_template::QueryOrResponse_template(const QueryOrResponse& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == QueryOrResponse::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @DNS_Types.QueryOrResponse.");
single_value = other_value.enum_value;
}

QueryOrResponse_template::QueryOrResponse_template(const OPTIONAL<QueryOrResponse>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (QueryOrResponse::enum_type)(const QueryOrResponse&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @DNS_Types.QueryOrResponse from an unbound optional field.");
}
}

QueryOrResponse_template::QueryOrResponse_template(const QueryOrResponse_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

QueryOrResponse_template::~QueryOrResponse_template()
{
clean_up();
}

boolean QueryOrResponse_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean QueryOrResponse_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != QueryOrResponse::UNBOUND_VALUE;
}

void QueryOrResponse_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(int other_value)
{
if (!QueryOrResponse::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @DNS_Types.QueryOrResponse.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (QueryOrResponse::enum_type)other_value;
return *this;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(QueryOrResponse::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(const QueryOrResponse& other_value)
{
if (other_value.enum_value == QueryOrResponse::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @DNS_Types.QueryOrResponse to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(const OPTIONAL<QueryOrResponse>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (QueryOrResponse::enum_type)(const QueryOrResponse&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @DNS_Types.QueryOrResponse.");
}
return *this;
}

QueryOrResponse_template& QueryOrResponse_template::operator=(const QueryOrResponse_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean QueryOrResponse_template::match(QueryOrResponse::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @DNS_Types.QueryOrResponse.");
}
return FALSE;
}

boolean QueryOrResponse_template::match(const QueryOrResponse& other_value) const
{
if (other_value.enum_value == QueryOrResponse::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @DNS_Types.QueryOrResponse with an unbound value.");
return match(other_value.enum_value);
}

QueryOrResponse::enum_type QueryOrResponse_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @DNS_Types.QueryOrResponse.");
return single_value;
}

void QueryOrResponse_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @DNS_Types.QueryOrResponse.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new QueryOrResponse_template[list_length];
}

QueryOrResponse_template& QueryOrResponse_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @DNS_Types.QueryOrResponse.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @DNS_Types.QueryOrResponse.");
return value_list.list_value[list_index];
}

void QueryOrResponse_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(QueryOrResponse::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void QueryOrResponse_template::log_match(const QueryOrResponse& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void QueryOrResponse_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @DNS_Types.QueryOrResponse.");
}
}

void QueryOrResponse_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (QueryOrResponse::enum_type)text_buf.pull_int().get_val();
if (!QueryOrResponse::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @DNS_Types.QueryOrResponse.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new QueryOrResponse_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @DNS_Types.QueryOrResponse.");
}
}

boolean QueryOrResponse_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean QueryOrResponse_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void QueryOrResponse_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    QueryOrResponse::enum_type enum_val = QueryOrResponse::str_to_enum(param.get_enumerated());
    if (!QueryOrResponse::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @DNS_Types.QueryOrResponse.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@DNS_Types.QueryOrResponse");
  }
  is_ifpresent = param.get_ifpresent();
}

void QueryOrResponse_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.QueryOrResponse");
}

DnsHeader::DnsHeader()
{
  bound_flag = FALSE;
}

DnsHeader::DnsHeader(const INTEGER& par_id,
    const QueryOrResponse& par_qr,
    const INTEGER& par_opCode,
    const BOOLEAN& par_aa,
    const BOOLEAN& par_tc,
    const BOOLEAN& par_rd,
    const BOOLEAN& par_ra,
    const BITSTRING& par_z,
    const INTEGER& par_rCode,
    const INTEGER& par_qdCount,
    const INTEGER& par_anCount,
    const INTEGER& par_nsCount,
    const INTEGER& par_arCount)
  :   field_id(par_id),
  field_qr(par_qr),
  field_opCode(par_opCode),
  field_aa(par_aa),
  field_tc(par_tc),
  field_rd(par_rd),
  field_ra(par_ra),
  field_z(par_z),
  field_rCode(par_rCode),
  field_qdCount(par_qdCount),
  field_anCount(par_anCount),
  field_nsCount(par_nsCount),
  field_arCount(par_arCount)
{
  bound_flag = TRUE;
}

DnsHeader::DnsHeader(const DnsHeader& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.DnsHeader.");
bound_flag = TRUE;
if (other_value.id().is_bound()) field_id = other_value.id();
else field_id.clean_up();
if (other_value.qr().is_bound()) field_qr = other_value.qr();
else field_qr.clean_up();
if (other_value.opCode().is_bound()) field_opCode = other_value.opCode();
else field_opCode.clean_up();
if (other_value.aa().is_bound()) field_aa = other_value.aa();
else field_aa.clean_up();
if (other_value.tc().is_bound()) field_tc = other_value.tc();
else field_tc.clean_up();
if (other_value.rd().is_bound()) field_rd = other_value.rd();
else field_rd.clean_up();
if (other_value.ra().is_bound()) field_ra = other_value.ra();
else field_ra.clean_up();
if (other_value.z().is_bound()) field_z = other_value.z();
else field_z.clean_up();
if (other_value.rCode().is_bound()) field_rCode = other_value.rCode();
else field_rCode.clean_up();
if (other_value.qdCount().is_bound()) field_qdCount = other_value.qdCount();
else field_qdCount.clean_up();
if (other_value.anCount().is_bound()) field_anCount = other_value.anCount();
else field_anCount.clean_up();
if (other_value.nsCount().is_bound()) field_nsCount = other_value.nsCount();
else field_nsCount.clean_up();
if (other_value.arCount().is_bound()) field_arCount = other_value.arCount();
else field_arCount.clean_up();
}

void DnsHeader::clean_up()
{
field_id.clean_up();
field_qr.clean_up();
field_opCode.clean_up();
field_aa.clean_up();
field_tc.clean_up();
field_rd.clean_up();
field_ra.clean_up();
field_z.clean_up();
field_rCode.clean_up();
field_qdCount.clean_up();
field_anCount.clean_up();
field_nsCount.clean_up();
field_arCount.clean_up();
bound_flag = FALSE;
}

DnsHeader& DnsHeader::operator=(const DnsHeader& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.DnsHeader.");
  bound_flag = TRUE;
  if (other_value.id().is_bound()) field_id = other_value.id();
  else field_id.clean_up();
  if (other_value.qr().is_bound()) field_qr = other_value.qr();
  else field_qr.clean_up();
  if (other_value.opCode().is_bound()) field_opCode = other_value.opCode();
  else field_opCode.clean_up();
  if (other_value.aa().is_bound()) field_aa = other_value.aa();
  else field_aa.clean_up();
  if (other_value.tc().is_bound()) field_tc = other_value.tc();
  else field_tc.clean_up();
  if (other_value.rd().is_bound()) field_rd = other_value.rd();
  else field_rd.clean_up();
  if (other_value.ra().is_bound()) field_ra = other_value.ra();
  else field_ra.clean_up();
  if (other_value.z().is_bound()) field_z = other_value.z();
  else field_z.clean_up();
  if (other_value.rCode().is_bound()) field_rCode = other_value.rCode();
  else field_rCode.clean_up();
  if (other_value.qdCount().is_bound()) field_qdCount = other_value.qdCount();
  else field_qdCount.clean_up();
  if (other_value.anCount().is_bound()) field_anCount = other_value.anCount();
  else field_anCount.clean_up();
  if (other_value.nsCount().is_bound()) field_nsCount = other_value.nsCount();
  else field_nsCount.clean_up();
  if (other_value.arCount().is_bound()) field_arCount = other_value.arCount();
  else field_arCount.clean_up();
}
return *this;
}

boolean DnsHeader::operator==(const DnsHeader& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_id==other_value.field_id
  && field_qr==other_value.field_qr
  && field_opCode==other_value.field_opCode
  && field_aa==other_value.field_aa
  && field_tc==other_value.field_tc
  && field_rd==other_value.field_rd
  && field_ra==other_value.field_ra
  && field_z==other_value.field_z
  && field_rCode==other_value.field_rCode
  && field_qdCount==other_value.field_qdCount
  && field_anCount==other_value.field_anCount
  && field_nsCount==other_value.field_nsCount
  && field_arCount==other_value.field_arCount;
}

boolean DnsHeader::is_bound() const
{
if (bound_flag) return TRUE;
if(field_id.is_bound()) return TRUE;
if(field_qr.is_bound()) return TRUE;
if(field_opCode.is_bound()) return TRUE;
if(field_aa.is_bound()) return TRUE;
if(field_tc.is_bound()) return TRUE;
if(field_rd.is_bound()) return TRUE;
if(field_ra.is_bound()) return TRUE;
if(field_z.is_bound()) return TRUE;
if(field_rCode.is_bound()) return TRUE;
if(field_qdCount.is_bound()) return TRUE;
if(field_anCount.is_bound()) return TRUE;
if(field_nsCount.is_bound()) return TRUE;
if(field_arCount.is_bound()) return TRUE;
return FALSE;
}
boolean DnsHeader::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_id.is_value()) return FALSE;
if(!field_qr.is_value()) return FALSE;
if(!field_opCode.is_value()) return FALSE;
if(!field_aa.is_value()) return FALSE;
if(!field_tc.is_value()) return FALSE;
if(!field_rd.is_value()) return FALSE;
if(!field_ra.is_value()) return FALSE;
if(!field_z.is_value()) return FALSE;
if(!field_rCode.is_value()) return FALSE;
if(!field_qdCount.is_value()) return FALSE;
if(!field_anCount.is_value()) return FALSE;
if(!field_nsCount.is_value()) return FALSE;
if(!field_arCount.is_value()) return FALSE;
return TRUE;
}
int DnsHeader::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.DnsHeader");
  return 13;
}

void DnsHeader::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ id := ");
field_id.log();
TTCN_Logger::log_event_str(", qr := ");
field_qr.log();
TTCN_Logger::log_event_str(", opCode := ");
field_opCode.log();
TTCN_Logger::log_event_str(", aa := ");
field_aa.log();
TTCN_Logger::log_event_str(", tc := ");
field_tc.log();
TTCN_Logger::log_event_str(", rd := ");
field_rd.log();
TTCN_Logger::log_event_str(", ra := ");
field_ra.log();
TTCN_Logger::log_event_str(", z := ");
field_z.log();
TTCN_Logger::log_event_str(", rCode := ");
field_rCode.log();
TTCN_Logger::log_event_str(", qdCount := ");
field_qdCount.log();
TTCN_Logger::log_event_str(", anCount := ");
field_anCount.log();
TTCN_Logger::log_event_str(", nsCount := ");
field_nsCount.log();
TTCN_Logger::log_event_str(", arCount := ");
field_arCount.log();
TTCN_Logger::log_event_str(" }");
}

void DnsHeader::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.DnsHeader'");
    }
    if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("qr", param_field) == 0) {
      qr().set_param(param);
      return;
    } else if (strcmp("opCode", param_field) == 0) {
      opCode().set_param(param);
      return;
    } else if (strcmp("aa", param_field) == 0) {
      aa().set_param(param);
      return;
    } else if (strcmp("tc", param_field) == 0) {
      tc().set_param(param);
      return;
    } else if (strcmp("rd", param_field) == 0) {
      rd().set_param(param);
      return;
    } else if (strcmp("ra", param_field) == 0) {
      ra().set_param(param);
      return;
    } else if (strcmp("z", param_field) == 0) {
      z().set_param(param);
      return;
    } else if (strcmp("rCode", param_field) == 0) {
      rCode().set_param(param);
      return;
    } else if (strcmp("qdCount", param_field) == 0) {
      qdCount().set_param(param);
      return;
    } else if (strcmp("anCount", param_field) == 0) {
      anCount().set_param(param);
      return;
    } else if (strcmp("nsCount", param_field) == 0) {
      nsCount().set_param(param);
      return;
    } else if (strcmp("arCount", param_field) == 0) {
      arCount().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.DnsHeader'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (13<param.get_size()) {
      param.error("record value of type @DNS_Types.DnsHeader has 13 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) qr().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) opCode().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) aa().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) tc().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) rd().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) ra().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) z().set_param(*param.get_elem(7));
    if (param.get_size()>8 && param.get_elem(8)->get_type()!=Module_Param::MP_NotUsed) rCode().set_param(*param.get_elem(8));
    if (param.get_size()>9 && param.get_elem(9)->get_type()!=Module_Param::MP_NotUsed) qdCount().set_param(*param.get_elem(9));
    if (param.get_size()>10 && param.get_elem(10)->get_type()!=Module_Param::MP_NotUsed) anCount().set_param(*param.get_elem(10));
    if (param.get_size()>11 && param.get_elem(11)->get_type()!=Module_Param::MP_NotUsed) nsCount().set_param(*param.get_elem(11));
    if (param.get_size()>12 && param.get_elem(12)->get_type()!=Module_Param::MP_NotUsed) arCount().set_param(*param.get_elem(12));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "opCode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          opCode().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "aa")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          aa().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "tc")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          tc().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rd().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ra")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ra().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "z")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          z().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rCode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rCode().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qdCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qdCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "anCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          anCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "nsCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          nsCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "arCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          arCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.DnsHeader: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.DnsHeader");
  }
}

void DnsHeader::set_implicit_omit()
{
if (id().is_bound()) id().set_implicit_omit();
if (qr().is_bound()) qr().set_implicit_omit();
if (opCode().is_bound()) opCode().set_implicit_omit();
if (aa().is_bound()) aa().set_implicit_omit();
if (tc().is_bound()) tc().set_implicit_omit();
if (rd().is_bound()) rd().set_implicit_omit();
if (ra().is_bound()) ra().set_implicit_omit();
if (z().is_bound()) z().set_implicit_omit();
if (rCode().is_bound()) rCode().set_implicit_omit();
if (qdCount().is_bound()) qdCount().set_implicit_omit();
if (anCount().is_bound()) anCount().set_implicit_omit();
if (nsCount().is_bound()) nsCount().set_implicit_omit();
if (arCount().is_bound()) arCount().set_implicit_omit();
}

void DnsHeader::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.DnsHeader.");
field_id.encode_text(text_buf);
field_qr.encode_text(text_buf);
field_opCode.encode_text(text_buf);
field_aa.encode_text(text_buf);
field_tc.encode_text(text_buf);
field_rd.encode_text(text_buf);
field_ra.encode_text(text_buf);
field_z.encode_text(text_buf);
field_rCode.encode_text(text_buf);
field_qdCount.encode_text(text_buf);
field_anCount.encode_text(text_buf);
field_nsCount.encode_text(text_buf);
field_arCount.encode_text(text_buf);
}

void DnsHeader::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_id.decode_text(text_buf);
field_qr.decode_text(text_buf);
field_opCode.decode_text(text_buf);
field_aa.decode_text(text_buf);
field_tc.decode_text(text_buf);
field_rd.decode_text(text_buf);
field_ra.decode_text(text_buf);
field_z.decode_text(text_buf);
field_rCode.decode_text(text_buf);
field_qdCount.decode_text(text_buf);
field_anCount.decode_text(text_buf);
field_nsCount.decode_text(text_buf);
field_arCount.decode_text(text_buf);
}

struct DnsHeader_template::single_value_struct {
INTEGER_template field_id;
QueryOrResponse_template field_qr;
INTEGER_template field_opCode;
BOOLEAN_template field_aa;
BOOLEAN_template field_tc;
BOOLEAN_template field_rd;
BOOLEAN_template field_ra;
BITSTRING_template field_z;
INTEGER_template field_rCode;
INTEGER_template field_qdCount;
INTEGER_template field_anCount;
INTEGER_template field_nsCount;
INTEGER_template field_arCount;
};

void DnsHeader_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_id = ANY_VALUE;
single_value->field_qr = ANY_VALUE;
single_value->field_opCode = ANY_VALUE;
single_value->field_aa = ANY_VALUE;
single_value->field_tc = ANY_VALUE;
single_value->field_rd = ANY_VALUE;
single_value->field_ra = ANY_VALUE;
single_value->field_z = ANY_VALUE;
single_value->field_rCode = ANY_VALUE;
single_value->field_qdCount = ANY_VALUE;
single_value->field_anCount = ANY_VALUE;
single_value->field_nsCount = ANY_VALUE;
single_value->field_arCount = ANY_VALUE;
}
}
}

void DnsHeader_template::copy_value(const DnsHeader& other_value)
{
single_value = new single_value_struct;
if (other_value.id().is_bound()) {
  single_value->field_id = other_value.id();
} else {
  single_value->field_id.clean_up();
}
if (other_value.qr().is_bound()) {
  single_value->field_qr = other_value.qr();
} else {
  single_value->field_qr.clean_up();
}
if (other_value.opCode().is_bound()) {
  single_value->field_opCode = other_value.opCode();
} else {
  single_value->field_opCode.clean_up();
}
if (other_value.aa().is_bound()) {
  single_value->field_aa = other_value.aa();
} else {
  single_value->field_aa.clean_up();
}
if (other_value.tc().is_bound()) {
  single_value->field_tc = other_value.tc();
} else {
  single_value->field_tc.clean_up();
}
if (other_value.rd().is_bound()) {
  single_value->field_rd = other_value.rd();
} else {
  single_value->field_rd.clean_up();
}
if (other_value.ra().is_bound()) {
  single_value->field_ra = other_value.ra();
} else {
  single_value->field_ra.clean_up();
}
if (other_value.z().is_bound()) {
  single_value->field_z = other_value.z();
} else {
  single_value->field_z.clean_up();
}
if (other_value.rCode().is_bound()) {
  single_value->field_rCode = other_value.rCode();
} else {
  single_value->field_rCode.clean_up();
}
if (other_value.qdCount().is_bound()) {
  single_value->field_qdCount = other_value.qdCount();
} else {
  single_value->field_qdCount.clean_up();
}
if (other_value.anCount().is_bound()) {
  single_value->field_anCount = other_value.anCount();
} else {
  single_value->field_anCount.clean_up();
}
if (other_value.nsCount().is_bound()) {
  single_value->field_nsCount = other_value.nsCount();
} else {
  single_value->field_nsCount.clean_up();
}
if (other_value.arCount().is_bound()) {
  single_value->field_arCount = other_value.arCount();
} else {
  single_value->field_arCount.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void DnsHeader_template::copy_template(const DnsHeader_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.id().get_selection()) {
single_value->field_id = other_value.id();
} else {
single_value->field_id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.qr().get_selection()) {
single_value->field_qr = other_value.qr();
} else {
single_value->field_qr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.opCode().get_selection()) {
single_value->field_opCode = other_value.opCode();
} else {
single_value->field_opCode.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.aa().get_selection()) {
single_value->field_aa = other_value.aa();
} else {
single_value->field_aa.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.tc().get_selection()) {
single_value->field_tc = other_value.tc();
} else {
single_value->field_tc.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rd().get_selection()) {
single_value->field_rd = other_value.rd();
} else {
single_value->field_rd.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ra().get_selection()) {
single_value->field_ra = other_value.ra();
} else {
single_value->field_ra.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.z().get_selection()) {
single_value->field_z = other_value.z();
} else {
single_value->field_z.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rCode().get_selection()) {
single_value->field_rCode = other_value.rCode();
} else {
single_value->field_rCode.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.qdCount().get_selection()) {
single_value->field_qdCount = other_value.qdCount();
} else {
single_value->field_qdCount.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.anCount().get_selection()) {
single_value->field_anCount = other_value.anCount();
} else {
single_value->field_anCount.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.nsCount().get_selection()) {
single_value->field_nsCount = other_value.nsCount();
} else {
single_value->field_nsCount.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.arCount().get_selection()) {
single_value->field_arCount = other_value.arCount();
} else {
single_value->field_arCount.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new DnsHeader_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.DnsHeader.");
break;
}
set_selection(other_value);
}

DnsHeader_template::DnsHeader_template()
{
}

DnsHeader_template::DnsHeader_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

DnsHeader_template::DnsHeader_template(const DnsHeader& other_value)
{
copy_value(other_value);
}

DnsHeader_template::DnsHeader_template(const OPTIONAL<DnsHeader>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const DnsHeader&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.DnsHeader from an unbound optional field.");
}
}

DnsHeader_template::DnsHeader_template(const DnsHeader_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

DnsHeader_template::~DnsHeader_template()
{
clean_up();
}

DnsHeader_template& DnsHeader_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

DnsHeader_template& DnsHeader_template::operator=(const DnsHeader& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

DnsHeader_template& DnsHeader_template::operator=(const OPTIONAL<DnsHeader>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const DnsHeader&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.DnsHeader.");
}
return *this;
}

DnsHeader_template& DnsHeader_template::operator=(const DnsHeader_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean DnsHeader_template::match(const DnsHeader& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.id().is_bound()) return FALSE;
if(!single_value->field_id.match(other_value.id()))return FALSE;
if(!other_value.qr().is_bound()) return FALSE;
if(!single_value->field_qr.match(other_value.qr()))return FALSE;
if(!other_value.opCode().is_bound()) return FALSE;
if(!single_value->field_opCode.match(other_value.opCode()))return FALSE;
if(!other_value.aa().is_bound()) return FALSE;
if(!single_value->field_aa.match(other_value.aa()))return FALSE;
if(!other_value.tc().is_bound()) return FALSE;
if(!single_value->field_tc.match(other_value.tc()))return FALSE;
if(!other_value.rd().is_bound()) return FALSE;
if(!single_value->field_rd.match(other_value.rd()))return FALSE;
if(!other_value.ra().is_bound()) return FALSE;
if(!single_value->field_ra.match(other_value.ra()))return FALSE;
if(!other_value.z().is_bound()) return FALSE;
if(!single_value->field_z.match(other_value.z()))return FALSE;
if(!other_value.rCode().is_bound()) return FALSE;
if(!single_value->field_rCode.match(other_value.rCode()))return FALSE;
if(!other_value.qdCount().is_bound()) return FALSE;
if(!single_value->field_qdCount.match(other_value.qdCount()))return FALSE;
if(!other_value.anCount().is_bound()) return FALSE;
if(!single_value->field_anCount.match(other_value.anCount()))return FALSE;
if(!other_value.nsCount().is_bound()) return FALSE;
if(!single_value->field_nsCount.match(other_value.nsCount()))return FALSE;
if(!other_value.arCount().is_bound()) return FALSE;
if(!single_value->field_arCount.match(other_value.arCount()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.DnsHeader.");
}
return FALSE;
}

boolean DnsHeader_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_id.is_bound()) return TRUE;
if (single_value->field_qr.is_bound()) return TRUE;
if (single_value->field_opCode.is_bound()) return TRUE;
if (single_value->field_aa.is_bound()) return TRUE;
if (single_value->field_tc.is_bound()) return TRUE;
if (single_value->field_rd.is_bound()) return TRUE;
if (single_value->field_ra.is_bound()) return TRUE;
if (single_value->field_z.is_bound()) return TRUE;
if (single_value->field_rCode.is_bound()) return TRUE;
if (single_value->field_qdCount.is_bound()) return TRUE;
if (single_value->field_anCount.is_bound()) return TRUE;
if (single_value->field_nsCount.is_bound()) return TRUE;
if (single_value->field_arCount.is_bound()) return TRUE;
return FALSE;
}

boolean DnsHeader_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_id.is_value()) return FALSE;
if (!single_value->field_qr.is_value()) return FALSE;
if (!single_value->field_opCode.is_value()) return FALSE;
if (!single_value->field_aa.is_value()) return FALSE;
if (!single_value->field_tc.is_value()) return FALSE;
if (!single_value->field_rd.is_value()) return FALSE;
if (!single_value->field_ra.is_value()) return FALSE;
if (!single_value->field_z.is_value()) return FALSE;
if (!single_value->field_rCode.is_value()) return FALSE;
if (!single_value->field_qdCount.is_value()) return FALSE;
if (!single_value->field_anCount.is_value()) return FALSE;
if (!single_value->field_nsCount.is_value()) return FALSE;
if (!single_value->field_arCount.is_value()) return FALSE;
return TRUE;
}

void DnsHeader_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

DnsHeader DnsHeader_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.DnsHeader.");
DnsHeader ret_val;
if (single_value->field_id.is_bound()) {
ret_val.id() = single_value->field_id.valueof();
}
if (single_value->field_qr.is_bound()) {
ret_val.qr() = single_value->field_qr.valueof();
}
if (single_value->field_opCode.is_bound()) {
ret_val.opCode() = single_value->field_opCode.valueof();
}
if (single_value->field_aa.is_bound()) {
ret_val.aa() = single_value->field_aa.valueof();
}
if (single_value->field_tc.is_bound()) {
ret_val.tc() = single_value->field_tc.valueof();
}
if (single_value->field_rd.is_bound()) {
ret_val.rd() = single_value->field_rd.valueof();
}
if (single_value->field_ra.is_bound()) {
ret_val.ra() = single_value->field_ra.valueof();
}
if (single_value->field_z.is_bound()) {
ret_val.z() = single_value->field_z.valueof();
}
if (single_value->field_rCode.is_bound()) {
ret_val.rCode() = single_value->field_rCode.valueof();
}
if (single_value->field_qdCount.is_bound()) {
ret_val.qdCount() = single_value->field_qdCount.valueof();
}
if (single_value->field_anCount.is_bound()) {
ret_val.anCount() = single_value->field_anCount.valueof();
}
if (single_value->field_nsCount.is_bound()) {
ret_val.nsCount() = single_value->field_nsCount.valueof();
}
if (single_value->field_arCount.is_bound()) {
ret_val.arCount() = single_value->field_arCount.valueof();
}
return ret_val;
}

void DnsHeader_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.DnsHeader.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new DnsHeader_template[list_length];
}

DnsHeader_template& DnsHeader_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.DnsHeader.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.DnsHeader.");
return value_list.list_value[list_index];
}

INTEGER_template& DnsHeader_template::id()
{
set_specific();
return single_value->field_id;
}

const INTEGER_template& DnsHeader_template::id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field id of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_id;
}

QueryOrResponse_template& DnsHeader_template::qr()
{
set_specific();
return single_value->field_qr;
}

const QueryOrResponse_template& DnsHeader_template::qr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field qr of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_qr;
}

INTEGER_template& DnsHeader_template::opCode()
{
set_specific();
return single_value->field_opCode;
}

const INTEGER_template& DnsHeader_template::opCode() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field opCode of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_opCode;
}

BOOLEAN_template& DnsHeader_template::aa()
{
set_specific();
return single_value->field_aa;
}

const BOOLEAN_template& DnsHeader_template::aa() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field aa of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_aa;
}

BOOLEAN_template& DnsHeader_template::tc()
{
set_specific();
return single_value->field_tc;
}

const BOOLEAN_template& DnsHeader_template::tc() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field tc of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_tc;
}

BOOLEAN_template& DnsHeader_template::rd()
{
set_specific();
return single_value->field_rd;
}

const BOOLEAN_template& DnsHeader_template::rd() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rd of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_rd;
}

BOOLEAN_template& DnsHeader_template::ra()
{
set_specific();
return single_value->field_ra;
}

const BOOLEAN_template& DnsHeader_template::ra() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ra of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_ra;
}

BITSTRING_template& DnsHeader_template::z()
{
set_specific();
return single_value->field_z;
}

const BITSTRING_template& DnsHeader_template::z() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field z of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_z;
}

INTEGER_template& DnsHeader_template::rCode()
{
set_specific();
return single_value->field_rCode;
}

const INTEGER_template& DnsHeader_template::rCode() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rCode of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_rCode;
}

INTEGER_template& DnsHeader_template::qdCount()
{
set_specific();
return single_value->field_qdCount;
}

const INTEGER_template& DnsHeader_template::qdCount() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field qdCount of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_qdCount;
}

INTEGER_template& DnsHeader_template::anCount()
{
set_specific();
return single_value->field_anCount;
}

const INTEGER_template& DnsHeader_template::anCount() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field anCount of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_anCount;
}

INTEGER_template& DnsHeader_template::nsCount()
{
set_specific();
return single_value->field_nsCount;
}

const INTEGER_template& DnsHeader_template::nsCount() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field nsCount of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_nsCount;
}

INTEGER_template& DnsHeader_template::arCount()
{
set_specific();
return single_value->field_arCount;
}

const INTEGER_template& DnsHeader_template::arCount() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field arCount of a non-specific template of type @DNS_Types.DnsHeader.");
return single_value->field_arCount;
}

int DnsHeader_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.DnsHeader which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 13;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.DnsHeader containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.DnsHeader containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.DnsHeader containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.DnsHeader containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.DnsHeader containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.DnsHeader.");
  }
  return 0;
}

void DnsHeader_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ id := ");
single_value->field_id.log();
TTCN_Logger::log_event_str(", qr := ");
single_value->field_qr.log();
TTCN_Logger::log_event_str(", opCode := ");
single_value->field_opCode.log();
TTCN_Logger::log_event_str(", aa := ");
single_value->field_aa.log();
TTCN_Logger::log_event_str(", tc := ");
single_value->field_tc.log();
TTCN_Logger::log_event_str(", rd := ");
single_value->field_rd.log();
TTCN_Logger::log_event_str(", ra := ");
single_value->field_ra.log();
TTCN_Logger::log_event_str(", z := ");
single_value->field_z.log();
TTCN_Logger::log_event_str(", rCode := ");
single_value->field_rCode.log();
TTCN_Logger::log_event_str(", qdCount := ");
single_value->field_qdCount.log();
TTCN_Logger::log_event_str(", anCount := ");
single_value->field_anCount.log();
TTCN_Logger::log_event_str(", nsCount := ");
single_value->field_nsCount.log();
TTCN_Logger::log_event_str(", arCount := ");
single_value->field_arCount.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void DnsHeader_template::log_match(const DnsHeader& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_id.match(match_value.id())){
TTCN_Logger::log_logmatch_info(".id");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_qr.match(match_value.qr())){
TTCN_Logger::log_logmatch_info(".qr");
single_value->field_qr.log_match(match_value.qr());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_opCode.match(match_value.opCode())){
TTCN_Logger::log_logmatch_info(".opCode");
single_value->field_opCode.log_match(match_value.opCode());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_aa.match(match_value.aa())){
TTCN_Logger::log_logmatch_info(".aa");
single_value->field_aa.log_match(match_value.aa());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_tc.match(match_value.tc())){
TTCN_Logger::log_logmatch_info(".tc");
single_value->field_tc.log_match(match_value.tc());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rd.match(match_value.rd())){
TTCN_Logger::log_logmatch_info(".rd");
single_value->field_rd.log_match(match_value.rd());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ra.match(match_value.ra())){
TTCN_Logger::log_logmatch_info(".ra");
single_value->field_ra.log_match(match_value.ra());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_z.match(match_value.z())){
TTCN_Logger::log_logmatch_info(".z");
single_value->field_z.log_match(match_value.z());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rCode.match(match_value.rCode())){
TTCN_Logger::log_logmatch_info(".rCode");
single_value->field_rCode.log_match(match_value.rCode());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_qdCount.match(match_value.qdCount())){
TTCN_Logger::log_logmatch_info(".qdCount");
single_value->field_qdCount.log_match(match_value.qdCount());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_anCount.match(match_value.anCount())){
TTCN_Logger::log_logmatch_info(".anCount");
single_value->field_anCount.log_match(match_value.anCount());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_nsCount.match(match_value.nsCount())){
TTCN_Logger::log_logmatch_info(".nsCount");
single_value->field_nsCount.log_match(match_value.nsCount());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_arCount.match(match_value.arCount())){
TTCN_Logger::log_logmatch_info(".arCount");
single_value->field_arCount.log_match(match_value.arCount());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ id := ");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::log_event_str(", qr := ");
single_value->field_qr.log_match(match_value.qr());
TTCN_Logger::log_event_str(", opCode := ");
single_value->field_opCode.log_match(match_value.opCode());
TTCN_Logger::log_event_str(", aa := ");
single_value->field_aa.log_match(match_value.aa());
TTCN_Logger::log_event_str(", tc := ");
single_value->field_tc.log_match(match_value.tc());
TTCN_Logger::log_event_str(", rd := ");
single_value->field_rd.log_match(match_value.rd());
TTCN_Logger::log_event_str(", ra := ");
single_value->field_ra.log_match(match_value.ra());
TTCN_Logger::log_event_str(", z := ");
single_value->field_z.log_match(match_value.z());
TTCN_Logger::log_event_str(", rCode := ");
single_value->field_rCode.log_match(match_value.rCode());
TTCN_Logger::log_event_str(", qdCount := ");
single_value->field_qdCount.log_match(match_value.qdCount());
TTCN_Logger::log_event_str(", anCount := ");
single_value->field_anCount.log_match(match_value.anCount());
TTCN_Logger::log_event_str(", nsCount := ");
single_value->field_nsCount.log_match(match_value.nsCount());
TTCN_Logger::log_event_str(", arCount := ");
single_value->field_arCount.log_match(match_value.arCount());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void DnsHeader_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_id.encode_text(text_buf);
single_value->field_qr.encode_text(text_buf);
single_value->field_opCode.encode_text(text_buf);
single_value->field_aa.encode_text(text_buf);
single_value->field_tc.encode_text(text_buf);
single_value->field_rd.encode_text(text_buf);
single_value->field_ra.encode_text(text_buf);
single_value->field_z.encode_text(text_buf);
single_value->field_rCode.encode_text(text_buf);
single_value->field_qdCount.encode_text(text_buf);
single_value->field_anCount.encode_text(text_buf);
single_value->field_nsCount.encode_text(text_buf);
single_value->field_arCount.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.DnsHeader.");
}
}

void DnsHeader_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_id.decode_text(text_buf);
single_value->field_qr.decode_text(text_buf);
single_value->field_opCode.decode_text(text_buf);
single_value->field_aa.decode_text(text_buf);
single_value->field_tc.decode_text(text_buf);
single_value->field_rd.decode_text(text_buf);
single_value->field_ra.decode_text(text_buf);
single_value->field_z.decode_text(text_buf);
single_value->field_rCode.decode_text(text_buf);
single_value->field_qdCount.decode_text(text_buf);
single_value->field_anCount.decode_text(text_buf);
single_value->field_nsCount.decode_text(text_buf);
single_value->field_arCount.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new DnsHeader_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.DnsHeader.");
}
}

void DnsHeader_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.DnsHeader'");
    }
    if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("qr", param_field) == 0) {
      qr().set_param(param);
      return;
    } else if (strcmp("opCode", param_field) == 0) {
      opCode().set_param(param);
      return;
    } else if (strcmp("aa", param_field) == 0) {
      aa().set_param(param);
      return;
    } else if (strcmp("tc", param_field) == 0) {
      tc().set_param(param);
      return;
    } else if (strcmp("rd", param_field) == 0) {
      rd().set_param(param);
      return;
    } else if (strcmp("ra", param_field) == 0) {
      ra().set_param(param);
      return;
    } else if (strcmp("z", param_field) == 0) {
      z().set_param(param);
      return;
    } else if (strcmp("rCode", param_field) == 0) {
      rCode().set_param(param);
      return;
    } else if (strcmp("qdCount", param_field) == 0) {
      qdCount().set_param(param);
      return;
    } else if (strcmp("anCount", param_field) == 0) {
      anCount().set_param(param);
      return;
    } else if (strcmp("nsCount", param_field) == 0) {
      nsCount().set_param(param);
      return;
    } else if (strcmp("arCount", param_field) == 0) {
      arCount().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.DnsHeader'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (13<param.get_size()) {
      param.error("record template of type @DNS_Types.DnsHeader has 13 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) qr().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) opCode().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) aa().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) tc().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) rd().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) ra().set_param(*param.get_elem(6));
    if (param.get_size()>7 && param.get_elem(7)->get_type()!=Module_Param::MP_NotUsed) z().set_param(*param.get_elem(7));
    if (param.get_size()>8 && param.get_elem(8)->get_type()!=Module_Param::MP_NotUsed) rCode().set_param(*param.get_elem(8));
    if (param.get_size()>9 && param.get_elem(9)->get_type()!=Module_Param::MP_NotUsed) qdCount().set_param(*param.get_elem(9));
    if (param.get_size()>10 && param.get_elem(10)->get_type()!=Module_Param::MP_NotUsed) anCount().set_param(*param.get_elem(10));
    if (param.get_size()>11 && param.get_elem(11)->get_type()!=Module_Param::MP_NotUsed) nsCount().set_param(*param.get_elem(11));
    if (param.get_size()>12 && param.get_elem(12)->get_type()!=Module_Param::MP_NotUsed) arCount().set_param(*param.get_elem(12));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "opCode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          opCode().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "aa")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          aa().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "tc")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          tc().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rd")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rd().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ra")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ra().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "z")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          z().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rCode")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rCode().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qdCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qdCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "anCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          anCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "nsCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          nsCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "arCount")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          arCount().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.DnsHeader: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.DnsHeader");
  }
  is_ifpresent = param.get_ifpresent();
}

void DnsHeader_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_id.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_qr.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_opCode.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_aa.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_tc.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_rd.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_ra.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_z.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_rCode.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_qdCount.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_anCount.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_nsCount.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
single_value->field_arCount.check_restriction(t_res, t_name ? t_name : "@DNS_Types.DnsHeader");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.DnsHeader");
}

boolean DnsHeader_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean DnsHeader_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const QResourceRecord QResourceRecords::UNBOUND_ELEM;
QResourceRecords::QResourceRecords()
{
val_ptr = NULL;
}

QResourceRecords::QResourceRecords(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

QResourceRecords::QResourceRecords(const QResourceRecords& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.QResourceRecords.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

QResourceRecords::~QResourceRecords()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void QResourceRecords::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

QResourceRecords& QResourceRecords::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

QResourceRecords& QResourceRecords::operator=(const QResourceRecords& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @DNS_Types.QResourceRecords.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean QResourceRecords::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @DNS_Types.QResourceRecords.");
return val_ptr->n_elements == 0 ;
}

boolean QResourceRecords::operator==(const QResourceRecords& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @DNS_Types.QResourceRecords.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @DNS_Types.QResourceRecords.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

QResourceRecord& QResourceRecords::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @DNS_Types.QResourceRecords using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (QResourceRecord**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new QResourceRecord(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new QResourceRecord;
}
return *val_ptr->value_elements[index_value];
}

QResourceRecord& QResourceRecords::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @DNS_Types.QResourceRecords.");
return (*this)[(int)index_value];
}

const QResourceRecord& QResourceRecords::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @DNS_Types.QResourceRecords.");
if (index_value < 0) TTCN_error("Accessing an element of type @DNS_Types.QResourceRecords using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @DNS_Types.QResourceRecords: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const QResourceRecord& QResourceRecords::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @DNS_Types.QResourceRecords.");
return (*this)[(int)index_value];
}

QResourceRecords QResourceRecords::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

QResourceRecords QResourceRecords::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

QResourceRecords QResourceRecords::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

QResourceRecords QResourceRecords::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @DNS_Types.QResourceRecords.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
QResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new QResourceRecord(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

QResourceRecords QResourceRecords::operator+(const QResourceRecords& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @DNS_Types.QResourceRecords concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
QResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new QResourceRecord(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new QResourceRecord(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

QResourceRecords QResourceRecords::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @DNS_Types.QResourceRecords.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@DNS_Types.QResourceRecords","element");
QResourceRecords ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new QResourceRecord(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

QResourceRecords QResourceRecords::replace(int index, int len, const QResourceRecords& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @DNS_Types.QResourceRecords.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @DNS_Types.QResourceRecords.");
check_replace_arguments(val_ptr->n_elements, index, len, "@DNS_Types.QResourceRecords","element");
QResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new QResourceRecord(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new QResourceRecord(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new QResourceRecord(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

QResourceRecords QResourceRecords::replace(int index, int len, const QResourceRecords_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void QResourceRecords::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @DNS_Types.QResourceRecords.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (QResourceRecord**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new QResourceRecord(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (QResourceRecord**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @DNS_Types.QResourceRecords: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (QResourceRecord**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean QResourceRecords::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int QResourceRecords::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @DNS_Types.QResourceRecords.");
return val_ptr->n_elements;
}

int QResourceRecords::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @DNS_Types.QResourceRecords.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void QResourceRecords::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void QResourceRecords::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@DNS_Types.QResourceRecords'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@DNS_Types.QResourceRecords");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@DNS_Types.QResourceRecords");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void QResourceRecords::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void QResourceRecords::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @DNS_Types.QResourceRecords.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void QResourceRecords::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @DNS_Types.QResourceRecords.");
val_ptr->value_elements = (QResourceRecord**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new QResourceRecord;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void QResourceRecords_template::copy_value(const QResourceRecords& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @DNS_Types.QResourceRecords with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (QResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new QResourceRecord_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new QResourceRecord_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void QResourceRecords_template::copy_template(const QResourceRecords_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (QResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new QResourceRecord_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new QResourceRecord_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new QResourceRecords_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.QResourceRecords.");
break;
}
set_selection(other_value);
}

boolean QResourceRecords_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const QResourceRecords_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const QResourceRecords*)value_ptr)[value_index]);
else return ((const QResourceRecords_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

QResourceRecords_template::QResourceRecords_template()
{
}

QResourceRecords_template::QResourceRecords_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

QResourceRecords_template::QResourceRecords_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

QResourceRecords_template::QResourceRecords_template(const QResourceRecords& other_value)
{
copy_value(other_value);
}

QResourceRecords_template::QResourceRecords_template(const OPTIONAL<QResourceRecords>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QResourceRecords&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.QResourceRecords from an unbound optional field.");
}
}

QResourceRecords_template::QResourceRecords_template(const QResourceRecords_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

QResourceRecords_template::~QResourceRecords_template()
{
clean_up();
}

void QResourceRecords_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

QResourceRecords_template& QResourceRecords_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

QResourceRecords_template& QResourceRecords_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

QResourceRecords_template& QResourceRecords_template::operator=(const QResourceRecords& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

QResourceRecords_template& QResourceRecords_template::operator=(const OPTIONAL<QResourceRecords>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QResourceRecords&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.QResourceRecords.");
}
return *this;
}

QResourceRecords_template& QResourceRecords_template::operator=(const QResourceRecords_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

QResourceRecord_template& QResourceRecords_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @DNS_Types.QResourceRecords using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @DNS_Types.QResourceRecords.");
    break;
}
return *single_value.value_elements[index_value];
}

QResourceRecord_template& QResourceRecords_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @DNS_Types.QResourceRecords.");
return (*this)[(int)index_value];
}

const QResourceRecord_template& QResourceRecords_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @DNS_Types.QResourceRecords using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @DNS_Types.QResourceRecords.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @DNS_Types.QResourceRecords: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const QResourceRecord_template& QResourceRecords_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @DNS_Types.QResourceRecords.");
return (*this)[(int)index_value];
}

void QResourceRecords_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @DNS_Types.QResourceRecords.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (QResourceRecord_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new QResourceRecord_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new QResourceRecord_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (QResourceRecord_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int QResourceRecords_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int QResourceRecords_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @DNS_Types.QResourceRecords containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @DNS_Types.QResourceRecords.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @DNS_Types.QResourceRecords");
}

boolean QResourceRecords_template::match(const QResourceRecords& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @DNS_Types.QResourceRecords.");
}
return FALSE;
}

boolean QResourceRecords_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

QResourceRecords QResourceRecords_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @DNS_Types.QResourceRecords.");
QResourceRecords ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

QResourceRecords QResourceRecords_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

QResourceRecords QResourceRecords_template::replace(int index, int len, const QResourceRecords_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

QResourceRecords QResourceRecords_template::replace(int index, int len, const QResourceRecords& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void QResourceRecords_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new QResourceRecords_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @DNS_Types.QResourceRecords.");
}
set_selection(template_type);
}

QResourceRecords_template& QResourceRecords_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @DNS_Types.QResourceRecords.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @DNS_Types.QResourceRecords.");
return value_list.list_value[list_index];
}

void QResourceRecords_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void QResourceRecords_template::log_match(const QResourceRecords& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void QResourceRecords_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.QResourceRecords.");
}
}

void QResourceRecords_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @DNS_Types.QResourceRecords.");
single_value.value_elements = (QResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new QResourceRecord_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new QResourceRecords_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @DNS_Types.QResourceRecords.");
}
}

boolean QResourceRecords_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean QResourceRecords_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void QResourceRecords_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@DNS_Types.QResourceRecords'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@DNS_Types.QResourceRecords");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void QResourceRecords_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@DNS_Types.QResourceRecords");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.QResourceRecords");
}

QResourceRecord::QResourceRecord()
{
  bound_flag = FALSE;
}

QResourceRecord::QResourceRecord(const CHARSTRING& par_qName,
    const INTEGER& par_qType,
    const INTEGER& par_qClass)
  :   field_qName(par_qName),
  field_qType(par_qType),
  field_qClass(par_qClass)
{
  bound_flag = TRUE;
}

QResourceRecord::QResourceRecord(const QResourceRecord& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.QResourceRecord.");
bound_flag = TRUE;
if (other_value.qName().is_bound()) field_qName = other_value.qName();
else field_qName.clean_up();
if (other_value.qType().is_bound()) field_qType = other_value.qType();
else field_qType.clean_up();
if (other_value.qClass().is_bound()) field_qClass = other_value.qClass();
else field_qClass.clean_up();
}

void QResourceRecord::clean_up()
{
field_qName.clean_up();
field_qType.clean_up();
field_qClass.clean_up();
bound_flag = FALSE;
}

QResourceRecord& QResourceRecord::operator=(const QResourceRecord& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.QResourceRecord.");
  bound_flag = TRUE;
  if (other_value.qName().is_bound()) field_qName = other_value.qName();
  else field_qName.clean_up();
  if (other_value.qType().is_bound()) field_qType = other_value.qType();
  else field_qType.clean_up();
  if (other_value.qClass().is_bound()) field_qClass = other_value.qClass();
  else field_qClass.clean_up();
}
return *this;
}

boolean QResourceRecord::operator==(const QResourceRecord& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_qName==other_value.field_qName
  && field_qType==other_value.field_qType
  && field_qClass==other_value.field_qClass;
}

boolean QResourceRecord::is_bound() const
{
if (bound_flag) return TRUE;
if(field_qName.is_bound()) return TRUE;
if(field_qType.is_bound()) return TRUE;
if(field_qClass.is_bound()) return TRUE;
return FALSE;
}
boolean QResourceRecord::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_qName.is_value()) return FALSE;
if(!field_qType.is_value()) return FALSE;
if(!field_qClass.is_value()) return FALSE;
return TRUE;
}
int QResourceRecord::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.QResourceRecord");
  return 3;
}

void QResourceRecord::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ qName := ");
field_qName.log();
TTCN_Logger::log_event_str(", qType := ");
field_qType.log();
TTCN_Logger::log_event_str(", qClass := ");
field_qClass.log();
TTCN_Logger::log_event_str(" }");
}

void QResourceRecord::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.QResourceRecord'");
    }
    if (strcmp("qName", param_field) == 0) {
      qName().set_param(param);
      return;
    } else if (strcmp("qType", param_field) == 0) {
      qType().set_param(param);
      return;
    } else if (strcmp("qClass", param_field) == 0) {
      qClass().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.QResourceRecord'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @DNS_Types.QResourceRecord has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) qName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) qType().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) qClass().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qType")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qType().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qClass")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qClass().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.QResourceRecord: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.QResourceRecord");
  }
}

void QResourceRecord::set_implicit_omit()
{
if (qName().is_bound()) qName().set_implicit_omit();
if (qType().is_bound()) qType().set_implicit_omit();
if (qClass().is_bound()) qClass().set_implicit_omit();
}

void QResourceRecord::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.QResourceRecord.");
field_qName.encode_text(text_buf);
field_qType.encode_text(text_buf);
field_qClass.encode_text(text_buf);
}

void QResourceRecord::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_qName.decode_text(text_buf);
field_qType.decode_text(text_buf);
field_qClass.decode_text(text_buf);
}

struct QResourceRecord_template::single_value_struct {
CHARSTRING_template field_qName;
INTEGER_template field_qType;
INTEGER_template field_qClass;
};

void QResourceRecord_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_qName = ANY_VALUE;
single_value->field_qType = ANY_VALUE;
single_value->field_qClass = ANY_VALUE;
}
}
}

void QResourceRecord_template::copy_value(const QResourceRecord& other_value)
{
single_value = new single_value_struct;
if (other_value.qName().is_bound()) {
  single_value->field_qName = other_value.qName();
} else {
  single_value->field_qName.clean_up();
}
if (other_value.qType().is_bound()) {
  single_value->field_qType = other_value.qType();
} else {
  single_value->field_qType.clean_up();
}
if (other_value.qClass().is_bound()) {
  single_value->field_qClass = other_value.qClass();
} else {
  single_value->field_qClass.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void QResourceRecord_template::copy_template(const QResourceRecord_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.qName().get_selection()) {
single_value->field_qName = other_value.qName();
} else {
single_value->field_qName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.qType().get_selection()) {
single_value->field_qType = other_value.qType();
} else {
single_value->field_qType.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.qClass().get_selection()) {
single_value->field_qClass = other_value.qClass();
} else {
single_value->field_qClass.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new QResourceRecord_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.QResourceRecord.");
break;
}
set_selection(other_value);
}

QResourceRecord_template::QResourceRecord_template()
{
}

QResourceRecord_template::QResourceRecord_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

QResourceRecord_template::QResourceRecord_template(const QResourceRecord& other_value)
{
copy_value(other_value);
}

QResourceRecord_template::QResourceRecord_template(const OPTIONAL<QResourceRecord>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QResourceRecord&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.QResourceRecord from an unbound optional field.");
}
}

QResourceRecord_template::QResourceRecord_template(const QResourceRecord_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

QResourceRecord_template::~QResourceRecord_template()
{
clean_up();
}

QResourceRecord_template& QResourceRecord_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

QResourceRecord_template& QResourceRecord_template::operator=(const QResourceRecord& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

QResourceRecord_template& QResourceRecord_template::operator=(const OPTIONAL<QResourceRecord>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const QResourceRecord&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.QResourceRecord.");
}
return *this;
}

QResourceRecord_template& QResourceRecord_template::operator=(const QResourceRecord_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean QResourceRecord_template::match(const QResourceRecord& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.qName().is_bound()) return FALSE;
if(!single_value->field_qName.match(other_value.qName()))return FALSE;
if(!other_value.qType().is_bound()) return FALSE;
if(!single_value->field_qType.match(other_value.qType()))return FALSE;
if(!other_value.qClass().is_bound()) return FALSE;
if(!single_value->field_qClass.match(other_value.qClass()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.QResourceRecord.");
}
return FALSE;
}

boolean QResourceRecord_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_qName.is_bound()) return TRUE;
if (single_value->field_qType.is_bound()) return TRUE;
if (single_value->field_qClass.is_bound()) return TRUE;
return FALSE;
}

boolean QResourceRecord_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_qName.is_value()) return FALSE;
if (!single_value->field_qType.is_value()) return FALSE;
if (!single_value->field_qClass.is_value()) return FALSE;
return TRUE;
}

void QResourceRecord_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

QResourceRecord QResourceRecord_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.QResourceRecord.");
QResourceRecord ret_val;
if (single_value->field_qName.is_bound()) {
ret_val.qName() = single_value->field_qName.valueof();
}
if (single_value->field_qType.is_bound()) {
ret_val.qType() = single_value->field_qType.valueof();
}
if (single_value->field_qClass.is_bound()) {
ret_val.qClass() = single_value->field_qClass.valueof();
}
return ret_val;
}

void QResourceRecord_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.QResourceRecord.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new QResourceRecord_template[list_length];
}

QResourceRecord_template& QResourceRecord_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.QResourceRecord.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.QResourceRecord.");
return value_list.list_value[list_index];
}

CHARSTRING_template& QResourceRecord_template::qName()
{
set_specific();
return single_value->field_qName;
}

const CHARSTRING_template& QResourceRecord_template::qName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field qName of a non-specific template of type @DNS_Types.QResourceRecord.");
return single_value->field_qName;
}

INTEGER_template& QResourceRecord_template::qType()
{
set_specific();
return single_value->field_qType;
}

const INTEGER_template& QResourceRecord_template::qType() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field qType of a non-specific template of type @DNS_Types.QResourceRecord.");
return single_value->field_qType;
}

INTEGER_template& QResourceRecord_template::qClass()
{
set_specific();
return single_value->field_qClass;
}

const INTEGER_template& QResourceRecord_template::qClass() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field qClass of a non-specific template of type @DNS_Types.QResourceRecord.");
return single_value->field_qClass;
}

int QResourceRecord_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.QResourceRecord containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.QResourceRecord.");
  }
  return 0;
}

void QResourceRecord_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ qName := ");
single_value->field_qName.log();
TTCN_Logger::log_event_str(", qType := ");
single_value->field_qType.log();
TTCN_Logger::log_event_str(", qClass := ");
single_value->field_qClass.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void QResourceRecord_template::log_match(const QResourceRecord& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_qName.match(match_value.qName())){
TTCN_Logger::log_logmatch_info(".qName");
single_value->field_qName.log_match(match_value.qName());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_qType.match(match_value.qType())){
TTCN_Logger::log_logmatch_info(".qType");
single_value->field_qType.log_match(match_value.qType());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_qClass.match(match_value.qClass())){
TTCN_Logger::log_logmatch_info(".qClass");
single_value->field_qClass.log_match(match_value.qClass());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ qName := ");
single_value->field_qName.log_match(match_value.qName());
TTCN_Logger::log_event_str(", qType := ");
single_value->field_qType.log_match(match_value.qType());
TTCN_Logger::log_event_str(", qClass := ");
single_value->field_qClass.log_match(match_value.qClass());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void QResourceRecord_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_qName.encode_text(text_buf);
single_value->field_qType.encode_text(text_buf);
single_value->field_qClass.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.QResourceRecord.");
}
}

void QResourceRecord_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_qName.decode_text(text_buf);
single_value->field_qType.decode_text(text_buf);
single_value->field_qClass.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new QResourceRecord_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.QResourceRecord.");
}
}

void QResourceRecord_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.QResourceRecord'");
    }
    if (strcmp("qName", param_field) == 0) {
      qName().set_param(param);
      return;
    } else if (strcmp("qType", param_field) == 0) {
      qType().set_param(param);
      return;
    } else if (strcmp("qClass", param_field) == 0) {
      qClass().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.QResourceRecord'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @DNS_Types.QResourceRecord has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) qName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) qType().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) qClass().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qType")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qType().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "qClass")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          qClass().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.QResourceRecord: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.QResourceRecord");
  }
  is_ifpresent = param.get_ifpresent();
}

void QResourceRecord_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_qName.check_restriction(t_res, t_name ? t_name : "@DNS_Types.QResourceRecord");
single_value->field_qType.check_restriction(t_res, t_name ? t_name : "@DNS_Types.QResourceRecord");
single_value->field_qClass.check_restriction(t_res, t_name ? t_name : "@DNS_Types.QResourceRecord");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.QResourceRecord");
}

boolean QResourceRecord_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean QResourceRecord_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const ResourceRecord ResourceRecords::UNBOUND_ELEM;
ResourceRecords::ResourceRecords()
{
val_ptr = NULL;
}

ResourceRecords::ResourceRecords(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

ResourceRecords::ResourceRecords(const ResourceRecords& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.ResourceRecords.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

ResourceRecords::~ResourceRecords()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void ResourceRecords::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

ResourceRecords& ResourceRecords::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

ResourceRecords& ResourceRecords::operator=(const ResourceRecords& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @DNS_Types.ResourceRecords.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean ResourceRecords::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @DNS_Types.ResourceRecords.");
return val_ptr->n_elements == 0 ;
}

boolean ResourceRecords::operator==(const ResourceRecords& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @DNS_Types.ResourceRecords.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @DNS_Types.ResourceRecords.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

ResourceRecord& ResourceRecords::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @DNS_Types.ResourceRecords using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (ResourceRecord**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ResourceRecord(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new ResourceRecord;
}
return *val_ptr->value_elements[index_value];
}

ResourceRecord& ResourceRecords::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @DNS_Types.ResourceRecords.");
return (*this)[(int)index_value];
}

const ResourceRecord& ResourceRecords::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @DNS_Types.ResourceRecords.");
if (index_value < 0) TTCN_error("Accessing an element of type @DNS_Types.ResourceRecords using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @DNS_Types.ResourceRecords: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const ResourceRecord& ResourceRecords::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @DNS_Types.ResourceRecords.");
return (*this)[(int)index_value];
}

ResourceRecords ResourceRecords::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

ResourceRecords ResourceRecords::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

ResourceRecords ResourceRecords::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

ResourceRecords ResourceRecords::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @DNS_Types.ResourceRecords.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
ResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new ResourceRecord(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

ResourceRecords ResourceRecords::operator+(const ResourceRecords& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @DNS_Types.ResourceRecords concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
ResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceRecord(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new ResourceRecord(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

ResourceRecords ResourceRecords::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @DNS_Types.ResourceRecords.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@DNS_Types.ResourceRecords","element");
ResourceRecords ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceRecord(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

ResourceRecords ResourceRecords::replace(int index, int len, const ResourceRecords& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @DNS_Types.ResourceRecords.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @DNS_Types.ResourceRecords.");
check_replace_arguments(val_ptr->n_elements, index, len, "@DNS_Types.ResourceRecords","element");
ResourceRecords ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new ResourceRecord(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new ResourceRecord(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new ResourceRecord(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

ResourceRecords ResourceRecords::replace(int index, int len, const ResourceRecords_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void ResourceRecords::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @DNS_Types.ResourceRecords.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (ResourceRecord**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new ResourceRecord(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (ResourceRecord**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @DNS_Types.ResourceRecords: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (ResourceRecord**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean ResourceRecords::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int ResourceRecords::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @DNS_Types.ResourceRecords.");
return val_ptr->n_elements;
}

int ResourceRecords::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @DNS_Types.ResourceRecords.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void ResourceRecords::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void ResourceRecords::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@DNS_Types.ResourceRecords'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@DNS_Types.ResourceRecords");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@DNS_Types.ResourceRecords");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void ResourceRecords::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void ResourceRecords::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @DNS_Types.ResourceRecords.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void ResourceRecords::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @DNS_Types.ResourceRecords.");
val_ptr->value_elements = (ResourceRecord**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new ResourceRecord;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void ResourceRecords_template::copy_value(const ResourceRecords& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @DNS_Types.ResourceRecords with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (ResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new ResourceRecord_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new ResourceRecord_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void ResourceRecords_template::copy_template(const ResourceRecords_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (ResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new ResourceRecord_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new ResourceRecord_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ResourceRecords_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.ResourceRecords.");
break;
}
set_selection(other_value);
}

boolean ResourceRecords_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const ResourceRecords_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const ResourceRecords*)value_ptr)[value_index]);
else return ((const ResourceRecords_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

ResourceRecords_template::ResourceRecords_template()
{
}

ResourceRecords_template::ResourceRecords_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

ResourceRecords_template::ResourceRecords_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

ResourceRecords_template::ResourceRecords_template(const ResourceRecords& other_value)
{
copy_value(other_value);
}

ResourceRecords_template::ResourceRecords_template(const OPTIONAL<ResourceRecords>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceRecords&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.ResourceRecords from an unbound optional field.");
}
}

ResourceRecords_template::ResourceRecords_template(const ResourceRecords_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

ResourceRecords_template::~ResourceRecords_template()
{
clean_up();
}

void ResourceRecords_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ResourceRecords_template& ResourceRecords_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ResourceRecords_template& ResourceRecords_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

ResourceRecords_template& ResourceRecords_template::operator=(const ResourceRecords& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ResourceRecords_template& ResourceRecords_template::operator=(const OPTIONAL<ResourceRecords>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceRecords&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.ResourceRecords.");
}
return *this;
}

ResourceRecords_template& ResourceRecords_template::operator=(const ResourceRecords_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

ResourceRecord_template& ResourceRecords_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @DNS_Types.ResourceRecords using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @DNS_Types.ResourceRecords.");
    break;
}
return *single_value.value_elements[index_value];
}

ResourceRecord_template& ResourceRecords_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @DNS_Types.ResourceRecords.");
return (*this)[(int)index_value];
}

const ResourceRecord_template& ResourceRecords_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @DNS_Types.ResourceRecords using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @DNS_Types.ResourceRecords.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @DNS_Types.ResourceRecords: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const ResourceRecord_template& ResourceRecords_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @DNS_Types.ResourceRecords.");
return (*this)[(int)index_value];
}

void ResourceRecords_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @DNS_Types.ResourceRecords.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (ResourceRecord_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ResourceRecord_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new ResourceRecord_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (ResourceRecord_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int ResourceRecords_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int ResourceRecords_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @DNS_Types.ResourceRecords containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @DNS_Types.ResourceRecords.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @DNS_Types.ResourceRecords");
}

boolean ResourceRecords_template::match(const ResourceRecords& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @DNS_Types.ResourceRecords.");
}
return FALSE;
}

boolean ResourceRecords_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

ResourceRecords ResourceRecords_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @DNS_Types.ResourceRecords.");
ResourceRecords ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

ResourceRecords ResourceRecords_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

ResourceRecords ResourceRecords_template::replace(int index, int len, const ResourceRecords_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

ResourceRecords ResourceRecords_template::replace(int index, int len, const ResourceRecords& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void ResourceRecords_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new ResourceRecords_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @DNS_Types.ResourceRecords.");
}
set_selection(template_type);
}

ResourceRecords_template& ResourceRecords_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @DNS_Types.ResourceRecords.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @DNS_Types.ResourceRecords.");
return value_list.list_value[list_index];
}

void ResourceRecords_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void ResourceRecords_template::log_match(const ResourceRecords& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ResourceRecords_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.ResourceRecords.");
}
}

void ResourceRecords_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @DNS_Types.ResourceRecords.");
single_value.value_elements = (ResourceRecord_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new ResourceRecord_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ResourceRecords_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @DNS_Types.ResourceRecords.");
}
}

boolean ResourceRecords_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean ResourceRecords_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void ResourceRecords_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@DNS_Types.ResourceRecords'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@DNS_Types.ResourceRecords");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void ResourceRecords_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecords");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.ResourceRecords");
}

void ResourceData::copy_value(const ResourceData& other_value)
{
switch (other_value.union_selection) {
case ALT_cName:
field_cName = new CHARSTRING(*other_value.field_cName);
break;
case ALT_hInfo:
field_hInfo = new RDataHInfo(*other_value.field_hInfo);
break;
case ALT_mb:
field_mb = new CHARSTRING(*other_value.field_mb);
break;
case ALT_md:
field_md = new CHARSTRING(*other_value.field_md);
break;
case ALT_mf:
field_mf = new CHARSTRING(*other_value.field_mf);
break;
case ALT_mg:
field_mg = new CHARSTRING(*other_value.field_mg);
break;
case ALT_mInfo:
field_mInfo = new RDataMInfo(*other_value.field_mInfo);
break;
case ALT_mr:
field_mr = new CHARSTRING(*other_value.field_mr);
break;
case ALT_mx:
field_mx = new RDataMX(*other_value.field_mx);
break;
case ALT_rd__null:
field_rd__null = new OCTETSTRING(*other_value.field_rd__null);
break;
case ALT_ns:
field_ns = new CHARSTRING(*other_value.field_ns);
break;
case ALT_ptr:
field_ptr = new CHARSTRING(*other_value.field_ptr);
break;
case ALT_soa:
field_soa = new RDataSOA(*other_value.field_soa);
break;
case ALT_txt:
field_txt = new RDataTXT(*other_value.field_txt);
break;
case ALT_a:
field_a = new OCTETSTRING(*other_value.field_a);
break;
case ALT_wks:
field_wks = new RDataWKS(*other_value.field_wks);
break;
case ALT_srv:
field_srv = new RDataSRV(*other_value.field_srv);
break;
case ALT_naptr:
field_naptr = new RDataNAPTR(*other_value.field_naptr);
break;
case ALT_aaaa:
field_aaaa = new OCTETSTRING(*other_value.field_aaaa);
break;
case ALT_unsupported:
field_unsupported = new OCTETSTRING(*other_value.field_unsupported);
break;
case ALT_undecodable:
field_undecodable = new OCTETSTRING(*other_value.field_undecodable);
break;
default:
TTCN_error("Assignment of an unbound union value of type @DNS_Types.ResourceData.");
}
union_selection = other_value.union_selection;
}

ResourceData::ResourceData()
{
union_selection = UNBOUND_VALUE;
}

ResourceData::ResourceData(const ResourceData& other_value)
: Base_Type(){
copy_value(other_value);
}

ResourceData::~ResourceData()
{
clean_up();
}

ResourceData& ResourceData::operator=(const ResourceData& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean ResourceData::operator==(const ResourceData& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @DNS_Types.ResourceData.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @DNS_Types.ResourceData.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_cName:
return *field_cName == *other_value.field_cName;
case ALT_hInfo:
return *field_hInfo == *other_value.field_hInfo;
case ALT_mb:
return *field_mb == *other_value.field_mb;
case ALT_md:
return *field_md == *other_value.field_md;
case ALT_mf:
return *field_mf == *other_value.field_mf;
case ALT_mg:
return *field_mg == *other_value.field_mg;
case ALT_mInfo:
return *field_mInfo == *other_value.field_mInfo;
case ALT_mr:
return *field_mr == *other_value.field_mr;
case ALT_mx:
return *field_mx == *other_value.field_mx;
case ALT_rd__null:
return *field_rd__null == *other_value.field_rd__null;
case ALT_ns:
return *field_ns == *other_value.field_ns;
case ALT_ptr:
return *field_ptr == *other_value.field_ptr;
case ALT_soa:
return *field_soa == *other_value.field_soa;
case ALT_txt:
return *field_txt == *other_value.field_txt;
case ALT_a:
return *field_a == *other_value.field_a;
case ALT_wks:
return *field_wks == *other_value.field_wks;
case ALT_srv:
return *field_srv == *other_value.field_srv;
case ALT_naptr:
return *field_naptr == *other_value.field_naptr;
case ALT_aaaa:
return *field_aaaa == *other_value.field_aaaa;
case ALT_unsupported:
return *field_unsupported == *other_value.field_unsupported;
case ALT_undecodable:
return *field_undecodable == *other_value.field_undecodable;
default:
return FALSE;
}
}

CHARSTRING& ResourceData::cName()
{
if (union_selection != ALT_cName) {
clean_up();
field_cName = new CHARSTRING;
union_selection = ALT_cName;
}
return *field_cName;
}

const CHARSTRING& ResourceData::cName() const
{
if (union_selection != ALT_cName) TTCN_error("Using non-selected field cName in a value of union type @DNS_Types.ResourceData.");
return *field_cName;
}

RDataHInfo& ResourceData::hInfo()
{
if (union_selection != ALT_hInfo) {
clean_up();
field_hInfo = new RDataHInfo;
union_selection = ALT_hInfo;
}
return *field_hInfo;
}

const RDataHInfo& ResourceData::hInfo() const
{
if (union_selection != ALT_hInfo) TTCN_error("Using non-selected field hInfo in a value of union type @DNS_Types.ResourceData.");
return *field_hInfo;
}

CHARSTRING& ResourceData::mb()
{
if (union_selection != ALT_mb) {
clean_up();
field_mb = new CHARSTRING;
union_selection = ALT_mb;
}
return *field_mb;
}

const CHARSTRING& ResourceData::mb() const
{
if (union_selection != ALT_mb) TTCN_error("Using non-selected field mb in a value of union type @DNS_Types.ResourceData.");
return *field_mb;
}

CHARSTRING& ResourceData::md()
{
if (union_selection != ALT_md) {
clean_up();
field_md = new CHARSTRING;
union_selection = ALT_md;
}
return *field_md;
}

const CHARSTRING& ResourceData::md() const
{
if (union_selection != ALT_md) TTCN_error("Using non-selected field md in a value of union type @DNS_Types.ResourceData.");
return *field_md;
}

CHARSTRING& ResourceData::mf()
{
if (union_selection != ALT_mf) {
clean_up();
field_mf = new CHARSTRING;
union_selection = ALT_mf;
}
return *field_mf;
}

const CHARSTRING& ResourceData::mf() const
{
if (union_selection != ALT_mf) TTCN_error("Using non-selected field mf in a value of union type @DNS_Types.ResourceData.");
return *field_mf;
}

CHARSTRING& ResourceData::mg()
{
if (union_selection != ALT_mg) {
clean_up();
field_mg = new CHARSTRING;
union_selection = ALT_mg;
}
return *field_mg;
}

const CHARSTRING& ResourceData::mg() const
{
if (union_selection != ALT_mg) TTCN_error("Using non-selected field mg in a value of union type @DNS_Types.ResourceData.");
return *field_mg;
}

RDataMInfo& ResourceData::mInfo()
{
if (union_selection != ALT_mInfo) {
clean_up();
field_mInfo = new RDataMInfo;
union_selection = ALT_mInfo;
}
return *field_mInfo;
}

const RDataMInfo& ResourceData::mInfo() const
{
if (union_selection != ALT_mInfo) TTCN_error("Using non-selected field mInfo in a value of union type @DNS_Types.ResourceData.");
return *field_mInfo;
}

CHARSTRING& ResourceData::mr()
{
if (union_selection != ALT_mr) {
clean_up();
field_mr = new CHARSTRING;
union_selection = ALT_mr;
}
return *field_mr;
}

const CHARSTRING& ResourceData::mr() const
{
if (union_selection != ALT_mr) TTCN_error("Using non-selected field mr in a value of union type @DNS_Types.ResourceData.");
return *field_mr;
}

RDataMX& ResourceData::mx()
{
if (union_selection != ALT_mx) {
clean_up();
field_mx = new RDataMX;
union_selection = ALT_mx;
}
return *field_mx;
}

const RDataMX& ResourceData::mx() const
{
if (union_selection != ALT_mx) TTCN_error("Using non-selected field mx in a value of union type @DNS_Types.ResourceData.");
return *field_mx;
}

OCTETSTRING& ResourceData::rd__null()
{
if (union_selection != ALT_rd__null) {
clean_up();
field_rd__null = new OCTETSTRING;
union_selection = ALT_rd__null;
}
return *field_rd__null;
}

const OCTETSTRING& ResourceData::rd__null() const
{
if (union_selection != ALT_rd__null) TTCN_error("Using non-selected field rd_null in a value of union type @DNS_Types.ResourceData.");
return *field_rd__null;
}

CHARSTRING& ResourceData::ns()
{
if (union_selection != ALT_ns) {
clean_up();
field_ns = new CHARSTRING;
union_selection = ALT_ns;
}
return *field_ns;
}

const CHARSTRING& ResourceData::ns() const
{
if (union_selection != ALT_ns) TTCN_error("Using non-selected field ns in a value of union type @DNS_Types.ResourceData.");
return *field_ns;
}

CHARSTRING& ResourceData::ptr()
{
if (union_selection != ALT_ptr) {
clean_up();
field_ptr = new CHARSTRING;
union_selection = ALT_ptr;
}
return *field_ptr;
}

const CHARSTRING& ResourceData::ptr() const
{
if (union_selection != ALT_ptr) TTCN_error("Using non-selected field ptr in a value of union type @DNS_Types.ResourceData.");
return *field_ptr;
}

RDataSOA& ResourceData::soa()
{
if (union_selection != ALT_soa) {
clean_up();
field_soa = new RDataSOA;
union_selection = ALT_soa;
}
return *field_soa;
}

const RDataSOA& ResourceData::soa() const
{
if (union_selection != ALT_soa) TTCN_error("Using non-selected field soa in a value of union type @DNS_Types.ResourceData.");
return *field_soa;
}

RDataTXT& ResourceData::txt()
{
if (union_selection != ALT_txt) {
clean_up();
field_txt = new RDataTXT;
union_selection = ALT_txt;
}
return *field_txt;
}

const RDataTXT& ResourceData::txt() const
{
if (union_selection != ALT_txt) TTCN_error("Using non-selected field txt in a value of union type @DNS_Types.ResourceData.");
return *field_txt;
}

OCTETSTRING& ResourceData::a()
{
if (union_selection != ALT_a) {
clean_up();
field_a = new OCTETSTRING;
union_selection = ALT_a;
}
return *field_a;
}

const OCTETSTRING& ResourceData::a() const
{
if (union_selection != ALT_a) TTCN_error("Using non-selected field a in a value of union type @DNS_Types.ResourceData.");
return *field_a;
}

RDataWKS& ResourceData::wks()
{
if (union_selection != ALT_wks) {
clean_up();
field_wks = new RDataWKS;
union_selection = ALT_wks;
}
return *field_wks;
}

const RDataWKS& ResourceData::wks() const
{
if (union_selection != ALT_wks) TTCN_error("Using non-selected field wks in a value of union type @DNS_Types.ResourceData.");
return *field_wks;
}

RDataSRV& ResourceData::srv()
{
if (union_selection != ALT_srv) {
clean_up();
field_srv = new RDataSRV;
union_selection = ALT_srv;
}
return *field_srv;
}

const RDataSRV& ResourceData::srv() const
{
if (union_selection != ALT_srv) TTCN_error("Using non-selected field srv in a value of union type @DNS_Types.ResourceData.");
return *field_srv;
}

RDataNAPTR& ResourceData::naptr()
{
if (union_selection != ALT_naptr) {
clean_up();
field_naptr = new RDataNAPTR;
union_selection = ALT_naptr;
}
return *field_naptr;
}

const RDataNAPTR& ResourceData::naptr() const
{
if (union_selection != ALT_naptr) TTCN_error("Using non-selected field naptr in a value of union type @DNS_Types.ResourceData.");
return *field_naptr;
}

OCTETSTRING& ResourceData::aaaa()
{
if (union_selection != ALT_aaaa) {
clean_up();
field_aaaa = new OCTETSTRING;
union_selection = ALT_aaaa;
}
return *field_aaaa;
}

const OCTETSTRING& ResourceData::aaaa() const
{
if (union_selection != ALT_aaaa) TTCN_error("Using non-selected field aaaa in a value of union type @DNS_Types.ResourceData.");
return *field_aaaa;
}

OCTETSTRING& ResourceData::unsupported()
{
if (union_selection != ALT_unsupported) {
clean_up();
field_unsupported = new OCTETSTRING;
union_selection = ALT_unsupported;
}
return *field_unsupported;
}

const OCTETSTRING& ResourceData::unsupported() const
{
if (union_selection != ALT_unsupported) TTCN_error("Using non-selected field unsupported in a value of union type @DNS_Types.ResourceData.");
return *field_unsupported;
}

OCTETSTRING& ResourceData::undecodable()
{
if (union_selection != ALT_undecodable) {
clean_up();
field_undecodable = new OCTETSTRING;
union_selection = ALT_undecodable;
}
return *field_undecodable;
}

const OCTETSTRING& ResourceData::undecodable() const
{
if (union_selection != ALT_undecodable) TTCN_error("Using non-selected field undecodable in a value of union type @DNS_Types.ResourceData.");
return *field_undecodable;
}

boolean ResourceData::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @DNS_Types.ResourceData.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @DNS_Types.ResourceData.");
return union_selection == checked_selection;
}

boolean ResourceData::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean ResourceData::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_cName: return field_cName->is_value();
case ALT_hInfo: return field_hInfo->is_value();
case ALT_mb: return field_mb->is_value();
case ALT_md: return field_md->is_value();
case ALT_mf: return field_mf->is_value();
case ALT_mg: return field_mg->is_value();
case ALT_mInfo: return field_mInfo->is_value();
case ALT_mr: return field_mr->is_value();
case ALT_mx: return field_mx->is_value();
case ALT_rd__null: return field_rd__null->is_value();
case ALT_ns: return field_ns->is_value();
case ALT_ptr: return field_ptr->is_value();
case ALT_soa: return field_soa->is_value();
case ALT_txt: return field_txt->is_value();
case ALT_a: return field_a->is_value();
case ALT_wks: return field_wks->is_value();
case ALT_srv: return field_srv->is_value();
case ALT_naptr: return field_naptr->is_value();
case ALT_aaaa: return field_aaaa->is_value();
case ALT_unsupported: return field_unsupported->is_value();
case ALT_undecodable: return field_undecodable->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void ResourceData::clean_up()
{
switch (union_selection) {
case ALT_cName:
  delete field_cName;
  break;
case ALT_hInfo:
  delete field_hInfo;
  break;
case ALT_mb:
  delete field_mb;
  break;
case ALT_md:
  delete field_md;
  break;
case ALT_mf:
  delete field_mf;
  break;
case ALT_mg:
  delete field_mg;
  break;
case ALT_mInfo:
  delete field_mInfo;
  break;
case ALT_mr:
  delete field_mr;
  break;
case ALT_mx:
  delete field_mx;
  break;
case ALT_rd__null:
  delete field_rd__null;
  break;
case ALT_ns:
  delete field_ns;
  break;
case ALT_ptr:
  delete field_ptr;
  break;
case ALT_soa:
  delete field_soa;
  break;
case ALT_txt:
  delete field_txt;
  break;
case ALT_a:
  delete field_a;
  break;
case ALT_wks:
  delete field_wks;
  break;
case ALT_srv:
  delete field_srv;
  break;
case ALT_naptr:
  delete field_naptr;
  break;
case ALT_aaaa:
  delete field_aaaa;
  break;
case ALT_unsupported:
  delete field_unsupported;
  break;
case ALT_undecodable:
  delete field_undecodable;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void ResourceData::log() const
{
switch (union_selection) {
case ALT_cName:
TTCN_Logger::log_event_str("{ cName := ");
field_cName->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_hInfo:
TTCN_Logger::log_event_str("{ hInfo := ");
field_hInfo->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mb:
TTCN_Logger::log_event_str("{ mb := ");
field_mb->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_md:
TTCN_Logger::log_event_str("{ md := ");
field_md->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mf:
TTCN_Logger::log_event_str("{ mf := ");
field_mf->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mg:
TTCN_Logger::log_event_str("{ mg := ");
field_mg->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mInfo:
TTCN_Logger::log_event_str("{ mInfo := ");
field_mInfo->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mr:
TTCN_Logger::log_event_str("{ mr := ");
field_mr->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_mx:
TTCN_Logger::log_event_str("{ mx := ");
field_mx->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_rd__null:
TTCN_Logger::log_event_str("{ rd_null := ");
field_rd__null->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_ns:
TTCN_Logger::log_event_str("{ ns := ");
field_ns->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_ptr:
TTCN_Logger::log_event_str("{ ptr := ");
field_ptr->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_soa:
TTCN_Logger::log_event_str("{ soa := ");
field_soa->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_txt:
TTCN_Logger::log_event_str("{ txt := ");
field_txt->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_a:
TTCN_Logger::log_event_str("{ a := ");
field_a->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_wks:
TTCN_Logger::log_event_str("{ wks := ");
field_wks->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_srv:
TTCN_Logger::log_event_str("{ srv := ");
field_srv->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_naptr:
TTCN_Logger::log_event_str("{ naptr := ");
field_naptr->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_aaaa:
TTCN_Logger::log_event_str("{ aaaa := ");
field_aaaa->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_unsupported:
TTCN_Logger::log_event_str("{ unsupported := ");
field_unsupported->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_undecodable:
TTCN_Logger::log_event_str("{ undecodable := ");
field_undecodable->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void ResourceData::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@DNS_Types.ResourceData'");
    }
    if (strcmp("cName", param_field) == 0) {
      cName().set_param(param);
      return;
    } else if (strcmp("hInfo", param_field) == 0) {
      hInfo().set_param(param);
      return;
    } else if (strcmp("mb", param_field) == 0) {
      mb().set_param(param);
      return;
    } else if (strcmp("md", param_field) == 0) {
      md().set_param(param);
      return;
    } else if (strcmp("mf", param_field) == 0) {
      mf().set_param(param);
      return;
    } else if (strcmp("mg", param_field) == 0) {
      mg().set_param(param);
      return;
    } else if (strcmp("mInfo", param_field) == 0) {
      mInfo().set_param(param);
      return;
    } else if (strcmp("mr", param_field) == 0) {
      mr().set_param(param);
      return;
    } else if (strcmp("mx", param_field) == 0) {
      mx().set_param(param);
      return;
    } else if (strcmp("rd_null", param_field) == 0) {
      rd__null().set_param(param);
      return;
    } else if (strcmp("ns", param_field) == 0) {
      ns().set_param(param);
      return;
    } else if (strcmp("ptr", param_field) == 0) {
      ptr().set_param(param);
      return;
    } else if (strcmp("soa", param_field) == 0) {
      soa().set_param(param);
      return;
    } else if (strcmp("txt", param_field) == 0) {
      txt().set_param(param);
      return;
    } else if (strcmp("a", param_field) == 0) {
      a().set_param(param);
      return;
    } else if (strcmp("wks", param_field) == 0) {
      wks().set_param(param);
      return;
    } else if (strcmp("srv", param_field) == 0) {
      srv().set_param(param);
      return;
    } else if (strcmp("naptr", param_field) == 0) {
      naptr().set_param(param);
      return;
    } else if (strcmp("aaaa", param_field) == 0) {
      aaaa().set_param(param);
      return;
    } else if (strcmp("unsupported", param_field) == 0) {
      unsupported().set_param(param);
      return;
    } else if (strcmp("undecodable", param_field) == 0) {
      undecodable().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@DNS_Types.ResourceData'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "cName")) {
    cName().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "hInfo")) {
    hInfo().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mb")) {
    mb().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "md")) {
    md().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mf")) {
    mf().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mg")) {
    mg().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mInfo")) {
    mInfo().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mr")) {
    mr().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "mx")) {
    mx().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "rd_null")) {
    rd__null().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "ns")) {
    ns().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "ptr")) {
    ptr().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "soa")) {
    soa().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "txt")) {
    txt().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "a")) {
    a().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "wks")) {
    wks().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "srv")) {
    srv().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "naptr")) {
    naptr().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "aaaa")) {
    aaaa().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "unsupported")) {
    unsupported().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "undecodable")) {
    undecodable().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @DNS_Types.ResourceData.", mp_last->get_id()->get_name());
}

void ResourceData::set_implicit_omit()
{
switch (union_selection) {
case ALT_cName:
field_cName->set_implicit_omit(); break;
case ALT_hInfo:
field_hInfo->set_implicit_omit(); break;
case ALT_mb:
field_mb->set_implicit_omit(); break;
case ALT_md:
field_md->set_implicit_omit(); break;
case ALT_mf:
field_mf->set_implicit_omit(); break;
case ALT_mg:
field_mg->set_implicit_omit(); break;
case ALT_mInfo:
field_mInfo->set_implicit_omit(); break;
case ALT_mr:
field_mr->set_implicit_omit(); break;
case ALT_mx:
field_mx->set_implicit_omit(); break;
case ALT_rd__null:
field_rd__null->set_implicit_omit(); break;
case ALT_ns:
field_ns->set_implicit_omit(); break;
case ALT_ptr:
field_ptr->set_implicit_omit(); break;
case ALT_soa:
field_soa->set_implicit_omit(); break;
case ALT_txt:
field_txt->set_implicit_omit(); break;
case ALT_a:
field_a->set_implicit_omit(); break;
case ALT_wks:
field_wks->set_implicit_omit(); break;
case ALT_srv:
field_srv->set_implicit_omit(); break;
case ALT_naptr:
field_naptr->set_implicit_omit(); break;
case ALT_aaaa:
field_aaaa->set_implicit_omit(); break;
case ALT_unsupported:
field_unsupported->set_implicit_omit(); break;
case ALT_undecodable:
field_undecodable->set_implicit_omit(); break;
default: break;
}
}

void ResourceData::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_cName:
field_cName->encode_text(text_buf);
break;
case ALT_hInfo:
field_hInfo->encode_text(text_buf);
break;
case ALT_mb:
field_mb->encode_text(text_buf);
break;
case ALT_md:
field_md->encode_text(text_buf);
break;
case ALT_mf:
field_mf->encode_text(text_buf);
break;
case ALT_mg:
field_mg->encode_text(text_buf);
break;
case ALT_mInfo:
field_mInfo->encode_text(text_buf);
break;
case ALT_mr:
field_mr->encode_text(text_buf);
break;
case ALT_mx:
field_mx->encode_text(text_buf);
break;
case ALT_rd__null:
field_rd__null->encode_text(text_buf);
break;
case ALT_ns:
field_ns->encode_text(text_buf);
break;
case ALT_ptr:
field_ptr->encode_text(text_buf);
break;
case ALT_soa:
field_soa->encode_text(text_buf);
break;
case ALT_txt:
field_txt->encode_text(text_buf);
break;
case ALT_a:
field_a->encode_text(text_buf);
break;
case ALT_wks:
field_wks->encode_text(text_buf);
break;
case ALT_srv:
field_srv->encode_text(text_buf);
break;
case ALT_naptr:
field_naptr->encode_text(text_buf);
break;
case ALT_aaaa:
field_aaaa->encode_text(text_buf);
break;
case ALT_unsupported:
field_unsupported->encode_text(text_buf);
break;
case ALT_undecodable:
field_undecodable->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @DNS_Types.ResourceData.");
}
}

void ResourceData::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_cName:
cName().decode_text(text_buf);
break;
case ALT_hInfo:
hInfo().decode_text(text_buf);
break;
case ALT_mb:
mb().decode_text(text_buf);
break;
case ALT_md:
md().decode_text(text_buf);
break;
case ALT_mf:
mf().decode_text(text_buf);
break;
case ALT_mg:
mg().decode_text(text_buf);
break;
case ALT_mInfo:
mInfo().decode_text(text_buf);
break;
case ALT_mr:
mr().decode_text(text_buf);
break;
case ALT_mx:
mx().decode_text(text_buf);
break;
case ALT_rd__null:
rd__null().decode_text(text_buf);
break;
case ALT_ns:
ns().decode_text(text_buf);
break;
case ALT_ptr:
ptr().decode_text(text_buf);
break;
case ALT_soa:
soa().decode_text(text_buf);
break;
case ALT_txt:
txt().decode_text(text_buf);
break;
case ALT_a:
a().decode_text(text_buf);
break;
case ALT_wks:
wks().decode_text(text_buf);
break;
case ALT_srv:
srv().decode_text(text_buf);
break;
case ALT_naptr:
naptr().decode_text(text_buf);
break;
case ALT_aaaa:
aaaa().decode_text(text_buf);
break;
case ALT_unsupported:
unsupported().decode_text(text_buf);
break;
case ALT_undecodable:
undecodable().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @DNS_Types.ResourceData.");
}
}

void ResourceData_template::copy_value(const ResourceData& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
single_value.field_cName = new CHARSTRING_template(other_value.cName());
break;
case ResourceData::ALT_hInfo:
single_value.field_hInfo = new RDataHInfo_template(other_value.hInfo());
break;
case ResourceData::ALT_mb:
single_value.field_mb = new CHARSTRING_template(other_value.mb());
break;
case ResourceData::ALT_md:
single_value.field_md = new CHARSTRING_template(other_value.md());
break;
case ResourceData::ALT_mf:
single_value.field_mf = new CHARSTRING_template(other_value.mf());
break;
case ResourceData::ALT_mg:
single_value.field_mg = new CHARSTRING_template(other_value.mg());
break;
case ResourceData::ALT_mInfo:
single_value.field_mInfo = new RDataMInfo_template(other_value.mInfo());
break;
case ResourceData::ALT_mr:
single_value.field_mr = new CHARSTRING_template(other_value.mr());
break;
case ResourceData::ALT_mx:
single_value.field_mx = new RDataMX_template(other_value.mx());
break;
case ResourceData::ALT_rd__null:
single_value.field_rd__null = new OCTETSTRING_template(other_value.rd__null());
break;
case ResourceData::ALT_ns:
single_value.field_ns = new CHARSTRING_template(other_value.ns());
break;
case ResourceData::ALT_ptr:
single_value.field_ptr = new CHARSTRING_template(other_value.ptr());
break;
case ResourceData::ALT_soa:
single_value.field_soa = new RDataSOA_template(other_value.soa());
break;
case ResourceData::ALT_txt:
single_value.field_txt = new RDataTXT_template(other_value.txt());
break;
case ResourceData::ALT_a:
single_value.field_a = new OCTETSTRING_template(other_value.a());
break;
case ResourceData::ALT_wks:
single_value.field_wks = new RDataWKS_template(other_value.wks());
break;
case ResourceData::ALT_srv:
single_value.field_srv = new RDataSRV_template(other_value.srv());
break;
case ResourceData::ALT_naptr:
single_value.field_naptr = new RDataNAPTR_template(other_value.naptr());
break;
case ResourceData::ALT_aaaa:
single_value.field_aaaa = new OCTETSTRING_template(other_value.aaaa());
break;
case ResourceData::ALT_unsupported:
single_value.field_unsupported = new OCTETSTRING_template(other_value.unsupported());
break;
case ResourceData::ALT_undecodable:
single_value.field_undecodable = new OCTETSTRING_template(other_value.undecodable());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @DNS_Types.ResourceData.");
}
set_selection(SPECIFIC_VALUE);
}

void ResourceData_template::copy_template(const ResourceData_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
single_value.field_cName = new CHARSTRING_template(*other_value.single_value.field_cName);
break;
case ResourceData::ALT_hInfo:
single_value.field_hInfo = new RDataHInfo_template(*other_value.single_value.field_hInfo);
break;
case ResourceData::ALT_mb:
single_value.field_mb = new CHARSTRING_template(*other_value.single_value.field_mb);
break;
case ResourceData::ALT_md:
single_value.field_md = new CHARSTRING_template(*other_value.single_value.field_md);
break;
case ResourceData::ALT_mf:
single_value.field_mf = new CHARSTRING_template(*other_value.single_value.field_mf);
break;
case ResourceData::ALT_mg:
single_value.field_mg = new CHARSTRING_template(*other_value.single_value.field_mg);
break;
case ResourceData::ALT_mInfo:
single_value.field_mInfo = new RDataMInfo_template(*other_value.single_value.field_mInfo);
break;
case ResourceData::ALT_mr:
single_value.field_mr = new CHARSTRING_template(*other_value.single_value.field_mr);
break;
case ResourceData::ALT_mx:
single_value.field_mx = new RDataMX_template(*other_value.single_value.field_mx);
break;
case ResourceData::ALT_rd__null:
single_value.field_rd__null = new OCTETSTRING_template(*other_value.single_value.field_rd__null);
break;
case ResourceData::ALT_ns:
single_value.field_ns = new CHARSTRING_template(*other_value.single_value.field_ns);
break;
case ResourceData::ALT_ptr:
single_value.field_ptr = new CHARSTRING_template(*other_value.single_value.field_ptr);
break;
case ResourceData::ALT_soa:
single_value.field_soa = new RDataSOA_template(*other_value.single_value.field_soa);
break;
case ResourceData::ALT_txt:
single_value.field_txt = new RDataTXT_template(*other_value.single_value.field_txt);
break;
case ResourceData::ALT_a:
single_value.field_a = new OCTETSTRING_template(*other_value.single_value.field_a);
break;
case ResourceData::ALT_wks:
single_value.field_wks = new RDataWKS_template(*other_value.single_value.field_wks);
break;
case ResourceData::ALT_srv:
single_value.field_srv = new RDataSRV_template(*other_value.single_value.field_srv);
break;
case ResourceData::ALT_naptr:
single_value.field_naptr = new RDataNAPTR_template(*other_value.single_value.field_naptr);
break;
case ResourceData::ALT_aaaa:
single_value.field_aaaa = new OCTETSTRING_template(*other_value.single_value.field_aaaa);
break;
case ResourceData::ALT_unsupported:
single_value.field_unsupported = new OCTETSTRING_template(*other_value.single_value.field_unsupported);
break;
case ResourceData::ALT_undecodable:
single_value.field_undecodable = new OCTETSTRING_template(*other_value.single_value.field_undecodable);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @DNS_Types.ResourceData.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ResourceData_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @DNS_Types.ResourceData.");
}
set_selection(other_value);
}

ResourceData_template::ResourceData_template()
{
}

ResourceData_template::ResourceData_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ResourceData_template::ResourceData_template(const ResourceData& other_value)
{
copy_value(other_value);
}

ResourceData_template::ResourceData_template(const OPTIONAL<ResourceData>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceData&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @DNS_Types.ResourceData from an unbound optional field.");
}
}

ResourceData_template::ResourceData_template(const ResourceData_template& other_value)
: Base_Template(){
copy_template(other_value);
}

ResourceData_template::~ResourceData_template()
{
clean_up();
}

void ResourceData_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
delete single_value.field_cName;
break;
case ResourceData::ALT_hInfo:
delete single_value.field_hInfo;
break;
case ResourceData::ALT_mb:
delete single_value.field_mb;
break;
case ResourceData::ALT_md:
delete single_value.field_md;
break;
case ResourceData::ALT_mf:
delete single_value.field_mf;
break;
case ResourceData::ALT_mg:
delete single_value.field_mg;
break;
case ResourceData::ALT_mInfo:
delete single_value.field_mInfo;
break;
case ResourceData::ALT_mr:
delete single_value.field_mr;
break;
case ResourceData::ALT_mx:
delete single_value.field_mx;
break;
case ResourceData::ALT_rd__null:
delete single_value.field_rd__null;
break;
case ResourceData::ALT_ns:
delete single_value.field_ns;
break;
case ResourceData::ALT_ptr:
delete single_value.field_ptr;
break;
case ResourceData::ALT_soa:
delete single_value.field_soa;
break;
case ResourceData::ALT_txt:
delete single_value.field_txt;
break;
case ResourceData::ALT_a:
delete single_value.field_a;
break;
case ResourceData::ALT_wks:
delete single_value.field_wks;
break;
case ResourceData::ALT_srv:
delete single_value.field_srv;
break;
case ResourceData::ALT_naptr:
delete single_value.field_naptr;
break;
case ResourceData::ALT_aaaa:
delete single_value.field_aaaa;
break;
case ResourceData::ALT_unsupported:
delete single_value.field_unsupported;
break;
case ResourceData::ALT_undecodable:
delete single_value.field_undecodable;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ResourceData_template& ResourceData_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ResourceData_template& ResourceData_template::operator=(const ResourceData& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ResourceData_template& ResourceData_template::operator=(const OPTIONAL<ResourceData>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceData&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @DNS_Types.ResourceData.");
}
return *this;
}

ResourceData_template& ResourceData_template::operator=(const ResourceData_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ResourceData_template::match(const ResourceData& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
ResourceData::union_selection_type value_selection = other_value.get_selection();
if (value_selection == ResourceData::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case ResourceData::ALT_cName:
return single_value.field_cName->match(other_value.cName());
case ResourceData::ALT_hInfo:
return single_value.field_hInfo->match(other_value.hInfo());
case ResourceData::ALT_mb:
return single_value.field_mb->match(other_value.mb());
case ResourceData::ALT_md:
return single_value.field_md->match(other_value.md());
case ResourceData::ALT_mf:
return single_value.field_mf->match(other_value.mf());
case ResourceData::ALT_mg:
return single_value.field_mg->match(other_value.mg());
case ResourceData::ALT_mInfo:
return single_value.field_mInfo->match(other_value.mInfo());
case ResourceData::ALT_mr:
return single_value.field_mr->match(other_value.mr());
case ResourceData::ALT_mx:
return single_value.field_mx->match(other_value.mx());
case ResourceData::ALT_rd__null:
return single_value.field_rd__null->match(other_value.rd__null());
case ResourceData::ALT_ns:
return single_value.field_ns->match(other_value.ns());
case ResourceData::ALT_ptr:
return single_value.field_ptr->match(other_value.ptr());
case ResourceData::ALT_soa:
return single_value.field_soa->match(other_value.soa());
case ResourceData::ALT_txt:
return single_value.field_txt->match(other_value.txt());
case ResourceData::ALT_a:
return single_value.field_a->match(other_value.a());
case ResourceData::ALT_wks:
return single_value.field_wks->match(other_value.wks());
case ResourceData::ALT_srv:
return single_value.field_srv->match(other_value.srv());
case ResourceData::ALT_naptr:
return single_value.field_naptr->match(other_value.naptr());
case ResourceData::ALT_aaaa:
return single_value.field_aaaa->match(other_value.aaaa());
case ResourceData::ALT_unsupported:
return single_value.field_unsupported->match(other_value.unsupported());
case ResourceData::ALT_undecodable:
return single_value.field_undecodable->match(other_value.undecodable());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @DNS_Types.ResourceData.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @DNS_Types.ResourceData.");
}
return FALSE;
}

boolean ResourceData_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
return single_value.field_cName->is_value();
case ResourceData::ALT_hInfo:
return single_value.field_hInfo->is_value();
case ResourceData::ALT_mb:
return single_value.field_mb->is_value();
case ResourceData::ALT_md:
return single_value.field_md->is_value();
case ResourceData::ALT_mf:
return single_value.field_mf->is_value();
case ResourceData::ALT_mg:
return single_value.field_mg->is_value();
case ResourceData::ALT_mInfo:
return single_value.field_mInfo->is_value();
case ResourceData::ALT_mr:
return single_value.field_mr->is_value();
case ResourceData::ALT_mx:
return single_value.field_mx->is_value();
case ResourceData::ALT_rd__null:
return single_value.field_rd__null->is_value();
case ResourceData::ALT_ns:
return single_value.field_ns->is_value();
case ResourceData::ALT_ptr:
return single_value.field_ptr->is_value();
case ResourceData::ALT_soa:
return single_value.field_soa->is_value();
case ResourceData::ALT_txt:
return single_value.field_txt->is_value();
case ResourceData::ALT_a:
return single_value.field_a->is_value();
case ResourceData::ALT_wks:
return single_value.field_wks->is_value();
case ResourceData::ALT_srv:
return single_value.field_srv->is_value();
case ResourceData::ALT_naptr:
return single_value.field_naptr->is_value();
case ResourceData::ALT_aaaa:
return single_value.field_aaaa->is_value();
case ResourceData::ALT_unsupported:
return single_value.field_unsupported->is_value();
case ResourceData::ALT_undecodable:
return single_value.field_undecodable->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @DNS_Types.ResourceData.");
}
}

ResourceData ResourceData_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @DNS_Types.ResourceData.");
ResourceData ret_val;
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
ret_val.cName() = single_value.field_cName->valueof();
break;
case ResourceData::ALT_hInfo:
ret_val.hInfo() = single_value.field_hInfo->valueof();
break;
case ResourceData::ALT_mb:
ret_val.mb() = single_value.field_mb->valueof();
break;
case ResourceData::ALT_md:
ret_val.md() = single_value.field_md->valueof();
break;
case ResourceData::ALT_mf:
ret_val.mf() = single_value.field_mf->valueof();
break;
case ResourceData::ALT_mg:
ret_val.mg() = single_value.field_mg->valueof();
break;
case ResourceData::ALT_mInfo:
ret_val.mInfo() = single_value.field_mInfo->valueof();
break;
case ResourceData::ALT_mr:
ret_val.mr() = single_value.field_mr->valueof();
break;
case ResourceData::ALT_mx:
ret_val.mx() = single_value.field_mx->valueof();
break;
case ResourceData::ALT_rd__null:
ret_val.rd__null() = single_value.field_rd__null->valueof();
break;
case ResourceData::ALT_ns:
ret_val.ns() = single_value.field_ns->valueof();
break;
case ResourceData::ALT_ptr:
ret_val.ptr() = single_value.field_ptr->valueof();
break;
case ResourceData::ALT_soa:
ret_val.soa() = single_value.field_soa->valueof();
break;
case ResourceData::ALT_txt:
ret_val.txt() = single_value.field_txt->valueof();
break;
case ResourceData::ALT_a:
ret_val.a() = single_value.field_a->valueof();
break;
case ResourceData::ALT_wks:
ret_val.wks() = single_value.field_wks->valueof();
break;
case ResourceData::ALT_srv:
ret_val.srv() = single_value.field_srv->valueof();
break;
case ResourceData::ALT_naptr:
ret_val.naptr() = single_value.field_naptr->valueof();
break;
case ResourceData::ALT_aaaa:
ret_val.aaaa() = single_value.field_aaaa->valueof();
break;
case ResourceData::ALT_unsupported:
ret_val.unsupported() = single_value.field_unsupported->valueof();
break;
case ResourceData::ALT_undecodable:
ret_val.undecodable() = single_value.field_undecodable->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @DNS_Types.ResourceData.");
}
return ret_val;
}

ResourceData_template& ResourceData_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @DNS_Types.ResourceData.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @DNS_Types.ResourceData.");
return value_list.list_value[list_index];
}
void ResourceData_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @DNS_Types.ResourceData.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ResourceData_template[list_length];
}

CHARSTRING_template& ResourceData_template::cName()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_cName) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_cName = new CHARSTRING_template(ANY_VALUE);
else single_value.field_cName = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_cName;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_cName;
}

const CHARSTRING_template& ResourceData_template::cName() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field cName in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_cName) TTCN_error("Accessing non-selected field cName in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_cName;
}

RDataHInfo_template& ResourceData_template::hInfo()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_hInfo) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_hInfo = new RDataHInfo_template(ANY_VALUE);
else single_value.field_hInfo = new RDataHInfo_template;
single_value.union_selection = ResourceData::ALT_hInfo;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_hInfo;
}

const RDataHInfo_template& ResourceData_template::hInfo() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field hInfo in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_hInfo) TTCN_error("Accessing non-selected field hInfo in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_hInfo;
}

CHARSTRING_template& ResourceData_template::mb()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mb) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mb = new CHARSTRING_template(ANY_VALUE);
else single_value.field_mb = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_mb;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mb;
}

const CHARSTRING_template& ResourceData_template::mb() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mb in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mb) TTCN_error("Accessing non-selected field mb in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mb;
}

CHARSTRING_template& ResourceData_template::md()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_md) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_md = new CHARSTRING_template(ANY_VALUE);
else single_value.field_md = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_md;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_md;
}

const CHARSTRING_template& ResourceData_template::md() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field md in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_md) TTCN_error("Accessing non-selected field md in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_md;
}

CHARSTRING_template& ResourceData_template::mf()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mf) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mf = new CHARSTRING_template(ANY_VALUE);
else single_value.field_mf = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_mf;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mf;
}

const CHARSTRING_template& ResourceData_template::mf() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mf in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mf) TTCN_error("Accessing non-selected field mf in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mf;
}

CHARSTRING_template& ResourceData_template::mg()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mg) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mg = new CHARSTRING_template(ANY_VALUE);
else single_value.field_mg = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_mg;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mg;
}

const CHARSTRING_template& ResourceData_template::mg() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mg in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mg) TTCN_error("Accessing non-selected field mg in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mg;
}

RDataMInfo_template& ResourceData_template::mInfo()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mInfo) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mInfo = new RDataMInfo_template(ANY_VALUE);
else single_value.field_mInfo = new RDataMInfo_template;
single_value.union_selection = ResourceData::ALT_mInfo;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mInfo;
}

const RDataMInfo_template& ResourceData_template::mInfo() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mInfo in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mInfo) TTCN_error("Accessing non-selected field mInfo in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mInfo;
}

CHARSTRING_template& ResourceData_template::mr()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mr) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mr = new CHARSTRING_template(ANY_VALUE);
else single_value.field_mr = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_mr;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mr;
}

const CHARSTRING_template& ResourceData_template::mr() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mr in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mr) TTCN_error("Accessing non-selected field mr in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mr;
}

RDataMX_template& ResourceData_template::mx()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_mx) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_mx = new RDataMX_template(ANY_VALUE);
else single_value.field_mx = new RDataMX_template;
single_value.union_selection = ResourceData::ALT_mx;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_mx;
}

const RDataMX_template& ResourceData_template::mx() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field mx in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_mx) TTCN_error("Accessing non-selected field mx in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_mx;
}

OCTETSTRING_template& ResourceData_template::rd__null()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_rd__null) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_rd__null = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_rd__null = new OCTETSTRING_template;
single_value.union_selection = ResourceData::ALT_rd__null;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_rd__null;
}

const OCTETSTRING_template& ResourceData_template::rd__null() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field rd_null in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_rd__null) TTCN_error("Accessing non-selected field rd_null in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_rd__null;
}

CHARSTRING_template& ResourceData_template::ns()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_ns) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_ns = new CHARSTRING_template(ANY_VALUE);
else single_value.field_ns = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_ns;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_ns;
}

const CHARSTRING_template& ResourceData_template::ns() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field ns in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_ns) TTCN_error("Accessing non-selected field ns in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_ns;
}

CHARSTRING_template& ResourceData_template::ptr()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_ptr) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_ptr = new CHARSTRING_template(ANY_VALUE);
else single_value.field_ptr = new CHARSTRING_template;
single_value.union_selection = ResourceData::ALT_ptr;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_ptr;
}

const CHARSTRING_template& ResourceData_template::ptr() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field ptr in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_ptr) TTCN_error("Accessing non-selected field ptr in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_ptr;
}

RDataSOA_template& ResourceData_template::soa()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_soa) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_soa = new RDataSOA_template(ANY_VALUE);
else single_value.field_soa = new RDataSOA_template;
single_value.union_selection = ResourceData::ALT_soa;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_soa;
}

const RDataSOA_template& ResourceData_template::soa() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field soa in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_soa) TTCN_error("Accessing non-selected field soa in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_soa;
}

RDataTXT_template& ResourceData_template::txt()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_txt) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_txt = new RDataTXT_template(ANY_VALUE);
else single_value.field_txt = new RDataTXT_template;
single_value.union_selection = ResourceData::ALT_txt;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_txt;
}

const RDataTXT_template& ResourceData_template::txt() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field txt in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_txt) TTCN_error("Accessing non-selected field txt in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_txt;
}

OCTETSTRING_template& ResourceData_template::a()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_a) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_a = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_a = new OCTETSTRING_template;
single_value.union_selection = ResourceData::ALT_a;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_a;
}

const OCTETSTRING_template& ResourceData_template::a() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field a in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_a) TTCN_error("Accessing non-selected field a in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_a;
}

RDataWKS_template& ResourceData_template::wks()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_wks) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_wks = new RDataWKS_template(ANY_VALUE);
else single_value.field_wks = new RDataWKS_template;
single_value.union_selection = ResourceData::ALT_wks;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_wks;
}

const RDataWKS_template& ResourceData_template::wks() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field wks in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_wks) TTCN_error("Accessing non-selected field wks in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_wks;
}

RDataSRV_template& ResourceData_template::srv()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_srv) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_srv = new RDataSRV_template(ANY_VALUE);
else single_value.field_srv = new RDataSRV_template;
single_value.union_selection = ResourceData::ALT_srv;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_srv;
}

const RDataSRV_template& ResourceData_template::srv() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field srv in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_srv) TTCN_error("Accessing non-selected field srv in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_srv;
}

RDataNAPTR_template& ResourceData_template::naptr()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_naptr) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_naptr = new RDataNAPTR_template(ANY_VALUE);
else single_value.field_naptr = new RDataNAPTR_template;
single_value.union_selection = ResourceData::ALT_naptr;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_naptr;
}

const RDataNAPTR_template& ResourceData_template::naptr() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field naptr in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_naptr) TTCN_error("Accessing non-selected field naptr in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_naptr;
}

OCTETSTRING_template& ResourceData_template::aaaa()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_aaaa) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_aaaa = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_aaaa = new OCTETSTRING_template;
single_value.union_selection = ResourceData::ALT_aaaa;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_aaaa;
}

const OCTETSTRING_template& ResourceData_template::aaaa() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field aaaa in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_aaaa) TTCN_error("Accessing non-selected field aaaa in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_aaaa;
}

OCTETSTRING_template& ResourceData_template::unsupported()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_unsupported) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_unsupported = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_unsupported = new OCTETSTRING_template;
single_value.union_selection = ResourceData::ALT_unsupported;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_unsupported;
}

const OCTETSTRING_template& ResourceData_template::unsupported() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field unsupported in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_unsupported) TTCN_error("Accessing non-selected field unsupported in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_unsupported;
}

OCTETSTRING_template& ResourceData_template::undecodable()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != ResourceData::ALT_undecodable) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_undecodable = new OCTETSTRING_template(ANY_VALUE);
else single_value.field_undecodable = new OCTETSTRING_template;
single_value.union_selection = ResourceData::ALT_undecodable;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_undecodable;
}

const OCTETSTRING_template& ResourceData_template::undecodable() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field undecodable in a non-specific template of union type @DNS_Types.ResourceData.");
if (single_value.union_selection != ResourceData::ALT_undecodable) TTCN_error("Accessing non-selected field undecodable in a template of union type @DNS_Types.ResourceData.");
return *single_value.field_undecodable;
}

boolean ResourceData_template::ischosen(ResourceData::union_selection_type checked_selection) const
{
if (checked_selection == ResourceData::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @DNS_Types.ResourceData.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == ResourceData::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @DNS_Types.ResourceData.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @DNS_Types.ResourceData containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @DNS_Types.ResourceData, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @DNS_Types.ResourceData");
}
return FALSE;
}

void ResourceData_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
TTCN_Logger::log_event_str("{ cName := ");
single_value.field_cName->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_hInfo:
TTCN_Logger::log_event_str("{ hInfo := ");
single_value.field_hInfo->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mb:
TTCN_Logger::log_event_str("{ mb := ");
single_value.field_mb->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_md:
TTCN_Logger::log_event_str("{ md := ");
single_value.field_md->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mf:
TTCN_Logger::log_event_str("{ mf := ");
single_value.field_mf->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mg:
TTCN_Logger::log_event_str("{ mg := ");
single_value.field_mg->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mInfo:
TTCN_Logger::log_event_str("{ mInfo := ");
single_value.field_mInfo->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mr:
TTCN_Logger::log_event_str("{ mr := ");
single_value.field_mr->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_mx:
TTCN_Logger::log_event_str("{ mx := ");
single_value.field_mx->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_rd__null:
TTCN_Logger::log_event_str("{ rd_null := ");
single_value.field_rd__null->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_ns:
TTCN_Logger::log_event_str("{ ns := ");
single_value.field_ns->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_ptr:
TTCN_Logger::log_event_str("{ ptr := ");
single_value.field_ptr->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_soa:
TTCN_Logger::log_event_str("{ soa := ");
single_value.field_soa->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_txt:
TTCN_Logger::log_event_str("{ txt := ");
single_value.field_txt->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_a:
TTCN_Logger::log_event_str("{ a := ");
single_value.field_a->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_wks:
TTCN_Logger::log_event_str("{ wks := ");
single_value.field_wks->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_srv:
TTCN_Logger::log_event_str("{ srv := ");
single_value.field_srv->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_naptr:
TTCN_Logger::log_event_str("{ naptr := ");
single_value.field_naptr->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_aaaa:
TTCN_Logger::log_event_str("{ aaaa := ");
single_value.field_aaaa->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_unsupported:
TTCN_Logger::log_event_str("{ unsupported := ");
single_value.field_unsupported->log();
TTCN_Logger::log_event_str(" }");
break;
case ResourceData::ALT_undecodable:
TTCN_Logger::log_event_str("{ undecodable := ");
single_value.field_undecodable->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ResourceData_template::log_match(const ResourceData& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".cName");
single_value.field_cName->log_match(match_value.cName());
} else {
TTCN_Logger::log_event_str("{ cName := ");
single_value.field_cName->log_match(match_value.cName());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_hInfo:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".hInfo");
single_value.field_hInfo->log_match(match_value.hInfo());
} else {
TTCN_Logger::log_event_str("{ hInfo := ");
single_value.field_hInfo->log_match(match_value.hInfo());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mb:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mb");
single_value.field_mb->log_match(match_value.mb());
} else {
TTCN_Logger::log_event_str("{ mb := ");
single_value.field_mb->log_match(match_value.mb());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_md:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".md");
single_value.field_md->log_match(match_value.md());
} else {
TTCN_Logger::log_event_str("{ md := ");
single_value.field_md->log_match(match_value.md());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mf:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mf");
single_value.field_mf->log_match(match_value.mf());
} else {
TTCN_Logger::log_event_str("{ mf := ");
single_value.field_mf->log_match(match_value.mf());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mg:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mg");
single_value.field_mg->log_match(match_value.mg());
} else {
TTCN_Logger::log_event_str("{ mg := ");
single_value.field_mg->log_match(match_value.mg());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mInfo:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mInfo");
single_value.field_mInfo->log_match(match_value.mInfo());
} else {
TTCN_Logger::log_event_str("{ mInfo := ");
single_value.field_mInfo->log_match(match_value.mInfo());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mr:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mr");
single_value.field_mr->log_match(match_value.mr());
} else {
TTCN_Logger::log_event_str("{ mr := ");
single_value.field_mr->log_match(match_value.mr());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_mx:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".mx");
single_value.field_mx->log_match(match_value.mx());
} else {
TTCN_Logger::log_event_str("{ mx := ");
single_value.field_mx->log_match(match_value.mx());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_rd__null:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".rd_null");
single_value.field_rd__null->log_match(match_value.rd__null());
} else {
TTCN_Logger::log_event_str("{ rd_null := ");
single_value.field_rd__null->log_match(match_value.rd__null());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_ns:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".ns");
single_value.field_ns->log_match(match_value.ns());
} else {
TTCN_Logger::log_event_str("{ ns := ");
single_value.field_ns->log_match(match_value.ns());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_ptr:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".ptr");
single_value.field_ptr->log_match(match_value.ptr());
} else {
TTCN_Logger::log_event_str("{ ptr := ");
single_value.field_ptr->log_match(match_value.ptr());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_soa:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".soa");
single_value.field_soa->log_match(match_value.soa());
} else {
TTCN_Logger::log_event_str("{ soa := ");
single_value.field_soa->log_match(match_value.soa());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_txt:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".txt");
single_value.field_txt->log_match(match_value.txt());
} else {
TTCN_Logger::log_event_str("{ txt := ");
single_value.field_txt->log_match(match_value.txt());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_a:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".a");
single_value.field_a->log_match(match_value.a());
} else {
TTCN_Logger::log_event_str("{ a := ");
single_value.field_a->log_match(match_value.a());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_wks:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".wks");
single_value.field_wks->log_match(match_value.wks());
} else {
TTCN_Logger::log_event_str("{ wks := ");
single_value.field_wks->log_match(match_value.wks());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_srv:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".srv");
single_value.field_srv->log_match(match_value.srv());
} else {
TTCN_Logger::log_event_str("{ srv := ");
single_value.field_srv->log_match(match_value.srv());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_naptr:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".naptr");
single_value.field_naptr->log_match(match_value.naptr());
} else {
TTCN_Logger::log_event_str("{ naptr := ");
single_value.field_naptr->log_match(match_value.naptr());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_aaaa:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".aaaa");
single_value.field_aaaa->log_match(match_value.aaaa());
} else {
TTCN_Logger::log_event_str("{ aaaa := ");
single_value.field_aaaa->log_match(match_value.aaaa());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_unsupported:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".unsupported");
single_value.field_unsupported->log_match(match_value.unsupported());
} else {
TTCN_Logger::log_event_str("{ unsupported := ");
single_value.field_unsupported->log_match(match_value.unsupported());
TTCN_Logger::log_event_str(" }");
}
break;
case ResourceData::ALT_undecodable:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".undecodable");
single_value.field_undecodable->log_match(match_value.undecodable());
} else {
TTCN_Logger::log_event_str("{ undecodable := ");
single_value.field_undecodable->log_match(match_value.undecodable());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ResourceData_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
single_value.field_cName->encode_text(text_buf);
break;
case ResourceData::ALT_hInfo:
single_value.field_hInfo->encode_text(text_buf);
break;
case ResourceData::ALT_mb:
single_value.field_mb->encode_text(text_buf);
break;
case ResourceData::ALT_md:
single_value.field_md->encode_text(text_buf);
break;
case ResourceData::ALT_mf:
single_value.field_mf->encode_text(text_buf);
break;
case ResourceData::ALT_mg:
single_value.field_mg->encode_text(text_buf);
break;
case ResourceData::ALT_mInfo:
single_value.field_mInfo->encode_text(text_buf);
break;
case ResourceData::ALT_mr:
single_value.field_mr->encode_text(text_buf);
break;
case ResourceData::ALT_mx:
single_value.field_mx->encode_text(text_buf);
break;
case ResourceData::ALT_rd__null:
single_value.field_rd__null->encode_text(text_buf);
break;
case ResourceData::ALT_ns:
single_value.field_ns->encode_text(text_buf);
break;
case ResourceData::ALT_ptr:
single_value.field_ptr->encode_text(text_buf);
break;
case ResourceData::ALT_soa:
single_value.field_soa->encode_text(text_buf);
break;
case ResourceData::ALT_txt:
single_value.field_txt->encode_text(text_buf);
break;
case ResourceData::ALT_a:
single_value.field_a->encode_text(text_buf);
break;
case ResourceData::ALT_wks:
single_value.field_wks->encode_text(text_buf);
break;
case ResourceData::ALT_srv:
single_value.field_srv->encode_text(text_buf);
break;
case ResourceData::ALT_naptr:
single_value.field_naptr->encode_text(text_buf);
break;
case ResourceData::ALT_aaaa:
single_value.field_aaaa->encode_text(text_buf);
break;
case ResourceData::ALT_unsupported:
single_value.field_unsupported->encode_text(text_buf);
break;
case ResourceData::ALT_undecodable:
single_value.field_undecodable->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @DNS_Types.ResourceData.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @DNS_Types.ResourceData.");
}
}

void ResourceData_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = ResourceData::UNBOUND_VALUE;
ResourceData::union_selection_type new_selection = (ResourceData::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case ResourceData::ALT_cName:
single_value.field_cName = new CHARSTRING_template;
single_value.field_cName->decode_text(text_buf);
break;
case ResourceData::ALT_hInfo:
single_value.field_hInfo = new RDataHInfo_template;
single_value.field_hInfo->decode_text(text_buf);
break;
case ResourceData::ALT_mb:
single_value.field_mb = new CHARSTRING_template;
single_value.field_mb->decode_text(text_buf);
break;
case ResourceData::ALT_md:
single_value.field_md = new CHARSTRING_template;
single_value.field_md->decode_text(text_buf);
break;
case ResourceData::ALT_mf:
single_value.field_mf = new CHARSTRING_template;
single_value.field_mf->decode_text(text_buf);
break;
case ResourceData::ALT_mg:
single_value.field_mg = new CHARSTRING_template;
single_value.field_mg->decode_text(text_buf);
break;
case ResourceData::ALT_mInfo:
single_value.field_mInfo = new RDataMInfo_template;
single_value.field_mInfo->decode_text(text_buf);
break;
case ResourceData::ALT_mr:
single_value.field_mr = new CHARSTRING_template;
single_value.field_mr->decode_text(text_buf);
break;
case ResourceData::ALT_mx:
single_value.field_mx = new RDataMX_template;
single_value.field_mx->decode_text(text_buf);
break;
case ResourceData::ALT_rd__null:
single_value.field_rd__null = new OCTETSTRING_template;
single_value.field_rd__null->decode_text(text_buf);
break;
case ResourceData::ALT_ns:
single_value.field_ns = new CHARSTRING_template;
single_value.field_ns->decode_text(text_buf);
break;
case ResourceData::ALT_ptr:
single_value.field_ptr = new CHARSTRING_template;
single_value.field_ptr->decode_text(text_buf);
break;
case ResourceData::ALT_soa:
single_value.field_soa = new RDataSOA_template;
single_value.field_soa->decode_text(text_buf);
break;
case ResourceData::ALT_txt:
single_value.field_txt = new RDataTXT_template;
single_value.field_txt->decode_text(text_buf);
break;
case ResourceData::ALT_a:
single_value.field_a = new OCTETSTRING_template;
single_value.field_a->decode_text(text_buf);
break;
case ResourceData::ALT_wks:
single_value.field_wks = new RDataWKS_template;
single_value.field_wks->decode_text(text_buf);
break;
case ResourceData::ALT_srv:
single_value.field_srv = new RDataSRV_template;
single_value.field_srv->decode_text(text_buf);
break;
case ResourceData::ALT_naptr:
single_value.field_naptr = new RDataNAPTR_template;
single_value.field_naptr->decode_text(text_buf);
break;
case ResourceData::ALT_aaaa:
single_value.field_aaaa = new OCTETSTRING_template;
single_value.field_aaaa->decode_text(text_buf);
break;
case ResourceData::ALT_unsupported:
single_value.field_unsupported = new OCTETSTRING_template;
single_value.field_unsupported->decode_text(text_buf);
break;
case ResourceData::ALT_undecodable:
single_value.field_undecodable = new OCTETSTRING_template;
single_value.field_undecodable->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @DNS_Types.ResourceData.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ResourceData_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @DNS_Types.ResourceData.");
}
}

boolean ResourceData_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean ResourceData_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void ResourceData_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@DNS_Types.ResourceData'");
    }
    if (strcmp("cName", param_field) == 0) {
      cName().set_param(param);
      return;
    } else if (strcmp("hInfo", param_field) == 0) {
      hInfo().set_param(param);
      return;
    } else if (strcmp("mb", param_field) == 0) {
      mb().set_param(param);
      return;
    } else if (strcmp("md", param_field) == 0) {
      md().set_param(param);
      return;
    } else if (strcmp("mf", param_field) == 0) {
      mf().set_param(param);
      return;
    } else if (strcmp("mg", param_field) == 0) {
      mg().set_param(param);
      return;
    } else if (strcmp("mInfo", param_field) == 0) {
      mInfo().set_param(param);
      return;
    } else if (strcmp("mr", param_field) == 0) {
      mr().set_param(param);
      return;
    } else if (strcmp("mx", param_field) == 0) {
      mx().set_param(param);
      return;
    } else if (strcmp("rd_null", param_field) == 0) {
      rd__null().set_param(param);
      return;
    } else if (strcmp("ns", param_field) == 0) {
      ns().set_param(param);
      return;
    } else if (strcmp("ptr", param_field) == 0) {
      ptr().set_param(param);
      return;
    } else if (strcmp("soa", param_field) == 0) {
      soa().set_param(param);
      return;
    } else if (strcmp("txt", param_field) == 0) {
      txt().set_param(param);
      return;
    } else if (strcmp("a", param_field) == 0) {
      a().set_param(param);
      return;
    } else if (strcmp("wks", param_field) == 0) {
      wks().set_param(param);
      return;
    } else if (strcmp("srv", param_field) == 0) {
      srv().set_param(param);
      return;
    } else if (strcmp("naptr", param_field) == 0) {
      naptr().set_param(param);
      return;
    } else if (strcmp("aaaa", param_field) == 0) {
      aaaa().set_param(param);
      return;
    } else if (strcmp("unsupported", param_field) == 0) {
      unsupported().set_param(param);
      return;
    } else if (strcmp("undecodable", param_field) == 0) {
      undecodable().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@DNS_Types.ResourceData'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@DNS_Types.ResourceData");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "cName")) {
      cName().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "hInfo")) {
      hInfo().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mb")) {
      mb().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "md")) {
      md().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mf")) {
      mf().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mg")) {
      mg().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mInfo")) {
      mInfo().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mr")) {
      mr().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "mx")) {
      mx().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "rd_null")) {
      rd__null().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "ns")) {
      ns().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "ptr")) {
      ptr().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "soa")) {
      soa().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "txt")) {
      txt().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "a")) {
      a().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "wks")) {
      wks().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "srv")) {
      srv().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "naptr")) {
      naptr().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "aaaa")) {
      aaaa().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "unsupported")) {
      unsupported().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "undecodable")) {
      undecodable().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @DNS_Types.ResourceData.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@DNS_Types.ResourceData");
  }
  is_ifpresent = param.get_ifpresent();
}

void ResourceData_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case ResourceData::ALT_cName:
single_value.field_cName->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_hInfo:
single_value.field_hInfo->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mb:
single_value.field_mb->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_md:
single_value.field_md->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mf:
single_value.field_mf->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mg:
single_value.field_mg->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mInfo:
single_value.field_mInfo->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mr:
single_value.field_mr->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_mx:
single_value.field_mx->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_rd__null:
single_value.field_rd__null->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_ns:
single_value.field_ns->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_ptr:
single_value.field_ptr->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_soa:
single_value.field_soa->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_txt:
single_value.field_txt->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_a:
single_value.field_a->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_wks:
single_value.field_wks->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_srv:
single_value.field_srv->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_naptr:
single_value.field_naptr->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_aaaa:
single_value.field_aaaa->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_unsupported:
single_value.field_unsupported->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
case ResourceData::ALT_undecodable:
single_value.field_undecodable->check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceData");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @DNS_Types.ResourceData.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.ResourceData");
}

RDataHInfo::RDataHInfo()
{
  bound_flag = FALSE;
}

RDataHInfo::RDataHInfo(const CHARSTRING& par_cpu,
    const CHARSTRING& par_os)
  :   field_cpu(par_cpu),
  field_os(par_os)
{
  bound_flag = TRUE;
}

RDataHInfo::RDataHInfo(const RDataHInfo& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataHInfo.");
bound_flag = TRUE;
if (other_value.cpu().is_bound()) field_cpu = other_value.cpu();
else field_cpu.clean_up();
if (other_value.os().is_bound()) field_os = other_value.os();
else field_os.clean_up();
}

void RDataHInfo::clean_up()
{
field_cpu.clean_up();
field_os.clean_up();
bound_flag = FALSE;
}

RDataHInfo& RDataHInfo::operator=(const RDataHInfo& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataHInfo.");
  bound_flag = TRUE;
  if (other_value.cpu().is_bound()) field_cpu = other_value.cpu();
  else field_cpu.clean_up();
  if (other_value.os().is_bound()) field_os = other_value.os();
  else field_os.clean_up();
}
return *this;
}

boolean RDataHInfo::operator==(const RDataHInfo& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_cpu==other_value.field_cpu
  && field_os==other_value.field_os;
}

boolean RDataHInfo::is_bound() const
{
if (bound_flag) return TRUE;
if(field_cpu.is_bound()) return TRUE;
if(field_os.is_bound()) return TRUE;
return FALSE;
}
boolean RDataHInfo::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_cpu.is_value()) return FALSE;
if(!field_os.is_value()) return FALSE;
return TRUE;
}
int RDataHInfo::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataHInfo");
  return 2;
}

void RDataHInfo::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ cpu := ");
field_cpu.log();
TTCN_Logger::log_event_str(", os := ");
field_os.log();
TTCN_Logger::log_event_str(" }");
}

void RDataHInfo::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataHInfo'");
    }
    if (strcmp("cpu", param_field) == 0) {
      cpu().set_param(param);
      return;
    } else if (strcmp("os", param_field) == 0) {
      os().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataHInfo'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataHInfo has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cpu().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataHInfo: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataHInfo");
  }
}

void RDataHInfo::set_implicit_omit()
{
if (cpu().is_bound()) cpu().set_implicit_omit();
if (os().is_bound()) os().set_implicit_omit();
}

void RDataHInfo::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataHInfo.");
field_cpu.encode_text(text_buf);
field_os.encode_text(text_buf);
}

void RDataHInfo::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_cpu.decode_text(text_buf);
field_os.decode_text(text_buf);
}

struct RDataHInfo_template::single_value_struct {
CHARSTRING_template field_cpu;
CHARSTRING_template field_os;
};

void RDataHInfo_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_cpu = ANY_VALUE;
single_value->field_os = ANY_VALUE;
}
}
}

void RDataHInfo_template::copy_value(const RDataHInfo& other_value)
{
single_value = new single_value_struct;
if (other_value.cpu().is_bound()) {
  single_value->field_cpu = other_value.cpu();
} else {
  single_value->field_cpu.clean_up();
}
if (other_value.os().is_bound()) {
  single_value->field_os = other_value.os();
} else {
  single_value->field_os.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataHInfo_template::copy_template(const RDataHInfo_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.cpu().get_selection()) {
single_value->field_cpu = other_value.cpu();
} else {
single_value->field_cpu.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.os().get_selection()) {
single_value->field_os = other_value.os();
} else {
single_value->field_os.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataHInfo_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataHInfo.");
break;
}
set_selection(other_value);
}

RDataHInfo_template::RDataHInfo_template()
{
}

RDataHInfo_template::RDataHInfo_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataHInfo_template::RDataHInfo_template(const RDataHInfo& other_value)
{
copy_value(other_value);
}

RDataHInfo_template::RDataHInfo_template(const OPTIONAL<RDataHInfo>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataHInfo&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataHInfo from an unbound optional field.");
}
}

RDataHInfo_template::RDataHInfo_template(const RDataHInfo_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataHInfo_template::~RDataHInfo_template()
{
clean_up();
}

RDataHInfo_template& RDataHInfo_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataHInfo_template& RDataHInfo_template::operator=(const RDataHInfo& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataHInfo_template& RDataHInfo_template::operator=(const OPTIONAL<RDataHInfo>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataHInfo&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataHInfo.");
}
return *this;
}

RDataHInfo_template& RDataHInfo_template::operator=(const RDataHInfo_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataHInfo_template::match(const RDataHInfo& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.cpu().is_bound()) return FALSE;
if(!single_value->field_cpu.match(other_value.cpu()))return FALSE;
if(!other_value.os().is_bound()) return FALSE;
if(!single_value->field_os.match(other_value.os()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataHInfo.");
}
return FALSE;
}

boolean RDataHInfo_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_cpu.is_bound()) return TRUE;
if (single_value->field_os.is_bound()) return TRUE;
return FALSE;
}

boolean RDataHInfo_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_cpu.is_value()) return FALSE;
if (!single_value->field_os.is_value()) return FALSE;
return TRUE;
}

void RDataHInfo_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataHInfo RDataHInfo_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataHInfo.");
RDataHInfo ret_val;
if (single_value->field_cpu.is_bound()) {
ret_val.cpu() = single_value->field_cpu.valueof();
}
if (single_value->field_os.is_bound()) {
ret_val.os() = single_value->field_os.valueof();
}
return ret_val;
}

void RDataHInfo_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataHInfo.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataHInfo_template[list_length];
}

RDataHInfo_template& RDataHInfo_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataHInfo.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataHInfo.");
return value_list.list_value[list_index];
}

CHARSTRING_template& RDataHInfo_template::cpu()
{
set_specific();
return single_value->field_cpu;
}

const CHARSTRING_template& RDataHInfo_template::cpu() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field cpu of a non-specific template of type @DNS_Types.RDataHInfo.");
return single_value->field_cpu;
}

CHARSTRING_template& RDataHInfo_template::os()
{
set_specific();
return single_value->field_os;
}

const CHARSTRING_template& RDataHInfo_template::os() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field os of a non-specific template of type @DNS_Types.RDataHInfo.");
return single_value->field_os;
}

int RDataHInfo_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataHInfo containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataHInfo.");
  }
  return 0;
}

void RDataHInfo_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ cpu := ");
single_value->field_cpu.log();
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataHInfo_template::log_match(const RDataHInfo& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_cpu.match(match_value.cpu())){
TTCN_Logger::log_logmatch_info(".cpu");
single_value->field_cpu.log_match(match_value.cpu());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_os.match(match_value.os())){
TTCN_Logger::log_logmatch_info(".os");
single_value->field_os.log_match(match_value.os());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ cpu := ");
single_value->field_cpu.log_match(match_value.cpu());
TTCN_Logger::log_event_str(", os := ");
single_value->field_os.log_match(match_value.os());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataHInfo_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_cpu.encode_text(text_buf);
single_value->field_os.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataHInfo.");
}
}

void RDataHInfo_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_cpu.decode_text(text_buf);
single_value->field_os.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataHInfo_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataHInfo.");
}
}

void RDataHInfo_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataHInfo'");
    }
    if (strcmp("cpu", param_field) == 0) {
      cpu().set_param(param);
      return;
    } else if (strcmp("os", param_field) == 0) {
      os().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataHInfo'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataHInfo has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) cpu().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) os().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "cpu")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          cpu().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "os")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          os().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataHInfo: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataHInfo");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataHInfo_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_cpu.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataHInfo");
single_value->field_os.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataHInfo");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataHInfo");
}

boolean RDataHInfo_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataHInfo_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataMInfo::RDataMInfo()
{
  bound_flag = FALSE;
}

RDataMInfo::RDataMInfo(const CHARSTRING& par_rMailBx,
    const CHARSTRING& par_eMailBx)
  :   field_rMailBx(par_rMailBx),
  field_eMailBx(par_eMailBx)
{
  bound_flag = TRUE;
}

RDataMInfo::RDataMInfo(const RDataMInfo& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataMInfo.");
bound_flag = TRUE;
if (other_value.rMailBx().is_bound()) field_rMailBx = other_value.rMailBx();
else field_rMailBx.clean_up();
if (other_value.eMailBx().is_bound()) field_eMailBx = other_value.eMailBx();
else field_eMailBx.clean_up();
}

void RDataMInfo::clean_up()
{
field_rMailBx.clean_up();
field_eMailBx.clean_up();
bound_flag = FALSE;
}

RDataMInfo& RDataMInfo::operator=(const RDataMInfo& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataMInfo.");
  bound_flag = TRUE;
  if (other_value.rMailBx().is_bound()) field_rMailBx = other_value.rMailBx();
  else field_rMailBx.clean_up();
  if (other_value.eMailBx().is_bound()) field_eMailBx = other_value.eMailBx();
  else field_eMailBx.clean_up();
}
return *this;
}

boolean RDataMInfo::operator==(const RDataMInfo& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_rMailBx==other_value.field_rMailBx
  && field_eMailBx==other_value.field_eMailBx;
}

boolean RDataMInfo::is_bound() const
{
if (bound_flag) return TRUE;
if(field_rMailBx.is_bound()) return TRUE;
if(field_eMailBx.is_bound()) return TRUE;
return FALSE;
}
boolean RDataMInfo::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_rMailBx.is_value()) return FALSE;
if(!field_eMailBx.is_value()) return FALSE;
return TRUE;
}
int RDataMInfo::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataMInfo");
  return 2;
}

void RDataMInfo::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ rMailBx := ");
field_rMailBx.log();
TTCN_Logger::log_event_str(", eMailBx := ");
field_eMailBx.log();
TTCN_Logger::log_event_str(" }");
}

void RDataMInfo::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataMInfo'");
    }
    if (strcmp("rMailBx", param_field) == 0) {
      rMailBx().set_param(param);
      return;
    } else if (strcmp("eMailBx", param_field) == 0) {
      eMailBx().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataMInfo'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataMInfo has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) rMailBx().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) eMailBx().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rMailBx")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rMailBx().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "eMailBx")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          eMailBx().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataMInfo: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataMInfo");
  }
}

void RDataMInfo::set_implicit_omit()
{
if (rMailBx().is_bound()) rMailBx().set_implicit_omit();
if (eMailBx().is_bound()) eMailBx().set_implicit_omit();
}

void RDataMInfo::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataMInfo.");
field_rMailBx.encode_text(text_buf);
field_eMailBx.encode_text(text_buf);
}

void RDataMInfo::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_rMailBx.decode_text(text_buf);
field_eMailBx.decode_text(text_buf);
}

struct RDataMInfo_template::single_value_struct {
CHARSTRING_template field_rMailBx;
CHARSTRING_template field_eMailBx;
};

void RDataMInfo_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_rMailBx = ANY_VALUE;
single_value->field_eMailBx = ANY_VALUE;
}
}
}

void RDataMInfo_template::copy_value(const RDataMInfo& other_value)
{
single_value = new single_value_struct;
if (other_value.rMailBx().is_bound()) {
  single_value->field_rMailBx = other_value.rMailBx();
} else {
  single_value->field_rMailBx.clean_up();
}
if (other_value.eMailBx().is_bound()) {
  single_value->field_eMailBx = other_value.eMailBx();
} else {
  single_value->field_eMailBx.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataMInfo_template::copy_template(const RDataMInfo_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.rMailBx().get_selection()) {
single_value->field_rMailBx = other_value.rMailBx();
} else {
single_value->field_rMailBx.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.eMailBx().get_selection()) {
single_value->field_eMailBx = other_value.eMailBx();
} else {
single_value->field_eMailBx.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataMInfo_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataMInfo.");
break;
}
set_selection(other_value);
}

RDataMInfo_template::RDataMInfo_template()
{
}

RDataMInfo_template::RDataMInfo_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataMInfo_template::RDataMInfo_template(const RDataMInfo& other_value)
{
copy_value(other_value);
}

RDataMInfo_template::RDataMInfo_template(const OPTIONAL<RDataMInfo>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataMInfo&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataMInfo from an unbound optional field.");
}
}

RDataMInfo_template::RDataMInfo_template(const RDataMInfo_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataMInfo_template::~RDataMInfo_template()
{
clean_up();
}

RDataMInfo_template& RDataMInfo_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataMInfo_template& RDataMInfo_template::operator=(const RDataMInfo& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataMInfo_template& RDataMInfo_template::operator=(const OPTIONAL<RDataMInfo>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataMInfo&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataMInfo.");
}
return *this;
}

RDataMInfo_template& RDataMInfo_template::operator=(const RDataMInfo_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataMInfo_template::match(const RDataMInfo& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.rMailBx().is_bound()) return FALSE;
if(!single_value->field_rMailBx.match(other_value.rMailBx()))return FALSE;
if(!other_value.eMailBx().is_bound()) return FALSE;
if(!single_value->field_eMailBx.match(other_value.eMailBx()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataMInfo.");
}
return FALSE;
}

boolean RDataMInfo_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_rMailBx.is_bound()) return TRUE;
if (single_value->field_eMailBx.is_bound()) return TRUE;
return FALSE;
}

boolean RDataMInfo_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_rMailBx.is_value()) return FALSE;
if (!single_value->field_eMailBx.is_value()) return FALSE;
return TRUE;
}

void RDataMInfo_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataMInfo RDataMInfo_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataMInfo.");
RDataMInfo ret_val;
if (single_value->field_rMailBx.is_bound()) {
ret_val.rMailBx() = single_value->field_rMailBx.valueof();
}
if (single_value->field_eMailBx.is_bound()) {
ret_val.eMailBx() = single_value->field_eMailBx.valueof();
}
return ret_val;
}

void RDataMInfo_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataMInfo.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataMInfo_template[list_length];
}

RDataMInfo_template& RDataMInfo_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataMInfo.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataMInfo.");
return value_list.list_value[list_index];
}

CHARSTRING_template& RDataMInfo_template::rMailBx()
{
set_specific();
return single_value->field_rMailBx;
}

const CHARSTRING_template& RDataMInfo_template::rMailBx() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rMailBx of a non-specific template of type @DNS_Types.RDataMInfo.");
return single_value->field_rMailBx;
}

CHARSTRING_template& RDataMInfo_template::eMailBx()
{
set_specific();
return single_value->field_eMailBx;
}

const CHARSTRING_template& RDataMInfo_template::eMailBx() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field eMailBx of a non-specific template of type @DNS_Types.RDataMInfo.");
return single_value->field_eMailBx;
}

int RDataMInfo_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMInfo containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataMInfo.");
  }
  return 0;
}

void RDataMInfo_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ rMailBx := ");
single_value->field_rMailBx.log();
TTCN_Logger::log_event_str(", eMailBx := ");
single_value->field_eMailBx.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataMInfo_template::log_match(const RDataMInfo& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_rMailBx.match(match_value.rMailBx())){
TTCN_Logger::log_logmatch_info(".rMailBx");
single_value->field_rMailBx.log_match(match_value.rMailBx());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_eMailBx.match(match_value.eMailBx())){
TTCN_Logger::log_logmatch_info(".eMailBx");
single_value->field_eMailBx.log_match(match_value.eMailBx());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ rMailBx := ");
single_value->field_rMailBx.log_match(match_value.rMailBx());
TTCN_Logger::log_event_str(", eMailBx := ");
single_value->field_eMailBx.log_match(match_value.eMailBx());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataMInfo_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_rMailBx.encode_text(text_buf);
single_value->field_eMailBx.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataMInfo.");
}
}

void RDataMInfo_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_rMailBx.decode_text(text_buf);
single_value->field_eMailBx.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataMInfo_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataMInfo.");
}
}

void RDataMInfo_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataMInfo'");
    }
    if (strcmp("rMailBx", param_field) == 0) {
      rMailBx().set_param(param);
      return;
    } else if (strcmp("eMailBx", param_field) == 0) {
      eMailBx().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataMInfo'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataMInfo has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) rMailBx().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) eMailBx().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rMailBx")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rMailBx().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "eMailBx")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          eMailBx().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataMInfo: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataMInfo");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataMInfo_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_rMailBx.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataMInfo");
single_value->field_eMailBx.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataMInfo");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataMInfo");
}

boolean RDataMInfo_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataMInfo_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataMX::RDataMX()
{
  bound_flag = FALSE;
}

RDataMX::RDataMX(const INTEGER& par_preference,
    const CHARSTRING& par_exchange)
  :   field_preference(par_preference),
  field_exchange(par_exchange)
{
  bound_flag = TRUE;
}

RDataMX::RDataMX(const RDataMX& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataMX.");
bound_flag = TRUE;
if (other_value.preference().is_bound()) field_preference = other_value.preference();
else field_preference.clean_up();
if (other_value.exchange().is_bound()) field_exchange = other_value.exchange();
else field_exchange.clean_up();
}

void RDataMX::clean_up()
{
field_preference.clean_up();
field_exchange.clean_up();
bound_flag = FALSE;
}

RDataMX& RDataMX::operator=(const RDataMX& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataMX.");
  bound_flag = TRUE;
  if (other_value.preference().is_bound()) field_preference = other_value.preference();
  else field_preference.clean_up();
  if (other_value.exchange().is_bound()) field_exchange = other_value.exchange();
  else field_exchange.clean_up();
}
return *this;
}

boolean RDataMX::operator==(const RDataMX& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_preference==other_value.field_preference
  && field_exchange==other_value.field_exchange;
}

boolean RDataMX::is_bound() const
{
if (bound_flag) return TRUE;
if(field_preference.is_bound()) return TRUE;
if(field_exchange.is_bound()) return TRUE;
return FALSE;
}
boolean RDataMX::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_preference.is_value()) return FALSE;
if(!field_exchange.is_value()) return FALSE;
return TRUE;
}
int RDataMX::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataMX");
  return 2;
}

void RDataMX::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ preference := ");
field_preference.log();
TTCN_Logger::log_event_str(", exchange := ");
field_exchange.log();
TTCN_Logger::log_event_str(" }");
}

void RDataMX::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataMX'");
    }
    if (strcmp("preference", param_field) == 0) {
      preference().set_param(param);
      return;
    } else if (strcmp("exchange", param_field) == 0) {
      exchange().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataMX'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataMX has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) preference().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) exchange().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "preference")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          preference().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "exchange")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          exchange().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataMX: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataMX");
  }
}

void RDataMX::set_implicit_omit()
{
if (preference().is_bound()) preference().set_implicit_omit();
if (exchange().is_bound()) exchange().set_implicit_omit();
}

void RDataMX::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataMX.");
field_preference.encode_text(text_buf);
field_exchange.encode_text(text_buf);
}

void RDataMX::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_preference.decode_text(text_buf);
field_exchange.decode_text(text_buf);
}

struct RDataMX_template::single_value_struct {
INTEGER_template field_preference;
CHARSTRING_template field_exchange;
};

void RDataMX_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_preference = ANY_VALUE;
single_value->field_exchange = ANY_VALUE;
}
}
}

void RDataMX_template::copy_value(const RDataMX& other_value)
{
single_value = new single_value_struct;
if (other_value.preference().is_bound()) {
  single_value->field_preference = other_value.preference();
} else {
  single_value->field_preference.clean_up();
}
if (other_value.exchange().is_bound()) {
  single_value->field_exchange = other_value.exchange();
} else {
  single_value->field_exchange.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataMX_template::copy_template(const RDataMX_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.preference().get_selection()) {
single_value->field_preference = other_value.preference();
} else {
single_value->field_preference.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.exchange().get_selection()) {
single_value->field_exchange = other_value.exchange();
} else {
single_value->field_exchange.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataMX_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataMX.");
break;
}
set_selection(other_value);
}

RDataMX_template::RDataMX_template()
{
}

RDataMX_template::RDataMX_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataMX_template::RDataMX_template(const RDataMX& other_value)
{
copy_value(other_value);
}

RDataMX_template::RDataMX_template(const OPTIONAL<RDataMX>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataMX&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataMX from an unbound optional field.");
}
}

RDataMX_template::RDataMX_template(const RDataMX_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataMX_template::~RDataMX_template()
{
clean_up();
}

RDataMX_template& RDataMX_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataMX_template& RDataMX_template::operator=(const RDataMX& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataMX_template& RDataMX_template::operator=(const OPTIONAL<RDataMX>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataMX&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataMX.");
}
return *this;
}

RDataMX_template& RDataMX_template::operator=(const RDataMX_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataMX_template::match(const RDataMX& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.preference().is_bound()) return FALSE;
if(!single_value->field_preference.match(other_value.preference()))return FALSE;
if(!other_value.exchange().is_bound()) return FALSE;
if(!single_value->field_exchange.match(other_value.exchange()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataMX.");
}
return FALSE;
}

boolean RDataMX_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_preference.is_bound()) return TRUE;
if (single_value->field_exchange.is_bound()) return TRUE;
return FALSE;
}

boolean RDataMX_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_preference.is_value()) return FALSE;
if (!single_value->field_exchange.is_value()) return FALSE;
return TRUE;
}

void RDataMX_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataMX RDataMX_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataMX.");
RDataMX ret_val;
if (single_value->field_preference.is_bound()) {
ret_val.preference() = single_value->field_preference.valueof();
}
if (single_value->field_exchange.is_bound()) {
ret_val.exchange() = single_value->field_exchange.valueof();
}
return ret_val;
}

void RDataMX_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataMX.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataMX_template[list_length];
}

RDataMX_template& RDataMX_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataMX.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataMX.");
return value_list.list_value[list_index];
}

INTEGER_template& RDataMX_template::preference()
{
set_specific();
return single_value->field_preference;
}

const INTEGER_template& RDataMX_template::preference() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field preference of a non-specific template of type @DNS_Types.RDataMX.");
return single_value->field_preference;
}

CHARSTRING_template& RDataMX_template::exchange()
{
set_specific();
return single_value->field_exchange;
}

const CHARSTRING_template& RDataMX_template::exchange() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field exchange of a non-specific template of type @DNS_Types.RDataMX.");
return single_value->field_exchange;
}

int RDataMX_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMX which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataMX containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMX containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMX containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMX containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataMX containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataMX.");
  }
  return 0;
}

void RDataMX_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ preference := ");
single_value->field_preference.log();
TTCN_Logger::log_event_str(", exchange := ");
single_value->field_exchange.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataMX_template::log_match(const RDataMX& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_preference.match(match_value.preference())){
TTCN_Logger::log_logmatch_info(".preference");
single_value->field_preference.log_match(match_value.preference());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_exchange.match(match_value.exchange())){
TTCN_Logger::log_logmatch_info(".exchange");
single_value->field_exchange.log_match(match_value.exchange());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ preference := ");
single_value->field_preference.log_match(match_value.preference());
TTCN_Logger::log_event_str(", exchange := ");
single_value->field_exchange.log_match(match_value.exchange());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataMX_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_preference.encode_text(text_buf);
single_value->field_exchange.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataMX.");
}
}

void RDataMX_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_preference.decode_text(text_buf);
single_value->field_exchange.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataMX_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataMX.");
}
}

void RDataMX_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataMX'");
    }
    if (strcmp("preference", param_field) == 0) {
      preference().set_param(param);
      return;
    } else if (strcmp("exchange", param_field) == 0) {
      exchange().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataMX'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataMX has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) preference().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) exchange().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "preference")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          preference().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "exchange")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          exchange().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataMX: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataMX");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataMX_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_preference.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataMX");
single_value->field_exchange.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataMX");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataMX");
}

boolean RDataMX_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataMX_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataSOA::RDataSOA()
{
  bound_flag = FALSE;
}

RDataSOA::RDataSOA(const CHARSTRING& par_mName,
    const CHARSTRING& par_rName,
    const OCTETSTRING& par_serial,
    const OCTETSTRING& par_refresh,
    const OCTETSTRING& par_retry,
    const OCTETSTRING& par_expire,
    const OCTETSTRING& par_minimum)
  :   field_mName(par_mName),
  field_rName(par_rName),
  field_serial(par_serial),
  field_refresh(par_refresh),
  field_retry(par_retry),
  field_expire(par_expire),
  field_minimum(par_minimum)
{
  bound_flag = TRUE;
}

RDataSOA::RDataSOA(const RDataSOA& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataSOA.");
bound_flag = TRUE;
if (other_value.mName().is_bound()) field_mName = other_value.mName();
else field_mName.clean_up();
if (other_value.rName().is_bound()) field_rName = other_value.rName();
else field_rName.clean_up();
if (other_value.serial().is_bound()) field_serial = other_value.serial();
else field_serial.clean_up();
if (other_value.refresh().is_bound()) field_refresh = other_value.refresh();
else field_refresh.clean_up();
if (other_value.retry().is_bound()) field_retry = other_value.retry();
else field_retry.clean_up();
if (other_value.expire().is_bound()) field_expire = other_value.expire();
else field_expire.clean_up();
if (other_value.minimum().is_bound()) field_minimum = other_value.minimum();
else field_minimum.clean_up();
}

void RDataSOA::clean_up()
{
field_mName.clean_up();
field_rName.clean_up();
field_serial.clean_up();
field_refresh.clean_up();
field_retry.clean_up();
field_expire.clean_up();
field_minimum.clean_up();
bound_flag = FALSE;
}

RDataSOA& RDataSOA::operator=(const RDataSOA& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataSOA.");
  bound_flag = TRUE;
  if (other_value.mName().is_bound()) field_mName = other_value.mName();
  else field_mName.clean_up();
  if (other_value.rName().is_bound()) field_rName = other_value.rName();
  else field_rName.clean_up();
  if (other_value.serial().is_bound()) field_serial = other_value.serial();
  else field_serial.clean_up();
  if (other_value.refresh().is_bound()) field_refresh = other_value.refresh();
  else field_refresh.clean_up();
  if (other_value.retry().is_bound()) field_retry = other_value.retry();
  else field_retry.clean_up();
  if (other_value.expire().is_bound()) field_expire = other_value.expire();
  else field_expire.clean_up();
  if (other_value.minimum().is_bound()) field_minimum = other_value.minimum();
  else field_minimum.clean_up();
}
return *this;
}

boolean RDataSOA::operator==(const RDataSOA& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_mName==other_value.field_mName
  && field_rName==other_value.field_rName
  && field_serial==other_value.field_serial
  && field_refresh==other_value.field_refresh
  && field_retry==other_value.field_retry
  && field_expire==other_value.field_expire
  && field_minimum==other_value.field_minimum;
}

boolean RDataSOA::is_bound() const
{
if (bound_flag) return TRUE;
if(field_mName.is_bound()) return TRUE;
if(field_rName.is_bound()) return TRUE;
if(field_serial.is_bound()) return TRUE;
if(field_refresh.is_bound()) return TRUE;
if(field_retry.is_bound()) return TRUE;
if(field_expire.is_bound()) return TRUE;
if(field_minimum.is_bound()) return TRUE;
return FALSE;
}
boolean RDataSOA::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_mName.is_value()) return FALSE;
if(!field_rName.is_value()) return FALSE;
if(!field_serial.is_value()) return FALSE;
if(!field_refresh.is_value()) return FALSE;
if(!field_retry.is_value()) return FALSE;
if(!field_expire.is_value()) return FALSE;
if(!field_minimum.is_value()) return FALSE;
return TRUE;
}
int RDataSOA::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataSOA");
  return 7;
}

void RDataSOA::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ mName := ");
field_mName.log();
TTCN_Logger::log_event_str(", rName := ");
field_rName.log();
TTCN_Logger::log_event_str(", serial := ");
field_serial.log();
TTCN_Logger::log_event_str(", refresh := ");
field_refresh.log();
TTCN_Logger::log_event_str(", retry := ");
field_retry.log();
TTCN_Logger::log_event_str(", expire := ");
field_expire.log();
TTCN_Logger::log_event_str(", minimum := ");
field_minimum.log();
TTCN_Logger::log_event_str(" }");
}

void RDataSOA::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataSOA'");
    }
    if (strcmp("mName", param_field) == 0) {
      mName().set_param(param);
      return;
    } else if (strcmp("rName", param_field) == 0) {
      rName().set_param(param);
      return;
    } else if (strcmp("serial", param_field) == 0) {
      serial().set_param(param);
      return;
    } else if (strcmp("refresh", param_field) == 0) {
      refresh().set_param(param);
      return;
    } else if (strcmp("retry", param_field) == 0) {
      retry().set_param(param);
      return;
    } else if (strcmp("expire", param_field) == 0) {
      expire().set_param(param);
      return;
    } else if (strcmp("minimum", param_field) == 0) {
      minimum().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataSOA'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataSOA has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) rName().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) serial().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) refresh().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) retry().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) expire().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) minimum().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "serial")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          serial().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "refresh")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          refresh().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "retry")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          retry().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "expire")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          expire().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "minimum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          minimum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataSOA: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataSOA");
  }
}

void RDataSOA::set_implicit_omit()
{
if (mName().is_bound()) mName().set_implicit_omit();
if (rName().is_bound()) rName().set_implicit_omit();
if (serial().is_bound()) serial().set_implicit_omit();
if (refresh().is_bound()) refresh().set_implicit_omit();
if (retry().is_bound()) retry().set_implicit_omit();
if (expire().is_bound()) expire().set_implicit_omit();
if (minimum().is_bound()) minimum().set_implicit_omit();
}

void RDataSOA::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataSOA.");
field_mName.encode_text(text_buf);
field_rName.encode_text(text_buf);
field_serial.encode_text(text_buf);
field_refresh.encode_text(text_buf);
field_retry.encode_text(text_buf);
field_expire.encode_text(text_buf);
field_minimum.encode_text(text_buf);
}

void RDataSOA::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_mName.decode_text(text_buf);
field_rName.decode_text(text_buf);
field_serial.decode_text(text_buf);
field_refresh.decode_text(text_buf);
field_retry.decode_text(text_buf);
field_expire.decode_text(text_buf);
field_minimum.decode_text(text_buf);
}

struct RDataSOA_template::single_value_struct {
CHARSTRING_template field_mName;
CHARSTRING_template field_rName;
OCTETSTRING_template field_serial;
OCTETSTRING_template field_refresh;
OCTETSTRING_template field_retry;
OCTETSTRING_template field_expire;
OCTETSTRING_template field_minimum;
};

void RDataSOA_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_mName = ANY_VALUE;
single_value->field_rName = ANY_VALUE;
single_value->field_serial = ANY_VALUE;
single_value->field_refresh = ANY_VALUE;
single_value->field_retry = ANY_VALUE;
single_value->field_expire = ANY_VALUE;
single_value->field_minimum = ANY_VALUE;
}
}
}

void RDataSOA_template::copy_value(const RDataSOA& other_value)
{
single_value = new single_value_struct;
if (other_value.mName().is_bound()) {
  single_value->field_mName = other_value.mName();
} else {
  single_value->field_mName.clean_up();
}
if (other_value.rName().is_bound()) {
  single_value->field_rName = other_value.rName();
} else {
  single_value->field_rName.clean_up();
}
if (other_value.serial().is_bound()) {
  single_value->field_serial = other_value.serial();
} else {
  single_value->field_serial.clean_up();
}
if (other_value.refresh().is_bound()) {
  single_value->field_refresh = other_value.refresh();
} else {
  single_value->field_refresh.clean_up();
}
if (other_value.retry().is_bound()) {
  single_value->field_retry = other_value.retry();
} else {
  single_value->field_retry.clean_up();
}
if (other_value.expire().is_bound()) {
  single_value->field_expire = other_value.expire();
} else {
  single_value->field_expire.clean_up();
}
if (other_value.minimum().is_bound()) {
  single_value->field_minimum = other_value.minimum();
} else {
  single_value->field_minimum.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataSOA_template::copy_template(const RDataSOA_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.mName().get_selection()) {
single_value->field_mName = other_value.mName();
} else {
single_value->field_mName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rName().get_selection()) {
single_value->field_rName = other_value.rName();
} else {
single_value->field_rName.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.serial().get_selection()) {
single_value->field_serial = other_value.serial();
} else {
single_value->field_serial.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.refresh().get_selection()) {
single_value->field_refresh = other_value.refresh();
} else {
single_value->field_refresh.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.retry().get_selection()) {
single_value->field_retry = other_value.retry();
} else {
single_value->field_retry.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.expire().get_selection()) {
single_value->field_expire = other_value.expire();
} else {
single_value->field_expire.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.minimum().get_selection()) {
single_value->field_minimum = other_value.minimum();
} else {
single_value->field_minimum.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataSOA_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataSOA.");
break;
}
set_selection(other_value);
}

RDataSOA_template::RDataSOA_template()
{
}

RDataSOA_template::RDataSOA_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataSOA_template::RDataSOA_template(const RDataSOA& other_value)
{
copy_value(other_value);
}

RDataSOA_template::RDataSOA_template(const OPTIONAL<RDataSOA>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataSOA&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataSOA from an unbound optional field.");
}
}

RDataSOA_template::RDataSOA_template(const RDataSOA_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataSOA_template::~RDataSOA_template()
{
clean_up();
}

RDataSOA_template& RDataSOA_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataSOA_template& RDataSOA_template::operator=(const RDataSOA& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataSOA_template& RDataSOA_template::operator=(const OPTIONAL<RDataSOA>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataSOA&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataSOA.");
}
return *this;
}

RDataSOA_template& RDataSOA_template::operator=(const RDataSOA_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataSOA_template::match(const RDataSOA& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.mName().is_bound()) return FALSE;
if(!single_value->field_mName.match(other_value.mName()))return FALSE;
if(!other_value.rName().is_bound()) return FALSE;
if(!single_value->field_rName.match(other_value.rName()))return FALSE;
if(!other_value.serial().is_bound()) return FALSE;
if(!single_value->field_serial.match(other_value.serial()))return FALSE;
if(!other_value.refresh().is_bound()) return FALSE;
if(!single_value->field_refresh.match(other_value.refresh()))return FALSE;
if(!other_value.retry().is_bound()) return FALSE;
if(!single_value->field_retry.match(other_value.retry()))return FALSE;
if(!other_value.expire().is_bound()) return FALSE;
if(!single_value->field_expire.match(other_value.expire()))return FALSE;
if(!other_value.minimum().is_bound()) return FALSE;
if(!single_value->field_minimum.match(other_value.minimum()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataSOA.");
}
return FALSE;
}

boolean RDataSOA_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_mName.is_bound()) return TRUE;
if (single_value->field_rName.is_bound()) return TRUE;
if (single_value->field_serial.is_bound()) return TRUE;
if (single_value->field_refresh.is_bound()) return TRUE;
if (single_value->field_retry.is_bound()) return TRUE;
if (single_value->field_expire.is_bound()) return TRUE;
if (single_value->field_minimum.is_bound()) return TRUE;
return FALSE;
}

boolean RDataSOA_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_mName.is_value()) return FALSE;
if (!single_value->field_rName.is_value()) return FALSE;
if (!single_value->field_serial.is_value()) return FALSE;
if (!single_value->field_refresh.is_value()) return FALSE;
if (!single_value->field_retry.is_value()) return FALSE;
if (!single_value->field_expire.is_value()) return FALSE;
if (!single_value->field_minimum.is_value()) return FALSE;
return TRUE;
}

void RDataSOA_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataSOA RDataSOA_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataSOA.");
RDataSOA ret_val;
if (single_value->field_mName.is_bound()) {
ret_val.mName() = single_value->field_mName.valueof();
}
if (single_value->field_rName.is_bound()) {
ret_val.rName() = single_value->field_rName.valueof();
}
if (single_value->field_serial.is_bound()) {
ret_val.serial() = single_value->field_serial.valueof();
}
if (single_value->field_refresh.is_bound()) {
ret_val.refresh() = single_value->field_refresh.valueof();
}
if (single_value->field_retry.is_bound()) {
ret_val.retry() = single_value->field_retry.valueof();
}
if (single_value->field_expire.is_bound()) {
ret_val.expire() = single_value->field_expire.valueof();
}
if (single_value->field_minimum.is_bound()) {
ret_val.minimum() = single_value->field_minimum.valueof();
}
return ret_val;
}

void RDataSOA_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataSOA.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataSOA_template[list_length];
}

RDataSOA_template& RDataSOA_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataSOA.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataSOA.");
return value_list.list_value[list_index];
}

CHARSTRING_template& RDataSOA_template::mName()
{
set_specific();
return single_value->field_mName;
}

const CHARSTRING_template& RDataSOA_template::mName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field mName of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_mName;
}

CHARSTRING_template& RDataSOA_template::rName()
{
set_specific();
return single_value->field_rName;
}

const CHARSTRING_template& RDataSOA_template::rName() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rName of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_rName;
}

OCTETSTRING_template& RDataSOA_template::serial()
{
set_specific();
return single_value->field_serial;
}

const OCTETSTRING_template& RDataSOA_template::serial() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field serial of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_serial;
}

OCTETSTRING_template& RDataSOA_template::refresh()
{
set_specific();
return single_value->field_refresh;
}

const OCTETSTRING_template& RDataSOA_template::refresh() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field refresh of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_refresh;
}

OCTETSTRING_template& RDataSOA_template::retry()
{
set_specific();
return single_value->field_retry;
}

const OCTETSTRING_template& RDataSOA_template::retry() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field retry of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_retry;
}

OCTETSTRING_template& RDataSOA_template::expire()
{
set_specific();
return single_value->field_expire;
}

const OCTETSTRING_template& RDataSOA_template::expire() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field expire of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_expire;
}

OCTETSTRING_template& RDataSOA_template::minimum()
{
set_specific();
return single_value->field_minimum;
}

const OCTETSTRING_template& RDataSOA_template::minimum() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field minimum of a non-specific template of type @DNS_Types.RDataSOA.");
return single_value->field_minimum;
}

int RDataSOA_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSOA which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 7;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataSOA containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSOA containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSOA containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSOA containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSOA containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataSOA.");
  }
  return 0;
}

void RDataSOA_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ mName := ");
single_value->field_mName.log();
TTCN_Logger::log_event_str(", rName := ");
single_value->field_rName.log();
TTCN_Logger::log_event_str(", serial := ");
single_value->field_serial.log();
TTCN_Logger::log_event_str(", refresh := ");
single_value->field_refresh.log();
TTCN_Logger::log_event_str(", retry := ");
single_value->field_retry.log();
TTCN_Logger::log_event_str(", expire := ");
single_value->field_expire.log();
TTCN_Logger::log_event_str(", minimum := ");
single_value->field_minimum.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataSOA_template::log_match(const RDataSOA& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_mName.match(match_value.mName())){
TTCN_Logger::log_logmatch_info(".mName");
single_value->field_mName.log_match(match_value.mName());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rName.match(match_value.rName())){
TTCN_Logger::log_logmatch_info(".rName");
single_value->field_rName.log_match(match_value.rName());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_serial.match(match_value.serial())){
TTCN_Logger::log_logmatch_info(".serial");
single_value->field_serial.log_match(match_value.serial());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_refresh.match(match_value.refresh())){
TTCN_Logger::log_logmatch_info(".refresh");
single_value->field_refresh.log_match(match_value.refresh());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_retry.match(match_value.retry())){
TTCN_Logger::log_logmatch_info(".retry");
single_value->field_retry.log_match(match_value.retry());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_expire.match(match_value.expire())){
TTCN_Logger::log_logmatch_info(".expire");
single_value->field_expire.log_match(match_value.expire());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_minimum.match(match_value.minimum())){
TTCN_Logger::log_logmatch_info(".minimum");
single_value->field_minimum.log_match(match_value.minimum());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ mName := ");
single_value->field_mName.log_match(match_value.mName());
TTCN_Logger::log_event_str(", rName := ");
single_value->field_rName.log_match(match_value.rName());
TTCN_Logger::log_event_str(", serial := ");
single_value->field_serial.log_match(match_value.serial());
TTCN_Logger::log_event_str(", refresh := ");
single_value->field_refresh.log_match(match_value.refresh());
TTCN_Logger::log_event_str(", retry := ");
single_value->field_retry.log_match(match_value.retry());
TTCN_Logger::log_event_str(", expire := ");
single_value->field_expire.log_match(match_value.expire());
TTCN_Logger::log_event_str(", minimum := ");
single_value->field_minimum.log_match(match_value.minimum());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataSOA_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_mName.encode_text(text_buf);
single_value->field_rName.encode_text(text_buf);
single_value->field_serial.encode_text(text_buf);
single_value->field_refresh.encode_text(text_buf);
single_value->field_retry.encode_text(text_buf);
single_value->field_expire.encode_text(text_buf);
single_value->field_minimum.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataSOA.");
}
}

void RDataSOA_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_mName.decode_text(text_buf);
single_value->field_rName.decode_text(text_buf);
single_value->field_serial.decode_text(text_buf);
single_value->field_refresh.decode_text(text_buf);
single_value->field_retry.decode_text(text_buf);
single_value->field_expire.decode_text(text_buf);
single_value->field_minimum.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataSOA_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataSOA.");
}
}

void RDataSOA_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataSOA'");
    }
    if (strcmp("mName", param_field) == 0) {
      mName().set_param(param);
      return;
    } else if (strcmp("rName", param_field) == 0) {
      rName().set_param(param);
      return;
    } else if (strcmp("serial", param_field) == 0) {
      serial().set_param(param);
      return;
    } else if (strcmp("refresh", param_field) == 0) {
      refresh().set_param(param);
      return;
    } else if (strcmp("retry", param_field) == 0) {
      retry().set_param(param);
      return;
    } else if (strcmp("expire", param_field) == 0) {
      expire().set_param(param);
      return;
    } else if (strcmp("minimum", param_field) == 0) {
      minimum().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataSOA'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (7<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataSOA has 7 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) mName().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) rName().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) serial().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) refresh().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) retry().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) expire().set_param(*param.get_elem(5));
    if (param.get_size()>6 && param.get_elem(6)->get_type()!=Module_Param::MP_NotUsed) minimum().set_param(*param.get_elem(6));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "mName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          mName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rName")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rName().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "serial")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          serial().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "refresh")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          refresh().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "retry")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          retry().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "expire")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          expire().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "minimum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          minimum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataSOA: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataSOA");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataSOA_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_mName.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_rName.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_serial.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_refresh.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_retry.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_expire.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
single_value->field_minimum.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSOA");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataSOA");
}

boolean RDataSOA_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataSOA_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataWKS::RDataWKS()
{
  bound_flag = FALSE;
}

RDataWKS::RDataWKS(const OCTETSTRING& par_addr,
    const INTEGER& par_protocol,
    const OCTETSTRING& par_bitmap)
  :   field_addr(par_addr),
  field_protocol(par_protocol),
  field_bitmap(par_bitmap)
{
  bound_flag = TRUE;
}

RDataWKS::RDataWKS(const RDataWKS& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataWKS.");
bound_flag = TRUE;
if (other_value.addr().is_bound()) field_addr = other_value.addr();
else field_addr.clean_up();
if (other_value.protocol().is_bound()) field_protocol = other_value.protocol();
else field_protocol.clean_up();
if (other_value.bitmap().is_bound()) field_bitmap = other_value.bitmap();
else field_bitmap.clean_up();
}

void RDataWKS::clean_up()
{
field_addr.clean_up();
field_protocol.clean_up();
field_bitmap.clean_up();
bound_flag = FALSE;
}

RDataWKS& RDataWKS::operator=(const RDataWKS& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataWKS.");
  bound_flag = TRUE;
  if (other_value.addr().is_bound()) field_addr = other_value.addr();
  else field_addr.clean_up();
  if (other_value.protocol().is_bound()) field_protocol = other_value.protocol();
  else field_protocol.clean_up();
  if (other_value.bitmap().is_bound()) field_bitmap = other_value.bitmap();
  else field_bitmap.clean_up();
}
return *this;
}

boolean RDataWKS::operator==(const RDataWKS& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_addr==other_value.field_addr
  && field_protocol==other_value.field_protocol
  && field_bitmap==other_value.field_bitmap;
}

boolean RDataWKS::is_bound() const
{
if (bound_flag) return TRUE;
if(field_addr.is_bound()) return TRUE;
if(field_protocol.is_bound()) return TRUE;
if(field_bitmap.is_bound()) return TRUE;
return FALSE;
}
boolean RDataWKS::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_addr.is_value()) return FALSE;
if(!field_protocol.is_value()) return FALSE;
if(!field_bitmap.is_value()) return FALSE;
return TRUE;
}
int RDataWKS::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataWKS");
  return 3;
}

void RDataWKS::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ addr := ");
field_addr.log();
TTCN_Logger::log_event_str(", protocol := ");
field_protocol.log();
TTCN_Logger::log_event_str(", bitmap := ");
field_bitmap.log();
TTCN_Logger::log_event_str(" }");
}

void RDataWKS::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataWKS'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("protocol", param_field) == 0) {
      protocol().set_param(param);
      return;
    } else if (strcmp("bitmap", param_field) == 0) {
      bitmap().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataWKS'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataWKS has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) protocol().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) bitmap().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "protocol")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          protocol().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bitmap")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bitmap().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataWKS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataWKS");
  }
}

void RDataWKS::set_implicit_omit()
{
if (addr().is_bound()) addr().set_implicit_omit();
if (protocol().is_bound()) protocol().set_implicit_omit();
if (bitmap().is_bound()) bitmap().set_implicit_omit();
}

void RDataWKS::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataWKS.");
field_addr.encode_text(text_buf);
field_protocol.encode_text(text_buf);
field_bitmap.encode_text(text_buf);
}

void RDataWKS::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_addr.decode_text(text_buf);
field_protocol.decode_text(text_buf);
field_bitmap.decode_text(text_buf);
}

struct RDataWKS_template::single_value_struct {
OCTETSTRING_template field_addr;
INTEGER_template field_protocol;
OCTETSTRING_template field_bitmap;
};

void RDataWKS_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_addr = ANY_VALUE;
single_value->field_protocol = ANY_VALUE;
single_value->field_bitmap = ANY_VALUE;
}
}
}

void RDataWKS_template::copy_value(const RDataWKS& other_value)
{
single_value = new single_value_struct;
if (other_value.addr().is_bound()) {
  single_value->field_addr = other_value.addr();
} else {
  single_value->field_addr.clean_up();
}
if (other_value.protocol().is_bound()) {
  single_value->field_protocol = other_value.protocol();
} else {
  single_value->field_protocol.clean_up();
}
if (other_value.bitmap().is_bound()) {
  single_value->field_bitmap = other_value.bitmap();
} else {
  single_value->field_bitmap.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataWKS_template::copy_template(const RDataWKS_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.addr().get_selection()) {
single_value->field_addr = other_value.addr();
} else {
single_value->field_addr.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.protocol().get_selection()) {
single_value->field_protocol = other_value.protocol();
} else {
single_value->field_protocol.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.bitmap().get_selection()) {
single_value->field_bitmap = other_value.bitmap();
} else {
single_value->field_bitmap.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataWKS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataWKS.");
break;
}
set_selection(other_value);
}

RDataWKS_template::RDataWKS_template()
{
}

RDataWKS_template::RDataWKS_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataWKS_template::RDataWKS_template(const RDataWKS& other_value)
{
copy_value(other_value);
}

RDataWKS_template::RDataWKS_template(const OPTIONAL<RDataWKS>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataWKS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataWKS from an unbound optional field.");
}
}

RDataWKS_template::RDataWKS_template(const RDataWKS_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataWKS_template::~RDataWKS_template()
{
clean_up();
}

RDataWKS_template& RDataWKS_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataWKS_template& RDataWKS_template::operator=(const RDataWKS& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataWKS_template& RDataWKS_template::operator=(const OPTIONAL<RDataWKS>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataWKS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataWKS.");
}
return *this;
}

RDataWKS_template& RDataWKS_template::operator=(const RDataWKS_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataWKS_template::match(const RDataWKS& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.addr().is_bound()) return FALSE;
if(!single_value->field_addr.match(other_value.addr()))return FALSE;
if(!other_value.protocol().is_bound()) return FALSE;
if(!single_value->field_protocol.match(other_value.protocol()))return FALSE;
if(!other_value.bitmap().is_bound()) return FALSE;
if(!single_value->field_bitmap.match(other_value.bitmap()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataWKS.");
}
return FALSE;
}

boolean RDataWKS_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_addr.is_bound()) return TRUE;
if (single_value->field_protocol.is_bound()) return TRUE;
if (single_value->field_bitmap.is_bound()) return TRUE;
return FALSE;
}

boolean RDataWKS_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_addr.is_value()) return FALSE;
if (!single_value->field_protocol.is_value()) return FALSE;
if (!single_value->field_bitmap.is_value()) return FALSE;
return TRUE;
}

void RDataWKS_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataWKS RDataWKS_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataWKS.");
RDataWKS ret_val;
if (single_value->field_addr.is_bound()) {
ret_val.addr() = single_value->field_addr.valueof();
}
if (single_value->field_protocol.is_bound()) {
ret_val.protocol() = single_value->field_protocol.valueof();
}
if (single_value->field_bitmap.is_bound()) {
ret_val.bitmap() = single_value->field_bitmap.valueof();
}
return ret_val;
}

void RDataWKS_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataWKS.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataWKS_template[list_length];
}

RDataWKS_template& RDataWKS_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataWKS.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataWKS.");
return value_list.list_value[list_index];
}

OCTETSTRING_template& RDataWKS_template::addr()
{
set_specific();
return single_value->field_addr;
}

const OCTETSTRING_template& RDataWKS_template::addr() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field addr of a non-specific template of type @DNS_Types.RDataWKS.");
return single_value->field_addr;
}

INTEGER_template& RDataWKS_template::protocol()
{
set_specific();
return single_value->field_protocol;
}

const INTEGER_template& RDataWKS_template::protocol() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field protocol of a non-specific template of type @DNS_Types.RDataWKS.");
return single_value->field_protocol;
}

OCTETSTRING_template& RDataWKS_template::bitmap()
{
set_specific();
return single_value->field_bitmap;
}

const OCTETSTRING_template& RDataWKS_template::bitmap() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field bitmap of a non-specific template of type @DNS_Types.RDataWKS.");
return single_value->field_bitmap;
}

int RDataWKS_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataWKS which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataWKS containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataWKS containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataWKS containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataWKS containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataWKS containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataWKS.");
  }
  return 0;
}

void RDataWKS_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ addr := ");
single_value->field_addr.log();
TTCN_Logger::log_event_str(", protocol := ");
single_value->field_protocol.log();
TTCN_Logger::log_event_str(", bitmap := ");
single_value->field_bitmap.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataWKS_template::log_match(const RDataWKS& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_addr.match(match_value.addr())){
TTCN_Logger::log_logmatch_info(".addr");
single_value->field_addr.log_match(match_value.addr());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_protocol.match(match_value.protocol())){
TTCN_Logger::log_logmatch_info(".protocol");
single_value->field_protocol.log_match(match_value.protocol());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_bitmap.match(match_value.bitmap())){
TTCN_Logger::log_logmatch_info(".bitmap");
single_value->field_bitmap.log_match(match_value.bitmap());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ addr := ");
single_value->field_addr.log_match(match_value.addr());
TTCN_Logger::log_event_str(", protocol := ");
single_value->field_protocol.log_match(match_value.protocol());
TTCN_Logger::log_event_str(", bitmap := ");
single_value->field_bitmap.log_match(match_value.bitmap());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataWKS_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_addr.encode_text(text_buf);
single_value->field_protocol.encode_text(text_buf);
single_value->field_bitmap.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataWKS.");
}
}

void RDataWKS_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_addr.decode_text(text_buf);
single_value->field_protocol.decode_text(text_buf);
single_value->field_bitmap.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataWKS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataWKS.");
}
}

void RDataWKS_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataWKS'");
    }
    if (strcmp("addr", param_field) == 0) {
      addr().set_param(param);
      return;
    } else if (strcmp("protocol", param_field) == 0) {
      protocol().set_param(param);
      return;
    } else if (strcmp("bitmap", param_field) == 0) {
      bitmap().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataWKS'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataWKS has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) addr().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) protocol().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) bitmap().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "addr")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          addr().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "protocol")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          protocol().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "bitmap")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          bitmap().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataWKS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataWKS");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataWKS_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_addr.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataWKS");
single_value->field_protocol.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataWKS");
single_value->field_bitmap.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataWKS");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataWKS");
}

boolean RDataWKS_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataWKS_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataSRV::RDataSRV()
{
  bound_flag = FALSE;
}

RDataSRV::RDataSRV(const INTEGER& par_priority,
    const INTEGER& par_weight,
    const INTEGER& par_portnum,
    const CHARSTRING& par_target)
  :   field_priority(par_priority),
  field_weight(par_weight),
  field_portnum(par_portnum),
  field_target(par_target)
{
  bound_flag = TRUE;
}

RDataSRV::RDataSRV(const RDataSRV& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataSRV.");
bound_flag = TRUE;
if (other_value.priority().is_bound()) field_priority = other_value.priority();
else field_priority.clean_up();
if (other_value.weight().is_bound()) field_weight = other_value.weight();
else field_weight.clean_up();
if (other_value.portnum().is_bound()) field_portnum = other_value.portnum();
else field_portnum.clean_up();
if (other_value.target().is_bound()) field_target = other_value.target();
else field_target.clean_up();
}

void RDataSRV::clean_up()
{
field_priority.clean_up();
field_weight.clean_up();
field_portnum.clean_up();
field_target.clean_up();
bound_flag = FALSE;
}

RDataSRV& RDataSRV::operator=(const RDataSRV& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataSRV.");
  bound_flag = TRUE;
  if (other_value.priority().is_bound()) field_priority = other_value.priority();
  else field_priority.clean_up();
  if (other_value.weight().is_bound()) field_weight = other_value.weight();
  else field_weight.clean_up();
  if (other_value.portnum().is_bound()) field_portnum = other_value.portnum();
  else field_portnum.clean_up();
  if (other_value.target().is_bound()) field_target = other_value.target();
  else field_target.clean_up();
}
return *this;
}

boolean RDataSRV::operator==(const RDataSRV& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_priority==other_value.field_priority
  && field_weight==other_value.field_weight
  && field_portnum==other_value.field_portnum
  && field_target==other_value.field_target;
}

boolean RDataSRV::is_bound() const
{
if (bound_flag) return TRUE;
if(field_priority.is_bound()) return TRUE;
if(field_weight.is_bound()) return TRUE;
if(field_portnum.is_bound()) return TRUE;
if(field_target.is_bound()) return TRUE;
return FALSE;
}
boolean RDataSRV::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_priority.is_value()) return FALSE;
if(!field_weight.is_value()) return FALSE;
if(!field_portnum.is_value()) return FALSE;
if(!field_target.is_value()) return FALSE;
return TRUE;
}
int RDataSRV::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataSRV");
  return 4;
}

void RDataSRV::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ priority := ");
field_priority.log();
TTCN_Logger::log_event_str(", weight := ");
field_weight.log();
TTCN_Logger::log_event_str(", portnum := ");
field_portnum.log();
TTCN_Logger::log_event_str(", target := ");
field_target.log();
TTCN_Logger::log_event_str(" }");
}

void RDataSRV::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataSRV'");
    }
    if (strcmp("priority", param_field) == 0) {
      priority().set_param(param);
      return;
    } else if (strcmp("weight", param_field) == 0) {
      weight().set_param(param);
      return;
    } else if (strcmp("portnum", param_field) == 0) {
      portnum().set_param(param);
      return;
    } else if (strcmp("target", param_field) == 0) {
      target().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataSRV'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataSRV has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) priority().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) weight().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) portnum().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) target().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "priority")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          priority().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "weight")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          weight().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portnum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portnum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "target")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          target().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataSRV: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataSRV");
  }
}

void RDataSRV::set_implicit_omit()
{
if (priority().is_bound()) priority().set_implicit_omit();
if (weight().is_bound()) weight().set_implicit_omit();
if (portnum().is_bound()) portnum().set_implicit_omit();
if (target().is_bound()) target().set_implicit_omit();
}

void RDataSRV::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataSRV.");
field_priority.encode_text(text_buf);
field_weight.encode_text(text_buf);
field_portnum.encode_text(text_buf);
field_target.encode_text(text_buf);
}

void RDataSRV::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_priority.decode_text(text_buf);
field_weight.decode_text(text_buf);
field_portnum.decode_text(text_buf);
field_target.decode_text(text_buf);
}

struct RDataSRV_template::single_value_struct {
INTEGER_template field_priority;
INTEGER_template field_weight;
INTEGER_template field_portnum;
CHARSTRING_template field_target;
};

void RDataSRV_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_priority = ANY_VALUE;
single_value->field_weight = ANY_VALUE;
single_value->field_portnum = ANY_VALUE;
single_value->field_target = ANY_VALUE;
}
}
}

void RDataSRV_template::copy_value(const RDataSRV& other_value)
{
single_value = new single_value_struct;
if (other_value.priority().is_bound()) {
  single_value->field_priority = other_value.priority();
} else {
  single_value->field_priority.clean_up();
}
if (other_value.weight().is_bound()) {
  single_value->field_weight = other_value.weight();
} else {
  single_value->field_weight.clean_up();
}
if (other_value.portnum().is_bound()) {
  single_value->field_portnum = other_value.portnum();
} else {
  single_value->field_portnum.clean_up();
}
if (other_value.target().is_bound()) {
  single_value->field_target = other_value.target();
} else {
  single_value->field_target.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataSRV_template::copy_template(const RDataSRV_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.priority().get_selection()) {
single_value->field_priority = other_value.priority();
} else {
single_value->field_priority.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.weight().get_selection()) {
single_value->field_weight = other_value.weight();
} else {
single_value->field_weight.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.portnum().get_selection()) {
single_value->field_portnum = other_value.portnum();
} else {
single_value->field_portnum.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.target().get_selection()) {
single_value->field_target = other_value.target();
} else {
single_value->field_target.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataSRV_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataSRV.");
break;
}
set_selection(other_value);
}

RDataSRV_template::RDataSRV_template()
{
}

RDataSRV_template::RDataSRV_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataSRV_template::RDataSRV_template(const RDataSRV& other_value)
{
copy_value(other_value);
}

RDataSRV_template::RDataSRV_template(const OPTIONAL<RDataSRV>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataSRV&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataSRV from an unbound optional field.");
}
}

RDataSRV_template::RDataSRV_template(const RDataSRV_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataSRV_template::~RDataSRV_template()
{
clean_up();
}

RDataSRV_template& RDataSRV_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataSRV_template& RDataSRV_template::operator=(const RDataSRV& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataSRV_template& RDataSRV_template::operator=(const OPTIONAL<RDataSRV>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataSRV&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataSRV.");
}
return *this;
}

RDataSRV_template& RDataSRV_template::operator=(const RDataSRV_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataSRV_template::match(const RDataSRV& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.priority().is_bound()) return FALSE;
if(!single_value->field_priority.match(other_value.priority()))return FALSE;
if(!other_value.weight().is_bound()) return FALSE;
if(!single_value->field_weight.match(other_value.weight()))return FALSE;
if(!other_value.portnum().is_bound()) return FALSE;
if(!single_value->field_portnum.match(other_value.portnum()))return FALSE;
if(!other_value.target().is_bound()) return FALSE;
if(!single_value->field_target.match(other_value.target()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataSRV.");
}
return FALSE;
}

boolean RDataSRV_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_priority.is_bound()) return TRUE;
if (single_value->field_weight.is_bound()) return TRUE;
if (single_value->field_portnum.is_bound()) return TRUE;
if (single_value->field_target.is_bound()) return TRUE;
return FALSE;
}

boolean RDataSRV_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_priority.is_value()) return FALSE;
if (!single_value->field_weight.is_value()) return FALSE;
if (!single_value->field_portnum.is_value()) return FALSE;
if (!single_value->field_target.is_value()) return FALSE;
return TRUE;
}

void RDataSRV_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataSRV RDataSRV_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataSRV.");
RDataSRV ret_val;
if (single_value->field_priority.is_bound()) {
ret_val.priority() = single_value->field_priority.valueof();
}
if (single_value->field_weight.is_bound()) {
ret_val.weight() = single_value->field_weight.valueof();
}
if (single_value->field_portnum.is_bound()) {
ret_val.portnum() = single_value->field_portnum.valueof();
}
if (single_value->field_target.is_bound()) {
ret_val.target() = single_value->field_target.valueof();
}
return ret_val;
}

void RDataSRV_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataSRV.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataSRV_template[list_length];
}

RDataSRV_template& RDataSRV_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataSRV.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataSRV.");
return value_list.list_value[list_index];
}

INTEGER_template& RDataSRV_template::priority()
{
set_specific();
return single_value->field_priority;
}

const INTEGER_template& RDataSRV_template::priority() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field priority of a non-specific template of type @DNS_Types.RDataSRV.");
return single_value->field_priority;
}

INTEGER_template& RDataSRV_template::weight()
{
set_specific();
return single_value->field_weight;
}

const INTEGER_template& RDataSRV_template::weight() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field weight of a non-specific template of type @DNS_Types.RDataSRV.");
return single_value->field_weight;
}

INTEGER_template& RDataSRV_template::portnum()
{
set_specific();
return single_value->field_portnum;
}

const INTEGER_template& RDataSRV_template::portnum() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field portnum of a non-specific template of type @DNS_Types.RDataSRV.");
return single_value->field_portnum;
}

CHARSTRING_template& RDataSRV_template::target()
{
set_specific();
return single_value->field_target;
}

const CHARSTRING_template& RDataSRV_template::target() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field target of a non-specific template of type @DNS_Types.RDataSRV.");
return single_value->field_target;
}

int RDataSRV_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSRV which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 4;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataSRV containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSRV containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSRV containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSRV containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataSRV containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataSRV.");
  }
  return 0;
}

void RDataSRV_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ priority := ");
single_value->field_priority.log();
TTCN_Logger::log_event_str(", weight := ");
single_value->field_weight.log();
TTCN_Logger::log_event_str(", portnum := ");
single_value->field_portnum.log();
TTCN_Logger::log_event_str(", target := ");
single_value->field_target.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataSRV_template::log_match(const RDataSRV& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_priority.match(match_value.priority())){
TTCN_Logger::log_logmatch_info(".priority");
single_value->field_priority.log_match(match_value.priority());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_weight.match(match_value.weight())){
TTCN_Logger::log_logmatch_info(".weight");
single_value->field_weight.log_match(match_value.weight());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_portnum.match(match_value.portnum())){
TTCN_Logger::log_logmatch_info(".portnum");
single_value->field_portnum.log_match(match_value.portnum());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_target.match(match_value.target())){
TTCN_Logger::log_logmatch_info(".target");
single_value->field_target.log_match(match_value.target());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ priority := ");
single_value->field_priority.log_match(match_value.priority());
TTCN_Logger::log_event_str(", weight := ");
single_value->field_weight.log_match(match_value.weight());
TTCN_Logger::log_event_str(", portnum := ");
single_value->field_portnum.log_match(match_value.portnum());
TTCN_Logger::log_event_str(", target := ");
single_value->field_target.log_match(match_value.target());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataSRV_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_priority.encode_text(text_buf);
single_value->field_weight.encode_text(text_buf);
single_value->field_portnum.encode_text(text_buf);
single_value->field_target.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataSRV.");
}
}

void RDataSRV_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_priority.decode_text(text_buf);
single_value->field_weight.decode_text(text_buf);
single_value->field_portnum.decode_text(text_buf);
single_value->field_target.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataSRV_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataSRV.");
}
}

void RDataSRV_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataSRV'");
    }
    if (strcmp("priority", param_field) == 0) {
      priority().set_param(param);
      return;
    } else if (strcmp("weight", param_field) == 0) {
      weight().set_param(param);
      return;
    } else if (strcmp("portnum", param_field) == 0) {
      portnum().set_param(param);
      return;
    } else if (strcmp("target", param_field) == 0) {
      target().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataSRV'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataSRV has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) priority().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) weight().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) portnum().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) target().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "priority")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          priority().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "weight")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          weight().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "portnum")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          portnum().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "target")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          target().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataSRV: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataSRV");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataSRV_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_priority.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSRV");
single_value->field_weight.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSRV");
single_value->field_portnum.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSRV");
single_value->field_target.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataSRV");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataSRV");
}

boolean RDataSRV_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataSRV_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

RDataNAPTR::RDataNAPTR()
{
  bound_flag = FALSE;
}

RDataNAPTR::RDataNAPTR(const INTEGER& par_order,
    const INTEGER& par_preference,
    const CHARSTRING& par_flags,
    const CHARSTRING& par_services,
    const CHARSTRING& par_regexpString,
    const CHARSTRING& par_replacement)
  :   field_order(par_order),
  field_preference(par_preference),
  field_flags(par_flags),
  field_services(par_services),
  field_regexpString(par_regexpString),
  field_replacement(par_replacement)
{
  bound_flag = TRUE;
}

RDataNAPTR::RDataNAPTR(const RDataNAPTR& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.RDataNAPTR.");
bound_flag = TRUE;
if (other_value.order().is_bound()) field_order = other_value.order();
else field_order.clean_up();
if (other_value.preference().is_bound()) field_preference = other_value.preference();
else field_preference.clean_up();
if (other_value.flags().is_bound()) field_flags = other_value.flags();
else field_flags.clean_up();
if (other_value.services().is_bound()) field_services = other_value.services();
else field_services.clean_up();
if (other_value.regexpString().is_bound()) field_regexpString = other_value.regexpString();
else field_regexpString.clean_up();
if (other_value.replacement().is_bound()) field_replacement = other_value.replacement();
else field_replacement.clean_up();
}

void RDataNAPTR::clean_up()
{
field_order.clean_up();
field_preference.clean_up();
field_flags.clean_up();
field_services.clean_up();
field_regexpString.clean_up();
field_replacement.clean_up();
bound_flag = FALSE;
}

RDataNAPTR& RDataNAPTR::operator=(const RDataNAPTR& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.RDataNAPTR.");
  bound_flag = TRUE;
  if (other_value.order().is_bound()) field_order = other_value.order();
  else field_order.clean_up();
  if (other_value.preference().is_bound()) field_preference = other_value.preference();
  else field_preference.clean_up();
  if (other_value.flags().is_bound()) field_flags = other_value.flags();
  else field_flags.clean_up();
  if (other_value.services().is_bound()) field_services = other_value.services();
  else field_services.clean_up();
  if (other_value.regexpString().is_bound()) field_regexpString = other_value.regexpString();
  else field_regexpString.clean_up();
  if (other_value.replacement().is_bound()) field_replacement = other_value.replacement();
  else field_replacement.clean_up();
}
return *this;
}

boolean RDataNAPTR::operator==(const RDataNAPTR& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_order==other_value.field_order
  && field_preference==other_value.field_preference
  && field_flags==other_value.field_flags
  && field_services==other_value.field_services
  && field_regexpString==other_value.field_regexpString
  && field_replacement==other_value.field_replacement;
}

boolean RDataNAPTR::is_bound() const
{
if (bound_flag) return TRUE;
if(field_order.is_bound()) return TRUE;
if(field_preference.is_bound()) return TRUE;
if(field_flags.is_bound()) return TRUE;
if(field_services.is_bound()) return TRUE;
if(field_regexpString.is_bound()) return TRUE;
if(field_replacement.is_bound()) return TRUE;
return FALSE;
}
boolean RDataNAPTR::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_order.is_value()) return FALSE;
if(!field_preference.is_value()) return FALSE;
if(!field_flags.is_value()) return FALSE;
if(!field_services.is_value()) return FALSE;
if(!field_regexpString.is_value()) return FALSE;
if(!field_replacement.is_value()) return FALSE;
return TRUE;
}
int RDataNAPTR::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.RDataNAPTR");
  return 6;
}

void RDataNAPTR::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ order := ");
field_order.log();
TTCN_Logger::log_event_str(", preference := ");
field_preference.log();
TTCN_Logger::log_event_str(", flags := ");
field_flags.log();
TTCN_Logger::log_event_str(", services := ");
field_services.log();
TTCN_Logger::log_event_str(", regexpString := ");
field_regexpString.log();
TTCN_Logger::log_event_str(", replacement := ");
field_replacement.log();
TTCN_Logger::log_event_str(" }");
}

void RDataNAPTR::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.RDataNAPTR'");
    }
    if (strcmp("order", param_field) == 0) {
      order().set_param(param);
      return;
    } else if (strcmp("preference", param_field) == 0) {
      preference().set_param(param);
      return;
    } else if (strcmp("flags", param_field) == 0) {
      flags().set_param(param);
      return;
    } else if (strcmp("services", param_field) == 0) {
      services().set_param(param);
      return;
    } else if (strcmp("regexpString", param_field) == 0) {
      regexpString().set_param(param);
      return;
    } else if (strcmp("replacement", param_field) == 0) {
      replacement().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.RDataNAPTR'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record value of type @DNS_Types.RDataNAPTR has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) order().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) preference().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) flags().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) services().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) regexpString().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) replacement().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "order")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          order().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "preference")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          preference().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "flags")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          flags().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "services")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          services().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "regexpString")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          regexpString().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "replacement")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          replacement().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataNAPTR: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.RDataNAPTR");
  }
}

void RDataNAPTR::set_implicit_omit()
{
if (order().is_bound()) order().set_implicit_omit();
if (preference().is_bound()) preference().set_implicit_omit();
if (flags().is_bound()) flags().set_implicit_omit();
if (services().is_bound()) services().set_implicit_omit();
if (regexpString().is_bound()) regexpString().set_implicit_omit();
if (replacement().is_bound()) replacement().set_implicit_omit();
}

void RDataNAPTR::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.RDataNAPTR.");
field_order.encode_text(text_buf);
field_preference.encode_text(text_buf);
field_flags.encode_text(text_buf);
field_services.encode_text(text_buf);
field_regexpString.encode_text(text_buf);
field_replacement.encode_text(text_buf);
}

void RDataNAPTR::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_order.decode_text(text_buf);
field_preference.decode_text(text_buf);
field_flags.decode_text(text_buf);
field_services.decode_text(text_buf);
field_regexpString.decode_text(text_buf);
field_replacement.decode_text(text_buf);
}

struct RDataNAPTR_template::single_value_struct {
INTEGER_template field_order;
INTEGER_template field_preference;
CHARSTRING_template field_flags;
CHARSTRING_template field_services;
CHARSTRING_template field_regexpString;
CHARSTRING_template field_replacement;
};

void RDataNAPTR_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_order = ANY_VALUE;
single_value->field_preference = ANY_VALUE;
single_value->field_flags = ANY_VALUE;
single_value->field_services = ANY_VALUE;
single_value->field_regexpString = ANY_VALUE;
single_value->field_replacement = ANY_VALUE;
}
}
}

void RDataNAPTR_template::copy_value(const RDataNAPTR& other_value)
{
single_value = new single_value_struct;
if (other_value.order().is_bound()) {
  single_value->field_order = other_value.order();
} else {
  single_value->field_order.clean_up();
}
if (other_value.preference().is_bound()) {
  single_value->field_preference = other_value.preference();
} else {
  single_value->field_preference.clean_up();
}
if (other_value.flags().is_bound()) {
  single_value->field_flags = other_value.flags();
} else {
  single_value->field_flags.clean_up();
}
if (other_value.services().is_bound()) {
  single_value->field_services = other_value.services();
} else {
  single_value->field_services.clean_up();
}
if (other_value.regexpString().is_bound()) {
  single_value->field_regexpString = other_value.regexpString();
} else {
  single_value->field_regexpString.clean_up();
}
if (other_value.replacement().is_bound()) {
  single_value->field_replacement = other_value.replacement();
} else {
  single_value->field_replacement.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void RDataNAPTR_template::copy_template(const RDataNAPTR_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.order().get_selection()) {
single_value->field_order = other_value.order();
} else {
single_value->field_order.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.preference().get_selection()) {
single_value->field_preference = other_value.preference();
} else {
single_value->field_preference.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.flags().get_selection()) {
single_value->field_flags = other_value.flags();
} else {
single_value->field_flags.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.services().get_selection()) {
single_value->field_services = other_value.services();
} else {
single_value->field_services.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.regexpString().get_selection()) {
single_value->field_regexpString = other_value.regexpString();
} else {
single_value->field_regexpString.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.replacement().get_selection()) {
single_value->field_replacement = other_value.replacement();
} else {
single_value->field_replacement.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new RDataNAPTR_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.RDataNAPTR.");
break;
}
set_selection(other_value);
}

RDataNAPTR_template::RDataNAPTR_template()
{
}

RDataNAPTR_template::RDataNAPTR_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

RDataNAPTR_template::RDataNAPTR_template(const RDataNAPTR& other_value)
{
copy_value(other_value);
}

RDataNAPTR_template::RDataNAPTR_template(const OPTIONAL<RDataNAPTR>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataNAPTR&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.RDataNAPTR from an unbound optional field.");
}
}

RDataNAPTR_template::RDataNAPTR_template(const RDataNAPTR_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

RDataNAPTR_template::~RDataNAPTR_template()
{
clean_up();
}

RDataNAPTR_template& RDataNAPTR_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

RDataNAPTR_template& RDataNAPTR_template::operator=(const RDataNAPTR& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

RDataNAPTR_template& RDataNAPTR_template::operator=(const OPTIONAL<RDataNAPTR>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const RDataNAPTR&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.RDataNAPTR.");
}
return *this;
}

RDataNAPTR_template& RDataNAPTR_template::operator=(const RDataNAPTR_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean RDataNAPTR_template::match(const RDataNAPTR& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.order().is_bound()) return FALSE;
if(!single_value->field_order.match(other_value.order()))return FALSE;
if(!other_value.preference().is_bound()) return FALSE;
if(!single_value->field_preference.match(other_value.preference()))return FALSE;
if(!other_value.flags().is_bound()) return FALSE;
if(!single_value->field_flags.match(other_value.flags()))return FALSE;
if(!other_value.services().is_bound()) return FALSE;
if(!single_value->field_services.match(other_value.services()))return FALSE;
if(!other_value.regexpString().is_bound()) return FALSE;
if(!single_value->field_regexpString.match(other_value.regexpString()))return FALSE;
if(!other_value.replacement().is_bound()) return FALSE;
if(!single_value->field_replacement.match(other_value.replacement()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.RDataNAPTR.");
}
return FALSE;
}

boolean RDataNAPTR_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_order.is_bound()) return TRUE;
if (single_value->field_preference.is_bound()) return TRUE;
if (single_value->field_flags.is_bound()) return TRUE;
if (single_value->field_services.is_bound()) return TRUE;
if (single_value->field_regexpString.is_bound()) return TRUE;
if (single_value->field_replacement.is_bound()) return TRUE;
return FALSE;
}

boolean RDataNAPTR_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_order.is_value()) return FALSE;
if (!single_value->field_preference.is_value()) return FALSE;
if (!single_value->field_flags.is_value()) return FALSE;
if (!single_value->field_services.is_value()) return FALSE;
if (!single_value->field_regexpString.is_value()) return FALSE;
if (!single_value->field_replacement.is_value()) return FALSE;
return TRUE;
}

void RDataNAPTR_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

RDataNAPTR RDataNAPTR_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.RDataNAPTR.");
RDataNAPTR ret_val;
if (single_value->field_order.is_bound()) {
ret_val.order() = single_value->field_order.valueof();
}
if (single_value->field_preference.is_bound()) {
ret_val.preference() = single_value->field_preference.valueof();
}
if (single_value->field_flags.is_bound()) {
ret_val.flags() = single_value->field_flags.valueof();
}
if (single_value->field_services.is_bound()) {
ret_val.services() = single_value->field_services.valueof();
}
if (single_value->field_regexpString.is_bound()) {
ret_val.regexpString() = single_value->field_regexpString.valueof();
}
if (single_value->field_replacement.is_bound()) {
ret_val.replacement() = single_value->field_replacement.valueof();
}
return ret_val;
}

void RDataNAPTR_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.RDataNAPTR.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new RDataNAPTR_template[list_length];
}

RDataNAPTR_template& RDataNAPTR_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.RDataNAPTR.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.RDataNAPTR.");
return value_list.list_value[list_index];
}

INTEGER_template& RDataNAPTR_template::order()
{
set_specific();
return single_value->field_order;
}

const INTEGER_template& RDataNAPTR_template::order() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field order of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_order;
}

INTEGER_template& RDataNAPTR_template::preference()
{
set_specific();
return single_value->field_preference;
}

const INTEGER_template& RDataNAPTR_template::preference() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field preference of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_preference;
}

CHARSTRING_template& RDataNAPTR_template::flags()
{
set_specific();
return single_value->field_flags;
}

const CHARSTRING_template& RDataNAPTR_template::flags() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field flags of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_flags;
}

CHARSTRING_template& RDataNAPTR_template::services()
{
set_specific();
return single_value->field_services;
}

const CHARSTRING_template& RDataNAPTR_template::services() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field services of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_services;
}

CHARSTRING_template& RDataNAPTR_template::regexpString()
{
set_specific();
return single_value->field_regexpString;
}

const CHARSTRING_template& RDataNAPTR_template::regexpString() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field regexpString of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_regexpString;
}

CHARSTRING_template& RDataNAPTR_template::replacement()
{
set_specific();
return single_value->field_replacement;
}

const CHARSTRING_template& RDataNAPTR_template::replacement() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field replacement of a non-specific template of type @DNS_Types.RDataNAPTR.");
return single_value->field_replacement;
}

int RDataNAPTR_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 6;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.RDataNAPTR containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.RDataNAPTR.");
  }
  return 0;
}

void RDataNAPTR_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ order := ");
single_value->field_order.log();
TTCN_Logger::log_event_str(", preference := ");
single_value->field_preference.log();
TTCN_Logger::log_event_str(", flags := ");
single_value->field_flags.log();
TTCN_Logger::log_event_str(", services := ");
single_value->field_services.log();
TTCN_Logger::log_event_str(", regexpString := ");
single_value->field_regexpString.log();
TTCN_Logger::log_event_str(", replacement := ");
single_value->field_replacement.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void RDataNAPTR_template::log_match(const RDataNAPTR& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_order.match(match_value.order())){
TTCN_Logger::log_logmatch_info(".order");
single_value->field_order.log_match(match_value.order());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_preference.match(match_value.preference())){
TTCN_Logger::log_logmatch_info(".preference");
single_value->field_preference.log_match(match_value.preference());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_flags.match(match_value.flags())){
TTCN_Logger::log_logmatch_info(".flags");
single_value->field_flags.log_match(match_value.flags());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_services.match(match_value.services())){
TTCN_Logger::log_logmatch_info(".services");
single_value->field_services.log_match(match_value.services());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_regexpString.match(match_value.regexpString())){
TTCN_Logger::log_logmatch_info(".regexpString");
single_value->field_regexpString.log_match(match_value.regexpString());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_replacement.match(match_value.replacement())){
TTCN_Logger::log_logmatch_info(".replacement");
single_value->field_replacement.log_match(match_value.replacement());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ order := ");
single_value->field_order.log_match(match_value.order());
TTCN_Logger::log_event_str(", preference := ");
single_value->field_preference.log_match(match_value.preference());
TTCN_Logger::log_event_str(", flags := ");
single_value->field_flags.log_match(match_value.flags());
TTCN_Logger::log_event_str(", services := ");
single_value->field_services.log_match(match_value.services());
TTCN_Logger::log_event_str(", regexpString := ");
single_value->field_regexpString.log_match(match_value.regexpString());
TTCN_Logger::log_event_str(", replacement := ");
single_value->field_replacement.log_match(match_value.replacement());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void RDataNAPTR_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_order.encode_text(text_buf);
single_value->field_preference.encode_text(text_buf);
single_value->field_flags.encode_text(text_buf);
single_value->field_services.encode_text(text_buf);
single_value->field_regexpString.encode_text(text_buf);
single_value->field_replacement.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.RDataNAPTR.");
}
}

void RDataNAPTR_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_order.decode_text(text_buf);
single_value->field_preference.decode_text(text_buf);
single_value->field_flags.decode_text(text_buf);
single_value->field_services.decode_text(text_buf);
single_value->field_regexpString.decode_text(text_buf);
single_value->field_replacement.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new RDataNAPTR_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.RDataNAPTR.");
}
}

void RDataNAPTR_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.RDataNAPTR'");
    }
    if (strcmp("order", param_field) == 0) {
      order().set_param(param);
      return;
    } else if (strcmp("preference", param_field) == 0) {
      preference().set_param(param);
      return;
    } else if (strcmp("flags", param_field) == 0) {
      flags().set_param(param);
      return;
    } else if (strcmp("services", param_field) == 0) {
      services().set_param(param);
      return;
    } else if (strcmp("regexpString", param_field) == 0) {
      regexpString().set_param(param);
      return;
    } else if (strcmp("replacement", param_field) == 0) {
      replacement().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.RDataNAPTR'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record template of type @DNS_Types.RDataNAPTR has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) order().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) preference().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) flags().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) services().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) regexpString().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) replacement().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "order")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          order().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "preference")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          preference().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "flags")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          flags().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "services")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          services().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "regexpString")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          regexpString().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "replacement")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          replacement().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.RDataNAPTR: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.RDataNAPTR");
  }
  is_ifpresent = param.get_ifpresent();
}

void RDataNAPTR_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_order.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
single_value->field_preference.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
single_value->field_flags.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
single_value->field_services.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
single_value->field_regexpString.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
single_value->field_replacement.check_restriction(t_res, t_name ? t_name : "@DNS_Types.RDataNAPTR");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.RDataNAPTR");
}

boolean RDataNAPTR_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean RDataNAPTR_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

ResourceRecord::ResourceRecord()
{
  bound_flag = FALSE;
}

ResourceRecord::ResourceRecord(const CHARSTRING& par_name,
    const INTEGER& par_rrType,
    const INTEGER& par_rrClass,
    const OCTETSTRING& par_ttl,
    const INTEGER& par_rdLength,
    const ResourceData& par_rData)
  :   field_name(par_name),
  field_rrType(par_rrType),
  field_rrClass(par_rrClass),
  field_ttl(par_ttl),
  field_rdLength(par_rdLength),
  field_rData(par_rData)
{
  bound_flag = TRUE;
}

ResourceRecord::ResourceRecord(const ResourceRecord& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.ResourceRecord.");
bound_flag = TRUE;
if (other_value.name().is_bound()) field_name = other_value.name();
else field_name.clean_up();
if (other_value.rrType().is_bound()) field_rrType = other_value.rrType();
else field_rrType.clean_up();
if (other_value.rrClass().is_bound()) field_rrClass = other_value.rrClass();
else field_rrClass.clean_up();
if (other_value.ttl().is_bound()) field_ttl = other_value.ttl();
else field_ttl.clean_up();
if (other_value.rdLength().is_bound()) field_rdLength = other_value.rdLength();
else field_rdLength.clean_up();
if (other_value.rData().is_bound()) field_rData = other_value.rData();
else field_rData.clean_up();
}

void ResourceRecord::clean_up()
{
field_name.clean_up();
field_rrType.clean_up();
field_rrClass.clean_up();
field_ttl.clean_up();
field_rdLength.clean_up();
field_rData.clean_up();
bound_flag = FALSE;
}

ResourceRecord& ResourceRecord::operator=(const ResourceRecord& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.ResourceRecord.");
  bound_flag = TRUE;
  if (other_value.name().is_bound()) field_name = other_value.name();
  else field_name.clean_up();
  if (other_value.rrType().is_bound()) field_rrType = other_value.rrType();
  else field_rrType.clean_up();
  if (other_value.rrClass().is_bound()) field_rrClass = other_value.rrClass();
  else field_rrClass.clean_up();
  if (other_value.ttl().is_bound()) field_ttl = other_value.ttl();
  else field_ttl.clean_up();
  if (other_value.rdLength().is_bound()) field_rdLength = other_value.rdLength();
  else field_rdLength.clean_up();
  if (other_value.rData().is_bound()) field_rData = other_value.rData();
  else field_rData.clean_up();
}
return *this;
}

boolean ResourceRecord::operator==(const ResourceRecord& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_name==other_value.field_name
  && field_rrType==other_value.field_rrType
  && field_rrClass==other_value.field_rrClass
  && field_ttl==other_value.field_ttl
  && field_rdLength==other_value.field_rdLength
  && field_rData==other_value.field_rData;
}

boolean ResourceRecord::is_bound() const
{
if (bound_flag) return TRUE;
if(field_name.is_bound()) return TRUE;
if(field_rrType.is_bound()) return TRUE;
if(field_rrClass.is_bound()) return TRUE;
if(field_ttl.is_bound()) return TRUE;
if(field_rdLength.is_bound()) return TRUE;
if(field_rData.is_bound()) return TRUE;
return FALSE;
}
boolean ResourceRecord::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_name.is_value()) return FALSE;
if(!field_rrType.is_value()) return FALSE;
if(!field_rrClass.is_value()) return FALSE;
if(!field_ttl.is_value()) return FALSE;
if(!field_rdLength.is_value()) return FALSE;
if(!field_rData.is_value()) return FALSE;
return TRUE;
}
int ResourceRecord::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.ResourceRecord");
  return 6;
}

void ResourceRecord::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ name := ");
field_name.log();
TTCN_Logger::log_event_str(", rrType := ");
field_rrType.log();
TTCN_Logger::log_event_str(", rrClass := ");
field_rrClass.log();
TTCN_Logger::log_event_str(", ttl := ");
field_ttl.log();
TTCN_Logger::log_event_str(", rdLength := ");
field_rdLength.log();
TTCN_Logger::log_event_str(", rData := ");
field_rData.log();
TTCN_Logger::log_event_str(" }");
}

void ResourceRecord::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.ResourceRecord'");
    }
    if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else if (strcmp("rrType", param_field) == 0) {
      rrType().set_param(param);
      return;
    } else if (strcmp("rrClass", param_field) == 0) {
      rrClass().set_param(param);
      return;
    } else if (strcmp("ttl", param_field) == 0) {
      ttl().set_param(param);
      return;
    } else if (strcmp("rdLength", param_field) == 0) {
      rdLength().set_param(param);
      return;
    } else if (strcmp("rData", param_field) == 0) {
      rData().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.ResourceRecord'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record value of type @DNS_Types.ResourceRecord has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) rrType().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) rrClass().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ttl().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) rdLength().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) rData().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rrType")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rrType().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rrClass")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rrClass().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ttl")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ttl().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rdLength")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rdLength().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rData")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rData().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.ResourceRecord: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.ResourceRecord");
  }
}

void ResourceRecord::set_implicit_omit()
{
if (name().is_bound()) name().set_implicit_omit();
if (rrType().is_bound()) rrType().set_implicit_omit();
if (rrClass().is_bound()) rrClass().set_implicit_omit();
if (ttl().is_bound()) ttl().set_implicit_omit();
if (rdLength().is_bound()) rdLength().set_implicit_omit();
if (rData().is_bound()) rData().set_implicit_omit();
}

void ResourceRecord::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.ResourceRecord.");
field_name.encode_text(text_buf);
field_rrType.encode_text(text_buf);
field_rrClass.encode_text(text_buf);
field_ttl.encode_text(text_buf);
field_rdLength.encode_text(text_buf);
field_rData.encode_text(text_buf);
}

void ResourceRecord::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_name.decode_text(text_buf);
field_rrType.decode_text(text_buf);
field_rrClass.decode_text(text_buf);
field_ttl.decode_text(text_buf);
field_rdLength.decode_text(text_buf);
field_rData.decode_text(text_buf);
}

struct ResourceRecord_template::single_value_struct {
CHARSTRING_template field_name;
INTEGER_template field_rrType;
INTEGER_template field_rrClass;
OCTETSTRING_template field_ttl;
INTEGER_template field_rdLength;
ResourceData_template field_rData;
};

void ResourceRecord_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_name = ANY_VALUE;
single_value->field_rrType = ANY_VALUE;
single_value->field_rrClass = ANY_VALUE;
single_value->field_ttl = ANY_VALUE;
single_value->field_rdLength = ANY_VALUE;
single_value->field_rData = ANY_VALUE;
}
}
}

void ResourceRecord_template::copy_value(const ResourceRecord& other_value)
{
single_value = new single_value_struct;
if (other_value.name().is_bound()) {
  single_value->field_name = other_value.name();
} else {
  single_value->field_name.clean_up();
}
if (other_value.rrType().is_bound()) {
  single_value->field_rrType = other_value.rrType();
} else {
  single_value->field_rrType.clean_up();
}
if (other_value.rrClass().is_bound()) {
  single_value->field_rrClass = other_value.rrClass();
} else {
  single_value->field_rrClass.clean_up();
}
if (other_value.ttl().is_bound()) {
  single_value->field_ttl = other_value.ttl();
} else {
  single_value->field_ttl.clean_up();
}
if (other_value.rdLength().is_bound()) {
  single_value->field_rdLength = other_value.rdLength();
} else {
  single_value->field_rdLength.clean_up();
}
if (other_value.rData().is_bound()) {
  single_value->field_rData = other_value.rData();
} else {
  single_value->field_rData.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void ResourceRecord_template::copy_template(const ResourceRecord_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.name().get_selection()) {
single_value->field_name = other_value.name();
} else {
single_value->field_name.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rrType().get_selection()) {
single_value->field_rrType = other_value.rrType();
} else {
single_value->field_rrType.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rrClass().get_selection()) {
single_value->field_rrClass = other_value.rrClass();
} else {
single_value->field_rrClass.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.ttl().get_selection()) {
single_value->field_ttl = other_value.ttl();
} else {
single_value->field_ttl.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rdLength().get_selection()) {
single_value->field_rdLength = other_value.rdLength();
} else {
single_value->field_rdLength.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.rData().get_selection()) {
single_value->field_rData = other_value.rData();
} else {
single_value->field_rData.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new ResourceRecord_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.ResourceRecord.");
break;
}
set_selection(other_value);
}

ResourceRecord_template::ResourceRecord_template()
{
}

ResourceRecord_template::ResourceRecord_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

ResourceRecord_template::ResourceRecord_template(const ResourceRecord& other_value)
{
copy_value(other_value);
}

ResourceRecord_template::ResourceRecord_template(const OPTIONAL<ResourceRecord>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceRecord&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.ResourceRecord from an unbound optional field.");
}
}

ResourceRecord_template::ResourceRecord_template(const ResourceRecord_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

ResourceRecord_template::~ResourceRecord_template()
{
clean_up();
}

ResourceRecord_template& ResourceRecord_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

ResourceRecord_template& ResourceRecord_template::operator=(const ResourceRecord& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

ResourceRecord_template& ResourceRecord_template::operator=(const OPTIONAL<ResourceRecord>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const ResourceRecord&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.ResourceRecord.");
}
return *this;
}

ResourceRecord_template& ResourceRecord_template::operator=(const ResourceRecord_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean ResourceRecord_template::match(const ResourceRecord& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.name().is_bound()) return FALSE;
if(!single_value->field_name.match(other_value.name()))return FALSE;
if(!other_value.rrType().is_bound()) return FALSE;
if(!single_value->field_rrType.match(other_value.rrType()))return FALSE;
if(!other_value.rrClass().is_bound()) return FALSE;
if(!single_value->field_rrClass.match(other_value.rrClass()))return FALSE;
if(!other_value.ttl().is_bound()) return FALSE;
if(!single_value->field_ttl.match(other_value.ttl()))return FALSE;
if(!other_value.rdLength().is_bound()) return FALSE;
if(!single_value->field_rdLength.match(other_value.rdLength()))return FALSE;
if(!other_value.rData().is_bound()) return FALSE;
if(!single_value->field_rData.match(other_value.rData()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.ResourceRecord.");
}
return FALSE;
}

boolean ResourceRecord_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_name.is_bound()) return TRUE;
if (single_value->field_rrType.is_bound()) return TRUE;
if (single_value->field_rrClass.is_bound()) return TRUE;
if (single_value->field_ttl.is_bound()) return TRUE;
if (single_value->field_rdLength.is_bound()) return TRUE;
if (single_value->field_rData.is_bound()) return TRUE;
return FALSE;
}

boolean ResourceRecord_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_name.is_value()) return FALSE;
if (!single_value->field_rrType.is_value()) return FALSE;
if (!single_value->field_rrClass.is_value()) return FALSE;
if (!single_value->field_ttl.is_value()) return FALSE;
if (!single_value->field_rdLength.is_value()) return FALSE;
if (!single_value->field_rData.is_value()) return FALSE;
return TRUE;
}

void ResourceRecord_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

ResourceRecord ResourceRecord_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.ResourceRecord.");
ResourceRecord ret_val;
if (single_value->field_name.is_bound()) {
ret_val.name() = single_value->field_name.valueof();
}
if (single_value->field_rrType.is_bound()) {
ret_val.rrType() = single_value->field_rrType.valueof();
}
if (single_value->field_rrClass.is_bound()) {
ret_val.rrClass() = single_value->field_rrClass.valueof();
}
if (single_value->field_ttl.is_bound()) {
ret_val.ttl() = single_value->field_ttl.valueof();
}
if (single_value->field_rdLength.is_bound()) {
ret_val.rdLength() = single_value->field_rdLength.valueof();
}
if (single_value->field_rData.is_bound()) {
ret_val.rData() = single_value->field_rData.valueof();
}
return ret_val;
}

void ResourceRecord_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.ResourceRecord.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new ResourceRecord_template[list_length];
}

ResourceRecord_template& ResourceRecord_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.ResourceRecord.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.ResourceRecord.");
return value_list.list_value[list_index];
}

CHARSTRING_template& ResourceRecord_template::name()
{
set_specific();
return single_value->field_name;
}

const CHARSTRING_template& ResourceRecord_template::name() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field name of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_name;
}

INTEGER_template& ResourceRecord_template::rrType()
{
set_specific();
return single_value->field_rrType;
}

const INTEGER_template& ResourceRecord_template::rrType() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rrType of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_rrType;
}

INTEGER_template& ResourceRecord_template::rrClass()
{
set_specific();
return single_value->field_rrClass;
}

const INTEGER_template& ResourceRecord_template::rrClass() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rrClass of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_rrClass;
}

OCTETSTRING_template& ResourceRecord_template::ttl()
{
set_specific();
return single_value->field_ttl;
}

const OCTETSTRING_template& ResourceRecord_template::ttl() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field ttl of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_ttl;
}

INTEGER_template& ResourceRecord_template::rdLength()
{
set_specific();
return single_value->field_rdLength;
}

const INTEGER_template& ResourceRecord_template::rdLength() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rdLength of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_rdLength;
}

ResourceData_template& ResourceRecord_template::rData()
{
set_specific();
return single_value->field_rData;
}

const ResourceData_template& ResourceRecord_template::rData() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field rData of a non-specific template of type @DNS_Types.ResourceRecord.");
return single_value->field_rData;
}

int ResourceRecord_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 6;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.ResourceRecord containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.ResourceRecord.");
  }
  return 0;
}

void ResourceRecord_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log();
TTCN_Logger::log_event_str(", rrType := ");
single_value->field_rrType.log();
TTCN_Logger::log_event_str(", rrClass := ");
single_value->field_rrClass.log();
TTCN_Logger::log_event_str(", ttl := ");
single_value->field_ttl.log();
TTCN_Logger::log_event_str(", rdLength := ");
single_value->field_rdLength.log();
TTCN_Logger::log_event_str(", rData := ");
single_value->field_rData.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void ResourceRecord_template::log_match(const ResourceRecord& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_name.match(match_value.name())){
TTCN_Logger::log_logmatch_info(".name");
single_value->field_name.log_match(match_value.name());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rrType.match(match_value.rrType())){
TTCN_Logger::log_logmatch_info(".rrType");
single_value->field_rrType.log_match(match_value.rrType());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rrClass.match(match_value.rrClass())){
TTCN_Logger::log_logmatch_info(".rrClass");
single_value->field_rrClass.log_match(match_value.rrClass());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_ttl.match(match_value.ttl())){
TTCN_Logger::log_logmatch_info(".ttl");
single_value->field_ttl.log_match(match_value.ttl());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rdLength.match(match_value.rdLength())){
TTCN_Logger::log_logmatch_info(".rdLength");
single_value->field_rdLength.log_match(match_value.rdLength());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_rData.match(match_value.rData())){
TTCN_Logger::log_logmatch_info(".rData");
single_value->field_rData.log_match(match_value.rData());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ name := ");
single_value->field_name.log_match(match_value.name());
TTCN_Logger::log_event_str(", rrType := ");
single_value->field_rrType.log_match(match_value.rrType());
TTCN_Logger::log_event_str(", rrClass := ");
single_value->field_rrClass.log_match(match_value.rrClass());
TTCN_Logger::log_event_str(", ttl := ");
single_value->field_ttl.log_match(match_value.ttl());
TTCN_Logger::log_event_str(", rdLength := ");
single_value->field_rdLength.log_match(match_value.rdLength());
TTCN_Logger::log_event_str(", rData := ");
single_value->field_rData.log_match(match_value.rData());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void ResourceRecord_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_name.encode_text(text_buf);
single_value->field_rrType.encode_text(text_buf);
single_value->field_rrClass.encode_text(text_buf);
single_value->field_ttl.encode_text(text_buf);
single_value->field_rdLength.encode_text(text_buf);
single_value->field_rData.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.ResourceRecord.");
}
}

void ResourceRecord_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_name.decode_text(text_buf);
single_value->field_rrType.decode_text(text_buf);
single_value->field_rrClass.decode_text(text_buf);
single_value->field_ttl.decode_text(text_buf);
single_value->field_rdLength.decode_text(text_buf);
single_value->field_rData.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new ResourceRecord_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.ResourceRecord.");
}
}

void ResourceRecord_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.ResourceRecord'");
    }
    if (strcmp("name", param_field) == 0) {
      name().set_param(param);
      return;
    } else if (strcmp("rrType", param_field) == 0) {
      rrType().set_param(param);
      return;
    } else if (strcmp("rrClass", param_field) == 0) {
      rrClass().set_param(param);
      return;
    } else if (strcmp("ttl", param_field) == 0) {
      ttl().set_param(param);
      return;
    } else if (strcmp("rdLength", param_field) == 0) {
      rdLength().set_param(param);
      return;
    } else if (strcmp("rData", param_field) == 0) {
      rData().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.ResourceRecord'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (6<param.get_size()) {
      param.error("record template of type @DNS_Types.ResourceRecord has 6 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) name().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) rrType().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) rrClass().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) ttl().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) rdLength().set_param(*param.get_elem(4));
    if (param.get_size()>5 && param.get_elem(5)->get_type()!=Module_Param::MP_NotUsed) rData().set_param(*param.get_elem(5));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "name")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          name().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rrType")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rrType().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rrClass")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rrClass().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "ttl")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          ttl().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rdLength")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rdLength().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "rData")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          rData().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.ResourceRecord: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.ResourceRecord");
  }
  is_ifpresent = param.get_ifpresent();
}

void ResourceRecord_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_name.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
single_value->field_rrType.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
single_value->field_rrClass.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
single_value->field_ttl.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
single_value->field_rdLength.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
single_value->field_rData.check_restriction(t_res, t_name ? t_name : "@DNS_Types.ResourceRecord");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.ResourceRecord");
}

boolean ResourceRecord_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean ResourceRecord_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

PDU__DNS::PDU__DNS()
{
  bound_flag = FALSE;
}

PDU__DNS::PDU__DNS(const DnsHeader& par_header,
    const QResourceRecords& par_queries,
    const ResourceRecords& par_answers,
    const ResourceRecords& par_nameServerRecords,
    const ResourceRecords& par_additionalRecords)
  :   field_header(par_header),
  field_queries(par_queries),
  field_answers(par_answers),
  field_nameServerRecords(par_nameServerRecords),
  field_additionalRecords(par_additionalRecords)
{
  bound_flag = TRUE;
}

PDU__DNS::PDU__DNS(const PDU__DNS& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @DNS_Types.PDU_DNS.");
bound_flag = TRUE;
if (other_value.header().is_bound()) field_header = other_value.header();
else field_header.clean_up();
if (other_value.queries().is_bound()) field_queries = other_value.queries();
else field_queries.clean_up();
if (other_value.answers().is_bound()) field_answers = other_value.answers();
else field_answers.clean_up();
if (other_value.nameServerRecords().is_bound()) field_nameServerRecords = other_value.nameServerRecords();
else field_nameServerRecords.clean_up();
if (other_value.additionalRecords().is_bound()) field_additionalRecords = other_value.additionalRecords();
else field_additionalRecords.clean_up();
}

void PDU__DNS::clean_up()
{
field_header.clean_up();
field_queries.clean_up();
field_answers.clean_up();
field_nameServerRecords.clean_up();
field_additionalRecords.clean_up();
bound_flag = FALSE;
}

PDU__DNS& PDU__DNS::operator=(const PDU__DNS& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @DNS_Types.PDU_DNS.");
  bound_flag = TRUE;
  if (other_value.header().is_bound()) field_header = other_value.header();
  else field_header.clean_up();
  if (other_value.queries().is_bound()) field_queries = other_value.queries();
  else field_queries.clean_up();
  if (other_value.answers().is_bound()) field_answers = other_value.answers();
  else field_answers.clean_up();
  if (other_value.nameServerRecords().is_bound()) field_nameServerRecords = other_value.nameServerRecords();
  else field_nameServerRecords.clean_up();
  if (other_value.additionalRecords().is_bound()) field_additionalRecords = other_value.additionalRecords();
  else field_additionalRecords.clean_up();
}
return *this;
}

boolean PDU__DNS::operator==(const PDU__DNS& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_header==other_value.field_header
  && field_queries==other_value.field_queries
  && field_answers==other_value.field_answers
  && field_nameServerRecords==other_value.field_nameServerRecords
  && field_additionalRecords==other_value.field_additionalRecords;
}

boolean PDU__DNS::is_bound() const
{
if (bound_flag) return TRUE;
if(field_header.is_bound()) return TRUE;
if(field_queries.is_bound()) return TRUE;
if(field_answers.is_bound()) return TRUE;
if(field_nameServerRecords.is_bound()) return TRUE;
if(field_additionalRecords.is_bound()) return TRUE;
return FALSE;
}
boolean PDU__DNS::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_header.is_value()) return FALSE;
if(!field_queries.is_value()) return FALSE;
if(!field_answers.is_value()) return FALSE;
if(!field_nameServerRecords.is_value()) return FALSE;
if(!field_additionalRecords.is_value()) return FALSE;
return TRUE;
}
int PDU__DNS::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @DNS_Types.PDU_DNS");
  return 5;
}

void PDU__DNS::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ header := ");
field_header.log();
TTCN_Logger::log_event_str(", queries := ");
field_queries.log();
TTCN_Logger::log_event_str(", answers := ");
field_answers.log();
TTCN_Logger::log_event_str(", nameServerRecords := ");
field_nameServerRecords.log();
TTCN_Logger::log_event_str(", additionalRecords := ");
field_additionalRecords.log();
TTCN_Logger::log_event_str(" }");
}

void PDU__DNS::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@DNS_Types.PDU_DNS'");
    }
    if (strcmp("header", param_field) == 0) {
      header().set_param(param);
      return;
    } else if (strcmp("queries", param_field) == 0) {
      queries().set_param(param);
      return;
    } else if (strcmp("answers", param_field) == 0) {
      answers().set_param(param);
      return;
    } else if (strcmp("nameServerRecords", param_field) == 0) {
      nameServerRecords().set_param(param);
      return;
    } else if (strcmp("additionalRecords", param_field) == 0) {
      additionalRecords().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@DNS_Types.PDU_DNS'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record value of type @DNS_Types.PDU_DNS has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) header().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) queries().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) answers().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) nameServerRecords().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) additionalRecords().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "header")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          header().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "queries")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          queries().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "answers")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          answers().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "nameServerRecords")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          nameServerRecords().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "additionalRecords")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          additionalRecords().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.PDU_DNS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@DNS_Types.PDU_DNS");
  }
}

void PDU__DNS::set_implicit_omit()
{
if (header().is_bound()) header().set_implicit_omit();
if (queries().is_bound()) queries().set_implicit_omit();
if (answers().is_bound()) answers().set_implicit_omit();
if (nameServerRecords().is_bound()) nameServerRecords().set_implicit_omit();
if (additionalRecords().is_bound()) additionalRecords().set_implicit_omit();
}

void PDU__DNS::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @DNS_Types.PDU_DNS.");
field_header.encode_text(text_buf);
field_queries.encode_text(text_buf);
field_answers.encode_text(text_buf);
field_nameServerRecords.encode_text(text_buf);
field_additionalRecords.encode_text(text_buf);
}

void PDU__DNS::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_header.decode_text(text_buf);
field_queries.decode_text(text_buf);
field_answers.decode_text(text_buf);
field_nameServerRecords.decode_text(text_buf);
field_additionalRecords.decode_text(text_buf);
}

struct PDU__DNS_template::single_value_struct {
DnsHeader_template field_header;
QResourceRecords_template field_queries;
ResourceRecords_template field_answers;
ResourceRecords_template field_nameServerRecords;
ResourceRecords_template field_additionalRecords;
};

void PDU__DNS_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_header = ANY_VALUE;
single_value->field_queries = ANY_VALUE;
single_value->field_answers = ANY_VALUE;
single_value->field_nameServerRecords = ANY_VALUE;
single_value->field_additionalRecords = ANY_VALUE;
}
}
}

void PDU__DNS_template::copy_value(const PDU__DNS& other_value)
{
single_value = new single_value_struct;
if (other_value.header().is_bound()) {
  single_value->field_header = other_value.header();
} else {
  single_value->field_header.clean_up();
}
if (other_value.queries().is_bound()) {
  single_value->field_queries = other_value.queries();
} else {
  single_value->field_queries.clean_up();
}
if (other_value.answers().is_bound()) {
  single_value->field_answers = other_value.answers();
} else {
  single_value->field_answers.clean_up();
}
if (other_value.nameServerRecords().is_bound()) {
  single_value->field_nameServerRecords = other_value.nameServerRecords();
} else {
  single_value->field_nameServerRecords.clean_up();
}
if (other_value.additionalRecords().is_bound()) {
  single_value->field_additionalRecords = other_value.additionalRecords();
} else {
  single_value->field_additionalRecords.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void PDU__DNS_template::copy_template(const PDU__DNS_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.header().get_selection()) {
single_value->field_header = other_value.header();
} else {
single_value->field_header.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.queries().get_selection()) {
single_value->field_queries = other_value.queries();
} else {
single_value->field_queries.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.answers().get_selection()) {
single_value->field_answers = other_value.answers();
} else {
single_value->field_answers.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.nameServerRecords().get_selection()) {
single_value->field_nameServerRecords = other_value.nameServerRecords();
} else {
single_value->field_nameServerRecords.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.additionalRecords().get_selection()) {
single_value->field_additionalRecords = other_value.additionalRecords();
} else {
single_value->field_additionalRecords.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new PDU__DNS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @DNS_Types.PDU_DNS.");
break;
}
set_selection(other_value);
}

PDU__DNS_template::PDU__DNS_template()
{
}

PDU__DNS_template::PDU__DNS_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

PDU__DNS_template::PDU__DNS_template(const PDU__DNS& other_value)
{
copy_value(other_value);
}

PDU__DNS_template::PDU__DNS_template(const OPTIONAL<PDU__DNS>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const PDU__DNS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @DNS_Types.PDU_DNS from an unbound optional field.");
}
}

PDU__DNS_template::PDU__DNS_template(const PDU__DNS_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

PDU__DNS_template::~PDU__DNS_template()
{
clean_up();
}

PDU__DNS_template& PDU__DNS_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

PDU__DNS_template& PDU__DNS_template::operator=(const PDU__DNS& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

PDU__DNS_template& PDU__DNS_template::operator=(const OPTIONAL<PDU__DNS>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const PDU__DNS&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @DNS_Types.PDU_DNS.");
}
return *this;
}

PDU__DNS_template& PDU__DNS_template::operator=(const PDU__DNS_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean PDU__DNS_template::match(const PDU__DNS& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.header().is_bound()) return FALSE;
if(!single_value->field_header.match(other_value.header()))return FALSE;
if(!other_value.queries().is_bound()) return FALSE;
if(!single_value->field_queries.match(other_value.queries()))return FALSE;
if(!other_value.answers().is_bound()) return FALSE;
if(!single_value->field_answers.match(other_value.answers()))return FALSE;
if(!other_value.nameServerRecords().is_bound()) return FALSE;
if(!single_value->field_nameServerRecords.match(other_value.nameServerRecords()))return FALSE;
if(!other_value.additionalRecords().is_bound()) return FALSE;
if(!single_value->field_additionalRecords.match(other_value.additionalRecords()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @DNS_Types.PDU_DNS.");
}
return FALSE;
}

boolean PDU__DNS_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_header.is_bound()) return TRUE;
if (single_value->field_queries.is_bound()) return TRUE;
if (single_value->field_answers.is_bound()) return TRUE;
if (single_value->field_nameServerRecords.is_bound()) return TRUE;
if (single_value->field_additionalRecords.is_bound()) return TRUE;
return FALSE;
}

boolean PDU__DNS_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_header.is_value()) return FALSE;
if (!single_value->field_queries.is_value()) return FALSE;
if (!single_value->field_answers.is_value()) return FALSE;
if (!single_value->field_nameServerRecords.is_value()) return FALSE;
if (!single_value->field_additionalRecords.is_value()) return FALSE;
return TRUE;
}

void PDU__DNS_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

PDU__DNS PDU__DNS_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @DNS_Types.PDU_DNS.");
PDU__DNS ret_val;
if (single_value->field_header.is_bound()) {
ret_val.header() = single_value->field_header.valueof();
}
if (single_value->field_queries.is_bound()) {
ret_val.queries() = single_value->field_queries.valueof();
}
if (single_value->field_answers.is_bound()) {
ret_val.answers() = single_value->field_answers.valueof();
}
if (single_value->field_nameServerRecords.is_bound()) {
ret_val.nameServerRecords() = single_value->field_nameServerRecords.valueof();
}
if (single_value->field_additionalRecords.is_bound()) {
ret_val.additionalRecords() = single_value->field_additionalRecords.valueof();
}
return ret_val;
}

void PDU__DNS_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @DNS_Types.PDU_DNS.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new PDU__DNS_template[list_length];
}

PDU__DNS_template& PDU__DNS_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @DNS_Types.PDU_DNS.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @DNS_Types.PDU_DNS.");
return value_list.list_value[list_index];
}

DnsHeader_template& PDU__DNS_template::header()
{
set_specific();
return single_value->field_header;
}

const DnsHeader_template& PDU__DNS_template::header() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field header of a non-specific template of type @DNS_Types.PDU_DNS.");
return single_value->field_header;
}

QResourceRecords_template& PDU__DNS_template::queries()
{
set_specific();
return single_value->field_queries;
}

const QResourceRecords_template& PDU__DNS_template::queries() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field queries of a non-specific template of type @DNS_Types.PDU_DNS.");
return single_value->field_queries;
}

ResourceRecords_template& PDU__DNS_template::answers()
{
set_specific();
return single_value->field_answers;
}

const ResourceRecords_template& PDU__DNS_template::answers() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field answers of a non-specific template of type @DNS_Types.PDU_DNS.");
return single_value->field_answers;
}

ResourceRecords_template& PDU__DNS_template::nameServerRecords()
{
set_specific();
return single_value->field_nameServerRecords;
}

const ResourceRecords_template& PDU__DNS_template::nameServerRecords() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field nameServerRecords of a non-specific template of type @DNS_Types.PDU_DNS.");
return single_value->field_nameServerRecords;
}

ResourceRecords_template& PDU__DNS_template::additionalRecords()
{
set_specific();
return single_value->field_additionalRecords;
}

const ResourceRecords_template& PDU__DNS_template::additionalRecords() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field additionalRecords of a non-specific template of type @DNS_Types.PDU_DNS.");
return single_value->field_additionalRecords;
}

int PDU__DNS_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 5;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @DNS_Types.PDU_DNS containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @DNS_Types.PDU_DNS.");
  }
  return 0;
}

void PDU__DNS_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ header := ");
single_value->field_header.log();
TTCN_Logger::log_event_str(", queries := ");
single_value->field_queries.log();
TTCN_Logger::log_event_str(", answers := ");
single_value->field_answers.log();
TTCN_Logger::log_event_str(", nameServerRecords := ");
single_value->field_nameServerRecords.log();
TTCN_Logger::log_event_str(", additionalRecords := ");
single_value->field_additionalRecords.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void PDU__DNS_template::log_match(const PDU__DNS& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_header.match(match_value.header())){
TTCN_Logger::log_logmatch_info(".header");
single_value->field_header.log_match(match_value.header());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_queries.match(match_value.queries())){
TTCN_Logger::log_logmatch_info(".queries");
single_value->field_queries.log_match(match_value.queries());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_answers.match(match_value.answers())){
TTCN_Logger::log_logmatch_info(".answers");
single_value->field_answers.log_match(match_value.answers());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_nameServerRecords.match(match_value.nameServerRecords())){
TTCN_Logger::log_logmatch_info(".nameServerRecords");
single_value->field_nameServerRecords.log_match(match_value.nameServerRecords());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_additionalRecords.match(match_value.additionalRecords())){
TTCN_Logger::log_logmatch_info(".additionalRecords");
single_value->field_additionalRecords.log_match(match_value.additionalRecords());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ header := ");
single_value->field_header.log_match(match_value.header());
TTCN_Logger::log_event_str(", queries := ");
single_value->field_queries.log_match(match_value.queries());
TTCN_Logger::log_event_str(", answers := ");
single_value->field_answers.log_match(match_value.answers());
TTCN_Logger::log_event_str(", nameServerRecords := ");
single_value->field_nameServerRecords.log_match(match_value.nameServerRecords());
TTCN_Logger::log_event_str(", additionalRecords := ");
single_value->field_additionalRecords.log_match(match_value.additionalRecords());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void PDU__DNS_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_header.encode_text(text_buf);
single_value->field_queries.encode_text(text_buf);
single_value->field_answers.encode_text(text_buf);
single_value->field_nameServerRecords.encode_text(text_buf);
single_value->field_additionalRecords.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @DNS_Types.PDU_DNS.");
}
}

void PDU__DNS_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_header.decode_text(text_buf);
single_value->field_queries.decode_text(text_buf);
single_value->field_answers.decode_text(text_buf);
single_value->field_nameServerRecords.decode_text(text_buf);
single_value->field_additionalRecords.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new PDU__DNS_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @DNS_Types.PDU_DNS.");
}
}

void PDU__DNS_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@DNS_Types.PDU_DNS'");
    }
    if (strcmp("header", param_field) == 0) {
      header().set_param(param);
      return;
    } else if (strcmp("queries", param_field) == 0) {
      queries().set_param(param);
      return;
    } else if (strcmp("answers", param_field) == 0) {
      answers().set_param(param);
      return;
    } else if (strcmp("nameServerRecords", param_field) == 0) {
      nameServerRecords().set_param(param);
      return;
    } else if (strcmp("additionalRecords", param_field) == 0) {
      additionalRecords().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@DNS_Types.PDU_DNS'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record template of type @DNS_Types.PDU_DNS has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) header().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) queries().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) answers().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) nameServerRecords().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) additionalRecords().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "header")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          header().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "queries")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          queries().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "answers")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          answers().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "nameServerRecords")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          nameServerRecords().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "additionalRecords")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          additionalRecords().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @DNS_Types.PDU_DNS: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@DNS_Types.PDU_DNS");
  }
  is_ifpresent = param.get_ifpresent();
}

void PDU__DNS_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_header.check_restriction(t_res, t_name ? t_name : "@DNS_Types.PDU_DNS");
single_value->field_queries.check_restriction(t_res, t_name ? t_name : "@DNS_Types.PDU_DNS");
single_value->field_answers.check_restriction(t_res, t_name ? t_name : "@DNS_Types.PDU_DNS");
single_value->field_nameServerRecords.check_restriction(t_res, t_name ? t_name : "@DNS_Types.PDU_DNS");
single_value->field_additionalRecords.check_restriction(t_res, t_name ? t_name : "@DNS_Types.PDU_DNS");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@DNS_Types.PDU_DNS");
}

boolean PDU__DNS_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean PDU__DNS_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const QResourceRecords& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @DNS_Types.QResourceRecords.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const ResourceRecords& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @DNS_Types.ResourceRecords.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
module_object.add_function("enc_PDU_DNS", (genericfunc_t)&enc__PDU__DNS, NULL);
module_object.add_function("dec_PDU_DNS", (genericfunc_t)&dec__PDU__DNS, NULL);
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 74 */
const_DNS__OP__QUERY = 0;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 75 */
const_DNS__OP__IQUERY = 1;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 76 */
const_DNS__OP__STATUS = 2;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 78 */
const_DNS__OP__UPDATE = 5;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 83 */
const_DNS__NO__ERROR = 0;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 84 */
const_DNS__FORMAT__ERROR = 1;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 85 */
const_DNS__SERVER__FAILURE = 2;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 86 */
const_DNS__NAME__ERROR = 3;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 87 */
const_DNS__NOT__IMPLEMENTED = 4;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 88 */
const_DNS__REFUSED = 5;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 90 */
const_DNS__YXDOMAIN = 6;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 91 */
const_DNS__YXRRSET = 7;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 92 */
const_DNS__NXRRSET = 8;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 93 */
const_DNS__NOTAUTH = 9;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 94 */
const_DNS__NOTZONE = 10;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 125 */
const_DNS__A = 1;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 126 */
const_DNS__NS = 2;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 127 */
const_DNS__MD = 3;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 128 */
const_DNS__MF = 4;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 129 */
const_DNS__CNAME = 5;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 130 */
const_DNS__SOA = 6;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 131 */
const_DNS__MB = 7;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 132 */
const_DNS__MG = 8;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 133 */
const_DNS__MR = 9;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 134 */
const_DNS__NULL = 10;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 135 */
const_DNS__WKS = 11;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 136 */
const_DNS__PTR = 12;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 137 */
const_DNS__HINFO = 13;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 138 */
const_DNS__MINFO = 14;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 139 */
const_DNS__MX = 15;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 140 */
const_DNS__TXT = 16;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 141 */
const_DNS__AAAA = 28;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 142 */
const_DNS__SRV = 33;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 143 */
const_DNS__NAPTR = 35;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 146 */
const_DNS__AXFR = 252;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 147 */
const_DNS__MAILB = 253;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 148 */
const_DNS__MAILA = 254;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 149 */
const_DNS__ALLRECORDS = 255;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 153 */
const_DNS__IN = 1;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 154 */
const_DNS__CS = 2;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 155 */
const_DNS__CH = 3;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 156 */
const_DNS__HS = 4;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 158 */
const_DNS__ANYCLASS = 255;
/* /work/TDT4290/src/skeleton/protocols/dns/DNS_Types.ttcn, line 160 */
const_DNS__NONE = 254;
}


} /* end of namespace */
