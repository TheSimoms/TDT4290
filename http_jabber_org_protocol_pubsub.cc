// This C++ source file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Oct  9 10:28:08 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

/* Including header files */

#include "http_jabber_org_protocol_pubsub.hh"

namespace http__jabber__org__protocol__pubsub {

/* Prototypes of static functions */

static void pre_init_module();
static void post_init_module();

/* Literal string constants */

static const unsigned char module_checksum[] = { 0xb0, 0x83, 0xeb, 0xaf, 0x7d, 0x33, 0xc1, 0x40, 0x1a, 0xa2, 0x21, 0x0c, 0x07, 0x51, 0x11, 0x37 };

/* Global variable definitions */

const XERdescriptor_t       Pubsub_choice_xer_ = { {"choice>\n", "choice>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Pubsub_choice_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice", NULL, NULL, NULL, &Pubsub_choice_xer_, &Pubsub_choice_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Empty_xer_ = { {"Empty>\n", "empty>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Empty_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Empty_descr_ = { "@http_jabber_org_protocol_pubsub.Empty", NULL, NULL, NULL, &Empty_xer_, &Empty_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Create_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Create_base_descr_ = { "@http_jabber_org_protocol_pubsub.Create.base", NULL, NULL, NULL, &Create_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Create_xer_ = { {"Create>\n", "create>\n"}, {8, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Create_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Create_descr_ = { "@http_jabber_org_protocol_pubsub.Create", NULL, NULL, NULL, &Create_xer_, &Create_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Create_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Create_node_descr_ = { "@http_jabber_org_protocol_pubsub.Create.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Create_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence_create___xer_ = { {"create_>\n", "create>\n"}, {9, 8}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence_create___descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.create_", NULL, NULL, NULL, &Pubsub_choice_sequence_create___xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence_xer_ = { {"sequence>\n", "sequence>\n"}, {10, 10}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Pubsub_choice_sequence_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence", NULL, NULL, NULL, &Pubsub_choice_sequence_xer_, &Pubsub_choice_sequence_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Configure_xer_ = { {"Configure>\n", "configure>\n"}, {11, 11}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Configure_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Configure_descr_ = { "@http_jabber_org_protocol_pubsub.Configure", NULL, NULL, NULL, &Configure_xer_, &Configure_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Configure_choice_xer_ = { {"choice>\n", "choice>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Configure_choice_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Configure_choice_descr_ = { "@http_jabber_org_protocol_pubsub.Configure.choice", NULL, NULL, NULL, &Configure_choice_xer_, &Configure_choice_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Configure_choice_x_xer_ = { {"x>\n", "x>\n"}, {3, 3}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 20, 0, NULL, NULL };
const TTCN_Typedescriptor_t Configure_choice_x_descr_ = { "@http_jabber_org_protocol_pubsub.Configure.choice.x", NULL, NULL, NULL, &Configure_choice_x_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence_configure_xer_ = { {"configure>\n", "configure>\n"}, {11, 11}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence_configure_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.configure", NULL, NULL, NULL, &Pubsub_choice_sequence_configure_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence__1_xer_ = { {"sequence_1>\n", "sequence_1>\n"}, {12, 12}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Pubsub_choice_sequence__1_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1", NULL, NULL, NULL, &Pubsub_choice_sequence__1_xer_, &Pubsub_choice_sequence__1_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe_jid_xer_ = { {"jid>\n", "jid>\n"}, {5, 5}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscribe_jid_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe.jid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscribe_jid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscribe_base_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe.base", NULL, NULL, NULL, &Subscribe_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe_xer_ = { {"Subscribe>\n", "subscribe>\n"}, {11, 11}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscribe_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscribe_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe", NULL, NULL, NULL, &Subscribe_xer_, &Subscribe_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscribe_node_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscribe_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence__1_subscribe_xer_ = { {"subscribe>\n", "subscribe>\n"}, {11, 11}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_subscribe_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.subscribe", NULL, NULL, NULL, &Pubsub_choice_sequence__1_subscribe_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Options_jid_xer_ = { {"jid>\n", "jid>\n"}, {5, 5}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Options_jid_descr_ = { "@http_jabber_org_protocol_pubsub.Options.jid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Options_jid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Options_xer_ = { {"Options>\n", "options>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Options_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Options_descr_ = { "@http_jabber_org_protocol_pubsub.Options", NULL, NULL, NULL, &Options_xer_, &Options_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Options_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Options_node_descr_ = { "@http_jabber_org_protocol_pubsub.Options.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Options_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Options_subid_xer_ = { {"subid>\n", "subid>\n"}, {7, 7}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Options_subid_descr_ = { "@http_jabber_org_protocol_pubsub.Options.subid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Options_subid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const char* Options_sequence_elem_ns_uris_[] = {"jabber:x:data"};
const XERdescriptor_t       Options_sequence_elem_xer_ = { {"elem>\n", "elem>\n"}, {6, 6}, 0 |ANY_ELEMENT |ANY_FROM, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 1, Options_sequence_elem_ns_uris_, NULL };
const TTCN_Typedescriptor_t Options_sequence_elem_descr_ = { "@http_jabber_org_protocol_pubsub.Options.sequence.elem", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Options_sequence_elem_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Options_sequence_xer_ = { {"sequence>\n", "sequence>\n"}, {10, 10}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Options_sequence_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Options_sequence_descr_ = { "@http_jabber_org_protocol_pubsub.Options.sequence", NULL, NULL, NULL, &Options_sequence_xer_, &Options_sequence_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_sequence__1_options_xer_ = { {"options>\n", "options>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_sequence__1_options_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.options", NULL, NULL, NULL, &Pubsub_choice_sequence__1_options_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_xer_ = { {"choice_list>\n", "choice_list>\n"}, {13, 13}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Pubsub_choice_choice__list_0_xer_ };
const TTCN_JSONdescriptor_t Pubsub_choice_choice__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list", NULL, NULL, NULL, &Pubsub_choice_choice__list_xer_, &Pubsub_choice_choice__list_json_, &Pubsub_choice_choice__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_xer_ = { {"CHOICE>\n", "CHOICE>\n"}, {8, 8}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Pubsub_choice_choice__list_0_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_xer_, &Pubsub_choice_choice__list_0_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliations_affiliation__list_xer_ = { {"affiliation_list>\n", "affiliation_list>\n"}, {18, 18}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Affiliations_affiliation__list_0_xer_ };
const TTCN_JSONdescriptor_t Affiliations_affiliation__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Affiliations_affiliation__list_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list", NULL, NULL, NULL, &Affiliations_affiliation__list_xer_, &Affiliations_affiliation__list_json_, &Affiliations_affiliation__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliation_affiliation_xer_ = { {"affiliation>\n", "affiliation>\n"}, {13, 13}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Affiliation_affiliation_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Affiliation_affiliation_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliation.affiliation", NULL, NULL, NULL, &Affiliation_affiliation_xer_, &Affiliation_affiliation_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliation_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Affiliation_node_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliation.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Affiliation_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliation_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Affiliation_base_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliation.base", NULL, NULL, NULL, &Affiliation_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliation_xer_ = { {"Affiliation>\n", "affiliation>\n"}, {13, 13}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Affiliation_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Affiliation_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliation", NULL, NULL, NULL, &Affiliation_xer_, &Affiliation_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliations_affiliation__list_0_xer_ = { {"Affiliation>\n", "affiliation>\n"}, {13, 13}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Affiliations_affiliation__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.<oftype>", NULL, NULL, NULL, &Affiliations_affiliation__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Affiliations_xer_ = { {"Affiliations>\n", "affiliations>\n"}, {14, 14}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Affiliations_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Affiliations_descr_ = { "@http_jabber_org_protocol_pubsub.Affiliations", NULL, NULL, NULL, &Affiliations_xer_, &Affiliations_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_affiliations_xer_ = { {"affiliations>\n", "affiliations>\n"}, {14, 14}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_affiliations_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.affiliations", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_affiliations_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Default_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Default_base_descr_ = { "@http_jabber_org_protocol_pubsub.Default.base", NULL, NULL, NULL, &Default_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Default_xer_ = { {"Default>\n", "default>\n"}, {9, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Default_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Default_descr_ = { "@http_jabber_org_protocol_pubsub.Default", NULL, NULL, NULL, &Default_xer_, &Default_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Default_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Default_node_descr_ = { "@http_jabber_org_protocol_pubsub.Default.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Default_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
Default_type__ Default_type___dfe;
const XERdescriptor_t       Default_type___xer_ = { {"type_>\n", "type>\n"}, {7, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE, &Default_type___dfe, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Default_type___json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Default_type___descr_ = { "@http_jabber_org_protocol_pubsub.Default.type_", NULL, NULL, NULL, &Default_type___xer_, &Default_type___json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_default___xer_ = { {"default_>\n", "default>\n"}, {10, 9}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_default___descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.default_", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_default___xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Items_node_descr_ = { "@http_jabber_org_protocol_pubsub.Items.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Items_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_item__list_xer_ = { {"item_list>\n", "item_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Items_item__list_0_xer_ };
const TTCN_JSONdescriptor_t Items_item__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Items_item__list_descr_ = { "@http_jabber_org_protocol_pubsub.Items.item_list", NULL, NULL, NULL, &Items_item__list_xer_, &Items_item__list_json_, &Items_item__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Item_xer_ = { {"Item>\n", "item>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Item_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Item_descr_ = { "@http_jabber_org_protocol_pubsub.Item", NULL, NULL, NULL, &Item_xer_, &Item_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Item_id_xer_ = { {"id>\n", "id>\n"}, {4, 4}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Item_id_descr_ = { "@http_jabber_org_protocol_pubsub.Item.id", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Item_id_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const char* Item_sequence_elem_ns_uris_[] = {"", "http://jabber.org/protocol/pubsub"};
const XERdescriptor_t       Item_sequence_elem_xer_ = { {"elem>\n", "elem>\n"}, {6, 6}, 0 |ANY_ELEMENT |ANY_EXCEPT, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 2, Item_sequence_elem_ns_uris_, NULL };
const TTCN_Typedescriptor_t Item_sequence_elem_descr_ = { "@http_jabber_org_protocol_pubsub.Item.sequence.elem", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Item_sequence_elem_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Item_sequence_xer_ = { {"sequence>\n", "sequence>\n"}, {10, 10}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Item_sequence_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Item_sequence_descr_ = { "@http_jabber_org_protocol_pubsub.Item.sequence", NULL, NULL, NULL, &Item_sequence_xer_, &Item_sequence_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_item__list_0_xer_ = { {"Item>\n", "item>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Items_item__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Items.item_list.<oftype>", NULL, NULL, NULL, &Items_item__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_xer_ = { {"Items>\n", "items>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Items_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Items_descr_ = { "@http_jabber_org_protocol_pubsub.Items", NULL, NULL, NULL, &Items_xer_, &Items_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_max__items_xer_ = { {"max_items>\n", "max_items>\n"}, {11, 11}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Items_max__items_descr_ = { "@http_jabber_org_protocol_pubsub.Items.max_items", &INTEGER_ber_, &INTEGER_raw_, &INTEGER_text_, &Items_max__items_xer_, &INTEGER_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Items_subid_xer_ = { {"subid>\n", "subid>\n"}, {7, 7}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Items_subid_descr_ = { "@http_jabber_org_protocol_pubsub.Items.subid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Items_subid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_items_xer_ = { {"items>\n", "items>\n"}, {7, 7}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_items_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.items", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_items_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Publish_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Publish_node_descr_ = { "@http_jabber_org_protocol_pubsub.Publish.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Publish_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Publish_item__list_xer_ = { {"item_list>\n", "item_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Publish_item__list_0_xer_ };
const TTCN_JSONdescriptor_t Publish_item__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Publish_item__list_descr_ = { "@http_jabber_org_protocol_pubsub.Publish.item_list", NULL, NULL, NULL, &Publish_item__list_xer_, &Publish_item__list_json_, &Publish_item__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Publish_item__list_0_xer_ = { {"Item>\n", "item>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Publish_item__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Publish.item_list.<oftype>", NULL, NULL, NULL, &Publish_item__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Publish_xer_ = { {"Publish>\n", "publish>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Publish_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Publish_descr_ = { "@http_jabber_org_protocol_pubsub.Publish", NULL, NULL, NULL, &Publish_xer_, &Publish_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_publish_xer_ = { {"publish>\n", "publish>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_publish_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.publish", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_publish_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Retract_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Retract_node_descr_ = { "@http_jabber_org_protocol_pubsub.Retract.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Retract_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Retract_item__list_xer_ = { {"item_list>\n", "item_list>\n"}, {11, 11}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Retract_item__list_0_xer_ };
const TTCN_JSONdescriptor_t Retract_item__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Retract_item__list_descr_ = { "@http_jabber_org_protocol_pubsub.Retract.item_list", NULL, NULL, NULL, &Retract_item__list_xer_, &Retract_item__list_json_, &Retract_item__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Retract_item__list_0_xer_ = { {"Item>\n", "item>\n"}, {6, 6}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Retract_item__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Retract.item_list.<oftype>", NULL, NULL, NULL, &Retract_item__list_0_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Retract_xer_ = { {"Retract>\n", "retract>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Retract_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Retract_descr_ = { "@http_jabber_org_protocol_pubsub.Retract", NULL, NULL, NULL, &Retract_xer_, &Retract_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Retract_notify_xer_ = { {"notify>\n", "notify>\n"}, {8, 8}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Retract_notify_descr_ = { "@http_jabber_org_protocol_pubsub.Retract.notify", &BOOLEAN_ber_, &BOOLEAN_raw_, &BOOLEAN_text_, &Retract_notify_xer_, &BOOLEAN_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_retract_xer_ = { {"retract>\n", "retract>\n"}, {9, 9}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_retract_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.retract", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_retract_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_jid_xer_ = { {"jid>\n", "jid>\n"}, {5, 5}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscription_jid_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription.jid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscription_jid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_xer_ = { {"Subscription>\n", "subscription>\n"}, {14, 14}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscription_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscription_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription", NULL, NULL, NULL, &Subscription_xer_, &Subscription_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscription_node_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscription_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_subid_xer_ = { {"subid>\n", "subid>\n"}, {7, 7}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscription_subid_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription.subid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscription_subid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_subscription_xer_ = { {"subscription>\n", "subscription>\n"}, {14, 14}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscription_subscription_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscription_subscription_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription.subscription", NULL, NULL, NULL, &Subscription_subscription_xer_, &Subscription_subscription_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe__options_xer_ = { {"Subscribe_options>\n", "subscribe-options>\n"}, {19, 19}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscribe__options_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscribe__options_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe_options", NULL, NULL, NULL, &Subscribe__options_xer_, &Subscribe__options_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscribe__options_required_xer_ = { {"required>\n", "required>\n"}, {10, 10}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscribe__options_required_descr_ = { "@http_jabber_org_protocol_pubsub.Subscribe_options.required", NULL, NULL, NULL, &Subscribe__options_required_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscription_subscribe__options_xer_ = { {"subscribe_options>\n", "subscribe-options>\n"}, {19, 19}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscription_subscribe__options_descr_ = { "@http_jabber_org_protocol_pubsub.Subscription.subscribe_options", NULL, NULL, NULL, &Subscription_subscribe__options_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_subscription_xer_ = { {"subscription>\n", "subscription>\n"}, {14, 14}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_subscription_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.subscription", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_subscription_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscriptions_sequence__list_xer_ = { {"sequence_list>\n", "sequence_list>\n"}, {15, 15}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, &Subscriptions_sequence__list_0_xer_ };
const TTCN_JSONdescriptor_t Subscriptions_sequence__list_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscriptions_sequence__list_descr_ = { "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list", NULL, NULL, NULL, &Subscriptions_sequence__list_xer_, &Subscriptions_sequence__list_json_, &Subscriptions_sequence__list_0_descr_, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscriptions_sequence__list_0_subscription_xer_ = { {"subscription>\n", "subscription>\n"}, {14, 14}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscriptions_sequence__list_0_subscription_descr_ = { "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.subscription", NULL, NULL, NULL, &Subscriptions_sequence__list_0_subscription_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscriptions_sequence__list_0_xer_ = { {"SEQUENCE>\n", "SEQUENCE>\n"}, {10, 10}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscriptions_sequence__list_0_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscriptions_sequence__list_0_descr_ = { "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE", NULL, NULL, NULL, &Subscriptions_sequence__list_0_xer_, &Subscriptions_sequence__list_0_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscriptions_xer_ = { {"Subscriptions>\n", "subscriptions>\n"}, {15, 15}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Subscriptions_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Subscriptions_descr_ = { "@http_jabber_org_protocol_pubsub.Subscriptions", NULL, NULL, NULL, &Subscriptions_xer_, &Subscriptions_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Subscriptions_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Subscriptions_node_descr_ = { "@http_jabber_org_protocol_pubsub.Subscriptions.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Subscriptions_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_subscriptions_xer_ = { {"subscriptions>\n", "subscriptions>\n"}, {15, 15}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_subscriptions_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.subscriptions", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_subscriptions_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Unsubscribe_jid_xer_ = { {"jid>\n", "jid>\n"}, {5, 5}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Unsubscribe_jid_descr_ = { "@http_jabber_org_protocol_pubsub.Unsubscribe.jid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Unsubscribe_jid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Unsubscribe_base_xer_ = { {"base>\n", "base>\n"}, {6, 6}, 0 |UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Unsubscribe_base_descr_ = { "@http_jabber_org_protocol_pubsub.Unsubscribe.base", NULL, NULL, NULL, &Unsubscribe_base_xer_, &ENUMERATED_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Unsubscribe_xer_ = { {"Unsubscribe>\n", "unsubscribe>\n"}, {13, 13}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Unsubscribe_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Unsubscribe_descr_ = { "@http_jabber_org_protocol_pubsub.Unsubscribe", NULL, NULL, NULL, &Unsubscribe_xer_, &Unsubscribe_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Unsubscribe_node_xer_ = { {"node>\n", "node>\n"}, {6, 6}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Unsubscribe_node_descr_ = { "@http_jabber_org_protocol_pubsub.Unsubscribe.node", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Unsubscribe_node_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Unsubscribe_subid_xer_ = { {"subid>\n", "subid>\n"}, {7, 7}, 0 |XER_ATTRIBUTE |FORM_UNQUALIFIED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Unsubscribe_subid_descr_ = { "@http_jabber_org_protocol_pubsub.Unsubscribe.subid", NULL, &UsefulTtcn3Types::utf8string_raw_, &UNIVERSAL_CHARSTRING_text_, &Unsubscribe_subid_xer_, &UNIVERSAL_CHARSTRING_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_choice_choice__list_0_unsubscribe_xer_ = { {"unsubscribe>\n", "unsubscribe>\n"}, {13, 13}, 0 |HAS_1UNTAGGED, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_Typedescriptor_t Pubsub_choice_choice__list_0_unsubscribe_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.unsubscribe", NULL, NULL, NULL, &Pubsub_choice_choice__list_0_unsubscribe_xer_, NULL, NULL, TTCN_Typedescriptor_t::DONTCARE };
const XERdescriptor_t       Pubsub_xer_ = { {"Pubsub>\n", "pubsub>\n"}, {8, 8}, 0, WHITESPACE_PRESERVE,  NULL, &module_object, 3, 0, NULL, NULL };
const TTCN_JSONdescriptor_t Pubsub_json_ = { false, NULL, false, NULL };
const TTCN_Typedescriptor_t Pubsub_descr_ = { "@http_jabber_org_protocol_pubsub.Pubsub", NULL, NULL, NULL, &Pubsub_xer_, &Pubsub_json_, NULL, TTCN_Typedescriptor_t::DONTCARE };
static const size_t num_namespaces = 21;
static const namespace_t xml_namespaces[num_namespaces+1] = {
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "http://jabber.org/protocol/pubsub", "tq0000" },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { NULL, NULL },
  { "jabber:x:data", "xdata" },
  { "http://www.w3.org/2001/XMLSchema-instance", "xsi" }
};

TTCN_Module module_object("http_jabber_org_protocol_pubsub", __DATE__, __TIME__, module_checksum, pre_init_module, NULL, 0U, 4294967295U, 4294967295U, 4294967295U, NULL, 21LU, xml_namespaces, post_init_module, NULL, NULL, NULL, NULL, NULL);

static const RuntimeVersionChecker ver_checker(  current_runtime_version.requires_major_version_5,
  current_runtime_version.requires_minor_version_3,
  current_runtime_version.requires_patch_level_0,  current_runtime_version.requires_runtime_1);

/* Member functions of C++ classes */

void Pubsub_choice::copy_value(const Pubsub_choice& other_value)
{
switch (other_value.union_selection) {
case ALT_sequence:
field_sequence = new Pubsub_choice_sequence(*other_value.field_sequence);
break;
case ALT_sequence__1:
field_sequence__1 = new Pubsub_choice_sequence__1(*other_value.field_sequence__1);
break;
case ALT_choice__list:
field_choice__list = new Pubsub_choice_choice__list(*other_value.field_choice__list);
break;
default:
TTCN_error("Assignment of an unbound union value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
union_selection = other_value.union_selection;
}

Pubsub_choice::Pubsub_choice()
{
union_selection = UNBOUND_VALUE;
}

Pubsub_choice::Pubsub_choice(const Pubsub_choice& other_value)
: Base_Type(){
copy_value(other_value);
}

Pubsub_choice::~Pubsub_choice()
{
clean_up();
}

Pubsub_choice& Pubsub_choice::operator=(const Pubsub_choice& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Pubsub_choice::operator==(const Pubsub_choice& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_sequence:
return *field_sequence == *other_value.field_sequence;
case ALT_sequence__1:
return *field_sequence__1 == *other_value.field_sequence__1;
case ALT_choice__list:
return *field_choice__list == *other_value.field_choice__list;
default:
return FALSE;
}
}

Pubsub_choice_sequence& Pubsub_choice::sequence()
{
if (union_selection != ALT_sequence) {
clean_up();
field_sequence = new Pubsub_choice_sequence;
union_selection = ALT_sequence;
}
return *field_sequence;
}

const Pubsub_choice_sequence& Pubsub_choice::sequence() const
{
if (union_selection != ALT_sequence) TTCN_error("Using non-selected field sequence in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *field_sequence;
}

Pubsub_choice_sequence__1& Pubsub_choice::sequence__1()
{
if (union_selection != ALT_sequence__1) {
clean_up();
field_sequence__1 = new Pubsub_choice_sequence__1;
union_selection = ALT_sequence__1;
}
return *field_sequence__1;
}

const Pubsub_choice_sequence__1& Pubsub_choice::sequence__1() const
{
if (union_selection != ALT_sequence__1) TTCN_error("Using non-selected field sequence_1 in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *field_sequence__1;
}

Pubsub_choice_choice__list& Pubsub_choice::choice__list()
{
if (union_selection != ALT_choice__list) {
clean_up();
field_choice__list = new Pubsub_choice_choice__list;
union_selection = ALT_choice__list;
}
return *field_choice__list;
}

const Pubsub_choice_choice__list& Pubsub_choice::choice__list() const
{
if (union_selection != ALT_choice__list) TTCN_error("Using non-selected field choice_list in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *field_choice__list;
}

boolean Pubsub_choice::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return union_selection == checked_selection;
}

boolean Pubsub_choice::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Pubsub_choice::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_sequence: return field_sequence->is_value();
case ALT_sequence__1: return field_sequence__1->is_value();
case ALT_choice__list: return field_choice__list->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Pubsub_choice::clean_up()
{
switch (union_selection) {
case ALT_sequence:
  delete field_sequence;
  break;
case ALT_sequence__1:
  delete field_sequence__1;
  break;
case ALT_choice__list:
  delete field_choice__list;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Pubsub_choice::log() const
{
switch (union_selection) {
case ALT_sequence:
TTCN_Logger::log_event_str("{ sequence := ");
field_sequence->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_sequence__1:
TTCN_Logger::log_event_str("{ sequence_1 := ");
field_sequence__1->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_choice__list:
TTCN_Logger::log_event_str("{ choice_list := ");
field_choice__list->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Pubsub_choice::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@http_jabber_org_protocol_pubsub.Pubsub.choice'");
    }
    if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else if (strcmp("sequence_1", param_field) == 0) {
      sequence__1().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@http_jabber_org_protocol_pubsub.Pubsub.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "sequence")) {
    sequence().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "sequence_1")) {
    sequence__1().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "choice_list")) {
    choice__list().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Pubsub.choice.", mp_last->get_id()->get_name());
}

void Pubsub_choice::set_implicit_omit()
{
switch (union_selection) {
case ALT_sequence:
field_sequence->set_implicit_omit(); break;
case ALT_sequence__1:
field_sequence__1->set_implicit_omit(); break;
case ALT_choice__list:
field_choice__list->set_implicit_omit(); break;
default: break;
}
}

void Pubsub_choice::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_sequence:
field_sequence->encode_text(text_buf);
break;
case ALT_sequence__1:
field_sequence__1->encode_text(text_buf);
break;
case ALT_choice__list:
field_choice__list->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}

void Pubsub_choice::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_sequence:
sequence().decode_text(text_buf);
break;
case ALT_sequence__1:
sequence__1().decode_text(text_buf);
break;
case ALT_choice__list:
choice__list().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}

void Pubsub_choice::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub_choice::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Pubsub_choice::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (Pubsub_choice_sequence::can_start(name, uri, Pubsub_choice_sequence_xer_, flavor)) return true;
  if (Pubsub_choice_sequence__1::can_start(name, uri, Pubsub_choice_sequence__1_xer_, flavor)) return true;
  if (Pubsub_choice_choice__list::can_start(name, uri, Pubsub_choice_choice__list_xer_, flavor)) return true;
  return false;
}

char ** Pubsub_choice::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_sequence:
      new_ns = field_sequence->collect_ns(Pubsub_choice_sequence_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    case ALT_sequence__1:
      new_ns = field_sequence__1->collect_ns(Pubsub_choice_sequence__1_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_sequence__1_xer_.namelens[1] > 2);
      break;
    case ALT_choice__list:
      new_ns = field_choice__list->collect_ns(Pubsub_choice_choice__list_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_xer_.namelens[1] > 2);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Pubsub_choice::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Pubsub_choice::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_sequence:
    ec_1.set_msg("sequence': ");
    field_sequence->XER_encode(Pubsub_choice_sequence_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_sequence__1:
    ec_1.set_msg("sequence_1': ");
    field_sequence__1->XER_encode(Pubsub_choice_sequence__1_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_choice__list:
    ec_1.set_msg("choice_list': ");
    field_choice__list->XER_encode(Pubsub_choice_choice__list_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub_choice::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (type!=XML_READER_TYPE_ELEMENT || (own_tag && p_reader.IsEmptyElement())) goto empty_xml;
    if (Pubsub_choice_sequence::can_start(elem_name, ns_uri, Pubsub_choice_sequence_xer_, flavor_1) || (Pubsub_choice_sequence_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("sequence': ");
      sequence().XER_decode(Pubsub_choice_sequence_xer_, p_reader, flavor_1, 0);
      if (!sequence().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Pubsub_choice_sequence__1::can_start(elem_name, ns_uri, Pubsub_choice_sequence__1_xer_, flavor_1) || (Pubsub_choice_sequence__1_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("sequence_1': ");
      sequence__1().XER_decode(Pubsub_choice_sequence__1_xer_, p_reader, flavor_1, 0);
      if (!sequence__1().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if ((e_xer && (type==XML_READER_TYPE_END_ELEMENT || !own_tag)) || Pubsub_choice_choice__list::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_xer_, flavor_1) || (Pubsub_choice_choice__list_xer_.xer_bits & ANY_ELEMENT)) {
empty_xml:  ec_2.set_msg("choice_list': ");
      choice__list().XER_decode(Pubsub_choice_choice__list_xer_, p_reader, flavor_1, 0);
      if (!choice__list().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Pubsub_choice::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_sequence:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence");
    enc_len += field_sequence->JSON_encode(Pubsub_choice_sequence_descr_, p_tok);
    break;
  case ALT_sequence__1:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence_1");
    enc_len += field_sequence__1->JSON_encode(Pubsub_choice_sequence__1_descr_, p_tok);
    break;
  case ALT_choice__list:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice_list");
    enc_len += field_choice__list->JSON_encode(Pubsub_choice_choice__list_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Pubsub_choice::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "sequence", name_len)) {
      int ret_val = sequence().JSON_decode(Pubsub_choice_sequence_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "sequence_1", name_len)) {
      int ret_val = sequence__1().JSON_decode(Pubsub_choice_sequence__1_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence_1");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "choice_list", name_len)) {
      int ret_val = choice__list().JSON_decode(Pubsub_choice_choice__list_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice_list");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Pubsub_choice_template::copy_value(const Pubsub_choice& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
single_value.field_sequence = new Pubsub_choice_sequence_template(other_value.sequence());
break;
case Pubsub_choice::ALT_sequence__1:
single_value.field_sequence__1 = new Pubsub_choice_sequence__1_template(other_value.sequence__1());
break;
case Pubsub_choice::ALT_choice__list:
single_value.field_choice__list = new Pubsub_choice_choice__list_template(other_value.choice__list());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_choice_template::copy_template(const Pubsub_choice_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
single_value.field_sequence = new Pubsub_choice_sequence_template(*other_value.single_value.field_sequence);
break;
case Pubsub_choice::ALT_sequence__1:
single_value.field_sequence__1 = new Pubsub_choice_sequence__1_template(*other_value.single_value.field_sequence__1);
break;
case Pubsub_choice::ALT_choice__list:
single_value.field_choice__list = new Pubsub_choice_choice__list_template(*other_value.single_value.field_choice__list);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
set_selection(other_value);
}

Pubsub_choice_template::Pubsub_choice_template()
{
}

Pubsub_choice_template::Pubsub_choice_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_choice_template::Pubsub_choice_template(const Pubsub_choice& other_value)
{
copy_value(other_value);
}

Pubsub_choice_template::Pubsub_choice_template(const OPTIONAL<Pubsub_choice>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice from an unbound optional field.");
}
}

Pubsub_choice_template::Pubsub_choice_template(const Pubsub_choice_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Pubsub_choice_template::~Pubsub_choice_template()
{
clean_up();
}

void Pubsub_choice_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
delete single_value.field_sequence;
break;
case Pubsub_choice::ALT_sequence__1:
delete single_value.field_sequence__1;
break;
case Pubsub_choice::ALT_choice__list:
delete single_value.field_choice__list;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub_choice_template& Pubsub_choice_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_choice_template& Pubsub_choice_template::operator=(const Pubsub_choice& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_choice_template& Pubsub_choice_template::operator=(const OPTIONAL<Pubsub_choice>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
return *this;
}

Pubsub_choice_template& Pubsub_choice_template::operator=(const Pubsub_choice_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Pubsub_choice_template::match(const Pubsub_choice& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Pubsub_choice::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Pubsub_choice::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Pubsub_choice::ALT_sequence:
return single_value.field_sequence->match(other_value.sequence());
case Pubsub_choice::ALT_sequence__1:
return single_value.field_sequence__1->match(other_value.sequence__1());
case Pubsub_choice::ALT_choice__list:
return single_value.field_choice__list->match(other_value.choice__list());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
return FALSE;
}

boolean Pubsub_choice_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
return single_value.field_sequence->is_value();
case Pubsub_choice::ALT_sequence__1:
return single_value.field_sequence__1->is_value();
case Pubsub_choice::ALT_choice__list:
return single_value.field_choice__list->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}

Pubsub_choice Pubsub_choice_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
Pubsub_choice ret_val;
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
ret_val.sequence() = single_value.field_sequence->valueof();
break;
case Pubsub_choice::ALT_sequence__1:
ret_val.sequence__1() = single_value.field_sequence__1->valueof();
break;
case Pubsub_choice::ALT_choice__list:
ret_val.choice__list() = single_value.field_choice__list->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
return ret_val;
}

Pubsub_choice_template& Pubsub_choice_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return value_list.list_value[list_index];
}
void Pubsub_choice_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Pubsub_choice_template[list_length];
}

Pubsub_choice_sequence_template& Pubsub_choice_template::sequence()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice::ALT_sequence) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_sequence = new Pubsub_choice_sequence_template(ANY_VALUE);
else single_value.field_sequence = new Pubsub_choice_sequence_template;
single_value.union_selection = Pubsub_choice::ALT_sequence;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_sequence;
}

const Pubsub_choice_sequence_template& Pubsub_choice_template::sequence() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field sequence in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (single_value.union_selection != Pubsub_choice::ALT_sequence) TTCN_error("Accessing non-selected field sequence in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *single_value.field_sequence;
}

Pubsub_choice_sequence__1_template& Pubsub_choice_template::sequence__1()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice::ALT_sequence__1) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_sequence__1 = new Pubsub_choice_sequence__1_template(ANY_VALUE);
else single_value.field_sequence__1 = new Pubsub_choice_sequence__1_template;
single_value.union_selection = Pubsub_choice::ALT_sequence__1;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_sequence__1;
}

const Pubsub_choice_sequence__1_template& Pubsub_choice_template::sequence__1() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field sequence_1 in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (single_value.union_selection != Pubsub_choice::ALT_sequence__1) TTCN_error("Accessing non-selected field sequence_1 in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *single_value.field_sequence__1;
}

Pubsub_choice_choice__list_template& Pubsub_choice_template::choice__list()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice::ALT_choice__list) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_choice__list = new Pubsub_choice_choice__list_template(ANY_VALUE);
else single_value.field_choice__list = new Pubsub_choice_choice__list_template;
single_value.union_selection = Pubsub_choice::ALT_choice__list;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_choice__list;
}

const Pubsub_choice_choice__list_template& Pubsub_choice_template::choice__list() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field choice_list in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
if (single_value.union_selection != Pubsub_choice::ALT_choice__list) TTCN_error("Accessing non-selected field choice_list in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return *single_value.field_choice__list;
}

boolean Pubsub_choice_template::ischosen(Pubsub_choice::union_selection_type checked_selection) const
{
if (checked_selection == Pubsub_choice::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Pubsub_choice::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice");
}
return FALSE;
}

void Pubsub_choice_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
TTCN_Logger::log_event_str("{ sequence := ");
single_value.field_sequence->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice::ALT_sequence__1:
TTCN_Logger::log_event_str("{ sequence_1 := ");
single_value.field_sequence__1->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice::ALT_choice__list:
TTCN_Logger::log_event_str("{ choice_list := ");
single_value.field_choice__list->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Pubsub_choice_template::log_match(const Pubsub_choice& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".sequence");
single_value.field_sequence->log_match(match_value.sequence());
} else {
TTCN_Logger::log_event_str("{ sequence := ");
single_value.field_sequence->log_match(match_value.sequence());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice::ALT_sequence__1:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".sequence_1");
single_value.field_sequence__1->log_match(match_value.sequence__1());
} else {
TTCN_Logger::log_event_str("{ sequence_1 := ");
single_value.field_sequence__1->log_match(match_value.sequence__1());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice::ALT_choice__list:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".choice_list");
single_value.field_choice__list->log_match(match_value.choice__list());
} else {
TTCN_Logger::log_event_str("{ choice_list := ");
single_value.field_choice__list->log_match(match_value.choice__list());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_choice_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
single_value.field_sequence->encode_text(text_buf);
break;
case Pubsub_choice::ALT_sequence__1:
single_value.field_sequence__1->encode_text(text_buf);
break;
case Pubsub_choice::ALT_choice__list:
single_value.field_choice__list->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}

void Pubsub_choice_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Pubsub_choice::UNBOUND_VALUE;
Pubsub_choice::union_selection_type new_selection = (Pubsub_choice::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Pubsub_choice::ALT_sequence:
single_value.field_sequence = new Pubsub_choice_sequence_template;
single_value.field_sequence->decode_text(text_buf);
break;
case Pubsub_choice::ALT_sequence__1:
single_value.field_sequence__1 = new Pubsub_choice_sequence__1_template;
single_value.field_sequence__1->decode_text(text_buf);
break;
case Pubsub_choice::ALT_choice__list:
single_value.field_choice__list = new Pubsub_choice_choice__list_template;
single_value.field_choice__list->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
}

boolean Pubsub_choice_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_choice_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Pubsub_choice_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@http_jabber_org_protocol_pubsub.Pubsub.choice'");
    }
    if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else if (strcmp("sequence_1", param_field) == 0) {
      sequence__1().set_param(param);
      return;
    } else if (strcmp("choice_list", param_field) == 0) {
      choice__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@http_jabber_org_protocol_pubsub.Pubsub.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Pubsub.choice");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "sequence")) {
      sequence().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "sequence_1")) {
      sequence__1().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "choice_list")) {
      choice__list().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Pubsub.choice.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Pubsub.choice");
  }
  is_ifpresent = param.get_ifpresent();
}

void Pubsub_choice_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Pubsub_choice::ALT_sequence:
single_value.field_sequence->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice");
return;
case Pubsub_choice::ALT_sequence__1:
single_value.field_sequence__1->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice");
return;
case Pubsub_choice::ALT_choice__list:
single_value.field_choice__list->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice");
}

Empty::Empty()
{
enum_value = UNBOUND_VALUE;
}

Empty::Empty(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @http_jabber_org_protocol_pubsub.Empty with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Empty::Empty(enum_type other_value)
{
enum_value = other_value;
}

Empty::Empty(const Empty& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
enum_value = other_value.enum_value;
}

Empty& Empty::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @http_jabber_org_protocol_pubsub.Empty.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Empty& Empty::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Empty& Empty::operator=(const Empty& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
enum_value = other_value.enum_value;
return *this;
}

boolean Empty::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value == other_value;
}

boolean Empty::operator==(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value == other_value.enum_value;
}

boolean Empty::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value < other_value;
}

boolean Empty::operator<(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value < other_value.enum_value;
}

boolean Empty::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value > other_value;
}

boolean Empty::operator>(const Empty& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value > other_value.enum_value;
}

const char *Empty::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case x: if (txt) return " "; else return "x";
default: return "<unknown>";
}
}

Empty::enum_type Empty::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, " ") || !strcmp(str_par, "x")) return x;
else return UNKNOWN_VALUE;
}

boolean Empty::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
return TRUE;
default:
return FALSE;
}
}

int Empty::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Empty::enum2int(const Empty& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Empty.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Empty::operator Empty::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return enum_value;
}

void Empty::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Empty::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@http_jabber_org_protocol_pubsub.Empty");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Empty.");
  }
}

void Empty::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
text_buf.push_int(enum_value);
}

void Empty::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @http_jabber_org_protocol_pubsub.Empty.", enum_value);
}

void Empty::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Empty::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Empty::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Empty::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Empty::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Empty::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Empty::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Empty_template::copy_template(const Empty_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
}
}

Empty_template::Empty_template()
{
}

Empty_template::Empty_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Empty_template::Empty_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Empty::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @http_jabber_org_protocol_pubsub.Empty with unknown numeric value %d.", other_value);
single_value = (Empty::enum_type)other_value;
}

Empty_template::Empty_template(Empty::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Empty_template::Empty_template(const Empty& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
single_value = other_value.enum_value;
}

Empty_template::Empty_template(const OPTIONAL<Empty>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @http_jabber_org_protocol_pubsub.Empty from an unbound optional field.");
}
}

Empty_template::Empty_template(const Empty_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Empty_template::~Empty_template()
{
clean_up();
}

boolean Empty_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Empty_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Empty::UNBOUND_VALUE;
}

void Empty_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Empty_template& Empty_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Empty_template& Empty_template::operator=(int other_value)
{
if (!Empty::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @http_jabber_org_protocol_pubsub.Empty.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)other_value;
return *this;
}

Empty_template& Empty_template::operator=(Empty::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Empty_template& Empty_template::operator=(const Empty& other_value)
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Empty to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Empty_template& Empty_template::operator=(const OPTIONAL<Empty>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Empty::enum_type)(const Empty&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
}
return *this;
}

Empty_template& Empty_template::operator=(const Empty_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Empty_template::match(Empty::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
}
return FALSE;
}

boolean Empty_template::match(const Empty& other_value) const
{
if (other_value.enum_value == Empty::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @http_jabber_org_protocol_pubsub.Empty with an unbound value.");
return match(other_value.enum_value);
}

Empty::enum_type Empty_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return single_value;
}

void Empty_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Empty_template[list_length];
}

Empty_template& Empty_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
return value_list.list_value[list_index];
}

void Empty_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Empty::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Empty_template::log_match(const Empty& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Empty_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
}
}

void Empty_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Empty::enum_type)text_buf.pull_int().get_val();
if (!Empty::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Empty.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Empty_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Empty.");
}
}

boolean Empty_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Empty_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Empty_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Empty::enum_type enum_val = Empty::str_to_enum(param.get_enumerated());
    if (!Empty::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Empty.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@http_jabber_org_protocol_pubsub.Empty");
  }
  is_ifpresent = param.get_ifpresent();
}

void Empty_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Empty");
}

Create::Create()
{
  bound_flag = FALSE;
}

Create::Create(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Empty& par_base)
  :   field_node(par_node),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Create::Create(const Create& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Create.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Create::clean_up()
{
field_node.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Create& Create::operator=(const Create& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Create.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Create::operator==(const Create& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_base==other_value.field_base;
}

boolean Create::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Create::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Create::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Create");
  int ret_val = 1;
  if (field_node.ispresent()) ret_val++;
  return ret_val;
}

void Create::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Create::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Create'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Create'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Create has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Create: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Create");
  }
}

void Create::set_implicit_omit()
{
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Create::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Create.");
field_node.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Create::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Create::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Create::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Create::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Create_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Create_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Create::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Create_node_xer_, flavor)) return true;
  else if (Empty::can_start(name, uri, Create_base_xer_, flavor)) return true;
  return false;
}

int Create::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Create_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Create_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Create::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Create_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Create_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Create_node_xer_, 1) && check_namespace(ns_uri, Create_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Create_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Create_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Create_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Create::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Create.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Create_node_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Create_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Create::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Create_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Create_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Create_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
Empty_template field_base;
};

void Create_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Create_template::copy_value(const Create& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Create_template::copy_template(const Create_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Create_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Create.");
break;
}
set_selection(other_value);
}

Create_template::Create_template()
{
}

Create_template::Create_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Create_template::Create_template(const Create& other_value)
{
copy_value(other_value);
}

Create_template::Create_template(const OPTIONAL<Create>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Create&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Create from an unbound optional field.");
}
}

Create_template::Create_template(const Create_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Create_template::~Create_template()
{
clean_up();
}

Create_template& Create_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Create_template& Create_template::operator=(const Create& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Create_template& Create_template::operator=(const OPTIONAL<Create>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Create&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Create.");
}
return *this;
}

Create_template& Create_template::operator=(const Create_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Create_template::match(const Create& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Create.");
}
return FALSE;
}

boolean Create_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Create_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Create_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Create Create_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Create.");
Create ret_val;
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Create_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Create.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Create_template[list_length];
}

Create_template& Create_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Create.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Create.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Create_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Create_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Create.");
return single_value->field_node;
}

Empty_template& Create_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Create_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_pubsub.Create.");
return single_value->field_base;
}

int Create_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_node.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Create containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Create.");
  }
  return 0;
}

void Create_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Create_template::log_match(const Create& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Create_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Create.");
}
}

void Create_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Create_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Create.");
}
}

void Create_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Create'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Create'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Create has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Create: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Create");
  }
  is_ifpresent = param.get_ifpresent();
}

void Create_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Create");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Create");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Create");
}

boolean Create_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Create_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Pubsub_choice_sequence::Pubsub_choice_sequence()
{
  bound_flag = FALSE;
}

Pubsub_choice_sequence::Pubsub_choice_sequence(const Create& par_create__,
    const OPTIONAL<Configure>& par_configure)
  :   field_create__(par_create__),
  field_configure(par_configure)
{
  bound_flag = TRUE;
}

Pubsub_choice_sequence::Pubsub_choice_sequence(const Pubsub_choice_sequence& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
bound_flag = TRUE;
if (other_value.create__().is_bound()) field_create__ = other_value.create__();
else field_create__.clean_up();
if (other_value.configure().is_bound()) field_configure = other_value.configure();
else field_configure.clean_up();
}

void Pubsub_choice_sequence::clean_up()
{
field_create__.clean_up();
field_configure.clean_up();
bound_flag = FALSE;
}

Pubsub_choice_sequence& Pubsub_choice_sequence::operator=(const Pubsub_choice_sequence& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
  bound_flag = TRUE;
  if (other_value.create__().is_bound()) field_create__ = other_value.create__();
  else field_create__.clean_up();
  if (other_value.configure().is_bound()) field_configure = other_value.configure();
  else field_configure.clean_up();
}
return *this;
}

boolean Pubsub_choice_sequence::operator==(const Pubsub_choice_sequence& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_create__==other_value.field_create__
  && field_configure==other_value.field_configure;
}

boolean Pubsub_choice_sequence::is_bound() const
{
if (bound_flag) return TRUE;
if(field_create__.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_configure.get_selection() || field_configure.is_bound()) return TRUE;
return FALSE;
}
boolean Pubsub_choice_sequence::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_create__.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_configure.get_selection() && !field_configure.is_value()) return FALSE;
return TRUE;
}
int Pubsub_choice_sequence::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
  int ret_val = 1;
  if (field_configure.ispresent()) ret_val++;
  return ret_val;
}

void Pubsub_choice_sequence::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ create_ := ");
field_create__.log();
TTCN_Logger::log_event_str(", configure := ");
field_configure.log();
TTCN_Logger::log_event_str(" }");
}

void Pubsub_choice_sequence::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence'");
    }
    if (strcmp("create_", param_field) == 0) {
      create__().set_param(param);
      return;
    } else if (strcmp("configure", param_field) == 0) {
      configure().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) create__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) configure().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "create_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          create__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "configure")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          configure().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
  }
}

void Pubsub_choice_sequence::set_implicit_omit()
{
if (create__().is_bound()) create__().set_implicit_omit();
if (!configure().is_bound()) configure() = OMIT_VALUE;
else configure().set_implicit_omit();
}

void Pubsub_choice_sequence::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
field_create__.encode_text(text_buf);
field_configure.encode_text(text_buf);
}

void Pubsub_choice_sequence::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_create__.decode_text(text_buf);
field_configure.decode_text(text_buf);
}

void Pubsub_choice_sequence::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub_choice_sequence::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Pubsub_choice_sequence::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_create__.collect_ns(Pubsub_choice_sequence_create___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_configure.collect_ns(Pubsub_choice_sequence_configure_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Pubsub_choice_sequence::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Create::can_start(name, uri, Pubsub_choice_sequence_create___xer_, flavor)) return true;
  return false;
}

int Pubsub_choice_sequence::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("create_': ");
  sub_len += field_create__.XER_encode(Pubsub_choice_sequence_create___xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("configure': ");
  sub_len += field_configure.XER_encode(Pubsub_choice_sequence_configure_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub_choice_sequence::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("create_': ");
    field_create__.XER_decode(Pubsub_choice_sequence_create___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_configure = *static_cast<const Configure*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("configure': ");
    field_configure.XER_decode(Pubsub_choice_sequence_configure_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Pubsub_choice_sequence::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "create_");
    enc_len += field_create__.JSON_encode(Pubsub_choice_sequence_create___descr_, p_tok);
  }

  if (field_configure.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "configure");
    enc_len += field_configure.JSON_encode(Pubsub_choice_sequence_configure_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Pubsub_choice_sequence::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (7 == name_len && 0 == strncmp(fld_name, "create_", name_len)) {
        int ret_val = field_create__.JSON_decode(Pubsub_choice_sequence_create___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "create_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "configure", name_len)) {
        int ret_val = field_configure.JSON_decode(Pubsub_choice_sequence_configure_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "configure");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_create__.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "create_");
    return JSON_ERROR_FATAL;
  }
  if (!field_configure.is_bound()) {
    field_configure = OMIT_VALUE;
  }

  return dec_len;
}

struct Pubsub_choice_sequence_template::single_value_struct {
Create_template field_create__;
Configure_template field_configure;
};

void Pubsub_choice_sequence_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_create__ = ANY_VALUE;
single_value->field_configure = ANY_OR_OMIT;
}
}
}

void Pubsub_choice_sequence_template::copy_value(const Pubsub_choice_sequence& other_value)
{
single_value = new single_value_struct;
if (other_value.create__().is_bound()) {
  single_value->field_create__ = other_value.create__();
} else {
  single_value->field_create__.clean_up();
}
if (other_value.configure().is_bound()) {
  if (other_value.configure().ispresent()) single_value->field_configure = other_value.configure()();
  else single_value->field_configure = OMIT_VALUE;
} else {
  single_value->field_configure.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_choice_sequence_template::copy_template(const Pubsub_choice_sequence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.create__().get_selection()) {
single_value->field_create__ = other_value.create__();
} else {
single_value->field_create__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.configure().get_selection()) {
single_value->field_configure = other_value.configure();
} else {
single_value->field_configure.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_choice_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
break;
}
set_selection(other_value);
}

Pubsub_choice_sequence_template::Pubsub_choice_sequence_template()
{
}

Pubsub_choice_sequence_template::Pubsub_choice_sequence_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_choice_sequence_template::Pubsub_choice_sequence_template(const Pubsub_choice_sequence& other_value)
{
copy_value(other_value);
}

Pubsub_choice_sequence_template::Pubsub_choice_sequence_template(const OPTIONAL<Pubsub_choice_sequence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence from an unbound optional field.");
}
}

Pubsub_choice_sequence_template::Pubsub_choice_sequence_template(const Pubsub_choice_sequence_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Pubsub_choice_sequence_template::~Pubsub_choice_sequence_template()
{
clean_up();
}

Pubsub_choice_sequence_template& Pubsub_choice_sequence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_choice_sequence_template& Pubsub_choice_sequence_template::operator=(const Pubsub_choice_sequence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_choice_sequence_template& Pubsub_choice_sequence_template::operator=(const OPTIONAL<Pubsub_choice_sequence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
}
return *this;
}

Pubsub_choice_sequence_template& Pubsub_choice_sequence_template::operator=(const Pubsub_choice_sequence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Pubsub_choice_sequence_template::match(const Pubsub_choice_sequence& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.create__().is_bound()) return FALSE;
if(!single_value->field_create__.match(other_value.create__()))return FALSE;
if(!other_value.configure().is_bound()) return FALSE;
if((other_value.configure().ispresent() ? !single_value->field_configure.match((const Configure&)other_value.configure()) : !single_value->field_configure.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
}
return FALSE;
}

boolean Pubsub_choice_sequence_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_create__.is_bound()) return TRUE;
if (single_value->field_configure.is_omit() || single_value->field_configure.is_bound()) return TRUE;
return FALSE;
}

boolean Pubsub_choice_sequence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_create__.is_value()) return FALSE;
if (!single_value->field_configure.is_omit() && !single_value->field_configure.is_value()) return FALSE;
return TRUE;
}

void Pubsub_choice_sequence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub_choice_sequence Pubsub_choice_sequence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
Pubsub_choice_sequence ret_val;
if (single_value->field_create__.is_bound()) {
ret_val.create__() = single_value->field_create__.valueof();
}
if (single_value->field_configure.is_omit()) ret_val.configure() = OMIT_VALUE;
else if (single_value->field_configure.is_bound()) {
ret_val.configure() = single_value->field_configure.valueof();
}
return ret_val;
}

void Pubsub_choice_sequence_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Pubsub_choice_sequence_template[list_length];
}

Pubsub_choice_sequence_template& Pubsub_choice_sequence_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
return value_list.list_value[list_index];
}

Create_template& Pubsub_choice_sequence_template::create__()
{
set_specific();
return single_value->field_create__;
}

const Create_template& Pubsub_choice_sequence_template::create__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field create_ of a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
return single_value->field_create__;
}

Configure_template& Pubsub_choice_sequence_template::configure()
{
set_specific();
return single_value->field_configure;
}

const Configure_template& Pubsub_choice_sequence_template::configure() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field configure of a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
return single_value->field_configure;
}

int Pubsub_choice_sequence_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_configure.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
  }
  return 0;
}

void Pubsub_choice_sequence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ create_ := ");
single_value->field_create__.log();
TTCN_Logger::log_event_str(", configure := ");
single_value->field_configure.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Pubsub_choice_sequence_template::log_match(const Pubsub_choice_sequence& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_create__.match(match_value.create__())){
TTCN_Logger::log_logmatch_info(".create_");
single_value->field_create__.log_match(match_value.create__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.configure().ispresent()){
if(!single_value->field_configure.match(match_value.configure())){
TTCN_Logger::log_logmatch_info(".configure");
single_value->field_configure.log_match(match_value.configure());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_configure.match_omit()){
 TTCN_Logger::log_logmatch_info(".configure := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_configure.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ create_ := ");
single_value->field_create__.log_match(match_value.create__());
TTCN_Logger::log_event_str(", configure := ");
if (match_value.configure().ispresent()) single_value->field_configure.log_match(match_value.configure());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_configure.log();
if (single_value->field_configure.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_choice_sequence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_create__.encode_text(text_buf);
single_value->field_configure.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
}
}

void Pubsub_choice_sequence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_create__.decode_text(text_buf);
single_value->field_configure.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_choice_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence.");
}
}

void Pubsub_choice_sequence_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence'");
    }
    if (strcmp("create_", param_field) == 0) {
      create__().set_param(param);
      return;
    } else if (strcmp("configure", param_field) == 0) {
      configure().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) create__().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) configure().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "create_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          create__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "configure")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          configure().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
  }
  is_ifpresent = param.get_ifpresent();
}

void Pubsub_choice_sequence_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_create__.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
single_value->field_configure.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence");
}

boolean Pubsub_choice_sequence_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_choice_sequence_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Configure::Configure()
{
  bound_flag = FALSE;
}

Configure::Configure(const OPTIONAL<Configure_choice>& par_choice)
  :   field_choice(par_choice)
{
  bound_flag = TRUE;
}

Configure::Configure(const Configure& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Configure.");
bound_flag = TRUE;
if (other_value.choice().is_bound()) field_choice = other_value.choice();
else field_choice.clean_up();
}

void Configure::clean_up()
{
field_choice.clean_up();
bound_flag = FALSE;
}

Configure& Configure::operator=(const Configure& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Configure.");
  bound_flag = TRUE;
  if (other_value.choice().is_bound()) field_choice = other_value.choice();
  else field_choice.clean_up();
}
return *this;
}

boolean Configure::operator==(const Configure& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_choice==other_value.field_choice;
}

boolean Configure::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_choice.get_selection() || field_choice.is_bound()) return TRUE;
return FALSE;
}
boolean Configure::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_choice.get_selection() && !field_choice.is_value()) return FALSE;
return TRUE;
}
int Configure::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Configure");
  int ret_val = 0;
  if (field_choice.ispresent()) ret_val++;
  return ret_val;
}

void Configure::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ choice := ");
field_choice.log();
TTCN_Logger::log_event_str(" }");
}

void Configure::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Configure'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Configure'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Configure has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Configure: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Configure");
  }
}

void Configure::set_implicit_omit()
{
if (!choice().is_bound()) choice() = OMIT_VALUE;
else choice().set_implicit_omit();
}

void Configure::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Configure.");
field_choice.encode_text(text_buf);
}

void Configure::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_choice.decode_text(text_buf);
}

void Configure::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Configure::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Configure::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_choice.collect_ns(Configure_choice_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Configure::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Configure_choice::can_start(name, uri, Configure_choice_xer_, flavor)) return true;
  return false;
}

int Configure::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("choice': ");
  sub_len += field_choice.XER_encode(Configure_choice_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Configure::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_choice = *static_cast<const Configure_choice*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("choice': ");
    field_choice.XER_decode(Configure_choice_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Configure::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Configure.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_choice.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice");
    enc_len += field_choice.JSON_encode(Configure_choice_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Configure::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "choice", name_len)) {
        int ret_val = field_choice.JSON_decode(Configure_choice_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_choice.is_bound()) {
    field_choice = OMIT_VALUE;
  }

  return dec_len;
}

struct Configure_template::single_value_struct {
Configure_choice_template field_choice;
};

void Configure_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_choice = ANY_OR_OMIT;
}
}
}

void Configure_template::copy_value(const Configure& other_value)
{
single_value = new single_value_struct;
if (other_value.choice().is_bound()) {
  if (other_value.choice().ispresent()) single_value->field_choice = other_value.choice()();
  else single_value->field_choice = OMIT_VALUE;
} else {
  single_value->field_choice.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Configure_template::copy_template(const Configure_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.choice().get_selection()) {
single_value->field_choice = other_value.choice();
} else {
single_value->field_choice.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Configure_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Configure.");
break;
}
set_selection(other_value);
}

Configure_template::Configure_template()
{
}

Configure_template::Configure_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Configure_template::Configure_template(const Configure& other_value)
{
copy_value(other_value);
}

Configure_template::Configure_template(const OPTIONAL<Configure>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Configure&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Configure from an unbound optional field.");
}
}

Configure_template::Configure_template(const Configure_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Configure_template::~Configure_template()
{
clean_up();
}

Configure_template& Configure_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Configure_template& Configure_template::operator=(const Configure& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Configure_template& Configure_template::operator=(const OPTIONAL<Configure>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Configure&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Configure.");
}
return *this;
}

Configure_template& Configure_template::operator=(const Configure_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Configure_template::match(const Configure& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.choice().is_bound()) return FALSE;
if((other_value.choice().ispresent() ? !single_value->field_choice.match((const Configure_choice&)other_value.choice()) : !single_value->field_choice.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Configure.");
}
return FALSE;
}

boolean Configure_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_choice.is_omit() || single_value->field_choice.is_bound()) return TRUE;
return FALSE;
}

boolean Configure_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_choice.is_omit() && !single_value->field_choice.is_value()) return FALSE;
return TRUE;
}

void Configure_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Configure Configure_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Configure.");
Configure ret_val;
if (single_value->field_choice.is_omit()) ret_val.choice() = OMIT_VALUE;
else if (single_value->field_choice.is_bound()) {
ret_val.choice() = single_value->field_choice.valueof();
}
return ret_val;
}

void Configure_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Configure.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Configure_template[list_length];
}

Configure_template& Configure_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Configure.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Configure.");
return value_list.list_value[list_index];
}

Configure_choice_template& Configure_template::choice()
{
set_specific();
return single_value->field_choice;
}

const Configure_choice_template& Configure_template::choice() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field choice of a non-specific template of type @http_jabber_org_protocol_pubsub.Configure.");
return single_value->field_choice;
}

int Configure_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_choice.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Configure containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Configure.");
  }
  return 0;
}

void Configure_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ choice := ");
single_value->field_choice.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Configure_template::log_match(const Configure& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.choice().ispresent()){
if(!single_value->field_choice.match(match_value.choice())){
TTCN_Logger::log_logmatch_info(".choice");
single_value->field_choice.log_match(match_value.choice());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_choice.match_omit()){
 TTCN_Logger::log_logmatch_info(".choice := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_choice.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ choice := ");
if (match_value.choice().ispresent()) single_value->field_choice.log_match(match_value.choice());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_choice.log();
if (single_value->field_choice.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Configure_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_choice.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Configure.");
}
}

void Configure_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_choice.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Configure_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Configure.");
}
}

void Configure_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Configure'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Configure'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Configure has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Configure: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Configure");
  }
  is_ifpresent = param.get_ifpresent();
}

void Configure_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_choice.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Configure");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Configure");
}

boolean Configure_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Configure_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Configure_choice::copy_value(const Configure_choice& other_value)
{
switch (other_value.union_selection) {
case ALT_x:
field_x = new jabber__x__data::X(*other_value.field_x);
break;
default:
TTCN_error("Assignment of an unbound union value of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
union_selection = other_value.union_selection;
}

Configure_choice::Configure_choice()
{
union_selection = UNBOUND_VALUE;
}

Configure_choice::Configure_choice(const Configure_choice& other_value)
: Base_Type(){
copy_value(other_value);
}

Configure_choice::~Configure_choice()
{
clean_up();
}

Configure_choice& Configure_choice::operator=(const Configure_choice& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Configure_choice::operator==(const Configure_choice& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_x:
return *field_x == *other_value.field_x;
default:
return FALSE;
}
}

jabber__x__data::X& Configure_choice::x()
{
if (union_selection != ALT_x) {
clean_up();
field_x = new jabber__x__data::X;
union_selection = ALT_x;
}
return *field_x;
}

const jabber__x__data::X& Configure_choice::x() const
{
if (union_selection != ALT_x) TTCN_error("Using non-selected field x in a value of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
return *field_x;
}

boolean Configure_choice::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
return union_selection == checked_selection;
}

boolean Configure_choice::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Configure_choice::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_x: return field_x->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Configure_choice::clean_up()
{
switch (union_selection) {
case ALT_x:
  delete field_x;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Configure_choice::log() const
{
switch (union_selection) {
case ALT_x:
TTCN_Logger::log_event_str("{ x := ");
field_x->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Configure_choice::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@http_jabber_org_protocol_pubsub.Configure.choice'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@http_jabber_org_protocol_pubsub.Configure.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "x")) {
    x().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Configure.choice.", mp_last->get_id()->get_name());
}

void Configure_choice::set_implicit_omit()
{
switch (union_selection) {
case ALT_x:
field_x->set_implicit_omit(); break;
default: break;
}
}

void Configure_choice::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_x:
field_x->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}

void Configure_choice::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_x:
x().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}

void Configure_choice::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Configure_choice::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Configure_choice::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (jabber__x__data::X::can_start(name, uri, Configure_choice_x_xer_, flavor)) return true;
  return false;
}

char ** Configure_choice::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_x:
      new_ns = field_x->collect_ns(Configure_choice_x_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Configure_choice::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Configure_choice::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_x:
    ec_1.set_msg("x': ");
    field_x->XER_encode(Configure_choice_x_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Configure_choice::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (jabber__x__data::X::can_start(elem_name, ns_uri, Configure_choice_x_xer_, flavor_1) || (Configure_choice_x_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("x': ");
      x().XER_decode(Configure_choice_x_xer_, p_reader, flavor_1, 0);
      if (!x().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Configure_choice::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_x:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "x");
    enc_len += field_x->JSON_encode(Configure_choice_x_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Configure.choice.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Configure_choice::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "x", name_len)) {
      int ret_val = x().JSON_decode(Configure_choice_x_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "x");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Configure_choice_template::copy_value(const Configure_choice& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
single_value.field_x = new jabber__x__data::X_template(other_value.x());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
set_selection(SPECIFIC_VALUE);
}

void Configure_choice_template::copy_template(const Configure_choice_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
single_value.field_x = new jabber__x__data::X_template(*other_value.single_value.field_x);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Configure_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
set_selection(other_value);
}

Configure_choice_template::Configure_choice_template()
{
}

Configure_choice_template::Configure_choice_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Configure_choice_template::Configure_choice_template(const Configure_choice& other_value)
{
copy_value(other_value);
}

Configure_choice_template::Configure_choice_template(const OPTIONAL<Configure_choice>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Configure_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @http_jabber_org_protocol_pubsub.Configure.choice from an unbound optional field.");
}
}

Configure_choice_template::Configure_choice_template(const Configure_choice_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Configure_choice_template::~Configure_choice_template()
{
clean_up();
}

void Configure_choice_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
delete single_value.field_x;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Configure_choice_template& Configure_choice_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Configure_choice_template& Configure_choice_template::operator=(const Configure_choice& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Configure_choice_template& Configure_choice_template::operator=(const OPTIONAL<Configure_choice>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Configure_choice&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
return *this;
}

Configure_choice_template& Configure_choice_template::operator=(const Configure_choice_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Configure_choice_template::match(const Configure_choice& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Configure_choice::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Configure_choice::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Configure_choice::ALT_x:
return single_value.field_x->match(other_value.x());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
return FALSE;
}

boolean Configure_choice_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
return single_value.field_x->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}

Configure_choice Configure_choice_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
Configure_choice ret_val;
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
ret_val.x() = single_value.field_x->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
return ret_val;
}

Configure_choice_template& Configure_choice_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
return value_list.list_value[list_index];
}
void Configure_choice_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Configure_choice_template[list_length];
}

jabber__x__data::X_template& Configure_choice_template::x()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Configure_choice::ALT_x) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_x = new jabber__x__data::X_template(ANY_VALUE);
else single_value.field_x = new jabber__x__data::X_template;
single_value.union_selection = Configure_choice::ALT_x;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_x;
}

const jabber__x__data::X_template& Configure_choice_template::x() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field x in a non-specific template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
if (single_value.union_selection != Configure_choice::ALT_x) TTCN_error("Accessing non-selected field x in a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
return *single_value.field_x;
}

boolean Configure_choice_template::ischosen(Configure_choice::union_selection_type checked_selection) const
{
if (checked_selection == Configure_choice::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Configure_choice::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @http_jabber_org_protocol_pubsub.Configure.choice");
}
return FALSE;
}

void Configure_choice_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
TTCN_Logger::log_event_str("{ x := ");
single_value.field_x->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Configure_choice_template::log_match(const Configure_choice& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".x");
single_value.field_x->log_match(match_value.x());
} else {
TTCN_Logger::log_event_str("{ x := ");
single_value.field_x->log_match(match_value.x());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Configure_choice_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
single_value.field_x->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}

void Configure_choice_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Configure_choice::UNBOUND_VALUE;
Configure_choice::union_selection_type new_selection = (Configure_choice::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Configure_choice::ALT_x:
single_value.field_x = new jabber__x__data::X_template;
single_value.field_x->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Configure_choice_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
}

boolean Configure_choice_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Configure_choice_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Configure_choice_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@http_jabber_org_protocol_pubsub.Configure.choice'");
    }
    if (strcmp("x", param_field) == 0) {
      x().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@http_jabber_org_protocol_pubsub.Configure.choice'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Configure.choice");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "x")) {
      x().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Configure.choice.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Configure.choice");
  }
  is_ifpresent = param.get_ifpresent();
}

void Configure_choice_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Configure_choice::ALT_x:
single_value.field_x->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Configure.choice");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @http_jabber_org_protocol_pubsub.Configure.choice.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Configure.choice");
}

Pubsub_choice_sequence__1::Pubsub_choice_sequence__1()
{
  bound_flag = FALSE;
}

Pubsub_choice_sequence__1::Pubsub_choice_sequence__1(const OPTIONAL<Subscribe>& par_subscribe,
    const OPTIONAL<Options>& par_options)
  :   field_subscribe(par_subscribe),
  field_options(par_options)
{
  bound_flag = TRUE;
}

Pubsub_choice_sequence__1::Pubsub_choice_sequence__1(const Pubsub_choice_sequence__1& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
bound_flag = TRUE;
if (other_value.subscribe().is_bound()) field_subscribe = other_value.subscribe();
else field_subscribe.clean_up();
if (other_value.options().is_bound()) field_options = other_value.options();
else field_options.clean_up();
}

void Pubsub_choice_sequence__1::clean_up()
{
field_subscribe.clean_up();
field_options.clean_up();
bound_flag = FALSE;
}

Pubsub_choice_sequence__1& Pubsub_choice_sequence__1::operator=(const Pubsub_choice_sequence__1& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
  bound_flag = TRUE;
  if (other_value.subscribe().is_bound()) field_subscribe = other_value.subscribe();
  else field_subscribe.clean_up();
  if (other_value.options().is_bound()) field_options = other_value.options();
  else field_options.clean_up();
}
return *this;
}

boolean Pubsub_choice_sequence__1::operator==(const Pubsub_choice_sequence__1& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_subscribe==other_value.field_subscribe
  && field_options==other_value.field_options;
}

boolean Pubsub_choice_sequence__1::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_subscribe.get_selection() || field_subscribe.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_options.get_selection() || field_options.is_bound()) return TRUE;
return FALSE;
}
boolean Pubsub_choice_sequence__1::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_subscribe.get_selection() && !field_subscribe.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_options.get_selection() && !field_options.is_value()) return FALSE;
return TRUE;
}
int Pubsub_choice_sequence__1::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
  int ret_val = 0;
  if (field_subscribe.ispresent()) ret_val++;
  if (field_options.ispresent()) ret_val++;
  return ret_val;
}

void Pubsub_choice_sequence__1::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ subscribe := ");
field_subscribe.log();
TTCN_Logger::log_event_str(", options := ");
field_options.log();
TTCN_Logger::log_event_str(" }");
}

void Pubsub_choice_sequence__1::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1'");
    }
    if (strcmp("subscribe", param_field) == 0) {
      subscribe().set_param(param);
      return;
    } else if (strcmp("options", param_field) == 0) {
      options().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) subscribe().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) options().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscribe")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscribe().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
  }
}

void Pubsub_choice_sequence__1::set_implicit_omit()
{
if (!subscribe().is_bound()) subscribe() = OMIT_VALUE;
else subscribe().set_implicit_omit();
if (!options().is_bound()) options() = OMIT_VALUE;
else options().set_implicit_omit();
}

void Pubsub_choice_sequence__1::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
field_subscribe.encode_text(text_buf);
field_options.encode_text(text_buf);
}

void Pubsub_choice_sequence__1::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_subscribe.decode_text(text_buf);
field_options.decode_text(text_buf);
}

void Pubsub_choice_sequence__1::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub_choice_sequence__1::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Pubsub_choice_sequence__1::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_subscribe.collect_ns(Pubsub_choice_sequence__1_subscribe_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_options.collect_ns(Pubsub_choice_sequence__1_options_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Pubsub_choice_sequence__1::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Subscribe::can_start(name, uri, Pubsub_choice_sequence__1_subscribe_xer_, flavor)) return true;
  else if (Options::can_start(name, uri, Pubsub_choice_sequence__1_options_xer_, flavor)) return true;
  return false;
}

int Pubsub_choice_sequence__1::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("subscribe': ");
  sub_len += field_subscribe.XER_encode(Pubsub_choice_sequence__1_subscribe_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  ec_1.set_msg("options': ");
  sub_len += field_options.XER_encode(Pubsub_choice_sequence__1_options_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub_choice_sequence__1::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  {
    ec_1.set_msg("subscribe': ");
    field_subscribe.XER_decode(Pubsub_choice_sequence__1_subscribe_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_options = *static_cast<const Options*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("options': ");
    field_options.XER_decode(Pubsub_choice_sequence__1_options_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Pubsub_choice_sequence__1::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_subscribe.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscribe");
    enc_len += field_subscribe.JSON_encode(Pubsub_choice_sequence__1_subscribe_descr_, p_tok);
  }

  if (field_options.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "options");
    enc_len += field_options.JSON_encode(Pubsub_choice_sequence__1_options_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Pubsub_choice_sequence__1::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "subscribe", name_len)) {
        int ret_val = field_subscribe.JSON_decode(Pubsub_choice_sequence__1_subscribe_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscribe");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (7 == name_len && 0 == strncmp(fld_name, "options", name_len)) {
        int ret_val = field_options.JSON_decode(Pubsub_choice_sequence__1_options_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "options");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_subscribe.is_bound()) {
    field_subscribe = OMIT_VALUE;
  }
  if (!field_options.is_bound()) {
    field_options = OMIT_VALUE;
  }

  return dec_len;
}

struct Pubsub_choice_sequence__1_template::single_value_struct {
Subscribe_template field_subscribe;
Options_template field_options;
};

void Pubsub_choice_sequence__1_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_subscribe = ANY_OR_OMIT;
single_value->field_options = ANY_OR_OMIT;
}
}
}

void Pubsub_choice_sequence__1_template::copy_value(const Pubsub_choice_sequence__1& other_value)
{
single_value = new single_value_struct;
if (other_value.subscribe().is_bound()) {
  if (other_value.subscribe().ispresent()) single_value->field_subscribe = other_value.subscribe()();
  else single_value->field_subscribe = OMIT_VALUE;
} else {
  single_value->field_subscribe.clean_up();
}
if (other_value.options().is_bound()) {
  if (other_value.options().ispresent()) single_value->field_options = other_value.options()();
  else single_value->field_options = OMIT_VALUE;
} else {
  single_value->field_options.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_choice_sequence__1_template::copy_template(const Pubsub_choice_sequence__1_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.subscribe().get_selection()) {
single_value->field_subscribe = other_value.subscribe();
} else {
single_value->field_subscribe.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.options().get_selection()) {
single_value->field_options = other_value.options();
} else {
single_value->field_options.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_choice_sequence__1_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
break;
}
set_selection(other_value);
}

Pubsub_choice_sequence__1_template::Pubsub_choice_sequence__1_template()
{
}

Pubsub_choice_sequence__1_template::Pubsub_choice_sequence__1_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_choice_sequence__1_template::Pubsub_choice_sequence__1_template(const Pubsub_choice_sequence__1& other_value)
{
copy_value(other_value);
}

Pubsub_choice_sequence__1_template::Pubsub_choice_sequence__1_template(const OPTIONAL<Pubsub_choice_sequence__1>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_sequence__1&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 from an unbound optional field.");
}
}

Pubsub_choice_sequence__1_template::Pubsub_choice_sequence__1_template(const Pubsub_choice_sequence__1_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Pubsub_choice_sequence__1_template::~Pubsub_choice_sequence__1_template()
{
clean_up();
}

Pubsub_choice_sequence__1_template& Pubsub_choice_sequence__1_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_choice_sequence__1_template& Pubsub_choice_sequence__1_template::operator=(const Pubsub_choice_sequence__1& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_choice_sequence__1_template& Pubsub_choice_sequence__1_template::operator=(const OPTIONAL<Pubsub_choice_sequence__1>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_sequence__1&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
}
return *this;
}

Pubsub_choice_sequence__1_template& Pubsub_choice_sequence__1_template::operator=(const Pubsub_choice_sequence__1_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Pubsub_choice_sequence__1_template::match(const Pubsub_choice_sequence__1& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.subscribe().is_bound()) return FALSE;
if((other_value.subscribe().ispresent() ? !single_value->field_subscribe.match((const Subscribe&)other_value.subscribe()) : !single_value->field_subscribe.match_omit()))return FALSE;
if(!other_value.options().is_bound()) return FALSE;
if((other_value.options().ispresent() ? !single_value->field_options.match((const Options&)other_value.options()) : !single_value->field_options.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
}
return FALSE;
}

boolean Pubsub_choice_sequence__1_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_subscribe.is_omit() || single_value->field_subscribe.is_bound()) return TRUE;
if (single_value->field_options.is_omit() || single_value->field_options.is_bound()) return TRUE;
return FALSE;
}

boolean Pubsub_choice_sequence__1_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_subscribe.is_omit() && !single_value->field_subscribe.is_value()) return FALSE;
if (!single_value->field_options.is_omit() && !single_value->field_options.is_value()) return FALSE;
return TRUE;
}

void Pubsub_choice_sequence__1_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub_choice_sequence__1 Pubsub_choice_sequence__1_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
Pubsub_choice_sequence__1 ret_val;
if (single_value->field_subscribe.is_omit()) ret_val.subscribe() = OMIT_VALUE;
else if (single_value->field_subscribe.is_bound()) {
ret_val.subscribe() = single_value->field_subscribe.valueof();
}
if (single_value->field_options.is_omit()) ret_val.options() = OMIT_VALUE;
else if (single_value->field_options.is_bound()) {
ret_val.options() = single_value->field_options.valueof();
}
return ret_val;
}

void Pubsub_choice_sequence__1_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Pubsub_choice_sequence__1_template[list_length];
}

Pubsub_choice_sequence__1_template& Pubsub_choice_sequence__1_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
return value_list.list_value[list_index];
}

Subscribe_template& Pubsub_choice_sequence__1_template::subscribe()
{
set_specific();
return single_value->field_subscribe;
}

const Subscribe_template& Pubsub_choice_sequence__1_template::subscribe() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subscribe of a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
return single_value->field_subscribe;
}

Options_template& Pubsub_choice_sequence__1_template::options()
{
set_specific();
return single_value->field_options;
}

const Options_template& Pubsub_choice_sequence__1_template::options() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field options of a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
return single_value->field_options;
}

int Pubsub_choice_sequence__1_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_subscribe.is_present()) ret_val++;
      if (single_value->field_options.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
  }
  return 0;
}

void Pubsub_choice_sequence__1_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ subscribe := ");
single_value->field_subscribe.log();
TTCN_Logger::log_event_str(", options := ");
single_value->field_options.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Pubsub_choice_sequence__1_template::log_match(const Pubsub_choice_sequence__1& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.subscribe().ispresent()){
if(!single_value->field_subscribe.match(match_value.subscribe())){
TTCN_Logger::log_logmatch_info(".subscribe");
single_value->field_subscribe.log_match(match_value.subscribe());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subscribe.match_omit()){
 TTCN_Logger::log_logmatch_info(".subscribe := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subscribe.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.options().ispresent()){
if(!single_value->field_options.match(match_value.options())){
TTCN_Logger::log_logmatch_info(".options");
single_value->field_options.log_match(match_value.options());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_options.match_omit()){
 TTCN_Logger::log_logmatch_info(".options := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_options.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ subscribe := ");
if (match_value.subscribe().ispresent()) single_value->field_subscribe.log_match(match_value.subscribe());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subscribe.log();
if (single_value->field_subscribe.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", options := ");
if (match_value.options().ispresent()) single_value->field_options.log_match(match_value.options());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_options.log();
if (single_value->field_options.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_choice_sequence__1_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_subscribe.encode_text(text_buf);
single_value->field_options.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
}
}

void Pubsub_choice_sequence__1_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_subscribe.decode_text(text_buf);
single_value->field_options.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_choice_sequence__1_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1.");
}
}

void Pubsub_choice_sequence__1_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1'");
    }
    if (strcmp("subscribe", param_field) == 0) {
      subscribe().set_param(param);
      return;
    } else if (strcmp("options", param_field) == 0) {
      options().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1 has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) subscribe().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) options().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscribe")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscribe().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
  }
  is_ifpresent = param.get_ifpresent();
}

void Pubsub_choice_sequence__1_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_subscribe.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
single_value->field_options.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.sequence_1");
}

boolean Pubsub_choice_sequence__1_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_choice_sequence__1_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Subscribe::Subscribe()
{
  bound_flag = FALSE;
}

Subscribe::Subscribe(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Empty& par_base)
  :   field_jid(par_jid),
  field_node(par_node),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Subscribe::Subscribe(const Subscribe& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe.");
bound_flag = TRUE;
if (other_value.jid().is_bound()) field_jid = other_value.jid();
else field_jid.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Subscribe::clean_up()
{
field_jid.clean_up();
field_node.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Subscribe& Subscribe::operator=(const Subscribe& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe.");
  bound_flag = TRUE;
  if (other_value.jid().is_bound()) field_jid = other_value.jid();
  else field_jid.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Subscribe::operator==(const Subscribe& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_jid==other_value.field_jid
  && field_node==other_value.field_node
  && field_base==other_value.field_base;
}

boolean Subscribe::is_bound() const
{
if (bound_flag) return TRUE;
if(field_jid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Subscribe::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_jid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Subscribe::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscribe");
  int ret_val = 2;
  if (field_node.ispresent()) ret_val++;
  return ret_val;
}

void Subscribe::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ jid := ");
field_jid.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Subscribe::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Subscribe'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Subscribe'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Subscribe has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscribe: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Subscribe");
  }
}

void Subscribe::set_implicit_omit()
{
if (jid().is_bound()) jid().set_implicit_omit();
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Subscribe::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscribe.");
field_jid.encode_text(text_buf);
field_node.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Subscribe::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_jid.decode_text(text_buf);
field_node.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Subscribe::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscribe::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subscribe::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_jid.collect_ns(Subscribe_jid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Subscribe_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Subscribe_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subscribe::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Subscribe_jid_xer_, flavor)) return true;
  return false;
}

int Subscribe::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("jid': ");
  tmp_len = field_jid.XER_encode(Subscribe_jid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Subscribe_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Subscribe_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subscribe::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Subscribe_jid_xer_.dfeValue) field_jid = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscribe_jid_xer_.dfeValue);
  if (Subscribe_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscribe_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Subscribe_jid_xer_, 1) && check_namespace(ns_uri, Subscribe_jid_xer_)) {
      ec_1.set_msg("jid': ");
      field_jid.XER_decode(Subscribe_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Subscribe_node_xer_, 1) && check_namespace(ns_uri, Subscribe_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Subscribe_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_jid.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'jid'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("jid': ");
    field_jid.XER_decode(Subscribe_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Subscribe_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Subscribe_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subscribe::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "jid");
    enc_len += field_jid.JSON_encode(Subscribe_jid_descr_, p_tok);
  }

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Subscribe_node_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Subscribe_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subscribe::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "jid", name_len)) {
        int ret_val = field_jid.JSON_decode(Subscribe_jid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "jid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Subscribe_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Subscribe_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_jid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "jid");
    return JSON_ERROR_FATAL;
  }
  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Subscribe_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_jid;
UNIVERSAL_CHARSTRING_template field_node;
Empty_template field_base;
};

void Subscribe_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_jid = ANY_VALUE;
single_value->field_node = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Subscribe_template::copy_value(const Subscribe& other_value)
{
single_value = new single_value_struct;
if (other_value.jid().is_bound()) {
  single_value->field_jid = other_value.jid();
} else {
  single_value->field_jid.clean_up();
}
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subscribe_template::copy_template(const Subscribe_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.jid().get_selection()) {
single_value->field_jid = other_value.jid();
} else {
single_value->field_jid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscribe_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe.");
break;
}
set_selection(other_value);
}

Subscribe_template::Subscribe_template()
{
}

Subscribe_template::Subscribe_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscribe_template::Subscribe_template(const Subscribe& other_value)
{
copy_value(other_value);
}

Subscribe_template::Subscribe_template(const OPTIONAL<Subscribe>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscribe&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscribe from an unbound optional field.");
}
}

Subscribe_template::Subscribe_template(const Subscribe_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subscribe_template::~Subscribe_template()
{
clean_up();
}

Subscribe_template& Subscribe_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscribe_template& Subscribe_template::operator=(const Subscribe& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscribe_template& Subscribe_template::operator=(const OPTIONAL<Subscribe>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscribe&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscribe.");
}
return *this;
}

Subscribe_template& Subscribe_template::operator=(const Subscribe_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscribe_template::match(const Subscribe& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.jid().is_bound()) return FALSE;
if(!single_value->field_jid.match(other_value.jid()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe.");
}
return FALSE;
}

boolean Subscribe_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_jid.is_bound()) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Subscribe_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_jid.is_value()) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Subscribe_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscribe Subscribe_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe.");
Subscribe ret_val;
if (single_value->field_jid.is_bound()) {
ret_val.jid() = single_value->field_jid.valueof();
}
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Subscribe_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Subscribe.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscribe_template[list_length];
}

Subscribe_template& Subscribe_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscribe.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscribe.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Subscribe_template::jid()
{
set_specific();
return single_value->field_jid;
}

const UNIVERSAL_CHARSTRING_template& Subscribe_template::jid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field jid of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe.");
return single_value->field_jid;
}

UNIVERSAL_CHARSTRING_template& Subscribe_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Subscribe_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe.");
return single_value->field_node;
}

Empty_template& Subscribe_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Subscribe_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe.");
return single_value->field_base;
}

int Subscribe_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_node.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe.");
  }
  return 0;
}

void Subscribe_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscribe_template::log_match(const Subscribe& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_jid.match(match_value.jid())){
TTCN_Logger::log_logmatch_info(".jid");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::log_event_str(", node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscribe_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_jid.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe.");
}
}

void Subscribe_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_jid.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscribe_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Subscribe.");
}
}

void Subscribe_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Subscribe'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Subscribe'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Subscribe has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscribe: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Subscribe");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscribe_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_jid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe");
}

boolean Subscribe_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscribe_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Options::Options()
{
  bound_flag = FALSE;
}

Options::Options(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const OPTIONAL<Options_sequence>& par_sequence)
  :   field_jid(par_jid),
  field_node(par_node),
  field_subid(par_subid),
  field_sequence(par_sequence)
{
  bound_flag = TRUE;
}

Options::Options(const Options& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Options.");
bound_flag = TRUE;
if (other_value.jid().is_bound()) field_jid = other_value.jid();
else field_jid.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.subid().is_bound()) field_subid = other_value.subid();
else field_subid.clean_up();
if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
else field_sequence.clean_up();
}

void Options::clean_up()
{
field_jid.clean_up();
field_node.clean_up();
field_subid.clean_up();
field_sequence.clean_up();
bound_flag = FALSE;
}

Options& Options::operator=(const Options& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Options.");
  bound_flag = TRUE;
  if (other_value.jid().is_bound()) field_jid = other_value.jid();
  else field_jid.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.subid().is_bound()) field_subid = other_value.subid();
  else field_subid.clean_up();
  if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
  else field_sequence.clean_up();
}
return *this;
}

boolean Options::operator==(const Options& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_jid==other_value.field_jid
  && field_node==other_value.field_node
  && field_subid==other_value.field_subid
  && field_sequence==other_value.field_sequence;
}

boolean Options::is_bound() const
{
if (bound_flag) return TRUE;
if(field_jid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subid.get_selection() || field_subid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_sequence.get_selection() || field_sequence.is_bound()) return TRUE;
return FALSE;
}
boolean Options::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_jid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subid.get_selection() && !field_subid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_sequence.get_selection() && !field_sequence.is_value()) return FALSE;
return TRUE;
}
int Options::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Options");
  int ret_val = 1;
  if (field_node.ispresent()) ret_val++;
  if (field_subid.ispresent()) ret_val++;
  if (field_sequence.ispresent()) ret_val++;
  return ret_val;
}

void Options::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ jid := ");
field_jid.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", subid := ");
field_subid.log();
TTCN_Logger::log_event_str(", sequence := ");
field_sequence.log();
TTCN_Logger::log_event_str(" }");
}

void Options::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Options'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Options'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Options has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Options: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Options");
  }
}

void Options::set_implicit_omit()
{
if (jid().is_bound()) jid().set_implicit_omit();
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (!subid().is_bound()) subid() = OMIT_VALUE;
else subid().set_implicit_omit();
if (!sequence().is_bound()) sequence() = OMIT_VALUE;
else sequence().set_implicit_omit();
}

void Options::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Options.");
field_jid.encode_text(text_buf);
field_node.encode_text(text_buf);
field_subid.encode_text(text_buf);
field_sequence.encode_text(text_buf);
}

void Options::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_jid.decode_text(text_buf);
field_node.decode_text(text_buf);
field_subid.decode_text(text_buf);
field_sequence.decode_text(text_buf);
}

void Options::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Options::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Options::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_jid.collect_ns(Options_jid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Options_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subid.collect_ns(Options_subid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_sequence.collect_ns(Options_sequence_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Options::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Options_jid_xer_, flavor)) return true;
  return false;
}

int Options::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("jid': ");
  tmp_len = field_jid.XER_encode(Options_jid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Options_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("subid': ");
  tmp_len = field_subid.XER_encode(Options_subid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("sequence': ");
  sub_len += field_sequence.XER_encode(Options_sequence_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Options::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Options_jid_xer_.dfeValue) field_jid = *static_cast<const UNIVERSAL_CHARSTRING*>(Options_jid_xer_.dfeValue);
  if (Options_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Options_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  if (Options_subid_xer_.dfeValue) field_subid = *static_cast<const UNIVERSAL_CHARSTRING*>(Options_subid_xer_.dfeValue);
  else field_subid = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Options_jid_xer_, 1) && check_namespace(ns_uri, Options_jid_xer_)) {
      ec_1.set_msg("jid': ");
      field_jid.XER_decode(Options_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Options_node_xer_, 1) && check_namespace(ns_uri, Options_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Options_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Options_subid_xer_, 1) && check_namespace(ns_uri, Options_subid_xer_)) {
      ec_1.set_msg("subid': ");
      field_subid.XER_decode(Options_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_jid.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'jid'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("jid': ");
    field_jid.XER_decode(Options_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Options_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("subid': ");
    field_subid.XER_decode(Options_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_sequence = *static_cast<const Options_sequence*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("sequence': ");
    field_sequence.XER_decode(Options_sequence_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Options::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Options.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "jid");
    enc_len += field_jid.JSON_encode(Options_jid_descr_, p_tok);
  }

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Options_node_descr_, p_tok);
  }

  if (field_subid.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subid");
    enc_len += field_subid.JSON_encode(Options_subid_descr_, p_tok);
  }

  if (field_sequence.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence");
    enc_len += field_sequence.JSON_encode(Options_sequence_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Options::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "jid", name_len)) {
        int ret_val = field_jid.JSON_decode(Options_jid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "jid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Options_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "subid", name_len)) {
        int ret_val = field_subid.JSON_decode(Options_subid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (8 == name_len && 0 == strncmp(fld_name, "sequence", name_len)) {
        int ret_val = field_sequence.JSON_decode(Options_sequence_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_jid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "jid");
    return JSON_ERROR_FATAL;
  }
  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_subid.is_bound()) {
    field_subid = OMIT_VALUE;
  }
  if (!field_sequence.is_bound()) {
    field_sequence = OMIT_VALUE;
  }

  return dec_len;
}

struct Options_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_jid;
UNIVERSAL_CHARSTRING_template field_node;
UNIVERSAL_CHARSTRING_template field_subid;
Options_sequence_template field_sequence;
};

void Options_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_jid = ANY_VALUE;
single_value->field_node = ANY_OR_OMIT;
single_value->field_subid = ANY_OR_OMIT;
single_value->field_sequence = ANY_OR_OMIT;
}
}
}

void Options_template::copy_value(const Options& other_value)
{
single_value = new single_value_struct;
if (other_value.jid().is_bound()) {
  single_value->field_jid = other_value.jid();
} else {
  single_value->field_jid.clean_up();
}
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.subid().is_bound()) {
  if (other_value.subid().ispresent()) single_value->field_subid = other_value.subid()();
  else single_value->field_subid = OMIT_VALUE;
} else {
  single_value->field_subid.clean_up();
}
if (other_value.sequence().is_bound()) {
  if (other_value.sequence().ispresent()) single_value->field_sequence = other_value.sequence()();
  else single_value->field_sequence = OMIT_VALUE;
} else {
  single_value->field_sequence.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Options_template::copy_template(const Options_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.jid().get_selection()) {
single_value->field_jid = other_value.jid();
} else {
single_value->field_jid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subid().get_selection()) {
single_value->field_subid = other_value.subid();
} else {
single_value->field_subid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sequence().get_selection()) {
single_value->field_sequence = other_value.sequence();
} else {
single_value->field_sequence.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Options_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.");
break;
}
set_selection(other_value);
}

Options_template::Options_template()
{
}

Options_template::Options_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Options_template::Options_template(const Options& other_value)
{
copy_value(other_value);
}

Options_template::Options_template(const OPTIONAL<Options>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Options&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Options from an unbound optional field.");
}
}

Options_template::Options_template(const Options_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Options_template::~Options_template()
{
clean_up();
}

Options_template& Options_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Options_template& Options_template::operator=(const Options& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Options_template& Options_template::operator=(const OPTIONAL<Options>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Options&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Options.");
}
return *this;
}

Options_template& Options_template::operator=(const Options_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Options_template::match(const Options& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.jid().is_bound()) return FALSE;
if(!single_value->field_jid.match(other_value.jid()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.subid().is_bound()) return FALSE;
if((other_value.subid().ispresent() ? !single_value->field_subid.match((const UNIVERSAL_CHARSTRING&)other_value.subid()) : !single_value->field_subid.match_omit()))return FALSE;
if(!other_value.sequence().is_bound()) return FALSE;
if((other_value.sequence().ispresent() ? !single_value->field_sequence.match((const Options_sequence&)other_value.sequence()) : !single_value->field_sequence.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.");
}
return FALSE;
}

boolean Options_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_jid.is_bound()) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_subid.is_omit() || single_value->field_subid.is_bound()) return TRUE;
if (single_value->field_sequence.is_omit() || single_value->field_sequence.is_bound()) return TRUE;
return FALSE;
}

boolean Options_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_jid.is_value()) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_subid.is_omit() && !single_value->field_subid.is_value()) return FALSE;
if (!single_value->field_sequence.is_omit() && !single_value->field_sequence.is_value()) return FALSE;
return TRUE;
}

void Options_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Options Options_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Options.");
Options ret_val;
if (single_value->field_jid.is_bound()) {
ret_val.jid() = single_value->field_jid.valueof();
}
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_subid.is_omit()) ret_val.subid() = OMIT_VALUE;
else if (single_value->field_subid.is_bound()) {
ret_val.subid() = single_value->field_subid.valueof();
}
if (single_value->field_sequence.is_omit()) ret_val.sequence() = OMIT_VALUE;
else if (single_value->field_sequence.is_bound()) {
ret_val.sequence() = single_value->field_sequence.valueof();
}
return ret_val;
}

void Options_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Options.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Options_template[list_length];
}

Options_template& Options_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Options.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Options.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Options_template::jid()
{
set_specific();
return single_value->field_jid;
}

const UNIVERSAL_CHARSTRING_template& Options_template::jid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field jid of a non-specific template of type @http_jabber_org_protocol_pubsub.Options.");
return single_value->field_jid;
}

UNIVERSAL_CHARSTRING_template& Options_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Options_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Options.");
return single_value->field_node;
}

UNIVERSAL_CHARSTRING_template& Options_template::subid()
{
set_specific();
return single_value->field_subid;
}

const UNIVERSAL_CHARSTRING_template& Options_template::subid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subid of a non-specific template of type @http_jabber_org_protocol_pubsub.Options.");
return single_value->field_subid;
}

Options_sequence_template& Options_template::sequence()
{
set_specific();
return single_value->field_sequence;
}

const Options_sequence_template& Options_template::sequence() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sequence of a non-specific template of type @http_jabber_org_protocol_pubsub.Options.");
return single_value->field_sequence;
}

int Options_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_node.is_present()) ret_val++;
      if (single_value->field_subid.is_present()) ret_val++;
      if (single_value->field_sequence.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.");
  }
  return 0;
}

void Options_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", subid := ");
single_value->field_subid.log();
TTCN_Logger::log_event_str(", sequence := ");
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Options_template::log_match(const Options& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_jid.match(match_value.jid())){
TTCN_Logger::log_logmatch_info(".jid");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.subid().ispresent()){
if(!single_value->field_subid.match(match_value.subid())){
TTCN_Logger::log_logmatch_info(".subid");
single_value->field_subid.log_match(match_value.subid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subid.match_omit()){
 TTCN_Logger::log_logmatch_info(".subid := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subid.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.sequence().ispresent()){
if(!single_value->field_sequence.match(match_value.sequence())){
TTCN_Logger::log_logmatch_info(".sequence");
single_value->field_sequence.log_match(match_value.sequence());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_sequence.match_omit()){
 TTCN_Logger::log_logmatch_info(".sequence := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::log_event_str(", node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", subid := ");
if (match_value.subid().ispresent()) single_value->field_subid.log_match(match_value.subid());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subid.log();
if (single_value->field_subid.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", sequence := ");
if (match_value.sequence().ispresent()) single_value->field_sequence.log_match(match_value.sequence());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_sequence.log();
if (single_value->field_sequence.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Options_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_jid.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_subid.encode_text(text_buf);
single_value->field_sequence.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.");
}
}

void Options_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_jid.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_subid.decode_text(text_buf);
single_value->field_sequence.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Options_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Options.");
}
}

void Options_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Options'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Options'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Options has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Options: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Options");
  }
  is_ifpresent = param.get_ifpresent();
}

void Options_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_jid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options");
single_value->field_subid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options");
single_value->field_sequence.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options");
}

boolean Options_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Options_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Options_sequence::Options_sequence()
{
  bound_flag = FALSE;
}

Options_sequence::Options_sequence(const UNIVERSAL_CHARSTRING& par_elem)
  :   field_elem(par_elem)
{
  bound_flag = TRUE;
}

Options_sequence::Options_sequence(const Options_sequence& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Options.sequence.");
bound_flag = TRUE;
if (other_value.elem().is_bound()) field_elem = other_value.elem();
else field_elem.clean_up();
}

void Options_sequence::clean_up()
{
field_elem.clean_up();
bound_flag = FALSE;
}

Options_sequence& Options_sequence::operator=(const Options_sequence& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Options.sequence.");
  bound_flag = TRUE;
  if (other_value.elem().is_bound()) field_elem = other_value.elem();
  else field_elem.clean_up();
}
return *this;
}

boolean Options_sequence::operator==(const Options_sequence& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_elem==other_value.field_elem;
}

boolean Options_sequence::is_bound() const
{
if (bound_flag) return TRUE;
if(field_elem.is_bound()) return TRUE;
return FALSE;
}
boolean Options_sequence::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_elem.is_value()) return FALSE;
return TRUE;
}
int Options_sequence::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Options.sequence");
  return 1;
}

void Options_sequence::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ elem := ");
field_elem.log();
TTCN_Logger::log_event_str(" }");
}

void Options_sequence::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Options.sequence'");
    }
    if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Options.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Options.sequence has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Options.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Options.sequence");
  }
}

void Options_sequence::set_implicit_omit()
{
if (elem().is_bound()) elem().set_implicit_omit();
}

void Options_sequence::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Options.sequence.");
field_elem.encode_text(text_buf);
}

void Options_sequence::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_elem.decode_text(text_buf);
}

void Options_sequence::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Options_sequence::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Options_sequence::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_elem.collect_ns(Options_sequence_elem_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Options_sequence::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Options_sequence_elem_xer_, flavor)) return true;
  return false;
}

int Options_sequence::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("elem': ");
  sub_len += field_elem.XER_encode(Options_sequence_elem_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Options_sequence::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_elem = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("elem': ");
    if (tag_closed) p_reader.Read(); 
    field_elem.XER_decode(Options_sequence_elem_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Options_sequence::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Options.sequence.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem");
    enc_len += field_elem.JSON_encode(Options_sequence_elem_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Options_sequence::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "elem", name_len)) {
        int ret_val = field_elem.JSON_decode(Options_sequence_elem_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_elem.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Options_sequence_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_elem;
};

void Options_sequence_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_elem = ANY_VALUE;
}
}
}

void Options_sequence_template::copy_value(const Options_sequence& other_value)
{
single_value = new single_value_struct;
if (other_value.elem().is_bound()) {
  single_value->field_elem = other_value.elem();
} else {
  single_value->field_elem.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Options_sequence_template::copy_template(const Options_sequence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.elem().get_selection()) {
single_value->field_elem = other_value.elem();
} else {
single_value->field_elem.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Options_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
break;
}
set_selection(other_value);
}

Options_sequence_template::Options_sequence_template()
{
}

Options_sequence_template::Options_sequence_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Options_sequence_template::Options_sequence_template(const Options_sequence& other_value)
{
copy_value(other_value);
}

Options_sequence_template::Options_sequence_template(const OPTIONAL<Options_sequence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Options_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Options.sequence from an unbound optional field.");
}
}

Options_sequence_template::Options_sequence_template(const Options_sequence_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Options_sequence_template::~Options_sequence_template()
{
clean_up();
}

Options_sequence_template& Options_sequence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Options_sequence_template& Options_sequence_template::operator=(const Options_sequence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Options_sequence_template& Options_sequence_template::operator=(const OPTIONAL<Options_sequence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Options_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
}
return *this;
}

Options_sequence_template& Options_sequence_template::operator=(const Options_sequence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Options_sequence_template::match(const Options_sequence& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.elem().is_bound()) return FALSE;
if(!single_value->field_elem.match(other_value.elem()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
}
return FALSE;
}

boolean Options_sequence_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_elem.is_bound()) return TRUE;
return FALSE;
}

boolean Options_sequence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_elem.is_value()) return FALSE;
return TRUE;
}

void Options_sequence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Options_sequence Options_sequence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
Options_sequence ret_val;
if (single_value->field_elem.is_bound()) {
ret_val.elem() = single_value->field_elem.valueof();
}
return ret_val;
}

void Options_sequence_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Options_sequence_template[list_length];
}

Options_sequence_template& Options_sequence_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Options_sequence_template::elem()
{
set_specific();
return single_value->field_elem;
}

const UNIVERSAL_CHARSTRING_template& Options_sequence_template::elem() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem of a non-specific template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
return single_value->field_elem;
}

int Options_sequence_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Options.sequence containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
  }
  return 0;
}

void Options_sequence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ elem := ");
single_value->field_elem.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Options_sequence_template::log_match(const Options_sequence& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_elem.match(match_value.elem())){
TTCN_Logger::log_logmatch_info(".elem");
single_value->field_elem.log_match(match_value.elem());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ elem := ");
single_value->field_elem.log_match(match_value.elem());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Options_sequence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_elem.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
}
}

void Options_sequence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_elem.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Options_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Options.sequence.");
}
}

void Options_sequence_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Options.sequence'");
    }
    if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Options.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Options.sequence has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Options.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Options.sequence");
  }
  is_ifpresent = param.get_ifpresent();
}

void Options_sequence_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_elem.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options.sequence");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Options.sequence");
}

boolean Options_sequence_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Options_sequence_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Pubsub_choice_choice__list_0 Pubsub_choice_choice__list::UNBOUND_ELEM;
Pubsub_choice_choice__list::Pubsub_choice_choice__list()
{
val_ptr = NULL;
}

Pubsub_choice_choice__list::Pubsub_choice_choice__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Pubsub_choice_choice__list::Pubsub_choice_choice__list(const Pubsub_choice_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Pubsub_choice_choice__list::~Pubsub_choice_choice__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Pubsub_choice_choice__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Pubsub_choice_choice__list& Pubsub_choice_choice__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Pubsub_choice_choice__list& Pubsub_choice_choice__list::operator=(const Pubsub_choice_choice__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Pubsub_choice_choice__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return val_ptr->n_elements == 0 ;
}

boolean Pubsub_choice_choice__list::operator==(const Pubsub_choice_choice__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Pubsub_choice_choice__list_0& Pubsub_choice_choice__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Pubsub_choice_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Pubsub_choice_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Pubsub_choice_choice__list_0;
}
return *val_ptr->value_elements[index_value];
}

Pubsub_choice_choice__list_0& Pubsub_choice_choice__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return (*this)[(int)index_value];
}

const Pubsub_choice_choice__list_0& Pubsub_choice_choice__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Pubsub_choice_choice__list_0& Pubsub_choice_choice__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return (*this)[(int)index_value];
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Pubsub_choice_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Pubsub_choice_choice__list_0(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::operator+(const Pubsub_choice_choice__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Pubsub_choice_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Pubsub_choice_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Pubsub_choice_choice__list_0(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list","element");
Pubsub_choice_choice__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Pubsub_choice_choice__list_0(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::replace(int index, int len, const Pubsub_choice_choice__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list","element");
Pubsub_choice_choice__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Pubsub_choice_choice__list_0(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Pubsub_choice_choice__list_0(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Pubsub_choice_choice__list_0(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list::replace(int index, int len, const Pubsub_choice_choice__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Pubsub_choice_choice__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Pubsub_choice_choice__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Pubsub_choice_choice__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Pubsub_choice_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Pubsub_choice_choice__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Pubsub_choice_choice__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Pubsub_choice_choice__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return val_ptr->n_elements;
}

int Pubsub_choice_choice__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Pubsub_choice_choice__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Pubsub_choice_choice__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Pubsub_choice_choice__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Pubsub_choice_choice__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Pubsub_choice_choice__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
val_ptr->value_elements = (Pubsub_choice_choice__list_0**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Pubsub_choice_choice__list_0;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Pubsub_choice_choice__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub_choice_choice__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Pubsub_choice_choice__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Pubsub_choice_choice__list_0::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Pubsub_choice_choice__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Pubsub_choice_choice__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub_choice_choice__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Pubsub_choice_choice__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Pubsub_choice_choice__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Pubsub_choice_choice__list_0* val = new Pubsub_choice_choice__list_0;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Pubsub_choice_choice__list_0**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Pubsub_choice_choice__list_template::copy_value(const Pubsub_choice_choice__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Pubsub_choice_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_choice_choice__list_template::copy_template(const Pubsub_choice_choice__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Pubsub_choice_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_choice_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
break;
}
set_selection(other_value);
}

boolean Pubsub_choice_choice__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Pubsub_choice_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Pubsub_choice_choice__list*)value_ptr)[value_index]);
else return ((const Pubsub_choice_choice__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template()
{
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template(const Pubsub_choice_choice__list& other_value)
{
copy_value(other_value);
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template(const OPTIONAL<Pubsub_choice_choice__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list from an unbound optional field.");
}
}

Pubsub_choice_choice__list_template::Pubsub_choice_choice__list_template(const Pubsub_choice_choice__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Pubsub_choice_choice__list_template::~Pubsub_choice_choice__list_template()
{
clean_up();
}

void Pubsub_choice_choice__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::operator=(const Pubsub_choice_choice__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::operator=(const OPTIONAL<Pubsub_choice_choice__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_choice__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
}
return *this;
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::operator=(const Pubsub_choice_choice__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return (*this)[(int)index_value];
}

const Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return (*this)[(int)index_value];
}

void Pubsub_choice_choice__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Pubsub_choice_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Pubsub_choice_choice__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Pubsub_choice_choice__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Pubsub_choice_choice__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
}

boolean Pubsub_choice_choice__list_template::match(const Pubsub_choice_choice__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
}
return FALSE;
}

boolean Pubsub_choice_choice__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
Pubsub_choice_choice__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Pubsub_choice_choice__list Pubsub_choice_choice__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Pubsub_choice_choice__list Pubsub_choice_choice__list_template::replace(int index, int len, const Pubsub_choice_choice__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Pubsub_choice_choice__list Pubsub_choice_choice__list_template::replace(int index, int len, const Pubsub_choice_choice__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Pubsub_choice_choice__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Pubsub_choice_choice__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
}
set_selection(template_type);
}

Pubsub_choice_choice__list_template& Pubsub_choice_choice__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return value_list.list_value[list_index];
}

void Pubsub_choice_choice__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Pubsub_choice_choice__list_template::log_match(const Pubsub_choice_choice__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_choice_choice__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
}
}

void Pubsub_choice_choice__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
single_value.value_elements = (Pubsub_choice_choice__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Pubsub_choice_choice__list_0_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_choice_choice__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
}
}

boolean Pubsub_choice_choice__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_choice_choice__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Pubsub_choice_choice__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Pubsub_choice_choice__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list");
}

void Pubsub_choice_choice__list_0::copy_value(const Pubsub_choice_choice__list_0& other_value)
{
switch (other_value.union_selection) {
case ALT_affiliations:
field_affiliations = new Affiliations(*other_value.field_affiliations);
break;
case ALT_default__:
field_default__ = new Default(*other_value.field_default__);
break;
case ALT_items:
field_items = new Items(*other_value.field_items);
break;
case ALT_publish:
field_publish = new Publish(*other_value.field_publish);
break;
case ALT_retract:
field_retract = new Retract(*other_value.field_retract);
break;
case ALT_subscription:
field_subscription = new Subscription(*other_value.field_subscription);
break;
case ALT_subscriptions:
field_subscriptions = new Subscriptions(*other_value.field_subscriptions);
break;
case ALT_unsubscribe:
field_unsubscribe = new Unsubscribe(*other_value.field_unsubscribe);
break;
default:
TTCN_error("Assignment of an unbound union value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
union_selection = other_value.union_selection;
}

Pubsub_choice_choice__list_0::Pubsub_choice_choice__list_0()
{
union_selection = UNBOUND_VALUE;
}

Pubsub_choice_choice__list_0::Pubsub_choice_choice__list_0(const Pubsub_choice_choice__list_0& other_value)
: Base_Type(){
copy_value(other_value);
}

Pubsub_choice_choice__list_0::~Pubsub_choice_choice__list_0()
{
clean_up();
}

Pubsub_choice_choice__list_0& Pubsub_choice_choice__list_0::operator=(const Pubsub_choice_choice__list_0& other_value)
{
if (this != &other_value) {
clean_up();
copy_value(other_value);
}
return *this;
}

boolean Pubsub_choice_choice__list_0::operator==(const Pubsub_choice_choice__list_0& other_value) const
{
if (union_selection == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (other_value.union_selection == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (union_selection != other_value.union_selection) return FALSE;
switch (union_selection) {
case ALT_affiliations:
return *field_affiliations == *other_value.field_affiliations;
case ALT_default__:
return *field_default__ == *other_value.field_default__;
case ALT_items:
return *field_items == *other_value.field_items;
case ALT_publish:
return *field_publish == *other_value.field_publish;
case ALT_retract:
return *field_retract == *other_value.field_retract;
case ALT_subscription:
return *field_subscription == *other_value.field_subscription;
case ALT_subscriptions:
return *field_subscriptions == *other_value.field_subscriptions;
case ALT_unsubscribe:
return *field_unsubscribe == *other_value.field_unsubscribe;
default:
return FALSE;
}
}

Affiliations& Pubsub_choice_choice__list_0::affiliations()
{
if (union_selection != ALT_affiliations) {
clean_up();
field_affiliations = new Affiliations;
union_selection = ALT_affiliations;
}
return *field_affiliations;
}

const Affiliations& Pubsub_choice_choice__list_0::affiliations() const
{
if (union_selection != ALT_affiliations) TTCN_error("Using non-selected field affiliations in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_affiliations;
}

Default& Pubsub_choice_choice__list_0::default__()
{
if (union_selection != ALT_default__) {
clean_up();
field_default__ = new Default;
union_selection = ALT_default__;
}
return *field_default__;
}

const Default& Pubsub_choice_choice__list_0::default__() const
{
if (union_selection != ALT_default__) TTCN_error("Using non-selected field default_ in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_default__;
}

Items& Pubsub_choice_choice__list_0::items()
{
if (union_selection != ALT_items) {
clean_up();
field_items = new Items;
union_selection = ALT_items;
}
return *field_items;
}

const Items& Pubsub_choice_choice__list_0::items() const
{
if (union_selection != ALT_items) TTCN_error("Using non-selected field items in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_items;
}

Publish& Pubsub_choice_choice__list_0::publish()
{
if (union_selection != ALT_publish) {
clean_up();
field_publish = new Publish;
union_selection = ALT_publish;
}
return *field_publish;
}

const Publish& Pubsub_choice_choice__list_0::publish() const
{
if (union_selection != ALT_publish) TTCN_error("Using non-selected field publish in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_publish;
}

Retract& Pubsub_choice_choice__list_0::retract()
{
if (union_selection != ALT_retract) {
clean_up();
field_retract = new Retract;
union_selection = ALT_retract;
}
return *field_retract;
}

const Retract& Pubsub_choice_choice__list_0::retract() const
{
if (union_selection != ALT_retract) TTCN_error("Using non-selected field retract in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_retract;
}

Subscription& Pubsub_choice_choice__list_0::subscription()
{
if (union_selection != ALT_subscription) {
clean_up();
field_subscription = new Subscription;
union_selection = ALT_subscription;
}
return *field_subscription;
}

const Subscription& Pubsub_choice_choice__list_0::subscription() const
{
if (union_selection != ALT_subscription) TTCN_error("Using non-selected field subscription in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_subscription;
}

Subscriptions& Pubsub_choice_choice__list_0::subscriptions()
{
if (union_selection != ALT_subscriptions) {
clean_up();
field_subscriptions = new Subscriptions;
union_selection = ALT_subscriptions;
}
return *field_subscriptions;
}

const Subscriptions& Pubsub_choice_choice__list_0::subscriptions() const
{
if (union_selection != ALT_subscriptions) TTCN_error("Using non-selected field subscriptions in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_subscriptions;
}

Unsubscribe& Pubsub_choice_choice__list_0::unsubscribe()
{
if (union_selection != ALT_unsubscribe) {
clean_up();
field_unsubscribe = new Unsubscribe;
union_selection = ALT_unsubscribe;
}
return *field_unsubscribe;
}

const Unsubscribe& Pubsub_choice_choice__list_0::unsubscribe() const
{
if (union_selection != ALT_unsubscribe) TTCN_error("Using non-selected field unsubscribe in a value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *field_unsubscribe;
}

boolean Pubsub_choice_choice__list_0::ischosen(union_selection_type checked_selection) const
{
if (checked_selection == UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (union_selection == UNBOUND_VALUE) TTCN_error("Performing ischosen() operation on an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return union_selection == checked_selection;
}

boolean Pubsub_choice_choice__list_0::is_bound() const
{
  return union_selection != UNBOUND_VALUE;
}

boolean Pubsub_choice_choice__list_0::is_value() const
{
switch (union_selection) {
case UNBOUND_VALUE: return FALSE;
case ALT_affiliations: return field_affiliations->is_value();
case ALT_default__: return field_default__->is_value();
case ALT_items: return field_items->is_value();
case ALT_publish: return field_publish->is_value();
case ALT_retract: return field_retract->is_value();
case ALT_subscription: return field_subscription->is_value();
case ALT_subscriptions: return field_subscriptions->is_value();
case ALT_unsubscribe: return field_unsubscribe->is_value();
default: TTCN_error("Invalid selection in union is_bound");}
}

void Pubsub_choice_choice__list_0::clean_up()
{
switch (union_selection) {
case ALT_affiliations:
  delete field_affiliations;
  break;
case ALT_default__:
  delete field_default__;
  break;
case ALT_items:
  delete field_items;
  break;
case ALT_publish:
  delete field_publish;
  break;
case ALT_retract:
  delete field_retract;
  break;
case ALT_subscription:
  delete field_subscription;
  break;
case ALT_subscriptions:
  delete field_subscriptions;
  break;
case ALT_unsubscribe:
  delete field_unsubscribe;
  break;
default:
  break;
}
union_selection = UNBOUND_VALUE;
}

void Pubsub_choice_choice__list_0::log() const
{
switch (union_selection) {
case ALT_affiliations:
TTCN_Logger::log_event_str("{ affiliations := ");
field_affiliations->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_default__:
TTCN_Logger::log_event_str("{ default_ := ");
field_default__->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_items:
TTCN_Logger::log_event_str("{ items := ");
field_items->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_publish:
TTCN_Logger::log_event_str("{ publish := ");
field_publish->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_retract:
TTCN_Logger::log_event_str("{ retract := ");
field_retract->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_subscription:
TTCN_Logger::log_event_str("{ subscription := ");
field_subscription->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_subscriptions:
TTCN_Logger::log_event_str("{ subscriptions := ");
field_subscriptions->log();
TTCN_Logger::log_event_str(" }");
break;
case ALT_unsubscribe:
TTCN_Logger::log_event_str("{ unsubscribe := ");
field_unsubscribe->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_unbound();
}
}

void Pubsub_choice_choice__list_0::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE'");
    }
    if (strcmp("affiliations", param_field) == 0) {
      affiliations().set_param(param);
      return;
    } else if (strcmp("default_", param_field) == 0) {
      default__().set_param(param);
      return;
    } else if (strcmp("items", param_field) == 0) {
      items().set_param(param);
      return;
    } else if (strcmp("publish", param_field) == 0) {
      publish().set_param(param);
      return;
    } else if (strcmp("retract", param_field) == 0) {
      retract().set_param(param);
      return;
    } else if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else if (strcmp("subscriptions", param_field) == 0) {
      subscriptions().set_param(param);
      return;
    } else if (strcmp("unsubscribe", param_field) == 0) {
      unsubscribe().set_param(param);
      return;
    } else param.error("Field `%s' not found in union type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "union value");
  if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) return;
  if (param.get_type()!=Module_Param::MP_Assignment_List) {
    param.error("union value with field name was expected");
  }
  Module_Param* mp_last = param.get_elem(param.get_size()-1);
  if (!strcmp(mp_last->get_id()->get_name(), "affiliations")) {
    affiliations().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "default_")) {
    default__().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "items")) {
    items().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "publish")) {
    publish().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "retract")) {
    retract().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "subscription")) {
    subscription().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "subscriptions")) {
    subscriptions().set_param(*mp_last);
    return;
  }
  if (!strcmp(mp_last->get_id()->get_name(), "unsubscribe")) {
    unsubscribe().set_param(*mp_last);
    return;
  }
  mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.", mp_last->get_id()->get_name());
}

void Pubsub_choice_choice__list_0::set_implicit_omit()
{
switch (union_selection) {
case ALT_affiliations:
field_affiliations->set_implicit_omit(); break;
case ALT_default__:
field_default__->set_implicit_omit(); break;
case ALT_items:
field_items->set_implicit_omit(); break;
case ALT_publish:
field_publish->set_implicit_omit(); break;
case ALT_retract:
field_retract->set_implicit_omit(); break;
case ALT_subscription:
field_subscription->set_implicit_omit(); break;
case ALT_subscriptions:
field_subscriptions->set_implicit_omit(); break;
case ALT_unsubscribe:
field_unsubscribe->set_implicit_omit(); break;
default: break;
}
}

void Pubsub_choice_choice__list_0::encode_text(Text_Buf& text_buf) const
{
text_buf.push_int(union_selection);
switch (union_selection) {
case ALT_affiliations:
field_affiliations->encode_text(text_buf);
break;
case ALT_default__:
field_default__->encode_text(text_buf);
break;
case ALT_items:
field_items->encode_text(text_buf);
break;
case ALT_publish:
field_publish->encode_text(text_buf);
break;
case ALT_retract:
field_retract->encode_text(text_buf);
break;
case ALT_subscription:
field_subscription->encode_text(text_buf);
break;
case ALT_subscriptions:
field_subscriptions->encode_text(text_buf);
break;
case ALT_unsubscribe:
field_unsubscribe->encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an unbound value of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}

void Pubsub_choice_choice__list_0::decode_text(Text_Buf& text_buf)
{
switch ((union_selection_type)text_buf.pull_int().get_val()) {
case ALT_affiliations:
affiliations().decode_text(text_buf);
break;
case ALT_default__:
default__().decode_text(text_buf);
break;
case ALT_items:
items().decode_text(text_buf);
break;
case ALT_publish:
publish().decode_text(text_buf);
break;
case ALT_retract:
retract().decode_text(text_buf);
break;
case ALT_subscription:
subscription().decode_text(text_buf);
break;
case ALT_subscriptions:
subscriptions().decode_text(text_buf);
break;
case ALT_unsubscribe:
unsubscribe().decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}

void Pubsub_choice_choice__list_0::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub_choice_choice__list_0::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Pubsub_choice_choice__list_0::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  if (!exer || (!(xd.xer_bits & UNTAGGED) && !(flavor & (USE_NIL|(exer ? XER_LIST : XER_RECOF))))) return check_name(name, xd, exer) && (!exer || (flavor & USE_TYPE_ATTR) || check_namespace(uri, xd));
  flavor &= ~XER_RECOF;
  if (Affiliations::can_start(name, uri, Pubsub_choice_choice__list_0_affiliations_xer_, flavor)) return true;
  if (Default::can_start(name, uri, Pubsub_choice_choice__list_0_default___xer_, flavor)) return true;
  if (Items::can_start(name, uri, Pubsub_choice_choice__list_0_items_xer_, flavor)) return true;
  if (Publish::can_start(name, uri, Pubsub_choice_choice__list_0_publish_xer_, flavor)) return true;
  if (Retract::can_start(name, uri, Pubsub_choice_choice__list_0_retract_xer_, flavor)) return true;
  if (Subscription::can_start(name, uri, Pubsub_choice_choice__list_0_subscription_xer_, flavor)) return true;
  if (Subscriptions::can_start(name, uri, Pubsub_choice_choice__list_0_subscriptions_xer_, flavor)) return true;
  if (Unsubscribe::can_start(name, uri, Pubsub_choice_choice__list_0_unsubscribe_xer_, flavor)) return true;
  return false;
}

char ** Pubsub_choice_choice__list_0::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  char **new_ns;
  size_t num_new;
  boolean need_type = FALSE;
  try {
    bool def_ns_1 = false;
    switch (union_selection) {
    case ALT_affiliations:
      new_ns = field_affiliations->collect_ns(Pubsub_choice_choice__list_0_affiliations_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      break;
    case ALT_default__:
      new_ns = field_default__->collect_ns(Pubsub_choice_choice__list_0_default___xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_default___xer_.namelens[1] > 2);
      break;
    case ALT_items:
      new_ns = field_items->collect_ns(Pubsub_choice_choice__list_0_items_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_items_xer_.namelens[1] > 2);
      break;
    case ALT_publish:
      new_ns = field_publish->collect_ns(Pubsub_choice_choice__list_0_publish_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_publish_xer_.namelens[1] > 2);
      break;
    case ALT_retract:
      new_ns = field_retract->collect_ns(Pubsub_choice_choice__list_0_retract_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_retract_xer_.namelens[1] > 2);
      break;
    case ALT_subscription:
      new_ns = field_subscription->collect_ns(Pubsub_choice_choice__list_0_subscription_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_subscription_xer_.namelens[1] > 2);
      break;
    case ALT_subscriptions:
      new_ns = field_subscriptions->collect_ns(Pubsub_choice_choice__list_0_subscriptions_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_subscriptions_xer_.namelens[1] > 2);
      break;
    case ALT_unsubscribe:
      new_ns = field_unsubscribe->collect_ns(Pubsub_choice_choice__list_0_unsubscribe_xer_, num_new, def_ns_1);
      def_ns = def_ns || def_ns_1;
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      need_type = (Pubsub_choice_choice__list_0_unsubscribe_xer_.namelens[1] > 2);
      break;
    default: break;
    }
    if ((p_td.xer_bits & USE_TYPE_ATTR) && !(p_td.xer_bits & XER_ATTRIBUTE) && need_type) {
      collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
      const namespace_t *c_ns = p_td.my_module->get_controlns();
      collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Pubsub_choice_choice__list_0::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (UNBOUND_VALUE==union_selection) {
    TTCN_error("Attempt to XER-encode an unbound union value.");
    return 0;
  }
  TTCN_EncDec_ErrorContext ec_0("Alternative '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  unsigned int flavor_1 = p_flavor;
  if (is_exer(p_flavor)) flavor_1 &= ~XER_RECOF;
  bool omit_tag = begin_xml(p_td, p_buf, flavor_1, p_indent, false, (collector_fn)&Pubsub_choice_choice__list_0::collect_ns);
  unsigned int flavor_0 = (p_flavor & XER_MASK);
  switch (union_selection) {
  case ALT_affiliations:
    ec_1.set_msg("affiliations': ");
    field_affiliations->XER_encode(Pubsub_choice_choice__list_0_affiliations_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_default__:
    ec_1.set_msg("default_': ");
    field_default__->XER_encode(Pubsub_choice_choice__list_0_default___xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_items:
    ec_1.set_msg("items': ");
    field_items->XER_encode(Pubsub_choice_choice__list_0_items_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_publish:
    ec_1.set_msg("publish': ");
    field_publish->XER_encode(Pubsub_choice_choice__list_0_publish_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_retract:
    ec_1.set_msg("retract': ");
    field_retract->XER_encode(Pubsub_choice_choice__list_0_retract_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_subscription:
    ec_1.set_msg("subscription': ");
    field_subscription->XER_encode(Pubsub_choice_choice__list_0_subscription_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_subscriptions:
    ec_1.set_msg("subscriptions': ");
    field_subscriptions->XER_encode(Pubsub_choice_choice__list_0_subscriptions_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case ALT_unsubscribe:
    ec_1.set_msg("unsubscribe': ");
    field_unsubscribe->XER_encode(Pubsub_choice_choice__list_0_unsubscribe_xer_, p_buf, flavor_0, p_indent + (!p_indent || !omit_tag), 0);
    break;
  case UNBOUND_VALUE:
    (void)flavor_0;
    break;
  } //switch
  end_xml(p_td, p_buf, flavor_1, p_indent, 0);
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub_choice_choice__list_0::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int e_xer = is_exer(p_flavor);
  int type = 0;
  int rd_ok=1, xml_depth=-1;
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  if (xerbits & USE_TYPE_ATTR) p_flavor &= ~XER_RECOF;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT | UNTAGGED)) || (p_flavor & (USE_NIL|(e_xer ? XER_LIST : XER_RECOF)))));
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      if (!(e_xer && (p_td.xer_bits & USE_TYPE_ATTR))
        && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
      break;
    }
  }
  unsigned int flavor_1 = (p_flavor & XER_MASK);
  for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_ELEMENT) break;
    else if (type == XML_READER_TYPE_END_ELEMENT) break;
  }
  if (rd_ok) {
    TTCN_EncDec_ErrorContext ec_1("Alternative '");
    TTCN_EncDec_ErrorContext ec_2;
    const char *elem_name;
    const char *ns_uri = 0;
    {
      elem_name = (const char*)p_reader.LocalName();
      ns_uri    = (const char*)p_reader.NamespaceUri();
    }
    if (Affiliations::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_affiliations_xer_, flavor_1) || (Pubsub_choice_choice__list_0_affiliations_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("affiliations': ");
      affiliations().XER_decode(Pubsub_choice_choice__list_0_affiliations_xer_, p_reader, flavor_1, 0);
      if (!affiliations().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Default::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_default___xer_, flavor_1) || (Pubsub_choice_choice__list_0_default___xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("default_': ");
      default__().XER_decode(Pubsub_choice_choice__list_0_default___xer_, p_reader, flavor_1, 0);
      if (!default__().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Items::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_items_xer_, flavor_1) || (Pubsub_choice_choice__list_0_items_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("items': ");
      items().XER_decode(Pubsub_choice_choice__list_0_items_xer_, p_reader, flavor_1, 0);
      if (!items().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Publish::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_publish_xer_, flavor_1) || (Pubsub_choice_choice__list_0_publish_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("publish': ");
      publish().XER_decode(Pubsub_choice_choice__list_0_publish_xer_, p_reader, flavor_1, 0);
      if (!publish().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Retract::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_retract_xer_, flavor_1) || (Pubsub_choice_choice__list_0_retract_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("retract': ");
      retract().XER_decode(Pubsub_choice_choice__list_0_retract_xer_, p_reader, flavor_1, 0);
      if (!retract().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Subscription::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_subscription_xer_, flavor_1) || (Pubsub_choice_choice__list_0_subscription_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("subscription': ");
      subscription().XER_decode(Pubsub_choice_choice__list_0_subscription_xer_, p_reader, flavor_1, 0);
      if (!subscription().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Subscriptions::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_subscriptions_xer_, flavor_1) || (Pubsub_choice_choice__list_0_subscriptions_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("subscriptions': ");
      subscriptions().XER_decode(Pubsub_choice_choice__list_0_subscriptions_xer_, p_reader, flavor_1, 0);
      if (!subscriptions().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else if (Unsubscribe::can_start(elem_name, ns_uri, Pubsub_choice_choice__list_0_unsubscribe_xer_, flavor_1) || (Pubsub_choice_choice__list_0_unsubscribe_xer_.xer_bits & ANY_ELEMENT)) {
      ec_2.set_msg("unsubscribe': ");
      unsubscribe().XER_decode(Pubsub_choice_choice__list_0_unsubscribe_xer_, p_reader, flavor_1, 0);
      if (!unsubscribe().is_bound()) {
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Failed to decode field.");
      }
    }
    else {
      ec_1.set_msg(" ");
      TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "'%s' does not match any alternative", elem_name);
      if (xml_depth >= 0) for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
    }
  }
  if ((e_xer || !is_record_of(p_flavor)) && own_tag)
  for (; rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (type == XML_READER_TYPE_END_ELEMENT) {
      verify_end(p_reader, p_td, xml_depth, e_xer);
      rd_ok = p_reader.Read(); // one last time
      break;
    }
  }
  return 1;
}

int Pubsub_choice_choice__list_0::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  switch(union_selection) {
  case ALT_affiliations:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "affiliations");
    enc_len += field_affiliations->JSON_encode(Pubsub_choice_choice__list_0_affiliations_descr_, p_tok);
    break;
  case ALT_default__:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "default_");
    enc_len += field_default__->JSON_encode(Pubsub_choice_choice__list_0_default___descr_, p_tok);
    break;
  case ALT_items:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "items");
    enc_len += field_items->JSON_encode(Pubsub_choice_choice__list_0_items_descr_, p_tok);
    break;
  case ALT_publish:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "publish");
    enc_len += field_publish->JSON_encode(Pubsub_choice_choice__list_0_publish_descr_, p_tok);
    break;
  case ALT_retract:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "retract");
    enc_len += field_retract->JSON_encode(Pubsub_choice_choice__list_0_retract_descr_, p_tok);
    break;
  case ALT_subscription:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscription");
    enc_len += field_subscription->JSON_encode(Pubsub_choice_choice__list_0_subscription_descr_, p_tok);
    break;
  case ALT_subscriptions:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscriptions");
    enc_len += field_subscriptions->JSON_encode(Pubsub_choice_choice__list_0_subscriptions_descr_, p_tok);
    break;
  case ALT_unsubscribe:
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "unsubscribe");
    enc_len += field_unsubscribe->JSON_encode(Pubsub_choice_choice__list_0_unsubscribe_descr_, p_tok);
    break;
  default:
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, 
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
    return -1;
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Pubsub_choice_choice__list_0::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  char* fld_name = 0;
  size_t name_len = 0;  dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
  if (JSON_TOKEN_NAME != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
    return JSON_ERROR_FATAL;
  } else {
    union_selection = UNBOUND_VALUE;
    if (0 == strncmp(fld_name, "affiliations", name_len)) {
      int ret_val = affiliations().JSON_decode(Pubsub_choice_choice__list_0_affiliations_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "affiliations");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "default_", name_len)) {
      int ret_val = default__().JSON_decode(Pubsub_choice_choice__list_0_default___descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "default_");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "items", name_len)) {
      int ret_val = items().JSON_decode(Pubsub_choice_choice__list_0_items_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "items");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "publish", name_len)) {
      int ret_val = publish().JSON_decode(Pubsub_choice_choice__list_0_publish_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "publish");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "retract", name_len)) {
      int ret_val = retract().JSON_decode(Pubsub_choice_choice__list_0_retract_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "retract");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "subscription", name_len)) {
      int ret_val = subscription().JSON_decode(Pubsub_choice_choice__list_0_subscription_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscription");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "subscriptions", name_len)) {
      int ret_val = subscriptions().JSON_decode(Pubsub_choice_choice__list_0_subscriptions_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscriptions");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else if (0 == strncmp(fld_name, "unsubscribe", name_len)) {
      int ret_val = unsubscribe().JSON_decode(Pubsub_choice_choice__list_0_unsubscribe_descr_, p_tok, p_silent);
      if (0 > ret_val) {
        if (JSON_ERROR_INVALID_TOKEN) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "unsubscribe");
        }
        return JSON_ERROR_FATAL;
      } else {
        dec_len += ret_val;
      }
    } else {
      char* fld_name2 = mcopystrn(fld_name, name_len);
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
      Free(fld_name2);
      return JSON_ERROR_FATAL;
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_STATIC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Pubsub_choice_choice__list_0_template::copy_value(const Pubsub_choice_choice__list_0& other_value)
{
single_value.union_selection = other_value.get_selection();
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
single_value.field_affiliations = new Affiliations_template(other_value.affiliations());
break;
case Pubsub_choice_choice__list_0::ALT_default__:
single_value.field_default__ = new Default_template(other_value.default__());
break;
case Pubsub_choice_choice__list_0::ALT_items:
single_value.field_items = new Items_template(other_value.items());
break;
case Pubsub_choice_choice__list_0::ALT_publish:
single_value.field_publish = new Publish_template(other_value.publish());
break;
case Pubsub_choice_choice__list_0::ALT_retract:
single_value.field_retract = new Retract_template(other_value.retract());
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
single_value.field_subscription = new Subscription_template(other_value.subscription());
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
single_value.field_subscriptions = new Subscriptions_template(other_value.subscriptions());
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
single_value.field_unsubscribe = new Unsubscribe_template(other_value.unsubscribe());
break;
default:
TTCN_error("Initializing a template with an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_choice_choice__list_0_template::copy_template(const Pubsub_choice_choice__list_0_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.union_selection = other_value.single_value.union_selection;
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
single_value.field_affiliations = new Affiliations_template(*other_value.single_value.field_affiliations);
break;
case Pubsub_choice_choice__list_0::ALT_default__:
single_value.field_default__ = new Default_template(*other_value.single_value.field_default__);
break;
case Pubsub_choice_choice__list_0::ALT_items:
single_value.field_items = new Items_template(*other_value.single_value.field_items);
break;
case Pubsub_choice_choice__list_0::ALT_publish:
single_value.field_publish = new Publish_template(*other_value.single_value.field_publish);
break;
case Pubsub_choice_choice__list_0::ALT_retract:
single_value.field_retract = new Retract_template(*other_value.single_value.field_retract);
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
single_value.field_subscription = new Subscription_template(*other_value.single_value.field_subscription);
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
single_value.field_subscriptions = new Subscriptions_template(*other_value.single_value.field_subscriptions);
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
single_value.field_unsubscribe = new Unsubscribe_template(*other_value.single_value.field_unsubscribe);
break;
default:
TTCN_error("Internal error: Invalid union selector in a specific value when copying a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_choice_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
set_selection(other_value);
}

Pubsub_choice_choice__list_0_template::Pubsub_choice_choice__list_0_template()
{
}

Pubsub_choice_choice__list_0_template::Pubsub_choice_choice__list_0_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_choice_choice__list_0_template::Pubsub_choice_choice__list_0_template(const Pubsub_choice_choice__list_0& other_value)
{
copy_value(other_value);
}

Pubsub_choice_choice__list_0_template::Pubsub_choice_choice__list_0_template(const OPTIONAL<Pubsub_choice_choice__list_0>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE from an unbound optional field.");
}
}

Pubsub_choice_choice__list_0_template::Pubsub_choice_choice__list_0_template(const Pubsub_choice_choice__list_0_template& other_value)
: Base_Template(){
copy_template(other_value);
}

Pubsub_choice_choice__list_0_template::~Pubsub_choice_choice__list_0_template()
{
clean_up();
}

void Pubsub_choice_choice__list_0_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
delete single_value.field_affiliations;
break;
case Pubsub_choice_choice__list_0::ALT_default__:
delete single_value.field_default__;
break;
case Pubsub_choice_choice__list_0::ALT_items:
delete single_value.field_items;
break;
case Pubsub_choice_choice__list_0::ALT_publish:
delete single_value.field_publish;
break;
case Pubsub_choice_choice__list_0::ALT_retract:
delete single_value.field_retract;
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
delete single_value.field_subscription;
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
delete single_value.field_subscriptions;
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
delete single_value.field_unsubscribe;
default:
break;
}
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_0_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_0_template::operator=(const Pubsub_choice_choice__list_0& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_0_template::operator=(const OPTIONAL<Pubsub_choice_choice__list_0>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub_choice_choice__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
return *this;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_0_template::operator=(const Pubsub_choice_choice__list_0_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Pubsub_choice_choice__list_0_template::match(const Pubsub_choice_choice__list_0& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
{
Pubsub_choice_choice__list_0::union_selection_type value_selection = other_value.get_selection();
if (value_selection == Pubsub_choice_choice__list_0::UNBOUND_VALUE) return FALSE;
if (value_selection != single_value.union_selection) return FALSE;
switch (value_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
return single_value.field_affiliations->match(other_value.affiliations());
case Pubsub_choice_choice__list_0::ALT_default__:
return single_value.field_default__->match(other_value.default__());
case Pubsub_choice_choice__list_0::ALT_items:
return single_value.field_items->match(other_value.items());
case Pubsub_choice_choice__list_0::ALT_publish:
return single_value.field_publish->match(other_value.publish());
case Pubsub_choice_choice__list_0::ALT_retract:
return single_value.field_retract->match(other_value.retract());
case Pubsub_choice_choice__list_0::ALT_subscription:
return single_value.field_subscription->match(other_value.subscription());
case Pubsub_choice_choice__list_0::ALT_subscriptions:
return single_value.field_subscriptions->match(other_value.subscriptions());
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
return single_value.field_unsubscribe->match(other_value.unsubscribe());
default:
TTCN_error("Internal error: Invalid selector in a specific value when matching a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error ("Matching an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
return FALSE;
}

boolean Pubsub_choice_choice__list_0_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
return single_value.field_affiliations->is_value();
case Pubsub_choice_choice__list_0::ALT_default__:
return single_value.field_default__->is_value();
case Pubsub_choice_choice__list_0::ALT_items:
return single_value.field_items->is_value();
case Pubsub_choice_choice__list_0::ALT_publish:
return single_value.field_publish->is_value();
case Pubsub_choice_choice__list_0::ALT_retract:
return single_value.field_retract->is_value();
case Pubsub_choice_choice__list_0::ALT_subscription:
return single_value.field_subscription->is_value();
case Pubsub_choice_choice__list_0::ALT_subscriptions:
return single_value.field_subscriptions->is_value();
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
return single_value.field_unsubscribe->is_value();
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing is_value operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}

Pubsub_choice_choice__list_0 Pubsub_choice_choice__list_0_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
Pubsub_choice_choice__list_0 ret_val;
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
ret_val.affiliations() = single_value.field_affiliations->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_default__:
ret_val.default__() = single_value.field_default__->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_items:
ret_val.items() = single_value.field_items->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_publish:
ret_val.publish() = single_value.field_publish->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_retract:
ret_val.retract() = single_value.field_retract->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
ret_val.subscription() = single_value.field_subscription->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
ret_val.subscriptions() = single_value.field_subscriptions->valueof();
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
ret_val.unsubscribe() = single_value.field_unsubscribe->valueof();
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing valueof operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
return ret_val;
}

Pubsub_choice_choice__list_0_template& Pubsub_choice_choice__list_0_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return value_list.list_value[list_index];
}
void Pubsub_choice_choice__list_0_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error ("Internal error: Setting an invalid list for a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Pubsub_choice_choice__list_0_template[list_length];
}

Affiliations_template& Pubsub_choice_choice__list_0_template::affiliations()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_affiliations) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_affiliations = new Affiliations_template(ANY_VALUE);
else single_value.field_affiliations = new Affiliations_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_affiliations;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_affiliations;
}

const Affiliations_template& Pubsub_choice_choice__list_0_template::affiliations() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field affiliations in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_affiliations) TTCN_error("Accessing non-selected field affiliations in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_affiliations;
}

Default_template& Pubsub_choice_choice__list_0_template::default__()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_default__) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_default__ = new Default_template(ANY_VALUE);
else single_value.field_default__ = new Default_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_default__;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_default__;
}

const Default_template& Pubsub_choice_choice__list_0_template::default__() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field default_ in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_default__) TTCN_error("Accessing non-selected field default_ in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_default__;
}

Items_template& Pubsub_choice_choice__list_0_template::items()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_items) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_items = new Items_template(ANY_VALUE);
else single_value.field_items = new Items_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_items;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_items;
}

const Items_template& Pubsub_choice_choice__list_0_template::items() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field items in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_items) TTCN_error("Accessing non-selected field items in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_items;
}

Publish_template& Pubsub_choice_choice__list_0_template::publish()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_publish) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_publish = new Publish_template(ANY_VALUE);
else single_value.field_publish = new Publish_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_publish;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_publish;
}

const Publish_template& Pubsub_choice_choice__list_0_template::publish() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field publish in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_publish) TTCN_error("Accessing non-selected field publish in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_publish;
}

Retract_template& Pubsub_choice_choice__list_0_template::retract()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_retract) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_retract = new Retract_template(ANY_VALUE);
else single_value.field_retract = new Retract_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_retract;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_retract;
}

const Retract_template& Pubsub_choice_choice__list_0_template::retract() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field retract in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_retract) TTCN_error("Accessing non-selected field retract in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_retract;
}

Subscription_template& Pubsub_choice_choice__list_0_template::subscription()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_subscription) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_subscription = new Subscription_template(ANY_VALUE);
else single_value.field_subscription = new Subscription_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_subscription;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_subscription;
}

const Subscription_template& Pubsub_choice_choice__list_0_template::subscription() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field subscription in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_subscription) TTCN_error("Accessing non-selected field subscription in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_subscription;
}

Subscriptions_template& Pubsub_choice_choice__list_0_template::subscriptions()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_subscriptions) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_subscriptions = new Subscriptions_template(ANY_VALUE);
else single_value.field_subscriptions = new Subscriptions_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_subscriptions;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_subscriptions;
}

const Subscriptions_template& Pubsub_choice_choice__list_0_template::subscriptions() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field subscriptions in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_subscriptions) TTCN_error("Accessing non-selected field subscriptions in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_subscriptions;
}

Unsubscribe_template& Pubsub_choice_choice__list_0_template::unsubscribe()
{
if (template_selection != SPECIFIC_VALUE || single_value.union_selection != Pubsub_choice_choice__list_0::ALT_unsubscribe) {
template_sel old_selection = template_selection;
clean_up();
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) single_value.field_unsubscribe = new Unsubscribe_template(ANY_VALUE);
else single_value.field_unsubscribe = new Unsubscribe_template;
single_value.union_selection = Pubsub_choice_choice__list_0::ALT_unsubscribe;
set_selection(SPECIFIC_VALUE);
}
return *single_value.field_unsubscribe;
}

const Unsubscribe_template& Pubsub_choice_choice__list_0_template::unsubscribe() const
{
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing field unsubscribe in a non-specific template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
if (single_value.union_selection != Pubsub_choice_choice__list_0::ALT_unsubscribe) TTCN_error("Accessing non-selected field unsubscribe in a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return *single_value.field_unsubscribe;
}

boolean Pubsub_choice_choice__list_0_template::ischosen(Pubsub_choice_choice__list_0::union_selection_type checked_selection) const
{
if (checked_selection == Pubsub_choice_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Performing ischosen() operation on an invalid field of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.union_selection == Pubsub_choice_choice__list_0::UNBOUND_VALUE) TTCN_error("Internal error: Invalid selector in a specific value when performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
return single_value.union_selection == checked_selection;
case VALUE_LIST:
{
if (value_list.n_values < 1)
TTCN_error("Internal error: Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE containing an empty list.");
boolean ret_val = value_list.list_value[0].ischosen(checked_selection);
boolean all_same = TRUE;
for (unsigned int list_count = 1; list_count < value_list.n_values; list_count++) {
if (value_list.list_value[list_count].ischosen(checked_selection) != ret_val) {
all_same = FALSE;
break;
}
}
if (all_same) return ret_val;
}
case ANY_VALUE:
case ANY_OR_OMIT:
case OMIT_VALUE:
case COMPLEMENTED_LIST:
TTCN_error("Performing ischosen() operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE, which does not determine unambiguously the chosen field of the matching values.");
default:
TTCN_error("Performing ischosen() operation on an uninitialized template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
}
return FALSE;
}

void Pubsub_choice_choice__list_0_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
TTCN_Logger::log_event_str("{ affiliations := ");
single_value.field_affiliations->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_default__:
TTCN_Logger::log_event_str("{ default_ := ");
single_value.field_default__->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_items:
TTCN_Logger::log_event_str("{ items := ");
single_value.field_items->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_publish:
TTCN_Logger::log_event_str("{ publish := ");
single_value.field_publish->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_retract:
TTCN_Logger::log_event_str("{ retract := ");
single_value.field_retract->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
TTCN_Logger::log_event_str("{ subscription := ");
single_value.field_subscription->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
TTCN_Logger::log_event_str("{ subscriptions := ");
single_value.field_subscriptions->log();
TTCN_Logger::log_event_str(" }");
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
TTCN_Logger::log_event_str("{ unsubscribe := ");
single_value.field_unsubscribe->log();
TTCN_Logger::log_event_str(" }");
break;
default:
TTCN_Logger::log_event_str("<invalid selector>");
}
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Pubsub_choice_choice__list_0_template::log_match(const Pubsub_choice_choice__list_0& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity() && match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.union_selection == match_value.get_selection()) {
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".affiliations");
single_value.field_affiliations->log_match(match_value.affiliations());
} else {
TTCN_Logger::log_event_str("{ affiliations := ");
single_value.field_affiliations->log_match(match_value.affiliations());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_default__:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".default_");
single_value.field_default__->log_match(match_value.default__());
} else {
TTCN_Logger::log_event_str("{ default_ := ");
single_value.field_default__->log_match(match_value.default__());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_items:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".items");
single_value.field_items->log_match(match_value.items());
} else {
TTCN_Logger::log_event_str("{ items := ");
single_value.field_items->log_match(match_value.items());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_publish:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".publish");
single_value.field_publish->log_match(match_value.publish());
} else {
TTCN_Logger::log_event_str("{ publish := ");
single_value.field_publish->log_match(match_value.publish());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_retract:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".retract");
single_value.field_retract->log_match(match_value.retract());
} else {
TTCN_Logger::log_event_str("{ retract := ");
single_value.field_retract->log_match(match_value.retract());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".subscription");
single_value.field_subscription->log_match(match_value.subscription());
} else {
TTCN_Logger::log_event_str("{ subscription := ");
single_value.field_subscription->log_match(match_value.subscription());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".subscriptions");
single_value.field_subscriptions->log_match(match_value.subscriptions());
} else {
TTCN_Logger::log_event_str("{ subscriptions := ");
single_value.field_subscriptions->log_match(match_value.subscriptions());
TTCN_Logger::log_event_str(" }");
}
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
TTCN_Logger::log_logmatch_info(".unsubscribe");
single_value.field_unsubscribe->log_match(match_value.unsubscribe());
} else {
TTCN_Logger::log_event_str("{ unsubscribe := ");
single_value.field_unsubscribe->log_match(match_value.unsubscribe());
TTCN_Logger::log_event_str(" }");
}
break;
default:
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str("<invalid selector>");
}
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_choice_choice__list_0_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.union_selection);
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
single_value.field_affiliations->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_default__:
single_value.field_default__->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_items:
single_value.field_items->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_publish:
single_value.field_publish->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_retract:
single_value.field_retract->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
single_value.field_subscription->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
single_value.field_subscriptions->encode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
single_value.field_unsubscribe->encode_text(text_buf);
break;
default:
TTCN_error("Internal error: Invalid selector in a specific value when encoding a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}

void Pubsub_choice_choice__list_0_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
{
single_value.union_selection = Pubsub_choice_choice__list_0::UNBOUND_VALUE;
Pubsub_choice_choice__list_0::union_selection_type new_selection = (Pubsub_choice_choice__list_0::union_selection_type)text_buf.pull_int().get_val();
switch (new_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
single_value.field_affiliations = new Affiliations_template;
single_value.field_affiliations->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_default__:
single_value.field_default__ = new Default_template;
single_value.field_default__->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_items:
single_value.field_items = new Items_template;
single_value.field_items->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_publish:
single_value.field_publish = new Publish_template;
single_value.field_publish->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_retract:
single_value.field_retract = new Retract_template;
single_value.field_retract->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_subscription:
single_value.field_subscription = new Subscription_template;
single_value.field_subscription->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
single_value.field_subscriptions = new Subscriptions_template;
single_value.field_subscriptions->decode_text(text_buf);
break;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
single_value.field_unsubscribe = new Unsubscribe_template;
single_value.field_unsubscribe->decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized union selector was received for a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
single_value.union_selection = new_selection;
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_choice_choice__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: Unrecognized selector was received in a template of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
}

boolean Pubsub_choice_choice__list_0_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_choice_choice__list_0_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int v_idx=0; v_idx<value_list.n_values; v_idx++)
if (value_list.list_value[v_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Pubsub_choice_choice__list_0_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for union template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE'");
    }
    if (strcmp("affiliations", param_field) == 0) {
      affiliations().set_param(param);
      return;
    } else if (strcmp("default_", param_field) == 0) {
      default__().set_param(param);
      return;
    } else if (strcmp("items", param_field) == 0) {
      items().set_param(param);
      return;
    } else if (strcmp("publish", param_field) == 0) {
      publish().set_param(param);
      return;
    } else if (strcmp("retract", param_field) == 0) {
      retract().set_param(param);
      return;
    } else if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else if (strcmp("subscriptions", param_field) == 0) {
      subscriptions().set_param(param);
      return;
    } else if (strcmp("unsubscribe", param_field) == 0) {
      unsubscribe().set_param(param);
      return;
    } else param.error("Field `%s' not found in union template type `@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "union template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (param.get_size()==0) break;
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
    break;
  case Module_Param::MP_Assignment_List: {
    Module_Param* mp_last = param.get_elem(param.get_size()-1);
    if (!strcmp(mp_last->get_id()->get_name(), "affiliations")) {
      affiliations().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "default_")) {
      default__().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "items")) {
      items().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "publish")) {
      publish().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "retract")) {
      retract().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "subscription")) {
      subscription().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "subscriptions")) {
      subscriptions().set_param(*mp_last);
      break;
    }
    if (!strcmp(mp_last->get_id()->get_name(), "unsubscribe")) {
      unsubscribe().set_param(*mp_last);
      break;
    }
    mp_last->error("Field %s does not exist in type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.", mp_last->get_id()->get_name());
  } break;
  default:
    param.type_error("union template", "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
  }
  is_ifpresent = param.get_ifpresent();
}

void Pubsub_choice_choice__list_0_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
switch (single_value.union_selection) {
case Pubsub_choice_choice__list_0::ALT_affiliations:
single_value.field_affiliations->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_default__:
single_value.field_default__->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_items:
single_value.field_items->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_publish:
single_value.field_publish->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_retract:
single_value.field_retract->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_subscription:
single_value.field_subscription->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_subscriptions:
single_value.field_subscriptions->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
case Pubsub_choice_choice__list_0::ALT_unsubscribe:
single_value.field_unsubscribe->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
return;
default:
TTCN_error("Internal error: Invalid selector in a specific value when performing check_restriction operation on a template of union type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE.");
}
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.CHOICE");
}


const Affiliation Affiliations_affiliation__list::UNBOUND_ELEM;
Affiliations_affiliation__list::Affiliations_affiliation__list()
{
val_ptr = NULL;
}

Affiliations_affiliation__list::Affiliations_affiliation__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Affiliations_affiliation__list::Affiliations_affiliation__list(const Affiliations_affiliation__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Affiliations_affiliation__list::~Affiliations_affiliation__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Affiliations_affiliation__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Affiliations_affiliation__list& Affiliations_affiliation__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Affiliations_affiliation__list& Affiliations_affiliation__list::operator=(const Affiliations_affiliation__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Affiliations_affiliation__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return val_ptr->n_elements == 0 ;
}

boolean Affiliations_affiliation__list::operator==(const Affiliations_affiliation__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Affiliation& Affiliations_affiliation__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Affiliation**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Affiliation(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Affiliation;
}
return *val_ptr->value_elements[index_value];
}

Affiliation& Affiliations_affiliation__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return (*this)[(int)index_value];
}

const Affiliation& Affiliations_affiliation__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Affiliation& Affiliations_affiliation__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return (*this)[(int)index_value];
}

Affiliations_affiliation__list Affiliations_affiliation__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Affiliations_affiliation__list Affiliations_affiliation__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Affiliations_affiliation__list Affiliations_affiliation__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Affiliations_affiliation__list Affiliations_affiliation__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Affiliations_affiliation__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Affiliation(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Affiliations_affiliation__list Affiliations_affiliation__list::operator+(const Affiliations_affiliation__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Affiliations_affiliation__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Affiliation(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Affiliation(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Affiliations_affiliation__list Affiliations_affiliation__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list","element");
Affiliations_affiliation__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Affiliation(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Affiliations_affiliation__list Affiliations_affiliation__list::replace(int index, int len, const Affiliations_affiliation__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list","element");
Affiliations_affiliation__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Affiliation(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Affiliation(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Affiliation(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Affiliations_affiliation__list Affiliations_affiliation__list::replace(int index, int len, const Affiliations_affiliation__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Affiliations_affiliation__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Affiliation**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Affiliation(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Affiliation**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Affiliation**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Affiliations_affiliation__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Affiliations_affiliation__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return val_ptr->n_elements;
}

int Affiliations_affiliation__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Affiliations_affiliation__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Affiliations_affiliation__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Affiliations_affiliation__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Affiliations_affiliation__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Affiliations_affiliation__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
val_ptr->value_elements = (Affiliation**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Affiliation;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Affiliations_affiliation__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Affiliations_affiliation__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Affiliations_affiliation__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Affiliation::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Affiliations_affiliation__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Affiliations_affiliation__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Affiliations_affiliation__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Affiliations_affiliation__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Affiliations_affiliation__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Affiliation* val = new Affiliation;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Affiliation**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Affiliations_affiliation__list_template::copy_value(const Affiliations_affiliation__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Affiliation_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Affiliation_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Affiliation_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Affiliations_affiliation__list_template::copy_template(const Affiliations_affiliation__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Affiliation_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Affiliation_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Affiliation_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Affiliations_affiliation__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
break;
}
set_selection(other_value);
}

boolean Affiliations_affiliation__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Affiliations_affiliation__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Affiliations_affiliation__list*)value_ptr)[value_index]);
else return ((const Affiliations_affiliation__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template()
{
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template(const Affiliations_affiliation__list& other_value)
{
copy_value(other_value);
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template(const OPTIONAL<Affiliations_affiliation__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliations_affiliation__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list from an unbound optional field.");
}
}

Affiliations_affiliation__list_template::Affiliations_affiliation__list_template(const Affiliations_affiliation__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Affiliations_affiliation__list_template::~Affiliations_affiliation__list_template()
{
clean_up();
}

void Affiliations_affiliation__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::operator=(const Affiliations_affiliation__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::operator=(const OPTIONAL<Affiliations_affiliation__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliations_affiliation__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
}
return *this;
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::operator=(const Affiliations_affiliation__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Affiliation_template& Affiliations_affiliation__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Affiliation_template& Affiliations_affiliation__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return (*this)[(int)index_value];
}

const Affiliation_template& Affiliations_affiliation__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Affiliation_template& Affiliations_affiliation__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return (*this)[(int)index_value];
}

void Affiliations_affiliation__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Affiliation_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Affiliation_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Affiliation_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Affiliation_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Affiliations_affiliation__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Affiliations_affiliation__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
}

boolean Affiliations_affiliation__list_template::match(const Affiliations_affiliation__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
}
return FALSE;
}

boolean Affiliations_affiliation__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Affiliations_affiliation__list Affiliations_affiliation__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
Affiliations_affiliation__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Affiliations_affiliation__list Affiliations_affiliation__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Affiliations_affiliation__list Affiliations_affiliation__list_template::replace(int index, int len, const Affiliations_affiliation__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Affiliations_affiliation__list Affiliations_affiliation__list_template::replace(int index, int len, const Affiliations_affiliation__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Affiliations_affiliation__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Affiliations_affiliation__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
}
set_selection(template_type);
}

Affiliations_affiliation__list_template& Affiliations_affiliation__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return value_list.list_value[list_index];
}

void Affiliations_affiliation__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Affiliations_affiliation__list_template::log_match(const Affiliations_affiliation__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Affiliations_affiliation__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
}
}

void Affiliations_affiliation__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
single_value.value_elements = (Affiliation_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Affiliation_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Affiliations_affiliation__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
}
}

boolean Affiliations_affiliation__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Affiliations_affiliation__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Affiliations_affiliation__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Affiliations_affiliation__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliations.affiliation_list");
}

Affiliation_affiliation::Affiliation_affiliation()
{
enum_value = UNBOUND_VALUE;
}

Affiliation_affiliation::Affiliation_affiliation(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Affiliation_affiliation::Affiliation_affiliation(enum_type other_value)
{
enum_value = other_value;
}

Affiliation_affiliation::Affiliation_affiliation(const Affiliation_affiliation& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
enum_value = other_value.enum_value;
}

Affiliation_affiliation& Affiliation_affiliation::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Affiliation_affiliation& Affiliation_affiliation::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Affiliation_affiliation& Affiliation_affiliation::operator=(const Affiliation_affiliation& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
enum_value = other_value.enum_value;
return *this;
}

boolean Affiliation_affiliation::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value == other_value;
}

boolean Affiliation_affiliation::operator==(const Affiliation_affiliation& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value == other_value.enum_value;
}

boolean Affiliation_affiliation::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value < other_value;
}

boolean Affiliation_affiliation::operator<(const Affiliation_affiliation& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value < other_value.enum_value;
}

boolean Affiliation_affiliation::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value > other_value;
}

boolean Affiliation_affiliation::operator>(const Affiliation_affiliation& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value > other_value.enum_value;
}

const char *Affiliation_affiliation::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case member: return "member";
case none__: if (txt) return "none"; else return "none_";
case outcast: return "outcast";
case owner: return "owner";
case publisher: return "publisher";
case publish__only: if (txt) return "publish-only"; else return "publish_only";
default: return "<unknown>";
}
}

Affiliation_affiliation::enum_type Affiliation_affiliation::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "member")) return member;
else if (!strcmp(str_par, "none") || !strcmp(str_par, "none_")) return none__;
else if (!strcmp(str_par, "outcast")) return outcast;
else if (!strcmp(str_par, "owner")) return owner;
else if (!strcmp(str_par, "publisher")) return publisher;
else if (!strcmp(str_par, "publish-only") || !strcmp(str_par, "publish_only")) return publish__only;
else return UNKNOWN_VALUE;
}

boolean Affiliation_affiliation::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
case 4:
case 5:
return TRUE;
default:
return FALSE;
}
}

int Affiliation_affiliation::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Affiliation_affiliation::enum2int(const Affiliation_affiliation& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Affiliation_affiliation::operator Affiliation_affiliation::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return enum_value;
}

void Affiliation_affiliation::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Affiliation_affiliation::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@http_jabber_org_protocol_pubsub.Affiliation.affiliation");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
  }
}

void Affiliation_affiliation::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
text_buf.push_int(enum_value);
}

void Affiliation_affiliation::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", enum_value);
}

void Affiliation_affiliation::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Affiliation_affiliation::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Affiliation_affiliation::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Affiliation_affiliation::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Affiliation_affiliation::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Affiliation_affiliation::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Affiliation_affiliation::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Affiliation_affiliation_template::copy_template(const Affiliation_affiliation_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Affiliation_affiliation_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
}
}

Affiliation_affiliation_template::Affiliation_affiliation_template()
{
}

Affiliation_affiliation_template::Affiliation_affiliation_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Affiliation_affiliation_template::Affiliation_affiliation_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Affiliation_affiliation::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation with unknown numeric value %d.", other_value);
single_value = (Affiliation_affiliation::enum_type)other_value;
}

Affiliation_affiliation_template::Affiliation_affiliation_template(Affiliation_affiliation::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Affiliation_affiliation_template::Affiliation_affiliation_template(const Affiliation_affiliation& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Affiliation_affiliation::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
single_value = other_value.enum_value;
}

Affiliation_affiliation_template::Affiliation_affiliation_template(const OPTIONAL<Affiliation_affiliation>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Affiliation_affiliation::enum_type)(const Affiliation_affiliation&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation from an unbound optional field.");
}
}

Affiliation_affiliation_template::Affiliation_affiliation_template(const Affiliation_affiliation_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Affiliation_affiliation_template::~Affiliation_affiliation_template()
{
clean_up();
}

boolean Affiliation_affiliation_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Affiliation_affiliation_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Affiliation_affiliation::UNBOUND_VALUE;
}

void Affiliation_affiliation_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(int other_value)
{
if (!Affiliation_affiliation::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Affiliation_affiliation::enum_type)other_value;
return *this;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(Affiliation_affiliation::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(const Affiliation_affiliation& other_value)
{
if (other_value.enum_value == Affiliation_affiliation::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(const OPTIONAL<Affiliation_affiliation>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Affiliation_affiliation::enum_type)(const Affiliation_affiliation&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
}
return *this;
}

Affiliation_affiliation_template& Affiliation_affiliation_template::operator=(const Affiliation_affiliation_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Affiliation_affiliation_template::match(Affiliation_affiliation::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
}
return FALSE;
}

boolean Affiliation_affiliation_template::match(const Affiliation_affiliation& other_value) const
{
if (other_value.enum_value == Affiliation_affiliation::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation with an unbound value.");
return match(other_value.enum_value);
}

Affiliation_affiliation::enum_type Affiliation_affiliation_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return single_value;
}

void Affiliation_affiliation_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Affiliation_affiliation_template[list_length];
}

Affiliation_affiliation_template& Affiliation_affiliation_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
return value_list.list_value[list_index];
}

void Affiliation_affiliation_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Affiliation_affiliation::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Affiliation_affiliation_template::log_match(const Affiliation_affiliation& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Affiliation_affiliation_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
}
}

void Affiliation_affiliation_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Affiliation_affiliation::enum_type)text_buf.pull_int().get_val();
if (!Affiliation_affiliation::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Affiliation_affiliation_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
}
}

boolean Affiliation_affiliation_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Affiliation_affiliation_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Affiliation_affiliation_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Affiliation_affiliation::enum_type enum_val = Affiliation_affiliation::str_to_enum(param.get_enumerated());
    if (!Affiliation_affiliation::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Affiliation.affiliation.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@http_jabber_org_protocol_pubsub.Affiliation.affiliation");
  }
  is_ifpresent = param.get_ifpresent();
}

void Affiliation_affiliation_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliation.affiliation");
}

Affiliation::Affiliation()
{
  bound_flag = FALSE;
}

Affiliation::Affiliation(const Affiliation_affiliation& par_affiliation,
    const UNIVERSAL_CHARSTRING& par_node,
    const Empty& par_base)
  :   field_affiliation(par_affiliation),
  field_node(par_node),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Affiliation::Affiliation(const Affiliation& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Affiliation.");
bound_flag = TRUE;
if (other_value.affiliation().is_bound()) field_affiliation = other_value.affiliation();
else field_affiliation.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Affiliation::clean_up()
{
field_affiliation.clean_up();
field_node.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Affiliation& Affiliation::operator=(const Affiliation& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Affiliation.");
  bound_flag = TRUE;
  if (other_value.affiliation().is_bound()) field_affiliation = other_value.affiliation();
  else field_affiliation.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Affiliation::operator==(const Affiliation& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_affiliation==other_value.field_affiliation
  && field_node==other_value.field_node
  && field_base==other_value.field_base;
}

boolean Affiliation::is_bound() const
{
if (bound_flag) return TRUE;
if(field_affiliation.is_bound()) return TRUE;
if(field_node.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Affiliation::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_affiliation.is_value()) return FALSE;
if(!field_node.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Affiliation::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Affiliation");
  return 3;
}

void Affiliation::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ affiliation := ");
field_affiliation.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Affiliation::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Affiliation'");
    }
    if (strcmp("affiliation", param_field) == 0) {
      affiliation().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Affiliation'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Affiliation has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) affiliation().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "affiliation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          affiliation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Affiliation: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Affiliation");
  }
}

void Affiliation::set_implicit_omit()
{
if (affiliation().is_bound()) affiliation().set_implicit_omit();
if (node().is_bound()) node().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Affiliation::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Affiliation.");
field_affiliation.encode_text(text_buf);
field_node.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Affiliation::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_affiliation.decode_text(text_buf);
field_node.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Affiliation::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Affiliation::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Affiliation::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_affiliation.collect_ns(Affiliation_affiliation_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Affiliation_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Affiliation_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Affiliation::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Affiliation_affiliation::can_start(name, uri, Affiliation_affiliation_xer_, flavor)) return true;
  return false;
}

int Affiliation::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("affiliation': ");
  tmp_len = field_affiliation.XER_encode(Affiliation_affiliation_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Affiliation_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Affiliation_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Affiliation::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Affiliation_affiliation_xer_.dfeValue) field_affiliation = *static_cast<const Affiliation_affiliation*>(Affiliation_affiliation_xer_.dfeValue);
  if (Affiliation_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Affiliation_node_xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Affiliation_affiliation_xer_, 1) && check_namespace(ns_uri, Affiliation_affiliation_xer_)) {
      ec_1.set_msg("affiliation': ");
      field_affiliation.XER_decode(Affiliation_affiliation_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Affiliation_node_xer_, 1) && check_namespace(ns_uri, Affiliation_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Affiliation_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_affiliation.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'affiliation'");
  if (!field_node.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'node'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("affiliation': ");
    field_affiliation.XER_decode(Affiliation_affiliation_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Affiliation_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Affiliation_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Affiliation::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Affiliation.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "affiliation");
    enc_len += field_affiliation.JSON_encode(Affiliation_affiliation_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Affiliation_node_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Affiliation_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Affiliation::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (11 == name_len && 0 == strncmp(fld_name, "affiliation", name_len)) {
        int ret_val = field_affiliation.JSON_decode(Affiliation_affiliation_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "affiliation");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Affiliation_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Affiliation_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_affiliation.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "affiliation");
    return JSON_ERROR_FATAL;
  }
  if (!field_node.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "node");
    return JSON_ERROR_FATAL;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Affiliation_template::single_value_struct {
Affiliation_affiliation_template field_affiliation;
UNIVERSAL_CHARSTRING_template field_node;
Empty_template field_base;
};

void Affiliation_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_affiliation = ANY_VALUE;
single_value->field_node = ANY_VALUE;
single_value->field_base = ANY_VALUE;
}
}
}

void Affiliation_template::copy_value(const Affiliation& other_value)
{
single_value = new single_value_struct;
if (other_value.affiliation().is_bound()) {
  single_value->field_affiliation = other_value.affiliation();
} else {
  single_value->field_affiliation.clean_up();
}
if (other_value.node().is_bound()) {
  single_value->field_node = other_value.node();
} else {
  single_value->field_node.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Affiliation_template::copy_template(const Affiliation_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.affiliation().get_selection()) {
single_value->field_affiliation = other_value.affiliation();
} else {
single_value->field_affiliation.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Affiliation_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliation.");
break;
}
set_selection(other_value);
}

Affiliation_template::Affiliation_template()
{
}

Affiliation_template::Affiliation_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Affiliation_template::Affiliation_template(const Affiliation& other_value)
{
copy_value(other_value);
}

Affiliation_template::Affiliation_template(const OPTIONAL<Affiliation>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliation&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Affiliation from an unbound optional field.");
}
}

Affiliation_template::Affiliation_template(const Affiliation_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Affiliation_template::~Affiliation_template()
{
clean_up();
}

Affiliation_template& Affiliation_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Affiliation_template& Affiliation_template::operator=(const Affiliation& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Affiliation_template& Affiliation_template::operator=(const OPTIONAL<Affiliation>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliation&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Affiliation.");
}
return *this;
}

Affiliation_template& Affiliation_template::operator=(const Affiliation_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Affiliation_template::match(const Affiliation& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.affiliation().is_bound()) return FALSE;
if(!single_value->field_affiliation.match(other_value.affiliation()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if(!single_value->field_node.match(other_value.node()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliation.");
}
return FALSE;
}

boolean Affiliation_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_affiliation.is_bound()) return TRUE;
if (single_value->field_node.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Affiliation_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_affiliation.is_value()) return FALSE;
if (!single_value->field_node.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Affiliation_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Affiliation Affiliation_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliation.");
Affiliation ret_val;
if (single_value->field_affiliation.is_bound()) {
ret_val.affiliation() = single_value->field_affiliation.valueof();
}
if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Affiliation_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Affiliation.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Affiliation_template[list_length];
}

Affiliation_template& Affiliation_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Affiliation.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Affiliation.");
return value_list.list_value[list_index];
}

Affiliation_affiliation_template& Affiliation_template::affiliation()
{
set_specific();
return single_value->field_affiliation;
}

const Affiliation_affiliation_template& Affiliation_template::affiliation() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field affiliation of a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliation.");
return single_value->field_affiliation;
}

UNIVERSAL_CHARSTRING_template& Affiliation_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Affiliation_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliation.");
return single_value->field_node;
}

Empty_template& Affiliation_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Affiliation_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliation.");
return single_value->field_base;
}

int Affiliation_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 3;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliation containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliation.");
  }
  return 0;
}

void Affiliation_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ affiliation := ");
single_value->field_affiliation.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Affiliation_template::log_match(const Affiliation& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_affiliation.match(match_value.affiliation())){
TTCN_Logger::log_logmatch_info(".affiliation");
single_value->field_affiliation.log_match(match_value.affiliation());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ affiliation := ");
single_value->field_affiliation.log_match(match_value.affiliation());
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Affiliation_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_affiliation.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliation.");
}
}

void Affiliation_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_affiliation.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Affiliation_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Affiliation.");
}
}

void Affiliation_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Affiliation'");
    }
    if (strcmp("affiliation", param_field) == 0) {
      affiliation().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Affiliation'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Affiliation has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) affiliation().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "affiliation")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          affiliation().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Affiliation: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Affiliation");
  }
  is_ifpresent = param.get_ifpresent();
}

void Affiliation_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_affiliation.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliation");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliation");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliation");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliation");
}

boolean Affiliation_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Affiliation_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Affiliations::Affiliations()
{
  bound_flag = FALSE;
}

Affiliations::Affiliations(const Affiliations_affiliation__list& par_affiliation__list)
  :   field_affiliation__list(par_affiliation__list)
{
  bound_flag = TRUE;
}

Affiliations::Affiliations(const Affiliations& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.");
bound_flag = TRUE;
if (other_value.affiliation__list().is_bound()) field_affiliation__list = other_value.affiliation__list();
else field_affiliation__list.clean_up();
}

void Affiliations::clean_up()
{
field_affiliation__list.clean_up();
bound_flag = FALSE;
}

Affiliations& Affiliations::operator=(const Affiliations& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.");
  bound_flag = TRUE;
  if (other_value.affiliation__list().is_bound()) field_affiliation__list = other_value.affiliation__list();
  else field_affiliation__list.clean_up();
}
return *this;
}

boolean Affiliations::operator==(const Affiliations& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_affiliation__list==other_value.field_affiliation__list;
}

boolean Affiliations::is_bound() const
{
if (bound_flag) return TRUE;
if(field_affiliation__list.is_bound()) return TRUE;
return FALSE;
}
boolean Affiliations::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_affiliation__list.is_value()) return FALSE;
return TRUE;
}
int Affiliations::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Affiliations");
  return 1;
}

void Affiliations::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ affiliation_list := ");
field_affiliation__list.log();
TTCN_Logger::log_event_str(" }");
}

void Affiliations::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Affiliations'");
    }
    if (strcmp("affiliation_list", param_field) == 0) {
      affiliation__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Affiliations'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Affiliations has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) affiliation__list().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "affiliation_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          affiliation__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Affiliations: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Affiliations");
  }
}

void Affiliations::set_implicit_omit()
{
if (affiliation__list().is_bound()) affiliation__list().set_implicit_omit();
}

void Affiliations::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Affiliations.");
field_affiliation__list.encode_text(text_buf);
}

void Affiliations::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_affiliation__list.decode_text(text_buf);
}

void Affiliations::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Affiliations::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Affiliations::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_affiliation__list.collect_ns(Affiliations_affiliation__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Affiliations::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Affiliations_affiliation__list::can_start(name, uri, Affiliations_affiliation__list_xer_, flavor)) return true;
  return false;
}

int Affiliations::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("affiliation_list': ");
  sub_len += field_affiliation__list.XER_encode(Affiliations_affiliation__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Affiliations::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_affiliation__list = *static_cast<const Affiliations_affiliation__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("affiliation_list': ");
    field_affiliation__list.XER_decode(Affiliations_affiliation__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Affiliations::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "affiliation_list");
    enc_len += field_affiliation__list.JSON_encode(Affiliations_affiliation__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Affiliations::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (16 == name_len && 0 == strncmp(fld_name, "affiliation_list", name_len)) {
        int ret_val = field_affiliation__list.JSON_decode(Affiliations_affiliation__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "affiliation_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_affiliation__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "affiliation_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Affiliations_template::single_value_struct {
Affiliations_affiliation__list_template field_affiliation__list;
};

void Affiliations_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_affiliation__list = ANY_VALUE;
}
}
}

void Affiliations_template::copy_value(const Affiliations& other_value)
{
single_value = new single_value_struct;
if (other_value.affiliation__list().is_bound()) {
  single_value->field_affiliation__list = other_value.affiliation__list();
} else {
  single_value->field_affiliation__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Affiliations_template::copy_template(const Affiliations_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.affiliation__list().get_selection()) {
single_value->field_affiliation__list = other_value.affiliation__list();
} else {
single_value->field_affiliation__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Affiliations_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.");
break;
}
set_selection(other_value);
}

Affiliations_template::Affiliations_template()
{
}

Affiliations_template::Affiliations_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Affiliations_template::Affiliations_template(const Affiliations& other_value)
{
copy_value(other_value);
}

Affiliations_template::Affiliations_template(const OPTIONAL<Affiliations>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliations&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Affiliations from an unbound optional field.");
}
}

Affiliations_template::Affiliations_template(const Affiliations_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Affiliations_template::~Affiliations_template()
{
clean_up();
}

Affiliations_template& Affiliations_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Affiliations_template& Affiliations_template::operator=(const Affiliations& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Affiliations_template& Affiliations_template::operator=(const OPTIONAL<Affiliations>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Affiliations&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Affiliations.");
}
return *this;
}

Affiliations_template& Affiliations_template::operator=(const Affiliations_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Affiliations_template::match(const Affiliations& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.affiliation__list().is_bound()) return FALSE;
if(!single_value->field_affiliation__list.match(other_value.affiliation__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.");
}
return FALSE;
}

boolean Affiliations_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_affiliation__list.is_bound()) return TRUE;
return FALSE;
}

boolean Affiliations_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_affiliation__list.is_value()) return FALSE;
return TRUE;
}

void Affiliations_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Affiliations Affiliations_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliations.");
Affiliations ret_val;
if (single_value->field_affiliation__list.is_bound()) {
ret_val.affiliation__list() = single_value->field_affiliation__list.valueof();
}
return ret_val;
}

void Affiliations_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Affiliations.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Affiliations_template[list_length];
}

Affiliations_template& Affiliations_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Affiliations.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Affiliations.");
return value_list.list_value[list_index];
}

Affiliations_affiliation__list_template& Affiliations_template::affiliation__list()
{
set_specific();
return single_value->field_affiliation__list;
}

const Affiliations_affiliation__list_template& Affiliations_template::affiliation__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field affiliation_list of a non-specific template of type @http_jabber_org_protocol_pubsub.Affiliations.");
return single_value->field_affiliation__list;
}

int Affiliations_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Affiliations containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.");
  }
  return 0;
}

void Affiliations_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ affiliation_list := ");
single_value->field_affiliation__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Affiliations_template::log_match(const Affiliations& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_affiliation__list.match(match_value.affiliation__list())){
TTCN_Logger::log_logmatch_info(".affiliation_list");
single_value->field_affiliation__list.log_match(match_value.affiliation__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ affiliation_list := ");
single_value->field_affiliation__list.log_match(match_value.affiliation__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Affiliations_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_affiliation__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Affiliations.");
}
}

void Affiliations_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_affiliation__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Affiliations_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Affiliations.");
}
}

void Affiliations_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Affiliations'");
    }
    if (strcmp("affiliation_list", param_field) == 0) {
      affiliation__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Affiliations'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Affiliations has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) affiliation__list().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "affiliation_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          affiliation__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Affiliations: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Affiliations");
  }
  is_ifpresent = param.get_ifpresent();
}

void Affiliations_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_affiliation__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliations");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Affiliations");
}

boolean Affiliations_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Affiliations_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Default::Default()
{
  bound_flag = FALSE;
}

Default::Default(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<Default_type__>& par_type__,
    const Empty& par_base)
  :   field_node(par_node),
  field_type__(par_type__),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Default::Default(const Default& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Default.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.type__().is_bound()) field_type__ = other_value.type__();
else field_type__.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Default::clean_up()
{
field_node.clean_up();
field_type__.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Default& Default::operator=(const Default& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Default.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.type__().is_bound()) field_type__ = other_value.type__();
  else field_type__.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Default::operator==(const Default& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_type__==other_value.field_type__
  && field_base==other_value.field_base;
}

boolean Default::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_type__.get_selection() || field_type__.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Default::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_type__.get_selection() && !field_type__.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Default::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Default");
  int ret_val = 1;
  if (field_node.ispresent()) ret_val++;
  if (field_type__.ispresent()) ret_val++;
  return ret_val;
}

void Default::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", type_ := ");
field_type__.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Default::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Default'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Default'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Default has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Default: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Default");
  }
}

void Default::set_implicit_omit()
{
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (!type__().is_bound()) type__() = OMIT_VALUE;
else type__().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Default::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Default.");
field_node.encode_text(text_buf);
field_type__.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Default::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_type__.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Default::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Default::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Default::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Default_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_type__.collect_ns(Default_type___xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Default_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Default::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Default_node_xer_, flavor)) return true;
  else if (Default_type__::can_start(name, uri, Default_type___xer_, flavor)) return true;
  else if (Empty::can_start(name, uri, Default_base_xer_, flavor)) return true;
  return false;
}

int Default::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Default_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("type_': ");
  tmp_len = field_type__.XER_encode(Default_type___xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Default_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Default::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Default_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Default_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  if (Default_type___xer_.dfeValue) field_type__ = *static_cast<const Default_type__*>(Default_type___xer_.dfeValue);
  else field_type__ = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Default_node_xer_, 1) && check_namespace(ns_uri, Default_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Default_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Default_type___xer_, 1) && check_namespace(ns_uri, Default_type___xer_)) {
      ec_1.set_msg("type_': ");
      field_type__.XER_decode(Default_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Default_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("type_': ");
    field_type__.XER_decode(Default_type___xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Default_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Default::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Default.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Default_node_descr_, p_tok);
  }

  if (field_type__.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "type_");
    enc_len += field_type__.JSON_encode(Default_type___descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Default_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Default::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Default_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "type_", name_len)) {
        int ret_val = field_type__.JSON_decode(Default_type___descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "type_");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Default_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_type__.is_bound()) {
    field_type__ = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Default_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
Default_type___template field_type__;
Empty_template field_base;
};

void Default_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_OR_OMIT;
single_value->field_type__ = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Default_template::copy_value(const Default& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.type__().is_bound()) {
  if (other_value.type__().ispresent()) single_value->field_type__ = other_value.type__()();
  else single_value->field_type__ = OMIT_VALUE;
} else {
  single_value->field_type__.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Default_template::copy_template(const Default_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.type__().get_selection()) {
single_value->field_type__ = other_value.type__();
} else {
single_value->field_type__.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Default_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Default.");
break;
}
set_selection(other_value);
}

Default_template::Default_template()
{
}

Default_template::Default_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Default_template::Default_template(const Default& other_value)
{
copy_value(other_value);
}

Default_template::Default_template(const OPTIONAL<Default>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Default&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Default from an unbound optional field.");
}
}

Default_template::Default_template(const Default_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Default_template::~Default_template()
{
clean_up();
}

Default_template& Default_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Default_template& Default_template::operator=(const Default& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Default_template& Default_template::operator=(const OPTIONAL<Default>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Default&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Default.");
}
return *this;
}

Default_template& Default_template::operator=(const Default_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Default_template::match(const Default& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.type__().is_bound()) return FALSE;
if((other_value.type__().ispresent() ? !single_value->field_type__.match((const Default_type__&)other_value.type__()) : !single_value->field_type__.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Default.");
}
return FALSE;
}

boolean Default_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_type__.is_omit() || single_value->field_type__.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Default_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_type__.is_omit() && !single_value->field_type__.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Default_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Default Default_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Default.");
Default ret_val;
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_type__.is_omit()) ret_val.type__() = OMIT_VALUE;
else if (single_value->field_type__.is_bound()) {
ret_val.type__() = single_value->field_type__.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Default_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Default.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Default_template[list_length];
}

Default_template& Default_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Default.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Default.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Default_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Default_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Default.");
return single_value->field_node;
}

Default_type___template& Default_template::type__()
{
set_specific();
return single_value->field_type__;
}

const Default_type___template& Default_template::type__() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field type_ of a non-specific template of type @http_jabber_org_protocol_pubsub.Default.");
return single_value->field_type__;
}

Empty_template& Default_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Default_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_pubsub.Default.");
return single_value->field_base;
}

int Default_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_node.is_present()) ret_val++;
      if (single_value->field_type__.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Default containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Default.");
  }
  return 0;
}

void Default_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", type_ := ");
single_value->field_type__.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Default_template::log_match(const Default& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.type__().ispresent()){
if(!single_value->field_type__.match(match_value.type__())){
TTCN_Logger::log_logmatch_info(".type_");
single_value->field_type__.log_match(match_value.type__());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_type__.match_omit()){
 TTCN_Logger::log_logmatch_info(".type_ := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_type__.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", type_ := ");
if (match_value.type__().ispresent()) single_value->field_type__.log_match(match_value.type__());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_type__.log();
if (single_value->field_type__.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Default_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_type__.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Default.");
}
}

void Default_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_type__.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Default_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Default.");
}
}

void Default_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Default'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("type_", param_field) == 0) {
      type__().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Default'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Default has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) type__().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "type_")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          type__().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Default: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Default");
  }
  is_ifpresent = param.get_ifpresent();
}

void Default_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Default");
single_value->field_type__.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Default");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Default");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Default");
}

boolean Default_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Default_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Default_type__::Default_type__()
{
enum_value = UNBOUND_VALUE;
}

Default_type__::Default_type__(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @http_jabber_org_protocol_pubsub.Default.type_ with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Default_type__::Default_type__(enum_type other_value)
{
enum_value = other_value;
}

Default_type__::Default_type__(const Default_type__& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
enum_value = other_value.enum_value;
}

Default_type__& Default_type__::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Default_type__& Default_type__::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Default_type__& Default_type__::operator=(const Default_type__& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
enum_value = other_value.enum_value;
return *this;
}

boolean Default_type__::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value == other_value;
}

boolean Default_type__::operator==(const Default_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value == other_value.enum_value;
}

boolean Default_type__::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value < other_value;
}

boolean Default_type__::operator<(const Default_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value < other_value.enum_value;
}

boolean Default_type__::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value > other_value;
}

boolean Default_type__::operator>(const Default_type__& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value > other_value.enum_value;
}

const char *Default_type__::enum_to_str(enum_type enum_par)
{
switch (enum_par) {
case collection: return "collection";
case leaf: return "leaf";
default: return "<unknown>";
}
}

Default_type__::enum_type Default_type__::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "collection")) return collection;
else if (!strcmp(str_par, "leaf")) return leaf;
else return UNKNOWN_VALUE;
}

boolean Default_type__::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
return TRUE;
default:
return FALSE;
}
}

int Default_type__::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Default_type__::enum2int(const Default_type__& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Default_type__::operator Default_type__::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return enum_value;
}

void Default_type__::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Default_type__::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@http_jabber_org_protocol_pubsub.Default.type_");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Default.type_.");
  }
}

void Default_type__::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
text_buf.push_int(enum_value);
}

void Default_type__::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", enum_value);
}

void Default_type__::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Default_type__::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Default_type__::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Default_type__::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Default_type__::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Default_type__::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Default_type__::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Default_type___template::copy_template(const Default_type___template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Default_type___template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
}
}

Default_type___template::Default_type___template()
{
}

Default_type___template::Default_type___template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Default_type___template::Default_type___template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Default_type__::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_ with unknown numeric value %d.", other_value);
single_value = (Default_type__::enum_type)other_value;
}

Default_type___template::Default_type___template(Default_type__::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Default_type___template::Default_type___template(const Default_type__& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Default_type__::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
single_value = other_value.enum_value;
}

Default_type___template::Default_type___template(const OPTIONAL<Default_type__>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Default_type__::enum_type)(const Default_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_ from an unbound optional field.");
}
}

Default_type___template::Default_type___template(const Default_type___template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Default_type___template::~Default_type___template()
{
clean_up();
}

boolean Default_type___template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Default_type___template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Default_type__::UNBOUND_VALUE;
}

void Default_type___template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Default_type___template& Default_type___template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Default_type___template& Default_type___template::operator=(int other_value)
{
if (!Default_type__::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Default_type__::enum_type)other_value;
return *this;
}

Default_type___template& Default_type___template::operator=(Default_type__::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Default_type___template& Default_type___template::operator=(const Default_type__& other_value)
{
if (other_value.enum_value == Default_type__::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Default.type_ to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Default_type___template& Default_type___template::operator=(const OPTIONAL<Default_type__>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Default_type__::enum_type)(const Default_type__&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
}
return *this;
}

Default_type___template& Default_type___template::operator=(const Default_type___template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Default_type___template::match(Default_type__::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
}
return FALSE;
}

boolean Default_type___template::match(const Default_type__& other_value) const
{
if (other_value.enum_value == Default_type__::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_ with an unbound value.");
return match(other_value.enum_value);
}

Default_type__::enum_type Default_type___template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return single_value;
}

void Default_type___template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Default_type___template[list_length];
}

Default_type___template& Default_type___template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
return value_list.list_value[list_index];
}

void Default_type___template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Default_type__::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Default_type___template::log_match(const Default_type__& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Default_type___template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
}
}

void Default_type___template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Default_type__::enum_type)text_buf.pull_int().get_val();
if (!Default_type__::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Default_type___template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Default.type_.");
}
}

boolean Default_type___template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Default_type___template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Default_type___template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Default_type__::enum_type enum_val = Default_type__::str_to_enum(param.get_enumerated());
    if (!Default_type__::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Default.type_.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@http_jabber_org_protocol_pubsub.Default.type_");
  }
  is_ifpresent = param.get_ifpresent();
}

void Default_type___template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Default.type_");
}


const Item Items_item__list::UNBOUND_ELEM;
Items_item__list::Items_item__list()
{
val_ptr = NULL;
}

Items_item__list::Items_item__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Items_item__list::Items_item__list(const Items_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Items_item__list::~Items_item__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Items_item__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Items_item__list& Items_item__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Items_item__list& Items_item__list::operator=(const Items_item__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Items_item__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return val_ptr->n_elements == 0 ;
}

boolean Items_item__list::operator==(const Items_item__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Item& Items_item__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Items.item_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Item;
}
return *val_ptr->value_elements[index_value];
}

Item& Items_item__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return (*this)[(int)index_value];
}

const Item& Items_item__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Items.item_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Items.item_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Item& Items_item__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return (*this)[(int)index_value];
}

Items_item__list Items_item__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Items_item__list Items_item__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Items_item__list Items_item__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Items_item__list Items_item__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Items_item__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Item(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Items_item__list Items_item__list::operator+(const Items_item__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Items.item_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Items_item__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Item(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Items_item__list Items_item__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Items.item_list","element");
Items_item__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Items_item__list Items_item__list::replace(int index, int len, const Items_item__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Items.item_list","element");
Items_item__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Item(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Item(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Items_item__list Items_item__list::replace(int index, int len, const Items_item__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Items_item__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Items.item_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Items_item__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Items_item__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return val_ptr->n_elements;
}

int Items_item__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Items_item__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Items_item__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Items.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Items.item_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Items.item_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Items_item__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Items_item__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Items_item__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
val_ptr->value_elements = (Item**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Item;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Items_item__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Items_item__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Items_item__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Item::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Items_item__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Items_item__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Items_item__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Items_item__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Items_item__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Item* val = new Item;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Item**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Items_item__list_template::copy_value(const Items_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Items.item_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Item_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Items_item__list_template::copy_template(const Items_item__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Item_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Items_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
break;
}
set_selection(other_value);
}

boolean Items_item__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Items_item__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Items_item__list*)value_ptr)[value_index]);
else return ((const Items_item__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Items_item__list_template::Items_item__list_template()
{
}

Items_item__list_template::Items_item__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Items_item__list_template::Items_item__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Items_item__list_template::Items_item__list_template(const Items_item__list& other_value)
{
copy_value(other_value);
}

Items_item__list_template::Items_item__list_template(const OPTIONAL<Items_item__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Items_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Items.item_list from an unbound optional field.");
}
}

Items_item__list_template::Items_item__list_template(const Items_item__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Items_item__list_template::~Items_item__list_template()
{
clean_up();
}

void Items_item__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Items_item__list_template& Items_item__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Items_item__list_template& Items_item__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Items_item__list_template& Items_item__list_template::operator=(const Items_item__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Items_item__list_template& Items_item__list_template::operator=(const OPTIONAL<Items_item__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Items_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
}
return *this;
}

Items_item__list_template& Items_item__list_template::operator=(const Items_item__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Item_template& Items_item__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Items.item_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Items.item_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Item_template& Items_item__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return (*this)[(int)index_value];
}

const Item_template& Items_item__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Items.item_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Items.item_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Item_template& Items_item__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return (*this)[(int)index_value];
}

void Items_item__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Items_item__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Items_item__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Items.item_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.item_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Items.item_list");
}

boolean Items_item__list_template::match(const Items_item__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
}
return FALSE;
}

boolean Items_item__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Items_item__list Items_item__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
Items_item__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Items_item__list Items_item__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Items_item__list Items_item__list_template::replace(int index, int len, const Items_item__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Items_item__list Items_item__list_template::replace(int index, int len, const Items_item__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Items_item__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Items_item__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
}
set_selection(template_type);
}

Items_item__list_template& Items_item__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return value_list.list_value[list_index];
}

void Items_item__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Items_item__list_template::log_match(const Items_item__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Items_item__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
}
}

void Items_item__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Item_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Items_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Items.item_list.");
}
}

boolean Items_item__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Items_item__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Items_item__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Items.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Items.item_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Items_item__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items.item_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items.item_list");
}

Item::Item()
{
  bound_flag = FALSE;
}

Item::Item(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_id,
    const OPTIONAL<Item_sequence>& par_sequence)
  :   field_id(par_id),
  field_sequence(par_sequence)
{
  bound_flag = TRUE;
}

Item::Item(const Item& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Item.");
bound_flag = TRUE;
if (other_value.id().is_bound()) field_id = other_value.id();
else field_id.clean_up();
if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
else field_sequence.clean_up();
}

void Item::clean_up()
{
field_id.clean_up();
field_sequence.clean_up();
bound_flag = FALSE;
}

Item& Item::operator=(const Item& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Item.");
  bound_flag = TRUE;
  if (other_value.id().is_bound()) field_id = other_value.id();
  else field_id.clean_up();
  if (other_value.sequence().is_bound()) field_sequence = other_value.sequence();
  else field_sequence.clean_up();
}
return *this;
}

boolean Item::operator==(const Item& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_id==other_value.field_id
  && field_sequence==other_value.field_sequence;
}

boolean Item::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_id.get_selection() || field_id.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_sequence.get_selection() || field_sequence.is_bound()) return TRUE;
return FALSE;
}
boolean Item::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_id.get_selection() && !field_id.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_sequence.get_selection() && !field_sequence.is_value()) return FALSE;
return TRUE;
}
int Item::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Item");
  int ret_val = 0;
  if (field_id.ispresent()) ret_val++;
  if (field_sequence.ispresent()) ret_val++;
  return ret_val;
}

void Item::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ id := ");
field_id.log();
TTCN_Logger::log_event_str(", sequence := ");
field_sequence.log();
TTCN_Logger::log_event_str(" }");
}

void Item::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Item'");
    }
    if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Item'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Item has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Item: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Item");
  }
}

void Item::set_implicit_omit()
{
if (!id().is_bound()) id() = OMIT_VALUE;
else id().set_implicit_omit();
if (!sequence().is_bound()) sequence() = OMIT_VALUE;
else sequence().set_implicit_omit();
}

void Item::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Item.");
field_id.encode_text(text_buf);
field_sequence.encode_text(text_buf);
}

void Item::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_id.decode_text(text_buf);
field_sequence.decode_text(text_buf);
}

void Item::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Item::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Item::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_id.collect_ns(Item_id_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_sequence.collect_ns(Item_sequence_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Item::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Item_id_xer_, flavor)) return true;
  else if (Item_sequence::can_start(name, uri, Item_sequence_xer_, flavor)) return true;
  return false;
}

int Item::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("id': ");
  tmp_len = field_id.XER_encode(Item_id_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("sequence': ");
  sub_len += field_sequence.XER_encode(Item_sequence_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Item::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Item_id_xer_.dfeValue) field_id = *static_cast<const UNIVERSAL_CHARSTRING*>(Item_id_xer_.dfeValue);
  else field_id = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Item_id_xer_, 1) && check_namespace(ns_uri, Item_id_xer_)) {
      ec_1.set_msg("id': ");
      field_id.XER_decode(Item_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("id': ");
    field_id.XER_decode(Item_id_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_sequence = *static_cast<const Item_sequence*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("sequence': ");
    field_sequence.XER_decode(Item_sequence_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Item::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Item.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_id.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "id");
    enc_len += field_id.JSON_encode(Item_id_descr_, p_tok);
  }

  if (field_sequence.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence");
    enc_len += field_sequence.JSON_encode(Item_sequence_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Item::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (2 == name_len && 0 == strncmp(fld_name, "id", name_len)) {
        int ret_val = field_id.JSON_decode(Item_id_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "id");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (8 == name_len && 0 == strncmp(fld_name, "sequence", name_len)) {
        int ret_val = field_sequence.JSON_decode(Item_sequence_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_id.is_bound()) {
    field_id = OMIT_VALUE;
  }
  if (!field_sequence.is_bound()) {
    field_sequence = OMIT_VALUE;
  }

  return dec_len;
}

struct Item_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_id;
Item_sequence_template field_sequence;
};

void Item_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_id = ANY_OR_OMIT;
single_value->field_sequence = ANY_OR_OMIT;
}
}
}

void Item_template::copy_value(const Item& other_value)
{
single_value = new single_value_struct;
if (other_value.id().is_bound()) {
  if (other_value.id().ispresent()) single_value->field_id = other_value.id()();
  else single_value->field_id = OMIT_VALUE;
} else {
  single_value->field_id.clean_up();
}
if (other_value.sequence().is_bound()) {
  if (other_value.sequence().ispresent()) single_value->field_sequence = other_value.sequence()();
  else single_value->field_sequence = OMIT_VALUE;
} else {
  single_value->field_sequence.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Item_template::copy_template(const Item_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.id().get_selection()) {
single_value->field_id = other_value.id();
} else {
single_value->field_id.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sequence().get_selection()) {
single_value->field_sequence = other_value.sequence();
} else {
single_value->field_sequence.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Item_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.");
break;
}
set_selection(other_value);
}

Item_template::Item_template()
{
}

Item_template::Item_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Item_template::Item_template(const Item& other_value)
{
copy_value(other_value);
}

Item_template::Item_template(const OPTIONAL<Item>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Item&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Item from an unbound optional field.");
}
}

Item_template::Item_template(const Item_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Item_template::~Item_template()
{
clean_up();
}

Item_template& Item_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Item_template& Item_template::operator=(const Item& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Item_template& Item_template::operator=(const OPTIONAL<Item>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Item&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Item.");
}
return *this;
}

Item_template& Item_template::operator=(const Item_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Item_template::match(const Item& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.id().is_bound()) return FALSE;
if((other_value.id().ispresent() ? !single_value->field_id.match((const UNIVERSAL_CHARSTRING&)other_value.id()) : !single_value->field_id.match_omit()))return FALSE;
if(!other_value.sequence().is_bound()) return FALSE;
if((other_value.sequence().ispresent() ? !single_value->field_sequence.match((const Item_sequence&)other_value.sequence()) : !single_value->field_sequence.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.");
}
return FALSE;
}

boolean Item_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_id.is_omit() || single_value->field_id.is_bound()) return TRUE;
if (single_value->field_sequence.is_omit() || single_value->field_sequence.is_bound()) return TRUE;
return FALSE;
}

boolean Item_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_id.is_omit() && !single_value->field_id.is_value()) return FALSE;
if (!single_value->field_sequence.is_omit() && !single_value->field_sequence.is_value()) return FALSE;
return TRUE;
}

void Item_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Item Item_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Item.");
Item ret_val;
if (single_value->field_id.is_omit()) ret_val.id() = OMIT_VALUE;
else if (single_value->field_id.is_bound()) {
ret_val.id() = single_value->field_id.valueof();
}
if (single_value->field_sequence.is_omit()) ret_val.sequence() = OMIT_VALUE;
else if (single_value->field_sequence.is_bound()) {
ret_val.sequence() = single_value->field_sequence.valueof();
}
return ret_val;
}

void Item_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Item.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Item_template[list_length];
}

Item_template& Item_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Item.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Item.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Item_template::id()
{
set_specific();
return single_value->field_id;
}

const UNIVERSAL_CHARSTRING_template& Item_template::id() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field id of a non-specific template of type @http_jabber_org_protocol_pubsub.Item.");
return single_value->field_id;
}

Item_sequence_template& Item_template::sequence()
{
set_specific();
return single_value->field_sequence;
}

const Item_sequence_template& Item_template::sequence() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sequence of a non-specific template of type @http_jabber_org_protocol_pubsub.Item.");
return single_value->field_sequence;
}

int Item_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_id.is_present()) ret_val++;
      if (single_value->field_sequence.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.");
  }
  return 0;
}

void Item_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ id := ");
single_value->field_id.log();
TTCN_Logger::log_event_str(", sequence := ");
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Item_template::log_match(const Item& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.id().ispresent()){
if(!single_value->field_id.match(match_value.id())){
TTCN_Logger::log_logmatch_info(".id");
single_value->field_id.log_match(match_value.id());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_id.match_omit()){
 TTCN_Logger::log_logmatch_info(".id := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_id.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.sequence().ispresent()){
if(!single_value->field_sequence.match(match_value.sequence())){
TTCN_Logger::log_logmatch_info(".sequence");
single_value->field_sequence.log_match(match_value.sequence());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_sequence.match_omit()){
 TTCN_Logger::log_logmatch_info(".sequence := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_sequence.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ id := ");
if (match_value.id().ispresent()) single_value->field_id.log_match(match_value.id());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_id.log();
if (single_value->field_id.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", sequence := ");
if (match_value.sequence().ispresent()) single_value->field_sequence.log_match(match_value.sequence());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_sequence.log();
if (single_value->field_sequence.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Item_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_id.encode_text(text_buf);
single_value->field_sequence.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.");
}
}

void Item_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_id.decode_text(text_buf);
single_value->field_sequence.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Item_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Item.");
}
}

void Item_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Item'");
    }
    if (strcmp("id", param_field) == 0) {
      id().set_param(param);
      return;
    } else if (strcmp("sequence", param_field) == 0) {
      sequence().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Item'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Item has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) id().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "id")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          id().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Item: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Item");
  }
  is_ifpresent = param.get_ifpresent();
}

void Item_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_id.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Item");
single_value->field_sequence.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Item");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Item");
}

boolean Item_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Item_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Item_sequence::Item_sequence()
{
  bound_flag = FALSE;
}

Item_sequence::Item_sequence(const UNIVERSAL_CHARSTRING& par_elem)
  :   field_elem(par_elem)
{
  bound_flag = TRUE;
}

Item_sequence::Item_sequence(const Item_sequence& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Item.sequence.");
bound_flag = TRUE;
if (other_value.elem().is_bound()) field_elem = other_value.elem();
else field_elem.clean_up();
}

void Item_sequence::clean_up()
{
field_elem.clean_up();
bound_flag = FALSE;
}

Item_sequence& Item_sequence::operator=(const Item_sequence& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Item.sequence.");
  bound_flag = TRUE;
  if (other_value.elem().is_bound()) field_elem = other_value.elem();
  else field_elem.clean_up();
}
return *this;
}

boolean Item_sequence::operator==(const Item_sequence& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_elem==other_value.field_elem;
}

boolean Item_sequence::is_bound() const
{
if (bound_flag) return TRUE;
if(field_elem.is_bound()) return TRUE;
return FALSE;
}
boolean Item_sequence::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_elem.is_value()) return FALSE;
return TRUE;
}
int Item_sequence::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Item.sequence");
  return 1;
}

void Item_sequence::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ elem := ");
field_elem.log();
TTCN_Logger::log_event_str(" }");
}

void Item_sequence::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Item.sequence'");
    }
    if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Item.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Item.sequence has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Item.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Item.sequence");
  }
}

void Item_sequence::set_implicit_omit()
{
if (elem().is_bound()) elem().set_implicit_omit();
}

void Item_sequence::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Item.sequence.");
field_elem.encode_text(text_buf);
}

void Item_sequence::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_elem.decode_text(text_buf);
}

void Item_sequence::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Item_sequence::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Item_sequence::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_elem.collect_ns(Item_sequence_elem_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Item_sequence::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Item_sequence_elem_xer_, flavor)) return true;
  return false;
}

int Item_sequence::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("elem': ");
  sub_len += field_elem.XER_encode(Item_sequence_elem_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Item_sequence::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_elem = *static_cast<const UNIVERSAL_CHARSTRING*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("elem': ");
    if (tag_closed) p_reader.Read(); 
    field_elem.XER_decode(Item_sequence_elem_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Item_sequence::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Item.sequence.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "elem");
    enc_len += field_elem.JSON_encode(Item_sequence_elem_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Item_sequence::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "elem", name_len)) {
        int ret_val = field_elem.JSON_decode(Item_sequence_elem_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "elem");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_elem.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "elem");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Item_sequence_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_elem;
};

void Item_sequence_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_elem = ANY_VALUE;
}
}
}

void Item_sequence_template::copy_value(const Item_sequence& other_value)
{
single_value = new single_value_struct;
if (other_value.elem().is_bound()) {
  single_value->field_elem = other_value.elem();
} else {
  single_value->field_elem.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Item_sequence_template::copy_template(const Item_sequence_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.elem().get_selection()) {
single_value->field_elem = other_value.elem();
} else {
single_value->field_elem.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Item_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
break;
}
set_selection(other_value);
}

Item_sequence_template::Item_sequence_template()
{
}

Item_sequence_template::Item_sequence_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Item_sequence_template::Item_sequence_template(const Item_sequence& other_value)
{
copy_value(other_value);
}

Item_sequence_template::Item_sequence_template(const OPTIONAL<Item_sequence>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Item_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Item.sequence from an unbound optional field.");
}
}

Item_sequence_template::Item_sequence_template(const Item_sequence_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Item_sequence_template::~Item_sequence_template()
{
clean_up();
}

Item_sequence_template& Item_sequence_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Item_sequence_template& Item_sequence_template::operator=(const Item_sequence& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Item_sequence_template& Item_sequence_template::operator=(const OPTIONAL<Item_sequence>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Item_sequence&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
}
return *this;
}

Item_sequence_template& Item_sequence_template::operator=(const Item_sequence_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Item_sequence_template::match(const Item_sequence& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.elem().is_bound()) return FALSE;
if(!single_value->field_elem.match(other_value.elem()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
}
return FALSE;
}

boolean Item_sequence_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_elem.is_bound()) return TRUE;
return FALSE;
}

boolean Item_sequence_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_elem.is_value()) return FALSE;
return TRUE;
}

void Item_sequence_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Item_sequence Item_sequence_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
Item_sequence ret_val;
if (single_value->field_elem.is_bound()) {
ret_val.elem() = single_value->field_elem.valueof();
}
return ret_val;
}

void Item_sequence_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Item_sequence_template[list_length];
}

Item_sequence_template& Item_sequence_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Item_sequence_template::elem()
{
set_specific();
return single_value->field_elem;
}

const UNIVERSAL_CHARSTRING_template& Item_sequence_template::elem() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field elem of a non-specific template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
return single_value->field_elem;
}

int Item_sequence_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Item.sequence containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
  }
  return 0;
}

void Item_sequence_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ elem := ");
single_value->field_elem.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Item_sequence_template::log_match(const Item_sequence& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_elem.match(match_value.elem())){
TTCN_Logger::log_logmatch_info(".elem");
single_value->field_elem.log_match(match_value.elem());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ elem := ");
single_value->field_elem.log_match(match_value.elem());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Item_sequence_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_elem.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
}
}

void Item_sequence_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_elem.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Item_sequence_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Item.sequence.");
}
}

void Item_sequence_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Item.sequence'");
    }
    if (strcmp("elem", param_field) == 0) {
      elem().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Item.sequence'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Item.sequence has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) elem().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "elem")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          elem().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Item.sequence: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Item.sequence");
  }
  is_ifpresent = param.get_ifpresent();
}

void Item_sequence_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_elem.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Item.sequence");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Item.sequence");
}

boolean Item_sequence_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Item_sequence_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Items::Items()
{
  bound_flag = FALSE;
}

Items::Items(const OPTIONAL<INTEGER>& par_max__items,
    const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const Items_item__list& par_item__list)
  :   field_max__items(par_max__items),
  field_node(par_node),
  field_subid(par_subid),
  field_item__list(par_item__list)
{
  bound_flag = TRUE;
}

Items::Items(const Items& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Items.");
bound_flag = TRUE;
if (other_value.max__items().is_bound()) field_max__items = other_value.max__items();
else field_max__items.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.subid().is_bound()) field_subid = other_value.subid();
else field_subid.clean_up();
if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
else field_item__list.clean_up();
}

void Items::clean_up()
{
field_max__items.clean_up();
field_node.clean_up();
field_subid.clean_up();
field_item__list.clean_up();
bound_flag = FALSE;
}

Items& Items::operator=(const Items& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Items.");
  bound_flag = TRUE;
  if (other_value.max__items().is_bound()) field_max__items = other_value.max__items();
  else field_max__items.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.subid().is_bound()) field_subid = other_value.subid();
  else field_subid.clean_up();
  if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
  else field_item__list.clean_up();
}
return *this;
}

boolean Items::operator==(const Items& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_max__items==other_value.field_max__items
  && field_node==other_value.field_node
  && field_subid==other_value.field_subid
  && field_item__list==other_value.field_item__list;
}

boolean Items::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_max__items.get_selection() || field_max__items.is_bound()) return TRUE;
if(field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subid.get_selection() || field_subid.is_bound()) return TRUE;
if(field_item__list.is_bound()) return TRUE;
return FALSE;
}
boolean Items::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_max__items.get_selection() && !field_max__items.is_value()) return FALSE;
if(!field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subid.get_selection() && !field_subid.is_value()) return FALSE;
if(!field_item__list.is_value()) return FALSE;
return TRUE;
}
int Items::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Items");
  int ret_val = 2;
  if (field_max__items.ispresent()) ret_val++;
  if (field_subid.ispresent()) ret_val++;
  return ret_val;
}

void Items::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ max_items := ");
field_max__items.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", subid := ");
field_subid.log();
TTCN_Logger::log_event_str(", item_list := ");
field_item__list.log();
TTCN_Logger::log_event_str(" }");
}

void Items::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Items'");
    }
    if (strcmp("max_items", param_field) == 0) {
      max__items().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Items'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Items has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) max__items().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "max_items")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          max__items().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Items: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Items");
  }
}

void Items::set_implicit_omit()
{
if (!max__items().is_bound()) max__items() = OMIT_VALUE;
else max__items().set_implicit_omit();
if (node().is_bound()) node().set_implicit_omit();
if (!subid().is_bound()) subid() = OMIT_VALUE;
else subid().set_implicit_omit();
if (item__list().is_bound()) item__list().set_implicit_omit();
}

void Items::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Items.");
field_max__items.encode_text(text_buf);
field_node.encode_text(text_buf);
field_subid.encode_text(text_buf);
field_item__list.encode_text(text_buf);
}

void Items::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_max__items.decode_text(text_buf);
field_node.decode_text(text_buf);
field_subid.decode_text(text_buf);
field_item__list.decode_text(text_buf);
}

void Items::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Items::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Items::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_max__items.collect_ns(Items_max__items_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Items_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subid.collect_ns(Items_subid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_item__list.collect_ns(Items_item__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Items::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (INTEGER::can_start(name, uri, Items_max__items_xer_, flavor)) return true;
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Items_node_xer_, flavor)) return true;
  return false;
}

int Items::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("max_items': ");
  tmp_len = field_max__items.XER_encode(Items_max__items_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Items_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("subid': ");
  tmp_len = field_subid.XER_encode(Items_subid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("item_list': ");
  sub_len += field_item__list.XER_encode(Items_item__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Items::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Items_max__items_xer_.dfeValue) field_max__items = *static_cast<const INTEGER*>(Items_max__items_xer_.dfeValue);
  else field_max__items = OMIT_VALUE;
  if (Items_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Items_node_xer_.dfeValue);
  if (Items_subid_xer_.dfeValue) field_subid = *static_cast<const UNIVERSAL_CHARSTRING*>(Items_subid_xer_.dfeValue);
  else field_subid = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Items_max__items_xer_, 1) && check_namespace(ns_uri, Items_max__items_xer_)) {
      ec_1.set_msg("max_items': ");
      field_max__items.XER_decode(Items_max__items_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Items_node_xer_, 1) && check_namespace(ns_uri, Items_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Items_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Items_subid_xer_, 1) && check_namespace(ns_uri, Items_subid_xer_)) {
      ec_1.set_msg("subid': ");
      field_subid.XER_decode(Items_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_node.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'node'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("max_items': ");
    field_max__items.XER_decode(Items_max__items_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Items_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("subid': ");
    field_subid.XER_decode(Items_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_item__list = *static_cast<const Items_item__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("item_list': ");
    field_item__list.XER_decode(Items_item__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Items::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Items.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_max__items.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "max_items");
    enc_len += field_max__items.JSON_encode(Items_max__items_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Items_node_descr_, p_tok);
  }

  if (field_subid.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subid");
    enc_len += field_subid.JSON_encode(Items_subid_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "item_list");
    enc_len += field_item__list.JSON_encode(Items_item__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Items::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (9 == name_len && 0 == strncmp(fld_name, "max_items", name_len)) {
        int ret_val = field_max__items.JSON_decode(Items_max__items_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "max_items");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Items_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "subid", name_len)) {
        int ret_val = field_subid.JSON_decode(Items_subid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "item_list", name_len)) {
        int ret_val = field_item__list.JSON_decode(Items_item__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "item_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_max__items.is_bound()) {
    field_max__items = OMIT_VALUE;
  }
  if (!field_node.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "node");
    return JSON_ERROR_FATAL;
  }
  if (!field_subid.is_bound()) {
    field_subid = OMIT_VALUE;
  }
  if (!field_item__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "item_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Items_template::single_value_struct {
INTEGER_template field_max__items;
UNIVERSAL_CHARSTRING_template field_node;
UNIVERSAL_CHARSTRING_template field_subid;
Items_item__list_template field_item__list;
};

void Items_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_max__items = ANY_OR_OMIT;
single_value->field_node = ANY_VALUE;
single_value->field_subid = ANY_OR_OMIT;
single_value->field_item__list = ANY_VALUE;
}
}
}

void Items_template::copy_value(const Items& other_value)
{
single_value = new single_value_struct;
if (other_value.max__items().is_bound()) {
  if (other_value.max__items().ispresent()) single_value->field_max__items = other_value.max__items()();
  else single_value->field_max__items = OMIT_VALUE;
} else {
  single_value->field_max__items.clean_up();
}
if (other_value.node().is_bound()) {
  single_value->field_node = other_value.node();
} else {
  single_value->field_node.clean_up();
}
if (other_value.subid().is_bound()) {
  if (other_value.subid().ispresent()) single_value->field_subid = other_value.subid()();
  else single_value->field_subid = OMIT_VALUE;
} else {
  single_value->field_subid.clean_up();
}
if (other_value.item__list().is_bound()) {
  single_value->field_item__list = other_value.item__list();
} else {
  single_value->field_item__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Items_template::copy_template(const Items_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.max__items().get_selection()) {
single_value->field_max__items = other_value.max__items();
} else {
single_value->field_max__items.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subid().get_selection()) {
single_value->field_subid = other_value.subid();
} else {
single_value->field_subid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.item__list().get_selection()) {
single_value->field_item__list = other_value.item__list();
} else {
single_value->field_item__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Items_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.");
break;
}
set_selection(other_value);
}

Items_template::Items_template()
{
}

Items_template::Items_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Items_template::Items_template(const Items& other_value)
{
copy_value(other_value);
}

Items_template::Items_template(const OPTIONAL<Items>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Items&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Items from an unbound optional field.");
}
}

Items_template::Items_template(const Items_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Items_template::~Items_template()
{
clean_up();
}

Items_template& Items_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Items_template& Items_template::operator=(const Items& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Items_template& Items_template::operator=(const OPTIONAL<Items>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Items&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Items.");
}
return *this;
}

Items_template& Items_template::operator=(const Items_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Items_template::match(const Items& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.max__items().is_bound()) return FALSE;
if((other_value.max__items().ispresent() ? !single_value->field_max__items.match((const INTEGER&)other_value.max__items()) : !single_value->field_max__items.match_omit()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if(!single_value->field_node.match(other_value.node()))return FALSE;
if(!other_value.subid().is_bound()) return FALSE;
if((other_value.subid().ispresent() ? !single_value->field_subid.match((const UNIVERSAL_CHARSTRING&)other_value.subid()) : !single_value->field_subid.match_omit()))return FALSE;
if(!other_value.item__list().is_bound()) return FALSE;
if(!single_value->field_item__list.match(other_value.item__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.");
}
return FALSE;
}

boolean Items_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_max__items.is_omit() || single_value->field_max__items.is_bound()) return TRUE;
if (single_value->field_node.is_bound()) return TRUE;
if (single_value->field_subid.is_omit() || single_value->field_subid.is_bound()) return TRUE;
if (single_value->field_item__list.is_bound()) return TRUE;
return FALSE;
}

boolean Items_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_max__items.is_omit() && !single_value->field_max__items.is_value()) return FALSE;
if (!single_value->field_node.is_value()) return FALSE;
if (!single_value->field_subid.is_omit() && !single_value->field_subid.is_value()) return FALSE;
if (!single_value->field_item__list.is_value()) return FALSE;
return TRUE;
}

void Items_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Items Items_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Items.");
Items ret_val;
if (single_value->field_max__items.is_omit()) ret_val.max__items() = OMIT_VALUE;
else if (single_value->field_max__items.is_bound()) {
ret_val.max__items() = single_value->field_max__items.valueof();
}
if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_subid.is_omit()) ret_val.subid() = OMIT_VALUE;
else if (single_value->field_subid.is_bound()) {
ret_val.subid() = single_value->field_subid.valueof();
}
if (single_value->field_item__list.is_bound()) {
ret_val.item__list() = single_value->field_item__list.valueof();
}
return ret_val;
}

void Items_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Items.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Items_template[list_length];
}

Items_template& Items_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Items.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Items.");
return value_list.list_value[list_index];
}

INTEGER_template& Items_template::max__items()
{
set_specific();
return single_value->field_max__items;
}

const INTEGER_template& Items_template::max__items() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field max_items of a non-specific template of type @http_jabber_org_protocol_pubsub.Items.");
return single_value->field_max__items;
}

UNIVERSAL_CHARSTRING_template& Items_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Items_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Items.");
return single_value->field_node;
}

UNIVERSAL_CHARSTRING_template& Items_template::subid()
{
set_specific();
return single_value->field_subid;
}

const UNIVERSAL_CHARSTRING_template& Items_template::subid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subid of a non-specific template of type @http_jabber_org_protocol_pubsub.Items.");
return single_value->field_subid;
}

Items_item__list_template& Items_template::item__list()
{
set_specific();
return single_value->field_item__list;
}

const Items_item__list_template& Items_template::item__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field item_list of a non-specific template of type @http_jabber_org_protocol_pubsub.Items.");
return single_value->field_item__list;
}

int Items_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_max__items.is_present()) ret_val++;
      if (single_value->field_subid.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Items containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.");
  }
  return 0;
}

void Items_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ max_items := ");
single_value->field_max__items.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", subid := ");
single_value->field_subid.log();
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Items_template::log_match(const Items& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.max__items().ispresent()){
if(!single_value->field_max__items.match(match_value.max__items())){
TTCN_Logger::log_logmatch_info(".max_items");
single_value->field_max__items.log_match(match_value.max__items());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_max__items.match_omit()){
 TTCN_Logger::log_logmatch_info(".max_items := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_max__items.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.subid().ispresent()){
if(!single_value->field_subid.match(match_value.subid())){
TTCN_Logger::log_logmatch_info(".subid");
single_value->field_subid.log_match(match_value.subid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subid.match_omit()){
 TTCN_Logger::log_logmatch_info(".subid := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subid.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_item__list.match(match_value.item__list())){
TTCN_Logger::log_logmatch_info(".item_list");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ max_items := ");
if (match_value.max__items().ispresent()) single_value->field_max__items.log_match(match_value.max__items());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_max__items.log();
if (single_value->field_max__items.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::log_event_str(", subid := ");
if (match_value.subid().ispresent()) single_value->field_subid.log_match(match_value.subid());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subid.log();
if (single_value->field_subid.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Items_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_max__items.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_subid.encode_text(text_buf);
single_value->field_item__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Items.");
}
}

void Items_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_max__items.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_subid.decode_text(text_buf);
single_value->field_item__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Items_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Items.");
}
}

void Items_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Items'");
    }
    if (strcmp("max_items", param_field) == 0) {
      max__items().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Items'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Items has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) max__items().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "max_items")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          max__items().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Items: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Items");
  }
  is_ifpresent = param.get_ifpresent();
}

void Items_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_max__items.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items");
single_value->field_subid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items");
single_value->field_item__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Items");
}

boolean Items_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Items_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Item Publish_item__list::UNBOUND_ELEM;
Publish_item__list::Publish_item__list()
{
val_ptr = NULL;
}

Publish_item__list::Publish_item__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Publish_item__list::Publish_item__list(const Publish_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Publish_item__list::~Publish_item__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Publish_item__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Publish_item__list& Publish_item__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Publish_item__list& Publish_item__list::operator=(const Publish_item__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Publish_item__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return val_ptr->n_elements == 0 ;
}

boolean Publish_item__list::operator==(const Publish_item__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Item& Publish_item__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Publish.item_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Item;
}
return *val_ptr->value_elements[index_value];
}

Item& Publish_item__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return (*this)[(int)index_value];
}

const Item& Publish_item__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Publish.item_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Publish.item_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Item& Publish_item__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return (*this)[(int)index_value];
}

Publish_item__list Publish_item__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Publish_item__list Publish_item__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Publish_item__list Publish_item__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Publish_item__list Publish_item__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Publish_item__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Item(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Publish_item__list Publish_item__list::operator+(const Publish_item__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Publish.item_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Publish_item__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Item(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Publish_item__list Publish_item__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Publish.item_list","element");
Publish_item__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Publish_item__list Publish_item__list::replace(int index, int len, const Publish_item__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Publish.item_list","element");
Publish_item__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Item(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Item(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Publish_item__list Publish_item__list::replace(int index, int len, const Publish_item__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Publish_item__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Publish.item_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Publish_item__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Publish_item__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return val_ptr->n_elements;
}

int Publish_item__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Publish_item__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Publish_item__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Publish.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Publish.item_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Publish.item_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Publish_item__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Publish_item__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Publish_item__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
val_ptr->value_elements = (Item**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Item;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Publish_item__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Publish_item__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Publish_item__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Item::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Publish_item__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Publish_item__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Publish_item__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Publish_item__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Publish_item__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Item* val = new Item;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Item**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Publish_item__list_template::copy_value(const Publish_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Publish.item_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Item_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Publish_item__list_template::copy_template(const Publish_item__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Item_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Publish_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
break;
}
set_selection(other_value);
}

boolean Publish_item__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Publish_item__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Publish_item__list*)value_ptr)[value_index]);
else return ((const Publish_item__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Publish_item__list_template::Publish_item__list_template()
{
}

Publish_item__list_template::Publish_item__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Publish_item__list_template::Publish_item__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Publish_item__list_template::Publish_item__list_template(const Publish_item__list& other_value)
{
copy_value(other_value);
}

Publish_item__list_template::Publish_item__list_template(const OPTIONAL<Publish_item__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Publish_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Publish.item_list from an unbound optional field.");
}
}

Publish_item__list_template::Publish_item__list_template(const Publish_item__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Publish_item__list_template::~Publish_item__list_template()
{
clean_up();
}

void Publish_item__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Publish_item__list_template& Publish_item__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Publish_item__list_template& Publish_item__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Publish_item__list_template& Publish_item__list_template::operator=(const Publish_item__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Publish_item__list_template& Publish_item__list_template::operator=(const OPTIONAL<Publish_item__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Publish_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
}
return *this;
}

Publish_item__list_template& Publish_item__list_template::operator=(const Publish_item__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Item_template& Publish_item__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Publish.item_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Publish.item_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Item_template& Publish_item__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return (*this)[(int)index_value];
}

const Item_template& Publish_item__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Publish.item_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Publish.item_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Item_template& Publish_item__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return (*this)[(int)index_value];
}

void Publish_item__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Publish_item__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Publish_item__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish.item_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.item_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Publish.item_list");
}

boolean Publish_item__list_template::match(const Publish_item__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
}
return FALSE;
}

boolean Publish_item__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Publish_item__list Publish_item__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
Publish_item__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Publish_item__list Publish_item__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Publish_item__list Publish_item__list_template::replace(int index, int len, const Publish_item__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Publish_item__list Publish_item__list_template::replace(int index, int len, const Publish_item__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Publish_item__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Publish_item__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
}
set_selection(template_type);
}

Publish_item__list_template& Publish_item__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return value_list.list_value[list_index];
}

void Publish_item__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Publish_item__list_template::log_match(const Publish_item__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Publish_item__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
}
}

void Publish_item__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Item_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Publish_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
}
}

boolean Publish_item__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Publish_item__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Publish_item__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Publish.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Publish.item_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Publish_item__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Publish.item_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Publish.item_list");
}

Publish::Publish()
{
  bound_flag = FALSE;
}

Publish::Publish(const UNIVERSAL_CHARSTRING& par_node,
    const Publish_item__list& par_item__list)
  :   field_node(par_node),
  field_item__list(par_item__list)
{
  bound_flag = TRUE;
}

Publish::Publish(const Publish& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Publish.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
else field_item__list.clean_up();
}

void Publish::clean_up()
{
field_node.clean_up();
field_item__list.clean_up();
bound_flag = FALSE;
}

Publish& Publish::operator=(const Publish& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Publish.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
  else field_item__list.clean_up();
}
return *this;
}

boolean Publish::operator==(const Publish& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_item__list==other_value.field_item__list;
}

boolean Publish::is_bound() const
{
if (bound_flag) return TRUE;
if(field_node.is_bound()) return TRUE;
if(field_item__list.is_bound()) return TRUE;
return FALSE;
}
boolean Publish::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_node.is_value()) return FALSE;
if(!field_item__list.is_value()) return FALSE;
return TRUE;
}
int Publish::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Publish");
  return 2;
}

void Publish::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", item_list := ");
field_item__list.log();
TTCN_Logger::log_event_str(" }");
}

void Publish::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Publish'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Publish'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Publish has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Publish: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Publish");
  }
}

void Publish::set_implicit_omit()
{
if (node().is_bound()) node().set_implicit_omit();
if (item__list().is_bound()) item__list().set_implicit_omit();
}

void Publish::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Publish.");
field_node.encode_text(text_buf);
field_item__list.encode_text(text_buf);
}

void Publish::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_item__list.decode_text(text_buf);
}

void Publish::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Publish::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Publish::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Publish_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_item__list.collect_ns(Publish_item__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Publish::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Publish_node_xer_, flavor)) return true;
  return false;
}

int Publish::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Publish_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("item_list': ");
  sub_len += field_item__list.XER_encode(Publish_item__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Publish::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Publish_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Publish_node_xer_.dfeValue);
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Publish_node_xer_, 1) && check_namespace(ns_uri, Publish_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Publish_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_node.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'node'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Publish_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_item__list = *static_cast<const Publish_item__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("item_list': ");
    field_item__list.XER_decode(Publish_item__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Publish::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Publish.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Publish_node_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "item_list");
    enc_len += field_item__list.JSON_encode(Publish_item__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Publish::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Publish_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "item_list", name_len)) {
        int ret_val = field_item__list.JSON_decode(Publish_item__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "item_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "node");
    return JSON_ERROR_FATAL;
  }
  if (!field_item__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "item_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Publish_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
Publish_item__list_template field_item__list;
};

void Publish_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_VALUE;
single_value->field_item__list = ANY_VALUE;
}
}
}

void Publish_template::copy_value(const Publish& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  single_value->field_node = other_value.node();
} else {
  single_value->field_node.clean_up();
}
if (other_value.item__list().is_bound()) {
  single_value->field_item__list = other_value.item__list();
} else {
  single_value->field_item__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Publish_template::copy_template(const Publish_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.item__list().get_selection()) {
single_value->field_item__list = other_value.item__list();
} else {
single_value->field_item__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Publish_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.");
break;
}
set_selection(other_value);
}

Publish_template::Publish_template()
{
}

Publish_template::Publish_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Publish_template::Publish_template(const Publish& other_value)
{
copy_value(other_value);
}

Publish_template::Publish_template(const OPTIONAL<Publish>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Publish&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Publish from an unbound optional field.");
}
}

Publish_template::Publish_template(const Publish_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Publish_template::~Publish_template()
{
clean_up();
}

Publish_template& Publish_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Publish_template& Publish_template::operator=(const Publish& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Publish_template& Publish_template::operator=(const OPTIONAL<Publish>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Publish&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Publish.");
}
return *this;
}

Publish_template& Publish_template::operator=(const Publish_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Publish_template::match(const Publish& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if(!single_value->field_node.match(other_value.node()))return FALSE;
if(!other_value.item__list().is_bound()) return FALSE;
if(!single_value->field_item__list.match(other_value.item__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.");
}
return FALSE;
}

boolean Publish_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_bound()) return TRUE;
if (single_value->field_item__list.is_bound()) return TRUE;
return FALSE;
}

boolean Publish_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_value()) return FALSE;
if (!single_value->field_item__list.is_value()) return FALSE;
return TRUE;
}

void Publish_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Publish Publish_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Publish.");
Publish ret_val;
if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_item__list.is_bound()) {
ret_val.item__list() = single_value->field_item__list.valueof();
}
return ret_val;
}

void Publish_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Publish.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Publish_template[list_length];
}

Publish_template& Publish_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Publish.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Publish.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Publish_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Publish_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Publish.");
return single_value->field_node;
}

Publish_item__list_template& Publish_template::item__list()
{
set_specific();
return single_value->field_item__list;
}

const Publish_item__list_template& Publish_template::item__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field item_list of a non-specific template of type @http_jabber_org_protocol_pubsub.Publish.");
return single_value->field_item__list;
}

int Publish_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 2;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Publish containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.");
  }
  return 0;
}

void Publish_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Publish_template::log_match(const Publish& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if(!single_value->field_item__list.match(match_value.item__list())){
TTCN_Logger::log_logmatch_info(".item_list");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Publish_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_item__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Publish.");
}
}

void Publish_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_item__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Publish_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Publish.");
}
}

void Publish_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Publish'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Publish'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Publish has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Publish: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Publish");
  }
  is_ifpresent = param.get_ifpresent();
}

void Publish_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Publish");
single_value->field_item__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Publish");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Publish");
}

boolean Publish_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Publish_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Item Retract_item__list::UNBOUND_ELEM;
Retract_item__list::Retract_item__list()
{
val_ptr = NULL;
}

Retract_item__list::Retract_item__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Retract_item__list::Retract_item__list(const Retract_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Retract_item__list::~Retract_item__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Retract_item__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Retract_item__list& Retract_item__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Retract_item__list& Retract_item__list::operator=(const Retract_item__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Retract_item__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return val_ptr->n_elements == 0 ;
}

boolean Retract_item__list::operator==(const Retract_item__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Item& Retract_item__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Retract.item_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Item;
}
return *val_ptr->value_elements[index_value];
}

Item& Retract_item__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return (*this)[(int)index_value];
}

const Item& Retract_item__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Retract.item_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Retract.item_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Item& Retract_item__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return (*this)[(int)index_value];
}

Retract_item__list Retract_item__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Retract_item__list Retract_item__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Retract_item__list Retract_item__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Retract_item__list Retract_item__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Retract_item__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Item(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Retract_item__list Retract_item__list::operator+(const Retract_item__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Retract.item_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Retract_item__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Item(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Retract_item__list Retract_item__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Retract.item_list","element");
Retract_item__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Retract_item__list Retract_item__list::replace(int index, int len, const Retract_item__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Retract.item_list","element");
Retract_item__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Item(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Item(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Item(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Retract_item__list Retract_item__list::replace(int index, int len, const Retract_item__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Retract_item__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Item**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Item(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Retract.item_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Item**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Retract_item__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Retract_item__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return val_ptr->n_elements;
}

int Retract_item__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Retract_item__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Retract_item__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Retract.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Retract.item_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Retract.item_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Retract_item__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Retract_item__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Retract_item__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
val_ptr->value_elements = (Item**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Item;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Retract_item__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Retract_item__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Retract_item__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Item::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Retract_item__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Retract_item__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Retract_item__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Retract_item__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Retract_item__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Item* val = new Item;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Item**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Retract_item__list_template::copy_value(const Retract_item__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Retract.item_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Item_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Retract_item__list_template::copy_template(const Retract_item__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Item_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Item_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Retract_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
break;
}
set_selection(other_value);
}

boolean Retract_item__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Retract_item__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Retract_item__list*)value_ptr)[value_index]);
else return ((const Retract_item__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Retract_item__list_template::Retract_item__list_template()
{
}

Retract_item__list_template::Retract_item__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Retract_item__list_template::Retract_item__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Retract_item__list_template::Retract_item__list_template(const Retract_item__list& other_value)
{
copy_value(other_value);
}

Retract_item__list_template::Retract_item__list_template(const OPTIONAL<Retract_item__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Retract_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Retract.item_list from an unbound optional field.");
}
}

Retract_item__list_template::Retract_item__list_template(const Retract_item__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Retract_item__list_template::~Retract_item__list_template()
{
clean_up();
}

void Retract_item__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Retract_item__list_template& Retract_item__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Retract_item__list_template& Retract_item__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Retract_item__list_template& Retract_item__list_template::operator=(const Retract_item__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Retract_item__list_template& Retract_item__list_template::operator=(const OPTIONAL<Retract_item__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Retract_item__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
}
return *this;
}

Retract_item__list_template& Retract_item__list_template::operator=(const Retract_item__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Item_template& Retract_item__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Retract.item_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Retract.item_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Item_template& Retract_item__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return (*this)[(int)index_value];
}

const Item_template& Retract_item__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Retract.item_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Retract.item_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Item_template& Retract_item__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return (*this)[(int)index_value];
}

void Retract_item__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Item_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Item_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Retract_item__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Retract_item__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract.item_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.item_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Retract.item_list");
}

boolean Retract_item__list_template::match(const Retract_item__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
}
return FALSE;
}

boolean Retract_item__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Retract_item__list Retract_item__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
Retract_item__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Retract_item__list Retract_item__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Retract_item__list Retract_item__list_template::replace(int index, int len, const Retract_item__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Retract_item__list Retract_item__list_template::replace(int index, int len, const Retract_item__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Retract_item__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Retract_item__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
}
set_selection(template_type);
}

Retract_item__list_template& Retract_item__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return value_list.list_value[list_index];
}

void Retract_item__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Retract_item__list_template::log_match(const Retract_item__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Retract_item__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
}
}

void Retract_item__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
single_value.value_elements = (Item_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Item_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Retract_item__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
}
}

boolean Retract_item__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Retract_item__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Retract_item__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Retract.item_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Retract.item_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Retract_item__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract.item_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract.item_list");
}

Retract::Retract()
{
  bound_flag = FALSE;
}

Retract::Retract(const UNIVERSAL_CHARSTRING& par_node,
    const OPTIONAL<BOOLEAN>& par_notify,
    const Retract_item__list& par_item__list)
  :   field_node(par_node),
  field_notify(par_notify),
  field_item__list(par_item__list)
{
  bound_flag = TRUE;
}

Retract::Retract(const Retract& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Retract.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.notify().is_bound()) field_notify = other_value.notify();
else field_notify.clean_up();
if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
else field_item__list.clean_up();
}

void Retract::clean_up()
{
field_node.clean_up();
field_notify.clean_up();
field_item__list.clean_up();
bound_flag = FALSE;
}

Retract& Retract::operator=(const Retract& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Retract.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.notify().is_bound()) field_notify = other_value.notify();
  else field_notify.clean_up();
  if (other_value.item__list().is_bound()) field_item__list = other_value.item__list();
  else field_item__list.clean_up();
}
return *this;
}

boolean Retract::operator==(const Retract& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_notify==other_value.field_notify
  && field_item__list==other_value.field_item__list;
}

boolean Retract::is_bound() const
{
if (bound_flag) return TRUE;
if(field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_notify.get_selection() || field_notify.is_bound()) return TRUE;
if(field_item__list.is_bound()) return TRUE;
return FALSE;
}
boolean Retract::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_notify.get_selection() && !field_notify.is_value()) return FALSE;
if(!field_item__list.is_value()) return FALSE;
return TRUE;
}
int Retract::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Retract");
  int ret_val = 2;
  if (field_notify.ispresent()) ret_val++;
  return ret_val;
}

void Retract::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", notify := ");
field_notify.log();
TTCN_Logger::log_event_str(", item_list := ");
field_item__list.log();
TTCN_Logger::log_event_str(" }");
}

void Retract::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Retract'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("notify", param_field) == 0) {
      notify().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Retract'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Retract has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) notify().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "notify")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          notify().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Retract: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Retract");
  }
}

void Retract::set_implicit_omit()
{
if (node().is_bound()) node().set_implicit_omit();
if (!notify().is_bound()) notify() = OMIT_VALUE;
else notify().set_implicit_omit();
if (item__list().is_bound()) item__list().set_implicit_omit();
}

void Retract::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Retract.");
field_node.encode_text(text_buf);
field_notify.encode_text(text_buf);
field_item__list.encode_text(text_buf);
}

void Retract::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_notify.decode_text(text_buf);
field_item__list.decode_text(text_buf);
}

void Retract::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Retract::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Retract::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Retract_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_notify.collect_ns(Retract_notify_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_item__list.collect_ns(Retract_item__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Retract::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Retract_node_xer_, flavor)) return true;
  return false;
}

int Retract::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Retract_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("notify': ");
  tmp_len = field_notify.XER_encode(Retract_notify_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("item_list': ");
  sub_len += field_item__list.XER_encode(Retract_item__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Retract::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Retract_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Retract_node_xer_.dfeValue);
  if (Retract_notify_xer_.dfeValue) field_notify = *static_cast<const BOOLEAN*>(Retract_notify_xer_.dfeValue);
  else field_notify = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Retract_node_xer_, 1) && check_namespace(ns_uri, Retract_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Retract_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Retract_notify_xer_, 1) && check_namespace(ns_uri, Retract_notify_xer_)) {
      ec_1.set_msg("notify': ");
      field_notify.XER_decode(Retract_notify_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_node.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'node'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Retract_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("notify': ");
    field_notify.XER_decode(Retract_notify_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_item__list = *static_cast<const Retract_item__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("item_list': ");
    field_item__list.XER_decode(Retract_item__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Retract::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Retract.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Retract_node_descr_, p_tok);
  }

  if (field_notify.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "notify");
    enc_len += field_notify.JSON_encode(Retract_notify_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "item_list");
    enc_len += field_item__list.JSON_encode(Retract_item__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Retract::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Retract_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (6 == name_len && 0 == strncmp(fld_name, "notify", name_len)) {
        int ret_val = field_notify.JSON_decode(Retract_notify_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "notify");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (9 == name_len && 0 == strncmp(fld_name, "item_list", name_len)) {
        int ret_val = field_item__list.JSON_decode(Retract_item__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "item_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "node");
    return JSON_ERROR_FATAL;
  }
  if (!field_notify.is_bound()) {
    field_notify = OMIT_VALUE;
  }
  if (!field_item__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "item_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Retract_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
BOOLEAN_template field_notify;
Retract_item__list_template field_item__list;
};

void Retract_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_VALUE;
single_value->field_notify = ANY_OR_OMIT;
single_value->field_item__list = ANY_VALUE;
}
}
}

void Retract_template::copy_value(const Retract& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  single_value->field_node = other_value.node();
} else {
  single_value->field_node.clean_up();
}
if (other_value.notify().is_bound()) {
  if (other_value.notify().ispresent()) single_value->field_notify = other_value.notify()();
  else single_value->field_notify = OMIT_VALUE;
} else {
  single_value->field_notify.clean_up();
}
if (other_value.item__list().is_bound()) {
  single_value->field_item__list = other_value.item__list();
} else {
  single_value->field_item__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Retract_template::copy_template(const Retract_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.notify().get_selection()) {
single_value->field_notify = other_value.notify();
} else {
single_value->field_notify.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.item__list().get_selection()) {
single_value->field_item__list = other_value.item__list();
} else {
single_value->field_item__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Retract_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.");
break;
}
set_selection(other_value);
}

Retract_template::Retract_template()
{
}

Retract_template::Retract_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Retract_template::Retract_template(const Retract& other_value)
{
copy_value(other_value);
}

Retract_template::Retract_template(const OPTIONAL<Retract>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Retract&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Retract from an unbound optional field.");
}
}

Retract_template::Retract_template(const Retract_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Retract_template::~Retract_template()
{
clean_up();
}

Retract_template& Retract_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Retract_template& Retract_template::operator=(const Retract& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Retract_template& Retract_template::operator=(const OPTIONAL<Retract>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Retract&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Retract.");
}
return *this;
}

Retract_template& Retract_template::operator=(const Retract_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Retract_template::match(const Retract& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if(!single_value->field_node.match(other_value.node()))return FALSE;
if(!other_value.notify().is_bound()) return FALSE;
if((other_value.notify().ispresent() ? !single_value->field_notify.match((const BOOLEAN&)other_value.notify()) : !single_value->field_notify.match_omit()))return FALSE;
if(!other_value.item__list().is_bound()) return FALSE;
if(!single_value->field_item__list.match(other_value.item__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.");
}
return FALSE;
}

boolean Retract_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_bound()) return TRUE;
if (single_value->field_notify.is_omit() || single_value->field_notify.is_bound()) return TRUE;
if (single_value->field_item__list.is_bound()) return TRUE;
return FALSE;
}

boolean Retract_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_value()) return FALSE;
if (!single_value->field_notify.is_omit() && !single_value->field_notify.is_value()) return FALSE;
if (!single_value->field_item__list.is_value()) return FALSE;
return TRUE;
}

void Retract_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Retract Retract_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Retract.");
Retract ret_val;
if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_notify.is_omit()) ret_val.notify() = OMIT_VALUE;
else if (single_value->field_notify.is_bound()) {
ret_val.notify() = single_value->field_notify.valueof();
}
if (single_value->field_item__list.is_bound()) {
ret_val.item__list() = single_value->field_item__list.valueof();
}
return ret_val;
}

void Retract_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Retract.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Retract_template[list_length];
}

Retract_template& Retract_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Retract.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Retract.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Retract_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Retract_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Retract.");
return single_value->field_node;
}

BOOLEAN_template& Retract_template::notify()
{
set_specific();
return single_value->field_notify;
}

const BOOLEAN_template& Retract_template::notify() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field notify of a non-specific template of type @http_jabber_org_protocol_pubsub.Retract.");
return single_value->field_notify;
}

Retract_item__list_template& Retract_template::item__list()
{
set_specific();
return single_value->field_item__list;
}

const Retract_item__list_template& Retract_template::item__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field item_list of a non-specific template of type @http_jabber_org_protocol_pubsub.Retract.");
return single_value->field_item__list;
}

int Retract_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_notify.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Retract containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.");
  }
  return 0;
}

void Retract_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", notify := ");
single_value->field_notify.log();
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Retract_template::log_match(const Retract& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.notify().ispresent()){
if(!single_value->field_notify.match(match_value.notify())){
TTCN_Logger::log_logmatch_info(".notify");
single_value->field_notify.log_match(match_value.notify());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_notify.match_omit()){
 TTCN_Logger::log_logmatch_info(".notify := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_notify.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_item__list.match(match_value.item__list())){
TTCN_Logger::log_logmatch_info(".item_list");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::log_event_str(", notify := ");
if (match_value.notify().ispresent()) single_value->field_notify.log_match(match_value.notify());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_notify.log();
if (single_value->field_notify.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", item_list := ");
single_value->field_item__list.log_match(match_value.item__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Retract_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_notify.encode_text(text_buf);
single_value->field_item__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Retract.");
}
}

void Retract_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_notify.decode_text(text_buf);
single_value->field_item__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Retract_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Retract.");
}
}

void Retract_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Retract'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("notify", param_field) == 0) {
      notify().set_param(param);
      return;
    } else if (strcmp("item_list", param_field) == 0) {
      item__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Retract'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (3<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Retract has 3 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) notify().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) item__list().set_param(*param.get_elem(2));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "notify")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          notify().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "item_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          item__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Retract: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Retract");
  }
  is_ifpresent = param.get_ifpresent();
}

void Retract_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract");
single_value->field_notify.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract");
single_value->field_item__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Retract");
}

boolean Retract_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Retract_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Subscription::Subscription()
{
  bound_flag = FALSE;
}

Subscription::Subscription(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const OPTIONAL<Subscription_subscription>& par_subscription,
    const OPTIONAL<Subscribe__options>& par_subscribe__options)
  :   field_jid(par_jid),
  field_node(par_node),
  field_subid(par_subid),
  field_subscription(par_subscription),
  field_subscribe__options(par_subscribe__options)
{
  bound_flag = TRUE;
}

Subscription::Subscription(const Subscription& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscription.");
bound_flag = TRUE;
if (other_value.jid().is_bound()) field_jid = other_value.jid();
else field_jid.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.subid().is_bound()) field_subid = other_value.subid();
else field_subid.clean_up();
if (other_value.subscription().is_bound()) field_subscription = other_value.subscription();
else field_subscription.clean_up();
if (other_value.subscribe__options().is_bound()) field_subscribe__options = other_value.subscribe__options();
else field_subscribe__options.clean_up();
}

void Subscription::clean_up()
{
field_jid.clean_up();
field_node.clean_up();
field_subid.clean_up();
field_subscription.clean_up();
field_subscribe__options.clean_up();
bound_flag = FALSE;
}

Subscription& Subscription::operator=(const Subscription& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Subscription.");
  bound_flag = TRUE;
  if (other_value.jid().is_bound()) field_jid = other_value.jid();
  else field_jid.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.subid().is_bound()) field_subid = other_value.subid();
  else field_subid.clean_up();
  if (other_value.subscription().is_bound()) field_subscription = other_value.subscription();
  else field_subscription.clean_up();
  if (other_value.subscribe__options().is_bound()) field_subscribe__options = other_value.subscribe__options();
  else field_subscribe__options.clean_up();
}
return *this;
}

boolean Subscription::operator==(const Subscription& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_jid==other_value.field_jid
  && field_node==other_value.field_node
  && field_subid==other_value.field_subid
  && field_subscription==other_value.field_subscription
  && field_subscribe__options==other_value.field_subscribe__options;
}

boolean Subscription::is_bound() const
{
if (bound_flag) return TRUE;
if(field_jid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subid.get_selection() || field_subid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subscription.get_selection() || field_subscription.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subscribe__options.get_selection() || field_subscribe__options.is_bound()) return TRUE;
return FALSE;
}
boolean Subscription::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_jid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subid.get_selection() && !field_subid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subscription.get_selection() && !field_subscription.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subscribe__options.get_selection() && !field_subscribe__options.is_value()) return FALSE;
return TRUE;
}
int Subscription::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscription");
  int ret_val = 1;
  if (field_node.ispresent()) ret_val++;
  if (field_subid.ispresent()) ret_val++;
  if (field_subscription.ispresent()) ret_val++;
  if (field_subscribe__options.ispresent()) ret_val++;
  return ret_val;
}

void Subscription::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ jid := ");
field_jid.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", subid := ");
field_subid.log();
TTCN_Logger::log_event_str(", subscription := ");
field_subscription.log();
TTCN_Logger::log_event_str(", subscribe_options := ");
field_subscribe__options.log();
TTCN_Logger::log_event_str(" }");
}

void Subscription::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Subscription'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else if (strcmp("subscribe_options", param_field) == 0) {
      subscribe__options().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Subscription'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Subscription has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) subscription().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) subscribe__options().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscription")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscription().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscribe_options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscribe__options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscription: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Subscription");
  }
}

void Subscription::set_implicit_omit()
{
if (jid().is_bound()) jid().set_implicit_omit();
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (!subid().is_bound()) subid() = OMIT_VALUE;
else subid().set_implicit_omit();
if (!subscription().is_bound()) subscription() = OMIT_VALUE;
else subscription().set_implicit_omit();
if (!subscribe__options().is_bound()) subscribe__options() = OMIT_VALUE;
else subscribe__options().set_implicit_omit();
}

void Subscription::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscription.");
field_jid.encode_text(text_buf);
field_node.encode_text(text_buf);
field_subid.encode_text(text_buf);
field_subscription.encode_text(text_buf);
field_subscribe__options.encode_text(text_buf);
}

void Subscription::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_jid.decode_text(text_buf);
field_node.decode_text(text_buf);
field_subid.decode_text(text_buf);
field_subscription.decode_text(text_buf);
field_subscribe__options.decode_text(text_buf);
}

void Subscription::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscription::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subscription::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_jid.collect_ns(Subscription_jid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Subscription_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subid.collect_ns(Subscription_subid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subscription.collect_ns(Subscription_subscription_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subscribe__options.collect_ns(Subscription_subscribe__options_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  if((p_td.xer_bits & USE_NIL) && !field_subscribe__options.ispresent()) {
    collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
    const namespace_t *c_ns = p_td.my_module->get_controlns();
    collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
  }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subscription::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Subscription_jid_xer_, flavor)) return true;
  return false;
}

int Subscription::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("jid': ");
  tmp_len = field_jid.XER_encode(Subscription_jid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Subscription_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("subid': ");
  tmp_len = field_subid.XER_encode(Subscription_subid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("subscription': ");
  tmp_len = field_subscription.XER_encode(Subscription_subscription_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  bool nil_attribute = e_xer && (p_td.xer_bits & USE_NIL) && !field_subscribe__options.ispresent();
  if (nil_attribute) {
    const namespace_t *control_ns = p_td.my_module->get_controlns();
    p_buf.put_c(' ');
    p_buf.put_s(strlen(control_ns->px), (cbyte*)control_ns->px);
    p_buf.put_c(':');
    p_buf.put_s(10, (cbyte*)"nil='true'");
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("subscribe_options': ");
  sub_len += field_subscribe__options.XER_encode(Subscription_subscribe__options_xer_, p_buf, p_flavor| (p_td.xer_bits & USE_NIL), p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subscription::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  boolean nil_attribute = FALSE;
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Subscription_jid_xer_.dfeValue) field_jid = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscription_jid_xer_.dfeValue);
  if (Subscription_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscription_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  if (Subscription_subid_xer_.dfeValue) field_subid = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscription_subid_xer_.dfeValue);
  else field_subid = OMIT_VALUE;
  if (Subscription_subscription_xer_.dfeValue) field_subscription = *static_cast<const Subscription_subscription*>(Subscription_subscription_xer_.dfeValue);
  else field_subscription = OMIT_VALUE;
  static const namespace_t *control_ns = p_td.my_module->get_controlns();
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    const char *prefix = (const char*)p_reader.Prefix();
    if (prefix && !strcmp(prefix, control_ns->px)
      && !strcmp((const char*)p_reader.LocalName(), "nil")){
      const char *value = (const char*)p_reader.Value();
      if (!strcmp(value, "1") || !strcmp(value, "true")) {
        field_subscribe__options = OMIT_VALUE;
        nil_attribute = TRUE;
      }
    } else    if (check_name(attr_name, Subscription_jid_xer_, 1) && check_namespace(ns_uri, Subscription_jid_xer_)) {
      ec_1.set_msg("jid': ");
      field_jid.XER_decode(Subscription_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Subscription_node_xer_, 1) && check_namespace(ns_uri, Subscription_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Subscription_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Subscription_subid_xer_, 1) && check_namespace(ns_uri, Subscription_subid_xer_)) {
      ec_1.set_msg("subid': ");
      field_subid.XER_decode(Subscription_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Subscription_subscription_xer_, 1) && check_namespace(ns_uri, Subscription_subscription_xer_)) {
      ec_1.set_msg("subscription': ");
      field_subscription.XER_decode(Subscription_subscription_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_jid.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'jid'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("jid': ");
    field_jid.XER_decode(Subscription_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Subscription_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("subid': ");
    field_subid.XER_decode(Subscription_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("subscription': ");
    field_subscription.XER_decode(Subscription_subscription_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (nil_attribute) {
    p_reader.MoveToElement();
  } else {
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_subscribe__options = *static_cast<const Subscribe__options*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("subscribe_options': ");
    field_subscribe__options.XER_decode(Subscription_subscribe__options_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // use_nil
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subscription::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscription.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "jid");
    enc_len += field_jid.JSON_encode(Subscription_jid_descr_, p_tok);
  }

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Subscription_node_descr_, p_tok);
  }

  if (field_subid.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subid");
    enc_len += field_subid.JSON_encode(Subscription_subid_descr_, p_tok);
  }

  if (field_subscription.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscription");
    enc_len += field_subscription.JSON_encode(Subscription_subscription_descr_, p_tok);
  }

  if (field_subscribe__options.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscribe_options");
    enc_len += field_subscribe__options.JSON_encode(Subscription_subscribe__options_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subscription::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "jid", name_len)) {
        int ret_val = field_jid.JSON_decode(Subscription_jid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "jid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Subscription_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "subid", name_len)) {
        int ret_val = field_subid.JSON_decode(Subscription_subid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (12 == name_len && 0 == strncmp(fld_name, "subscription", name_len)) {
        int ret_val = field_subscription.JSON_decode(Subscription_subscription_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscription");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (17 == name_len && 0 == strncmp(fld_name, "subscribe_options", name_len)) {
        int ret_val = field_subscribe__options.JSON_decode(Subscription_subscribe__options_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscribe_options");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_jid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "jid");
    return JSON_ERROR_FATAL;
  }
  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_subid.is_bound()) {
    field_subid = OMIT_VALUE;
  }
  if (!field_subscription.is_bound()) {
    field_subscription = OMIT_VALUE;
  }
  if (!field_subscribe__options.is_bound()) {
    field_subscribe__options = OMIT_VALUE;
  }

  return dec_len;
}

struct Subscription_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_jid;
UNIVERSAL_CHARSTRING_template field_node;
UNIVERSAL_CHARSTRING_template field_subid;
Subscription_subscription_template field_subscription;
Subscribe__options_template field_subscribe__options;
};

void Subscription_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_jid = ANY_VALUE;
single_value->field_node = ANY_OR_OMIT;
single_value->field_subid = ANY_OR_OMIT;
single_value->field_subscription = ANY_OR_OMIT;
single_value->field_subscribe__options = ANY_OR_OMIT;
}
}
}

void Subscription_template::copy_value(const Subscription& other_value)
{
single_value = new single_value_struct;
if (other_value.jid().is_bound()) {
  single_value->field_jid = other_value.jid();
} else {
  single_value->field_jid.clean_up();
}
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.subid().is_bound()) {
  if (other_value.subid().ispresent()) single_value->field_subid = other_value.subid()();
  else single_value->field_subid = OMIT_VALUE;
} else {
  single_value->field_subid.clean_up();
}
if (other_value.subscription().is_bound()) {
  if (other_value.subscription().ispresent()) single_value->field_subscription = other_value.subscription()();
  else single_value->field_subscription = OMIT_VALUE;
} else {
  single_value->field_subscription.clean_up();
}
if (other_value.subscribe__options().is_bound()) {
  if (other_value.subscribe__options().ispresent()) single_value->field_subscribe__options = other_value.subscribe__options()();
  else single_value->field_subscribe__options = OMIT_VALUE;
} else {
  single_value->field_subscribe__options.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subscription_template::copy_template(const Subscription_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.jid().get_selection()) {
single_value->field_jid = other_value.jid();
} else {
single_value->field_jid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subid().get_selection()) {
single_value->field_subid = other_value.subid();
} else {
single_value->field_subid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subscription().get_selection()) {
single_value->field_subscription = other_value.subscription();
} else {
single_value->field_subscription.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subscribe__options().get_selection()) {
single_value->field_subscribe__options = other_value.subscribe__options();
} else {
single_value->field_subscribe__options.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscription_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscription.");
break;
}
set_selection(other_value);
}

Subscription_template::Subscription_template()
{
}

Subscription_template::Subscription_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscription_template::Subscription_template(const Subscription& other_value)
{
copy_value(other_value);
}

Subscription_template::Subscription_template(const OPTIONAL<Subscription>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscription&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscription from an unbound optional field.");
}
}

Subscription_template::Subscription_template(const Subscription_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subscription_template::~Subscription_template()
{
clean_up();
}

Subscription_template& Subscription_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscription_template& Subscription_template::operator=(const Subscription& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscription_template& Subscription_template::operator=(const OPTIONAL<Subscription>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscription&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscription.");
}
return *this;
}

Subscription_template& Subscription_template::operator=(const Subscription_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscription_template::match(const Subscription& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.jid().is_bound()) return FALSE;
if(!single_value->field_jid.match(other_value.jid()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.subid().is_bound()) return FALSE;
if((other_value.subid().ispresent() ? !single_value->field_subid.match((const UNIVERSAL_CHARSTRING&)other_value.subid()) : !single_value->field_subid.match_omit()))return FALSE;
if(!other_value.subscription().is_bound()) return FALSE;
if((other_value.subscription().ispresent() ? !single_value->field_subscription.match((const Subscription_subscription&)other_value.subscription()) : !single_value->field_subscription.match_omit()))return FALSE;
if(!other_value.subscribe__options().is_bound()) return FALSE;
if((other_value.subscribe__options().ispresent() ? !single_value->field_subscribe__options.match((const Subscribe__options&)other_value.subscribe__options()) : !single_value->field_subscribe__options.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscription.");
}
return FALSE;
}

boolean Subscription_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_jid.is_bound()) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_subid.is_omit() || single_value->field_subid.is_bound()) return TRUE;
if (single_value->field_subscription.is_omit() || single_value->field_subscription.is_bound()) return TRUE;
if (single_value->field_subscribe__options.is_omit() || single_value->field_subscribe__options.is_bound()) return TRUE;
return FALSE;
}

boolean Subscription_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_jid.is_value()) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_subid.is_omit() && !single_value->field_subid.is_value()) return FALSE;
if (!single_value->field_subscription.is_omit() && !single_value->field_subscription.is_value()) return FALSE;
if (!single_value->field_subscribe__options.is_omit() && !single_value->field_subscribe__options.is_value()) return FALSE;
return TRUE;
}

void Subscription_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscription Subscription_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
Subscription ret_val;
if (single_value->field_jid.is_bound()) {
ret_val.jid() = single_value->field_jid.valueof();
}
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_subid.is_omit()) ret_val.subid() = OMIT_VALUE;
else if (single_value->field_subid.is_bound()) {
ret_val.subid() = single_value->field_subid.valueof();
}
if (single_value->field_subscription.is_omit()) ret_val.subscription() = OMIT_VALUE;
else if (single_value->field_subscription.is_bound()) {
ret_val.subscription() = single_value->field_subscription.valueof();
}
if (single_value->field_subscribe__options.is_omit()) ret_val.subscribe__options() = OMIT_VALUE;
else if (single_value->field_subscribe__options.is_bound()) {
ret_val.subscribe__options() = single_value->field_subscribe__options.valueof();
}
return ret_val;
}

void Subscription_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Subscription.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscription_template[list_length];
}

Subscription_template& Subscription_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscription.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscription.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Subscription_template::jid()
{
set_specific();
return single_value->field_jid;
}

const UNIVERSAL_CHARSTRING_template& Subscription_template::jid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field jid of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
return single_value->field_jid;
}

UNIVERSAL_CHARSTRING_template& Subscription_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Subscription_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
return single_value->field_node;
}

UNIVERSAL_CHARSTRING_template& Subscription_template::subid()
{
set_specific();
return single_value->field_subid;
}

const UNIVERSAL_CHARSTRING_template& Subscription_template::subid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subid of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
return single_value->field_subid;
}

Subscription_subscription_template& Subscription_template::subscription()
{
set_specific();
return single_value->field_subscription;
}

const Subscription_subscription_template& Subscription_template::subscription() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subscription of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
return single_value->field_subscription;
}

Subscribe__options_template& Subscription_template::subscribe__options()
{
set_specific();
return single_value->field_subscribe__options;
}

const Subscribe__options_template& Subscription_template::subscribe__options() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subscribe_options of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscription.");
return single_value->field_subscribe__options;
}

int Subscription_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_node.is_present()) ret_val++;
      if (single_value->field_subid.is_present()) ret_val++;
      if (single_value->field_subscription.is_present()) ret_val++;
      if (single_value->field_subscribe__options.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscription containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscription.");
  }
  return 0;
}

void Subscription_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", subid := ");
single_value->field_subid.log();
TTCN_Logger::log_event_str(", subscription := ");
single_value->field_subscription.log();
TTCN_Logger::log_event_str(", subscribe_options := ");
single_value->field_subscribe__options.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscription_template::log_match(const Subscription& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_jid.match(match_value.jid())){
TTCN_Logger::log_logmatch_info(".jid");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.subid().ispresent()){
if(!single_value->field_subid.match(match_value.subid())){
TTCN_Logger::log_logmatch_info(".subid");
single_value->field_subid.log_match(match_value.subid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subid.match_omit()){
 TTCN_Logger::log_logmatch_info(".subid := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subid.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.subscription().ispresent()){
if(!single_value->field_subscription.match(match_value.subscription())){
TTCN_Logger::log_logmatch_info(".subscription");
single_value->field_subscription.log_match(match_value.subscription());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subscription.match_omit()){
 TTCN_Logger::log_logmatch_info(".subscription := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subscription.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.subscribe__options().ispresent()){
if(!single_value->field_subscribe__options.match(match_value.subscribe__options())){
TTCN_Logger::log_logmatch_info(".subscribe_options");
single_value->field_subscribe__options.log_match(match_value.subscribe__options());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subscribe__options.match_omit()){
 TTCN_Logger::log_logmatch_info(".subscribe_options := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subscribe__options.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::log_event_str(", node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", subid := ");
if (match_value.subid().ispresent()) single_value->field_subid.log_match(match_value.subid());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subid.log();
if (single_value->field_subid.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", subscription := ");
if (match_value.subscription().ispresent()) single_value->field_subscription.log_match(match_value.subscription());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subscription.log();
if (single_value->field_subscription.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", subscribe_options := ");
if (match_value.subscribe__options().ispresent()) single_value->field_subscribe__options.log_match(match_value.subscribe__options());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subscribe__options.log();
if (single_value->field_subscribe__options.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscription_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_jid.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_subid.encode_text(text_buf);
single_value->field_subscription.encode_text(text_buf);
single_value->field_subscribe__options.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscription.");
}
}

void Subscription_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_jid.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_subid.decode_text(text_buf);
single_value->field_subscription.decode_text(text_buf);
single_value->field_subscribe__options.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscription_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Subscription.");
}
}

void Subscription_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Subscription'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else if (strcmp("subscribe_options", param_field) == 0) {
      subscribe__options().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Subscription'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (5<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Subscription has 5 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) subscription().set_param(*param.get_elem(3));
    if (param.get_size()>4 && param.get_elem(4)->get_type()!=Module_Param::MP_NotUsed) subscribe__options().set_param(*param.get_elem(4));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscription")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscription().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscribe_options")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscribe__options().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscription: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Subscription");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscription_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_jid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
single_value->field_subid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
single_value->field_subscription.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
single_value->field_subscribe__options.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription");
}

boolean Subscription_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscription_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Subscription_subscription::Subscription_subscription()
{
enum_value = UNBOUND_VALUE;
}

Subscription_subscription::Subscription_subscription(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Initializing a variable of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription with invalid numeric value %d.", other_value);
enum_value = (enum_type)other_value;
}

Subscription_subscription::Subscription_subscription(enum_type other_value)
{
enum_value = other_value;
}

Subscription_subscription::Subscription_subscription(const Subscription_subscription& other_value)
: Base_Type()
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Copying an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
enum_value = other_value.enum_value;
}

Subscription_subscription& Subscription_subscription::operator=(int other_value)
{
if (!is_valid_enum(other_value)) TTCN_error("Assigning unknown numeric value %d to a variable of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", other_value);
enum_value = (enum_type)other_value;
return *this;
}

Subscription_subscription& Subscription_subscription::operator=(enum_type other_value)
{
enum_value = other_value;
return *this;
}

Subscription_subscription& Subscription_subscription::operator=(const Subscription_subscription& other_value)
{
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
enum_value = other_value.enum_value;
return *this;
}

boolean Subscription_subscription::operator==(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value == other_value;
}

boolean Subscription_subscription::operator==(const Subscription_subscription& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value == other_value.enum_value;
}

boolean Subscription_subscription::operator<(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value < other_value;
}

boolean Subscription_subscription::operator<(const Subscription_subscription& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value < other_value.enum_value;
}

boolean Subscription_subscription::operator>(enum_type other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value > other_value;
}

boolean Subscription_subscription::operator>(const Subscription_subscription& other_value) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("The left operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
if (other_value.enum_value == UNBOUND_VALUE) TTCN_error("The right operand of comparison is an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value > other_value.enum_value;
}

const char *Subscription_subscription::enum_to_str(enum_type enum_par, boolean txt)
{
switch (enum_par) {
case none__: if (txt) return "none"; else return "none_";
case pending: return "pending";
case subscribed: return "subscribed";
case unconfigured: return "unconfigured";
default: return "<unknown>";
}
}

Subscription_subscription::enum_type Subscription_subscription::str_to_enum(const char *str_par)
{
if (!strcmp(str_par, "none") || !strcmp(str_par, "none_")) return none__;
else if (!strcmp(str_par, "pending")) return pending;
else if (!strcmp(str_par, "subscribed")) return subscribed;
else if (!strcmp(str_par, "unconfigured")) return unconfigured;
else return UNKNOWN_VALUE;
}

boolean Subscription_subscription::is_valid_enum(int int_par)
{
switch (int_par) {
case 0:
case 1:
case 2:
case 3:
return TRUE;
default:
return FALSE;
}
}

int Subscription_subscription::enum2int(enum_type enum_par)
{
if (enum_par==UNBOUND_VALUE || enum_par==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par;
}

int Subscription_subscription::enum2int(const Subscription_subscription& enum_par)
{
if (enum_par.enum_value==UNBOUND_VALUE || enum_par.enum_value==UNKNOWN_VALUE) TTCN_error("The argument of function enum2int() is an %s value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", enum_par==UNBOUND_VALUE?"unbound":"invalid");
return enum_par.enum_value;
}

Subscription_subscription::operator Subscription_subscription::enum_type() const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Using the value of an unbound variable of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return enum_value;
}

void Subscription_subscription::log() const
{
if (enum_value != UNBOUND_VALUE) TTCN_Logger::log_event_enum(enum_to_str(enum_value), enum_value);
else TTCN_Logger::log_event_unbound();
}

void Subscription_subscription::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_VALUE, "enumerated value");
  if (param.get_type()!=Module_Param::MP_Enumerated) param.type_error("enumerated value", "@http_jabber_org_protocol_pubsub.Subscription.subscription");
  enum_value = str_to_enum(param.get_enumerated());
  if (!is_valid_enum(enum_value)) {
     param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
  }
}

void Subscription_subscription::encode_text(Text_Buf& text_buf) const
{
if (enum_value == UNBOUND_VALUE) TTCN_error("Text encoder: Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
text_buf.push_int(enum_value);
}

void Subscription_subscription::decode_text(Text_Buf& text_buf)
{
enum_value = (enum_type)text_buf.pull_int().get_val();
if (!is_valid_enum(enum_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", enum_value);
}

void Subscription_subscription::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(TRUE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscription_subscription::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Subscription_subscription::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean exer = is_exer(flavor);
  return check_name(name, xd, exer) && (!exer || check_namespace(uri, xd));
}

int Subscription_subscription::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  int encoded_length=(int)p_buf.get_len();
  const boolean e_xer = is_exer(p_flavor);
  p_flavor |= (SIMPLE_TYPE | BXER_EMPTY_ELEM);
  if (begin_xml(p_td, p_buf, p_flavor, p_indent, false) == -1) --encoded_length;
  if (!e_xer) p_buf.put_c('<');
  {
    const char * enumval = enum_to_str(enum_value, e_xer);
    p_buf.put_s(strlen(enumval), (const unsigned char*)enumval);
  }
  if (!e_xer) p_buf.put_s(2, (const unsigned char*)"/>");
  end_xml(p_td, p_buf, p_flavor, p_indent, false);
  return (int)p_buf.get_len() - encoded_length;
}

int Subscription_subscription::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  int rd_ok = 1, type;
  const int e_xer = is_exer(p_flavor);
  const boolean name_tag = !((!e_xer && is_record_of(p_flavor)) || (e_xer && ((p_td.xer_bits & UNTAGGED) ||(is_record_of(p_flavor) && is_exerlist(p_flavor)))));
  if (e_xer && ((p_td.xer_bits & XER_ATTRIBUTE) || is_exerlist(p_flavor))) {
    if ((p_td.xer_bits & XER_ATTRIBUTE)) verify_name(p_reader, p_td, e_xer);
    const char * value = (const char *)p_reader.Value();
    if (value) {
        enum_value = str_to_enum(value);
    }
  }
  else {
    if (name_tag)      for (; rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    for (; rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if (!e_xer && XML_READER_TYPE_ELEMENT == type) break;
      if (XML_READER_TYPE_TEXT == type) break;
    }
    const char *local_name = e_xer ? (const char *)p_reader.Value() : (const char *)p_reader.Name();
    if (!local_name) ; else    {
      for (; '\t'==*local_name || '\n'==*local_name; ++local_name) ;
      enum_value = str_to_enum(local_name);
    }
    if (name_tag)
      for (rd_ok = p_reader.Read(); rd_ok == 1; rd_ok = p_reader.Read()) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_END_ELEMENT == type) {
          rd_ok = p_reader.Read();
          break;
        }
      }
    else rd_ok = p_reader.Read();
  }
  if (e_xer && (p_flavor & EXIT_ON_ERROR) && UNKNOWN_VALUE == enum_value) clean_up();
  int decoded_length = 0;
  return decoded_length;
}

int Subscription_subscription::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (enum_value == UNBOUND_VALUE) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
    return -1;
  }

  char* tmp_str = mprintf("\"%s\"", enum_to_str(enum_value));
  int enc_len = p_tok.put_next_token(JSON_TOKEN_STRING, tmp_str);
  Free(tmp_str);
  return enc_len;
}

int Subscription_subscription::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  char* value = 0;
  size_t value_len = 0;
  boolean error = false;
  int dec_len = 0;
  boolean use_default = p_td.json->default_value && 0 == p_tok.get_buffer_length();
  if (use_default) {
    value = (char*)p_td.json->default_value;
    value_len = strlen(value);
  } else {
    dec_len = p_tok.get_next_token(&token, &value, &value_len);
  }
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_STRING == token || use_default) {
    if (use_default || (value_len > 2 && value[0] == '\"' && value[value_len - 1] == '\"')) {
      if (!use_default) value[value_len - 1] = 0;
      enum_value = str_to_enum(value + (use_default ? 0 : 1));
      if (!use_default) value[value_len - 1] = '\"';
      if (UNKNOWN_VALUE == enum_value) {
        error = true;
      }
    } else {
      error = true;
    }
  } else {
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_INVALID_TOKEN;
  }

  if (error) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FORMAT_ERROR, "string", "enumerated");
    enum_value = UNBOUND_VALUE;
    return JSON_ERROR_FATAL;
  }
  return dec_len;
}

void Subscription_subscription_template::copy_template(const Subscription_subscription_template& other_value)
{
set_selection(other_value);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = other_value.single_value;
break;
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscription_subscription_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
}
}

Subscription_subscription_template::Subscription_subscription_template()
{
}

Subscription_subscription_template::Subscription_subscription_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscription_subscription_template::Subscription_subscription_template(int other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (!Subscription_subscription::is_valid_enum(other_value)) TTCN_error("Initializing a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription with unknown numeric value %d.", other_value);
single_value = (Subscription_subscription::enum_type)other_value;
}

Subscription_subscription_template::Subscription_subscription_template(Subscription_subscription::enum_type other_value)
 : Base_Template(SPECIFIC_VALUE)
{
single_value = other_value;
}

Subscription_subscription_template::Subscription_subscription_template(const Subscription_subscription& other_value)
 : Base_Template(SPECIFIC_VALUE)
{
if (other_value.enum_value == Subscription_subscription::UNBOUND_VALUE) TTCN_error("Creating a template from an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
single_value = other_value.enum_value;
}

Subscription_subscription_template::Subscription_subscription_template(const OPTIONAL<Subscription_subscription>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Subscription_subscription::enum_type)(const Subscription_subscription&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription from an unbound optional field.");
}
}

Subscription_subscription_template::Subscription_subscription_template(const Subscription_subscription_template& other_value)
 : Base_Template()
{
copy_template(other_value);
}

Subscription_subscription_template::~Subscription_subscription_template()
{
clean_up();
}

boolean Subscription_subscription_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
return TRUE;
}

boolean Subscription_subscription_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
return single_value != Subscription_subscription::UNBOUND_VALUE;
}

void Subscription_subscription_template::clean_up()
{
if (template_selection == VALUE_LIST || template_selection == COMPLEMENTED_LIST) delete [] value_list.list_value;
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(int other_value)
{
if (!Subscription_subscription::is_valid_enum(other_value)) TTCN_warning("Assigning unknown numeric value %d to a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", other_value);
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = (Subscription_subscription::enum_type)other_value;
return *this;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(Subscription_subscription::enum_type other_value)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value;
return *this;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(const Subscription_subscription& other_value)
{
if (other_value.enum_value == Subscription_subscription::UNBOUND_VALUE) TTCN_error("Assignment of an unbound value of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription to a template.");
clean_up();
set_selection(SPECIFIC_VALUE);
single_value = other_value.enum_value;
return *this;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(const OPTIONAL<Subscription_subscription>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
set_selection(SPECIFIC_VALUE);
single_value = (Subscription_subscription::enum_type)(const Subscription_subscription&)other_value;
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
}
return *this;
}

Subscription_subscription_template& Subscription_subscription_template::operator=(const Subscription_subscription_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscription_subscription_template::match(Subscription_subscription::enum_type other_value) const
{
switch (template_selection) {
case SPECIFIC_VALUE:
return single_value == other_value;
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
}
return FALSE;
}

boolean Subscription_subscription_template::match(const Subscription_subscription& other_value) const
{
if (other_value.enum_value == Subscription_subscription::UNBOUND_VALUE) TTCN_error("Matching a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription with an unbound value.");
return match(other_value.enum_value);
}

Subscription_subscription::enum_type Subscription_subscription_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return single_value;
}

void Subscription_subscription_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST) TTCN_error("Setting an invalid list type for a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscription_subscription_template[list_length];
}

Subscription_subscription_template& Subscription_subscription_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Accessing a list element in a non-list template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
if (list_index >= value_list.n_values) TTCN_error("Index overflow in a value list template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
return value_list.list_value[list_index];
}

void Subscription_subscription_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_enum(Subscription_subscription::enum_to_str(single_value), single_value);
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[elem_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscription_subscription_template::log_match(const Subscription_subscription& match_value) const
{
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}

void Subscription_subscription_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
}
}

void Subscription_subscription_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = (Subscription_subscription::enum_type)text_buf.pull_int().get_val();
if (!Subscription_subscription::is_valid_enum(single_value)) TTCN_error("Text decoder: Unknown numeric value %d was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.", single_value);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscription_subscription_template[value_list.n_values];
for (unsigned int elem_count = 0; elem_count < value_list.n_values; elem_count++)
value_list.list_value[elem_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of enumerated type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
}
}

boolean Subscription_subscription_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscription_subscription_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Subscription_subscription_template::set_param(Module_Param& param)
{
  param.basic_check(Module_Param::BC_TEMPLATE, "enumerated template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Enumerated: {
    Subscription_subscription::enum_type enum_val = Subscription_subscription::str_to_enum(param.get_enumerated());
    if (!Subscription_subscription::is_valid_enum(enum_val)) {
      param.error("Invalid enumerated value for type @http_jabber_org_protocol_pubsub.Subscription.subscription.");
    }
    *this = enum_val;
  } break;
  default:
    param.type_error("enumerated template", "@http_jabber_org_protocol_pubsub.Subscription.subscription");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscription_subscription_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_VALUE:
if (!is_ifpresent && template_selection==SPECIFIC_VALUE) return;
break;
case TR_OMIT:
if (!is_ifpresent && (template_selection==OMIT_VALUE || template_selection==SPECIFIC_VALUE)) return;
break;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscription.subscription");
}

Subscribe__options::Subscribe__options()
{
  bound_flag = FALSE;
}

Subscribe__options::Subscribe__options(const OPTIONAL<Empty>& par_required)
  :   field_required(par_required)
{
  bound_flag = TRUE;
}

Subscribe__options::Subscribe__options(const Subscribe__options& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
bound_flag = TRUE;
if (other_value.required().is_bound()) field_required = other_value.required();
else field_required.clean_up();
}

void Subscribe__options::clean_up()
{
field_required.clean_up();
bound_flag = FALSE;
}

Subscribe__options& Subscribe__options::operator=(const Subscribe__options& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
  bound_flag = TRUE;
  if (other_value.required().is_bound()) field_required = other_value.required();
  else field_required.clean_up();
}
return *this;
}

boolean Subscribe__options::operator==(const Subscribe__options& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_required==other_value.field_required;
}

boolean Subscribe__options::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_required.get_selection() || field_required.is_bound()) return TRUE;
return FALSE;
}
boolean Subscribe__options::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_required.get_selection() && !field_required.is_value()) return FALSE;
return TRUE;
}
int Subscribe__options::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscribe_options");
  int ret_val = 0;
  if (field_required.ispresent()) ret_val++;
  return ret_val;
}

void Subscribe__options::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ required := ");
field_required.log();
TTCN_Logger::log_event_str(" }");
}

void Subscribe__options::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Subscribe_options'");
    }
    if (strcmp("required", param_field) == 0) {
      required().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Subscribe_options'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Subscribe_options has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) required().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "required")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          required().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscribe_options: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Subscribe_options");
  }
}

void Subscribe__options::set_implicit_omit()
{
if (!required().is_bound()) required() = OMIT_VALUE;
else required().set_implicit_omit();
}

void Subscribe__options::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
field_required.encode_text(text_buf);
}

void Subscribe__options::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_required.decode_text(text_buf);
}

void Subscribe__options::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscribe__options::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subscribe__options::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_required.collect_ns(Subscribe__options_required_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  if((p_td.xer_bits & USE_NIL) && !field_required.ispresent()) {
    collected_ns = (char**)Realloc(collected_ns, sizeof(char*) * ++num_collected);
    const namespace_t *c_ns = p_td.my_module->get_controlns();
    collected_ns[num_collected-1] = mprintf(" xmlns:%s='%s'", c_ns->px, c_ns->ns);
  }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subscribe__options::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Empty::can_start(name, uri, Subscribe__options_required_xer_, flavor)) return true;
  return false;
}

int Subscribe__options::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  bool nil_attribute = e_xer && (p_td.xer_bits & USE_NIL) && !field_required.ispresent();
  if (nil_attribute) {
    const namespace_t *control_ns = p_td.my_module->get_controlns();
    p_buf.put_c(' ');
    p_buf.put_s(strlen(control_ns->px), (cbyte*)control_ns->px);
    p_buf.put_c(':');
    p_buf.put_s(10, (cbyte*)"nil='true'");
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("required': ");
  sub_len += field_required.XER_encode(Subscribe__options_required_xer_, p_buf, p_flavor| (p_td.xer_bits & USE_NIL), p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subscribe__options::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  boolean nil_attribute = FALSE;
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
 if (!omit_tag || parent_tag) {
  if (e_xer && (p_td.xer_bits & (USE_NIL|USE_TYPE_ATTR))) {
  static const namespace_t *control_ns = p_td.my_module->get_controlns();
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    const char *prefix = (const char*)p_reader.Prefix();
    if (prefix && !strcmp(prefix, control_ns->px)
      && !strcmp((const char*)p_reader.LocalName(), "nil")){
      const char *value = (const char*)p_reader.Value();
      if (!strcmp(value, "1") || !strcmp(value, "true")) {
        field_required = OMIT_VALUE;
        nil_attribute = TRUE;
      }
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (nil_attribute) {
    p_reader.MoveToElement();
  } else {
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_required = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("required': ");
    field_required.XER_decode(Subscribe__options_required_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // use_nil
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subscribe__options::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_required.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "required");
    enc_len += field_required.JSON_encode(Subscribe__options_required_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subscribe__options::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (8 == name_len && 0 == strncmp(fld_name, "required", name_len)) {
        int ret_val = field_required.JSON_decode(Subscribe__options_required_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "required");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_required.is_bound()) {
    field_required = OMIT_VALUE;
  }

  return dec_len;
}

struct Subscribe__options_template::single_value_struct {
Empty_template field_required;
};

void Subscribe__options_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_required = ANY_OR_OMIT;
}
}
}

void Subscribe__options_template::copy_value(const Subscribe__options& other_value)
{
single_value = new single_value_struct;
if (other_value.required().is_bound()) {
  if (other_value.required().ispresent()) single_value->field_required = other_value.required()();
  else single_value->field_required = OMIT_VALUE;
} else {
  single_value->field_required.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subscribe__options_template::copy_template(const Subscribe__options_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.required().get_selection()) {
single_value->field_required = other_value.required();
} else {
single_value->field_required.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscribe__options_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
break;
}
set_selection(other_value);
}

Subscribe__options_template::Subscribe__options_template()
{
}

Subscribe__options_template::Subscribe__options_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscribe__options_template::Subscribe__options_template(const Subscribe__options& other_value)
{
copy_value(other_value);
}

Subscribe__options_template::Subscribe__options_template(const OPTIONAL<Subscribe__options>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscribe__options&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscribe_options from an unbound optional field.");
}
}

Subscribe__options_template::Subscribe__options_template(const Subscribe__options_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subscribe__options_template::~Subscribe__options_template()
{
clean_up();
}

Subscribe__options_template& Subscribe__options_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscribe__options_template& Subscribe__options_template::operator=(const Subscribe__options& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscribe__options_template& Subscribe__options_template::operator=(const OPTIONAL<Subscribe__options>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscribe__options&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
}
return *this;
}

Subscribe__options_template& Subscribe__options_template::operator=(const Subscribe__options_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscribe__options_template::match(const Subscribe__options& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.required().is_bound()) return FALSE;
if((other_value.required().ispresent() ? !single_value->field_required.match((const Empty&)other_value.required()) : !single_value->field_required.match_omit()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
}
return FALSE;
}

boolean Subscribe__options_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_required.is_omit() || single_value->field_required.is_bound()) return TRUE;
return FALSE;
}

boolean Subscribe__options_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_required.is_omit() && !single_value->field_required.is_value()) return FALSE;
return TRUE;
}

void Subscribe__options_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscribe__options Subscribe__options_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
Subscribe__options ret_val;
if (single_value->field_required.is_omit()) ret_val.required() = OMIT_VALUE;
else if (single_value->field_required.is_bound()) {
ret_val.required() = single_value->field_required.valueof();
}
return ret_val;
}

void Subscribe__options_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscribe__options_template[list_length];
}

Subscribe__options_template& Subscribe__options_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
return value_list.list_value[list_index];
}

Empty_template& Subscribe__options_template::required()
{
set_specific();
return single_value->field_required;
}

const Empty_template& Subscribe__options_template::required() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field required of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
return single_value->field_required;
}

int Subscribe__options_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 0;
      if (single_value->field_required.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscribe_options containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
  }
  return 0;
}

void Subscribe__options_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ required := ");
single_value->field_required.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscribe__options_template::log_match(const Subscribe__options& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.required().ispresent()){
if(!single_value->field_required.match(match_value.required())){
TTCN_Logger::log_logmatch_info(".required");
single_value->field_required.log_match(match_value.required());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_required.match_omit()){
 TTCN_Logger::log_logmatch_info(".required := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_required.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ required := ");
if (match_value.required().ispresent()) single_value->field_required.log_match(match_value.required());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_required.log();
if (single_value->field_required.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscribe__options_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_required.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
}
}

void Subscribe__options_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_required.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscribe__options_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Subscribe_options.");
}
}

void Subscribe__options_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Subscribe_options'");
    }
    if (strcmp("required", param_field) == 0) {
      required().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Subscribe_options'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Subscribe_options has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) required().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "required")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          required().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscribe_options: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Subscribe_options");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscribe__options_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_required.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe_options");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscribe_options");
}

boolean Subscribe__options_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscribe__options_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


const Subscriptions_sequence__list_0 Subscriptions_sequence__list::UNBOUND_ELEM;
Subscriptions_sequence__list::Subscriptions_sequence__list()
{
val_ptr = NULL;
}

Subscriptions_sequence__list::Subscriptions_sequence__list(null_type)
{
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
}

Subscriptions_sequence__list::Subscriptions_sequence__list(const Subscriptions_sequence__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}

Subscriptions_sequence__list::~Subscriptions_sequence__list()
{
clean_up();
if (val_ptr != NULL) val_ptr = NULL;
}

void Subscriptions_sequence__list::clean_up()
{
if (val_ptr != NULL) {
if (val_ptr->ref_count > 1) {
val_ptr->ref_count--;
val_ptr = NULL;
}
else if (val_ptr->ref_count == 1) {
for (int elem_count = 0; elem_count < val_ptr->n_elements;
elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)
delete val_ptr->value_elements[elem_count];
free_pointers((void**)val_ptr->value_elements);
delete val_ptr;
val_ptr = NULL;
}
else
TTCN_error("Internal error: Invalid reference counter in a record of/set of value.");
}
}

Subscriptions_sequence__list& Subscriptions_sequence__list::operator=(null_type)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
return *this;
}

Subscriptions_sequence__list& Subscriptions_sequence__list::operator=(const Subscriptions_sequence__list& other_value)
{
if (other_value.val_ptr == NULL) TTCN_error("Assigning an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (this != &other_value) {
clean_up();
val_ptr = other_value.val_ptr;
val_ptr->ref_count++;
}
return *this;
}

boolean Subscriptions_sequence__list::operator==(null_type) const
{
if (val_ptr == NULL)
TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return val_ptr->n_elements == 0 ;
}

boolean Subscriptions_sequence__list::operator==(const Subscriptions_sequence__list& other_value) const
{
if (val_ptr == NULL) TTCN_error("The left operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (other_value.val_ptr == NULL) TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (val_ptr == other_value.val_ptr) return TRUE;
if (val_ptr->n_elements != (other_value.val_ptr)->n_elements)
return FALSE;
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
if ((other_value.val_ptr)->value_elements[elem_count] != NULL){
  if (*val_ptr->value_elements[elem_count] != *(other_value.val_ptr)->value_elements[elem_count]) return FALSE;
} else return FALSE;
} else {
if ((other_value.val_ptr)->value_elements[elem_count] != NULL) return FALSE;
}
}
return TRUE;
}

Subscriptions_sequence__list_0& Subscriptions_sequence__list::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list using a negative index: %d.", index_value);
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (index_value >= val_ptr->n_elements) ? index_value + 1 : val_ptr->n_elements;
new_val_ptr->value_elements = (Subscriptions_sequence__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++){
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Subscriptions_sequence__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (index_value >= val_ptr->n_elements) set_size(index_value + 1);
if (val_ptr->value_elements[index_value] == NULL) {
val_ptr->value_elements[index_value] = new Subscriptions_sequence__list_0;
}
return *val_ptr->value_elements[index_value];
}

Subscriptions_sequence__list_0& Subscriptions_sequence__list::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return (*this)[(int)index_value];
}

const Subscriptions_sequence__list_0& Subscriptions_sequence__list::operator[](int index_value) const
{
if (val_ptr == NULL)
TTCN_error("Accessing an element in an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (index_value < 0) TTCN_error("Accessing an element of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list using a negative index: %d.", index_value);
if (index_value >= val_ptr->n_elements) TTCN_error("Index overflow in a value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list: The index is %d, but the value has only %d elements.", index_value, val_ptr->n_elements);
return (val_ptr->value_elements[index_value] != NULL) ?
*val_ptr->value_elements[index_value] : UNBOUND_ELEM;
}

const Subscriptions_sequence__list_0& Subscriptions_sequence__list::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return (*this)[(int)index_value];
}

Subscriptions_sequence__list Subscriptions_sequence__list::operator<<=(int rotate_count) const
{
return *this >>= (-rotate_count);
}

Subscriptions_sequence__list Subscriptions_sequence__list::operator<<=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate left operator.");
return *this >>= (int)(-rotate_count);
}

Subscriptions_sequence__list Subscriptions_sequence__list::operator>>=(const INTEGER& rotate_count) const
{
rotate_count.must_bound("Unbound integer operand of rotate right operator.");
return *this >>= (int)rotate_count;
}

Subscriptions_sequence__list Subscriptions_sequence__list::operator>>=(int rotate_count) const
{
if (val_ptr == NULL) TTCN_error("Performing rotation operation on an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (val_ptr->n_elements == 0) return *this;
int rc;
if (rotate_count>=0) rc = rotate_count % val_ptr->n_elements;
else rc = val_ptr->n_elements - ((-rotate_count) % val_ptr->n_elements);
if (rc == 0) return *this;
Subscriptions_sequence__list ret_val;
ret_val.set_size(val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[(i+rc)%val_ptr->n_elements] =new Subscriptions_sequence__list_0(*val_ptr->value_elements[i]);
}
}
return ret_val;
}

Subscriptions_sequence__list Subscriptions_sequence__list::operator+(const Subscriptions_sequence__list& other_value) const
{
if (val_ptr == NULL || other_value.val_ptr == NULL) TTCN_error("Unbound operand of @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list concatenation.");
if (val_ptr->n_elements == 0) return other_value;
if (other_value.val_ptr->n_elements == 0) return *this;
Subscriptions_sequence__list ret_val;
ret_val.set_size(val_ptr->n_elements+other_value.val_ptr->n_elements);
for (int i=0; i<val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Subscriptions_sequence__list_0(*val_ptr->value_elements[i]);
}
}
for (int i=0; i<other_value.val_ptr->n_elements; i++) {
if (other_value.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+val_ptr->n_elements] = new Subscriptions_sequence__list_0(*other_value.val_ptr->value_elements[i]);
}
}
return ret_val;
}

Subscriptions_sequence__list Subscriptions_sequence__list::substr(int index, int returncount) const
{
if (val_ptr == NULL) TTCN_error("The first argument of substr() is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
check_substr_arguments(val_ptr->n_elements, index, returncount, "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list","element");
Subscriptions_sequence__list ret_val;
ret_val.set_size(returncount);
for (int i=0; i<returncount; i++) {
if (val_ptr->value_elements[i+index] != NULL) {
ret_val.val_ptr->value_elements[i] = new Subscriptions_sequence__list_0(*val_ptr->value_elements[i+index]);
}
}
return ret_val;
}

Subscriptions_sequence__list Subscriptions_sequence__list::replace(int index, int len, const Subscriptions_sequence__list& repl) const
{
if (val_ptr == NULL) TTCN_error("The first argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (repl.val_ptr == NULL) TTCN_error("The fourth argument of replace() is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
check_replace_arguments(val_ptr->n_elements, index, len, "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list","element");
Subscriptions_sequence__list ret_val;
ret_val.set_size(val_ptr->n_elements + repl.val_ptr->n_elements - len);
for (int i = 0; i < index; i++) {
if (val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i] = new Subscriptions_sequence__list_0(*val_ptr->value_elements[i]);
}
}
for (int i = 0; i < repl.val_ptr->n_elements; i++) {
if (repl.val_ptr->value_elements[i] != NULL) {
ret_val.val_ptr->value_elements[i+index] = new Subscriptions_sequence__list_0(*repl.val_ptr->value_elements[i]);
}
}
for (int i = 0; i < val_ptr->n_elements - index - len; i++) {
if (val_ptr->value_elements[index+i+len] != NULL) {
ret_val.val_ptr->value_elements[index+i+repl.val_ptr->n_elements] = new Subscriptions_sequence__list_0(*val_ptr->value_elements[index+i+len]);
}
}
return ret_val;
}

Subscriptions_sequence__list Subscriptions_sequence__list::replace(int index, int len, const Subscriptions_sequence__list_template& repl) const
{
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return replace(index, len, repl.valueof());
}

void Subscriptions_sequence__list::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (val_ptr == NULL) {
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = 0;
val_ptr->value_elements = NULL;
} else if (val_ptr->ref_count > 1) {
struct recordof_setof_struct *new_val_ptr = new recordof_setof_struct;
new_val_ptr->ref_count = 1;
new_val_ptr->n_elements = (new_size < val_ptr->n_elements) ? new_size : val_ptr->n_elements;
new_val_ptr->value_elements = (Subscriptions_sequence__list_0**)allocate_pointers(new_val_ptr->n_elements);
for (int elem_count = 0; elem_count < new_val_ptr->n_elements; elem_count++) {
if (val_ptr->value_elements[elem_count] != NULL){
new_val_ptr->value_elements[elem_count] = new Subscriptions_sequence__list_0(*(val_ptr->value_elements[elem_count]));
}
}
clean_up();
val_ptr = new_val_ptr;
}
if (new_size > val_ptr->n_elements) {
val_ptr->value_elements = (Subscriptions_sequence__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
#ifdef TITAN_MEMORY_DEBUG_SET_RECORD_OF
if((val_ptr->n_elements/1000)!=(new_size/1000)) TTCN_warning("New size of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list: %d",new_size);
#endif
val_ptr->n_elements = new_size;
} else if (new_size < val_ptr->n_elements) {
for (int elem_count = new_size; elem_count < val_ptr->n_elements; elem_count++)
if (val_ptr->value_elements[elem_count] != NULL)delete val_ptr->value_elements[elem_count];
val_ptr->value_elements = (Subscriptions_sequence__list_0**)reallocate_pointers((void**)val_ptr->value_elements, val_ptr->n_elements, new_size);
val_ptr->n_elements = new_size;
}
}

boolean Subscriptions_sequence__list::is_value() const
{
if (val_ptr == NULL) return false;
for(int i = 0; i < val_ptr->n_elements; ++i) {
if (val_ptr->value_elements[i] == NULL || !val_ptr->value_elements[i]->is_value()) return FALSE;
}
return TRUE;
}

int Subscriptions_sequence__list::size_of() const
{
if (val_ptr == NULL) TTCN_error("Performing sizeof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return val_ptr->n_elements;
}

int Subscriptions_sequence__list::lengthof() const
{
if (val_ptr == NULL) TTCN_error("Performing lengthof operation on an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
for (int my_length=val_ptr->n_elements; my_length>0; my_length--) if (val_ptr->value_elements[my_length-1] != NULL) return my_length;
return 0;
}

void Subscriptions_sequence__list::log() const
{
if (val_ptr == NULL) {;
TTCN_Logger::log_event_unbound();
return;
}
switch (val_ptr->n_elements) {
case 0:
TTCN_Logger::log_event_str("{ }");
break;
default:
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
(*this)[elem_count].log();
}
TTCN_Logger::log_event_str(" }");
}
}

void Subscriptions_sequence__list::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record of type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_VALUE|Module_Param::BC_LIST, "record of value");
  switch (param.get_operation_type()) {
  case Module_Param::OT_ASSIGN:
    if (param.get_type()==Module_Param::MP_Value_List && param.get_size()==0) {
      *this = NULL_VALUE;
      return;
    }
    switch (param.get_type()) {
    case Module_Param::MP_Value_List:
      set_size(param.get_size());
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if (curr->get_type()!=Module_Param::MP_NotUsed) {
          (*this)[i].set_param(*curr);
        }
      }
      break;
    case Module_Param::MP_Indexed_List:
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        (*this)[curr->get_id()->get_index()].set_param(*curr);
      }
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
    }
    break;
  case Module_Param::OT_CONCAT:
    switch (param.get_type()) {
    case Module_Param::MP_Value_List: {
      if (!is_bound()) *this = NULL_VALUE;
      int start_idx = lengthof();
      for (size_t i=0; i<param.get_size(); ++i) {
        Module_Param* const curr = param.get_elem(i);
        if ((curr->get_type()!=Module_Param::MP_NotUsed)) {
          (*this)[start_idx+(int)i].set_param(*curr);
        }
      }
    } break;
    case Module_Param::MP_Indexed_List:
      param.error("Cannot concatenate an indexed value list");
      break;
    default:
      param.type_error("record of value", "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
    }
    break;
  default:
    TTCN_error("Internal error: Unknown operation type.");
  }
}
void Subscriptions_sequence__list::set_implicit_omit()
{
if (val_ptr == NULL) return;
for (int i = 0; i < val_ptr->n_elements; i++) {
if (val_ptr->value_elements[i] != NULL) val_ptr->value_elements[i]->set_implicit_omit();
}
}

void Subscriptions_sequence__list::encode_text(Text_Buf& text_buf) const
{
if (val_ptr == NULL) TTCN_error("Text encoder: Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
text_buf.push_int(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++)
(*this)[elem_count].encode_text(text_buf);
}

void Subscriptions_sequence__list::decode_text(Text_Buf& text_buf)
{
clean_up();
val_ptr = new recordof_setof_struct;
val_ptr->ref_count = 1;
val_ptr->n_elements = text_buf.pull_int().get_val();
if (val_ptr->n_elements < 0) TTCN_error("Text decoder: Negative size was received for a value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
val_ptr->value_elements = (Subscriptions_sequence__list_0**)allocate_pointers(val_ptr->n_elements);
for (int elem_count = 0; elem_count < val_ptr->n_elements; elem_count++) {
val_ptr->value_elements[elem_count] = new Subscriptions_sequence__list_0;
val_ptr->value_elements[elem_count]->decode_text(text_buf);
}
}

void Subscriptions_sequence__list::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscriptions_sequence__list::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

boolean Subscriptions_sequence__list::can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor);
  if ((!e_xer || !(xd.xer_bits & UNTAGGED)) && !(flavor & XER_RECOF)) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  if (e_xer && (xd.oftype_descr->xer_bits & ANY_ELEMENT)) return TRUE;
  return Subscriptions_sequence__list_0::can_start(name, uri, *xd.oftype_descr, flavor | XER_RECOF);
}

char ** Subscriptions_sequence__list::collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  if (val_ptr) try {
    char **new_ns;
    size_t num_new;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      bool def_ns_1 = false;      new_ns = (*this)[i].collect_ns(*p_td.oftype_descr, num_new, def_ns_1);
      merge_ns(collected_ns, num_collected, new_ns, num_new);
      def_ns = def_ns || def_ns_1;
    }
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num = num_collected;
  return collected_ns;
}

int Subscriptions_sequence__list::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t* emb_val) const
{
  if (val_ptr == 0) TTCN_error("Attempt to XER-encode an unbound record of");
  int encoded_length=(int)p_buf.get_len();
  boolean e_xer = is_exer(p_flavor);
  boolean own_tag = !(e_xer && p_indent && ((p_td.xer_bits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  boolean indenting = !is_canonical(p_flavor) && own_tag;
  if (indenting) do_indent(p_buf, p_indent);
  if (val_ptr->n_elements==0) {
    if (own_tag)    {
      p_buf.put_c('<');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-2, (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
      }
      p_buf.put_s(2 + indenting, (const unsigned char*)"/>\n");
    }
  }
  else {
    if (own_tag) {
      p_buf.put_c('<');
      boolean write_ns = (e_xer && p_indent==0);
      boolean keep_newline = (indenting && !(e_xer && (p_td.xer_bits & XER_LIST)));
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-write_ns-(write_ns || !keep_newline), (const unsigned char*)p_td.names[e_xer]);
      if (e_xer && p_indent==0)
      {
        size_t num_collected = 0;
        char **collected_ns = NULL;
        bool def_ns = false;
        collected_ns = collect_ns(p_td, num_collected, def_ns);
        for (size_t cur_coll = 0; cur_coll < num_collected; ++cur_coll) {
          p_buf.put_s(strlen(collected_ns[cur_coll]), (cbyte*)collected_ns[cur_coll]);
          Free(collected_ns[cur_coll]);
        }
        Free(collected_ns);
        p_buf.put_s(1 + keep_newline, (cbyte*)">\n");
      }
    }
    p_flavor |= XER_RECOF | (p_td.xer_bits & XER_LIST);
    TTCN_EncDec_ErrorContext ec_0("Index ");
    TTCN_EncDec_ErrorContext ec_1;
    for (int i = 0; i < val_ptr->n_elements; ++i) {
      if (i > 0 && !own_tag && 0 != emb_val &&
          emb_val->embval_index < (0 != emb_val->embval_array_reg ?
          emb_val->embval_array_reg->size_of() : emb_val->embval_array_opt->size_of())) {
        if (0 != emb_val->embval_array_reg) {
          (*emb_val->embval_array_reg)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        else {
          (*emb_val->embval_array_opt)[emb_val->embval_index].XER_encode(
            UNIVERSAL_CHARSTRING_xer_, p_buf, p_flavor | EMBED_VALUES, p_indent+1, 0);
        }
        ++emb_val->embval_index;
      }
      ec_1.set_msg("%d: ", i);
      if (e_xer && (p_td.xer_bits & XER_LIST) && i>0) p_buf.put_c(' ');
      (*this)[i].XER_encode(*p_td.oftype_descr, p_buf, p_flavor, p_indent+own_tag, emb_val);
    }
    if (indenting && !is_exerlist(p_flavor)) {
      do_indent(p_buf, p_indent);
    }
    if (own_tag){
      p_buf.put_c('<');
      p_buf.put_c('/');
      if (e_xer) write_ns_prefix(p_td, p_buf);
      p_buf.put_s((size_t)p_td.namelens[e_xer]-!indenting, (const unsigned char*)p_td.names[e_xer]);
    }
  }
  return (int)p_buf.get_len() - encoded_length;
}

int Subscriptions_sequence__list::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t* emb_val)
{
  boolean e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  boolean own_tag = !(e_xer && ((xerbits & (ANY_ELEMENT|ANY_ATTRIBUTES|UNTAGGED))
    || (p_flavor & USE_TYPE_ATTR)));
  p_flavor &= ~XER_TOPLEVEL & ~XER_LIST & ~USE_TYPE_ATTR;
  int rd_ok=1, xml_depth=-1;
  *this = NULL_VALUE;
  int type = 0;
  if (own_tag) for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
    type = p_reader.NodeType();
    if (e_xer && (p_td.xer_bits & XER_ATTRIBUTE)) {
      if ((XML_READER_TYPE_ELEMENT   == type && p_reader.MoveToFirstAttribute() == 1)
        || XML_READER_TYPE_ATTRIBUTE == type) {
        verify_name(p_reader, p_td, e_xer);
        break;      }
    }
    if (e_xer && (p_td.xer_bits & XER_LIST)) {
      if (XML_READER_TYPE_TEXT == type) break;
    }
    else {
      if (XML_READER_TYPE_ELEMENT == type) {
        verify_name(p_reader, p_td, e_xer);
        xml_depth = p_reader.Depth();
        break;
      }
    }
  }
  else xml_depth = p_reader.Depth();
  p_flavor |= XER_RECOF;
  TTCN_EncDec_ErrorContext ec_0("Index ");
  TTCN_EncDec_ErrorContext ec_1;
  if (e_xer && (p_td.xer_bits & XER_LIST)) {
    char *x_val = (char*)p_reader.NewValue();
    size_t x_pos = 0;
    size_t x_len = strlen(x_val);
    for(char * str = strtok(x_val, " \t\x0A\x0D"); str != 0; str = strtok(x_val + x_pos, " \t\x0A\x0D")) {
      x_pos += strlen(str) + 1;
      TTCN_Buffer buf_2;
      buf_2.put_c('<');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      const char * const exer_name = p_td.oftype_descr->names[1];
      boolean i_can_has_ns = p_td.oftype_descr->my_module != 0 && p_td.oftype_descr->ns_index != -1;
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1]-1-i_can_has_ns, (cbyte*)exer_name);
      if (i_can_has_ns) {
        const namespace_t * const pns = p_td.oftype_descr->my_module->get_ns(p_td.oftype_descr->ns_index);
        buf_2.put_s(7 - (*pns->px == 0), (cbyte*)" xmlns:");
        buf_2.put_s(strlen(pns->px), (cbyte*)pns->px);
        buf_2.put_s(2, (cbyte*)"='");
        buf_2.put_s(strlen(pns->ns), (cbyte*)pns->ns);
        buf_2.put_s(2, (cbyte*)"'>");
      }
      buf_2.put_s(strlen(str), (cbyte*)str);
      buf_2.put_c('<');
      buf_2.put_c('/');
      write_ns_prefix(*p_td.oftype_descr, buf_2);
      buf_2.put_s((size_t)p_td.oftype_descr->namelens[1], (cbyte*)exer_name);
      XmlReaderWrap reader_2(buf_2);
      rd_ok = reader_2.Read();
      ec_1.set_msg("%d: ", val_ptr->n_elements);
      (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, reader_2, p_flavor, 0);
      if (p_flavor & EXIT_ON_ERROR && !(*this)[val_ptr->n_elements - 1].is_bound()) {
        if (1 == val_ptr->n_elements) {
          clean_up();
        } else {
          set_size(val_ptr->n_elements - 1);
        }
        xmlFree(x_val);
       return -1;
      }
      if (x_pos >= x_len) break;
    }
    xmlFree(x_val);
    if ((p_td.xer_bits & XER_ATTRIBUTE)) ;
    else if (own_tag) {
      p_reader.Read();
      p_reader.Read();
    }
  }
  else {
    if (p_flavor & PARENT_CLOSED) ;
    else if (own_tag && p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
    else {
      for (rd_ok = own_tag ? p_reader.Read() : p_reader.Ok(); rd_ok == 1; ) {
        type = p_reader.NodeType();
        if (XML_READER_TYPE_ELEMENT == type)
        {
          {
            if (!own_tag && !can_start((const char*)p_reader.LocalName(), (const char*)p_reader.NamespaceUri(), p_td, p_flavor)) {
              for (; rd_ok == 1 && p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
              break;
            }
            ec_1.set_msg("%d: ", val_ptr->n_elements);
            (*this)[val_ptr->n_elements].XER_decode(*p_td.oftype_descr, p_reader, p_flavor, emb_val);
            if (0 != emb_val && !own_tag && val_ptr->n_elements > 1) {
              ++emb_val->embval_index;
            }
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          for (; p_reader.Depth() > xml_depth; rd_ok = p_reader.Read()) ;
          if (own_tag) {
            verify_end(p_reader, p_td, xml_depth, e_xer);
            rd_ok = p_reader.Read();
          }
          break;
        }
        else if (XML_READER_TYPE_TEXT == type && 0 != emb_val && !own_tag && val_ptr->n_elements > 0) {
          UNIVERSAL_CHARSTRING emb_ustr((const char*)p_reader.Value());
          if (0 != emb_val->embval_array_reg) {
            (*emb_val->embval_array_reg)[emb_val->embval_index] = emb_ustr;
          }
          else {
            (*emb_val->embval_array_opt)[emb_val->embval_index] = emb_ustr;
          }
          rd_ok = p_reader.Read();
        }
        else {
          rd_ok = p_reader.Read();
        }
      }
    }
  }
  return 1;
}

int Subscriptions_sequence__list::JSON_encode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_ARRAY_START, NULL);
  for(int i = 0; i < val_ptr->n_elements; ++i) {
    int ret_val = (*this)[i].JSON_encode(*p_td.oftype_descr, p_tok);
    if (0 > ret_val) break;
    enc_len += ret_val;
  }
  enc_len += p_tok.put_next_token(JSON_TOKEN_ARRAY_END, NULL);
  return enc_len;
}

int Subscriptions_sequence__list::JSON_decode(const TTCN_Typedescriptor_t& p_td, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ERROR == token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_ARRAY_START != token) {
    return JSON_ERROR_INVALID_TOKEN;
  }

  set_size(0);
  while (true) {
    size_t buf_pos = p_tok.get_buf_pos();
    Subscriptions_sequence__list_0* val = new Subscriptions_sequence__list_0;
    int ret_val = val->JSON_decode(*p_td.oftype_descr, p_tok, p_silent);
    if (JSON_ERROR_INVALID_TOKEN == ret_val) {
      p_tok.set_buf_pos(buf_pos);
      delete val;
      break;
    }
    else if (JSON_ERROR_FATAL == ret_val) {
      delete val;
      if (p_silent) {
        clean_up();
      }
      return JSON_ERROR_FATAL;
    }
    val_ptr->value_elements = (Subscriptions_sequence__list_0**)reallocate_pointers(
      (void**)val_ptr->value_elements, val_ptr->n_elements, val_ptr->n_elements + 1);
    val_ptr->value_elements[val_ptr->n_elements] = val;
    val_ptr->n_elements++;
    dec_len += ret_val;
  }

  dec_len += p_tok.get_next_token(&token, NULL, NULL);
  if (JSON_TOKEN_ARRAY_END != token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_REC_OF_END_TOKEN_ERROR, "");
    if (p_silent) {
      clean_up();
    }
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

void Subscriptions_sequence__list_template::copy_value(const Subscriptions_sequence__list& other_value)
{
if (!other_value.is_bound()) TTCN_error("Initialization of a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list with an unbound value.");
single_value.n_elements = other_value.size_of();
single_value.value_elements = (Subscriptions_sequence__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (other_value[elem_count].is_bound()) {
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template(other_value[elem_count]);
} else {
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template;
}
}
set_selection(SPECIFIC_VALUE);
}

void Subscriptions_sequence__list_template::copy_template(const Subscriptions_sequence__list_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = other_value.single_value.n_elements;
single_value.value_elements = (Subscriptions_sequence__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (UNINITIALIZED_TEMPLATE != other_value.single_value.value_elements[elem_count]->get_selection()) {
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template(*other_value.single_value.value_elements[elem_count]);
} else {
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template;
}
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscriptions_sequence__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
break;
}
set_selection(other_value);
}

boolean Subscriptions_sequence__list_template::match_function_specific(const Base_Type *value_ptr, int value_index, const Restricted_Length_Template *template_ptr, int template_index)
{
if (value_index >= 0) return ((const Subscriptions_sequence__list_template*)template_ptr)->single_value.value_elements[template_index]->match((*(const Subscriptions_sequence__list*)value_ptr)[value_index]);
else return ((const Subscriptions_sequence__list_template*)template_ptr)->single_value.value_elements[template_index]->is_any_or_omit();
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template()
{
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template(template_sel other_value)
 : Record_Of_Template(other_value)
{
check_single_selection(other_value);
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template(null_type)
 : Record_Of_Template(SPECIFIC_VALUE)
{
single_value.n_elements = 0;
single_value.value_elements = NULL;
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template(const Subscriptions_sequence__list& other_value)
{
copy_value(other_value);
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template(const OPTIONAL<Subscriptions_sequence__list>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions_sequence__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list from an unbound optional field.");
}
}

Subscriptions_sequence__list_template::Subscriptions_sequence__list_template(const Subscriptions_sequence__list_template& other_value)
 : Record_Of_Template()
{
copy_template(other_value);
}

Subscriptions_sequence__list_template::~Subscriptions_sequence__list_template()
{
clean_up();
}

void Subscriptions_sequence__list_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
free_pointers((void**)single_value.value_elements);
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::operator=(null_type)
{
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
return *this;
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::operator=(const Subscriptions_sequence__list& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::operator=(const OPTIONAL<Subscriptions_sequence__list>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions_sequence__list&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
}
return *this;
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::operator=(const Subscriptions_sequence__list_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_template::operator[](int index_value)
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list using a negative index: %d.", index_value);
switch (template_selection)
{
  case SPECIFIC_VALUE:
    if(index_value < single_value.n_elements) break;
    // no break
  case OMIT_VALUE:
  case ANY_VALUE:
  case ANY_OR_OMIT:
  case UNINITIALIZED_TEMPLATE:
    set_size(index_value + 1);
    break;
  default:
    TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
    break;
}
return *single_value.value_elements[index_value];
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_template::operator[](const INTEGER& index_value)
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return (*this)[(int)index_value];
}

const Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_template::operator[](int index_value) const
{
if (index_value < 0) TTCN_error("Accessing an element of a template for type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list using a negative index: %d.", index_value);
if (template_selection != SPECIFIC_VALUE) TTCN_error("Accessing an element of a non-specific template for type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (index_value >= single_value.n_elements) TTCN_error("Index overflow in a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list: The index is %d, but the template has only %d elements.", index_value, single_value.n_elements);
return *single_value.value_elements[index_value];
}

const Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_template::operator[](const INTEGER& index_value) const
{
index_value.must_bound("Using an unbound integer value for indexing a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return (*this)[(int)index_value];
}

void Subscriptions_sequence__list_template::set_size(int new_size)
{
if (new_size < 0) TTCN_error("Internal error: Setting a negative size for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
template_sel old_selection = template_selection;
if (old_selection != SPECIFIC_VALUE) {
clean_up();
set_selection(SPECIFIC_VALUE);
single_value.n_elements = 0;
single_value.value_elements = NULL;
}
if (new_size > single_value.n_elements) {
single_value.value_elements = (Subscriptions_sequence__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template(ANY_VALUE);
} else {
for (int elem_count = single_value.n_elements; elem_count < new_size; elem_count++)
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template;
}
single_value.n_elements = new_size;
} else if (new_size < single_value.n_elements) {
for (int elem_count = new_size; elem_count < single_value.n_elements; elem_count++)
delete single_value.value_elements[elem_count];
single_value.value_elements = (Subscriptions_sequence__list_0_template**)reallocate_pointers((void**)single_value.value_elements, single_value.n_elements, new_size);
single_value.n_elements = new_size;
}
}

int Subscriptions_sequence__list_template::n_elem() const
{
  switch (template_selection) {
  case SPECIFIC_VALUE:
    return single_value.n_elements;
    break;
  case VALUE_LIST:
    return value_list.n_values;
    break;
  default:
    TTCN_error("Performing n_elem");
  }
}

int Subscriptions_sequence__list_template::size_of(boolean is_size) const
{
const char* op_name = is_size ? "size" : "length";
int min_size;
boolean has_any_or_none;
if (is_ifpresent) TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list which has an ifpresent attribute.", op_name);
switch (template_selection)
{
case SPECIFIC_VALUE: {
  min_size = 0;
  has_any_or_none = FALSE;
  int elem_count = single_value.n_elements;
  if (!is_size) { while (elem_count>0 && !single_value.value_elements[elem_count-1]->is_bound()) elem_count--; }
  for (int i=0; i<elem_count; i++) {
    switch (single_value.value_elements[i]->get_selection()) {
    case OMIT_VALUE:
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list containing omit element.", op_name);
    case ANY_OR_OMIT:
      has_any_or_none = TRUE;
      break;
    default:
      min_size++;
      break;
    }
  }
} break;
case OMIT_VALUE:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list containing omit value.", op_name);
case ANY_VALUE:
case ANY_OR_OMIT:
  min_size = 0;
  has_any_or_none = TRUE;
  break;
case VALUE_LIST:
{
  if (value_list.n_values<1)
    TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list containing an empty list.", op_name);
  int item_size = value_list.list_value[0].size_of(is_size);
  for (unsigned int i = 1; i < value_list.n_values; i++) {
    if (value_list.list_value[i].size_of(is_size)!=item_size)
      TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list containing a value list with different sizes.", op_name);
  }
  min_size = item_size;
  has_any_or_none = FALSE;
  break;
}
case COMPLEMENTED_LIST:
  TTCN_error("Performing %sof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list containing complemented list.", op_name);
default:
  TTCN_error("Performing %sof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.", op_name);
}
return check_section_is_single(min_size, has_any_or_none, op_name, "a", "template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
}

boolean Subscriptions_sequence__list_template::match(const Subscriptions_sequence__list& other_value) const
{
if (!other_value.is_bound()) return FALSE;
int value_length = other_value.size_of();
if (!match_length(value_length)) return FALSE;
switch (template_selection) {
case SPECIFIC_VALUE:
return match_record_of(&other_value, value_length, this, single_value.n_elements, match_function_specific);
case OMIT_VALUE:
return FALSE;
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching with an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
}
return FALSE;
}

boolean Subscriptions_sequence__list_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return false;
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (!single_value.value_elements[elem_count]->is_value()) return false;
return true;
}

Subscriptions_sequence__list Subscriptions_sequence__list_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) TTCN_error("Performing a valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
Subscriptions_sequence__list ret_val;
ret_val.set_size(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
if (single_value.value_elements[elem_count]->is_bound()) {
ret_val[elem_count] = single_value.value_elements[elem_count]->valueof();
}
return ret_val;
}

Subscriptions_sequence__list Subscriptions_sequence__list_template::substr(int index, int returncount) const
{
if (!is_value()) TTCN_error("The first argument of function substr() is a template with non-specific value.");
return valueof().substr(index, returncount);
}

Subscriptions_sequence__list Subscriptions_sequence__list_template::replace(int index, int len, const Subscriptions_sequence__list_template& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
if (!repl.is_value()) TTCN_error("The fourth argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl.valueof());
}

Subscriptions_sequence__list Subscriptions_sequence__list_template::replace(int index, int len, const Subscriptions_sequence__list& repl) const
{
if (!is_value()) TTCN_error("The first argument of function replace() is a template with non-specific value.");
return valueof().replace(index, len, repl);
}

void Subscriptions_sequence__list_template::set_type(template_sel template_type, unsigned int list_length)
{
clean_up();
switch (template_type) {
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = list_length;
value_list.list_value = new Subscriptions_sequence__list_template[list_length];
break;
default:
TTCN_error("Internal error: Setting an invalid type for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
}
set_selection(template_type);
}

Subscriptions_sequence__list_template& Subscriptions_sequence__list_template::list_item(unsigned int list_index)
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST) TTCN_error("Internal error: Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
if (list_index >= value_list.n_values) TTCN_error("Internal error: Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return value_list.list_value[list_index];
}

void Subscriptions_sequence__list_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
if (single_value.n_elements > 0) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
if (permutation_starts_at(elem_count)) TTCN_Logger::log_event_str("permutation(");
single_value.value_elements[elem_count]->log();
if (permutation_ends_at(elem_count)) TTCN_Logger::log_char(')');
}
TTCN_Logger::log_event_str(" }");
} else TTCN_Logger::log_event_str("{ }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_restricted();
log_ifpresent();
}

void Subscriptions_sequence__list_template::log_match(const Subscriptions_sequence__list& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
}else{
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if(!single_value.value_elements[elem_count]->match(match_value[elem_count])){
TTCN_Logger::log_logmatch_info("[%d]", elem_count);
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
log_match_length(single_value.n_elements);
} else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE && single_value.n_elements > 0 && get_number_of_permutations() == 0 && single_value.n_elements == match_value.size_of()) {
TTCN_Logger::log_event_str("{ ");
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
if (elem_count > 0) TTCN_Logger::log_event_str(", ");
single_value.value_elements[elem_count]->log_match(match_value[elem_count]);
}
TTCN_Logger::log_event_str(" }");
log_match_length(single_value.n_elements);
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscriptions_sequence__list_template::encode_text(Text_Buf& text_buf) const
{
encode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
text_buf.push_int(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++)
single_value.value_elements[elem_count]->encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
}
}

void Subscriptions_sequence__list_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_permutation(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value.n_elements = text_buf.pull_int().get_val();
if (single_value.n_elements < 0) TTCN_error("Text decoder: Negative size was received for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
single_value.value_elements = (Subscriptions_sequence__list_0_template**)allocate_pointers(single_value.n_elements);
for (int elem_count = 0; elem_count < single_value.n_elements; elem_count++) {
single_value.value_elements[elem_count] = new Subscriptions_sequence__list_0_template;
single_value.value_elements[elem_count]->decode_text(text_buf);
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscriptions_sequence__list_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
}
}

boolean Subscriptions_sequence__list_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscriptions_sequence__list_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int i=0; i<value_list.n_values; i++)
if (value_list.list_value[i].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

void Subscriptions_sequence__list_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] < '0' || param_field[0] > '9') {
      param.error("Unexpected record field name in module parameter, expected a valid"
        " index for record template type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list'");
    }
    int param_index = -1;
    sscanf(param_field, "%d", &param_index);
    (*this)[param_index].set_param(param);
    return;
  }
  param.basic_check(Module_Param::BC_TEMPLATE|Module_Param::BC_LIST, "record of template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Indexed_List:
    if (template_selection!=SPECIFIC_VALUE) set_size(0);
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      (*this)[(int)(param.get_elem(p_i)->get_id()->get_index())].set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List: {
    set_size(param.get_size());
    int curr_idx = 0;
    for (size_t p_i=0; p_i<param.get_size(); ++p_i) {
      switch (param.get_elem(p_i)->get_type()) {
      case Module_Param::MP_NotUsed:
        curr_idx++;
        break;
      case Module_Param::MP_Permutation_Template: {
        int perm_start_idx = curr_idx;
        for (size_t perm_i=0; perm_i<param.get_elem(p_i)->get_size(); perm_i++) {
          (*this)[curr_idx].set_param(*(param.get_elem(p_i)->get_elem(perm_i)));
          curr_idx++;
        }
        int perm_end_idx = curr_idx - 1;
        add_permutation(perm_start_idx, perm_end_idx);
      } break;
      default:
        (*this)[curr_idx].set_param(*param.get_elem(p_i));
        curr_idx++;
      }
    }
  } break;
  default:
    param.type_error("record of template", "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
  }
  is_ifpresent = param.get_ifpresent();
  set_length_range(param);
}

void Subscriptions_sequence__list_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
for (int i=0; i<single_value.n_elements; i++) single_value.value_elements[i]->check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list");
}

Subscriptions_sequence__list_0::Subscriptions_sequence__list_0()
{
  bound_flag = FALSE;
}

Subscriptions_sequence__list_0::Subscriptions_sequence__list_0(const Subscription& par_subscription)
  :   field_subscription(par_subscription)
{
  bound_flag = TRUE;
}

Subscriptions_sequence__list_0::Subscriptions_sequence__list_0(const Subscriptions_sequence__list_0& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
bound_flag = TRUE;
if (other_value.subscription().is_bound()) field_subscription = other_value.subscription();
else field_subscription.clean_up();
}

void Subscriptions_sequence__list_0::clean_up()
{
field_subscription.clean_up();
bound_flag = FALSE;
}

Subscriptions_sequence__list_0& Subscriptions_sequence__list_0::operator=(const Subscriptions_sequence__list_0& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
  bound_flag = TRUE;
  if (other_value.subscription().is_bound()) field_subscription = other_value.subscription();
  else field_subscription.clean_up();
}
return *this;
}

boolean Subscriptions_sequence__list_0::operator==(const Subscriptions_sequence__list_0& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_subscription==other_value.field_subscription;
}

boolean Subscriptions_sequence__list_0::is_bound() const
{
if (bound_flag) return TRUE;
if(field_subscription.is_bound()) return TRUE;
return FALSE;
}
boolean Subscriptions_sequence__list_0::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_subscription.is_value()) return FALSE;
return TRUE;
}
int Subscriptions_sequence__list_0::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE");
  return 1;
}

void Subscriptions_sequence__list_0::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ subscription := ");
field_subscription.log();
TTCN_Logger::log_event_str(" }");
}

void Subscriptions_sequence__list_0::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE'");
    }
    if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) subscription().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscription")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscription().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE");
  }
}

void Subscriptions_sequence__list_0::set_implicit_omit()
{
if (subscription().is_bound()) subscription().set_implicit_omit();
}

void Subscriptions_sequence__list_0::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
field_subscription.encode_text(text_buf);
}

void Subscriptions_sequence__list_0::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_subscription.decode_text(text_buf);
}

void Subscriptions_sequence__list_0::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscriptions_sequence__list_0::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subscriptions_sequence__list_0::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_subscription.collect_ns(Subscriptions_sequence__list_0_subscription_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subscriptions_sequence__list_0::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Subscription::can_start(name, uri, Subscriptions_sequence__list_0_subscription_xer_, flavor)) return true;
  return false;
}

int Subscriptions_sequence__list_0::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("subscription': ");
  sub_len += field_subscription.XER_encode(Subscriptions_sequence__list_0_subscription_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subscriptions_sequence__list_0::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_subscription = *static_cast<const Subscription*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("subscription': ");
    field_subscription.XER_decode(Subscriptions_sequence__list_0_subscription_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subscriptions_sequence__list_0::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subscription");
    enc_len += field_subscription.JSON_encode(Subscriptions_sequence__list_0_subscription_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subscriptions_sequence__list_0::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (12 == name_len && 0 == strncmp(fld_name, "subscription", name_len)) {
        int ret_val = field_subscription.JSON_decode(Subscriptions_sequence__list_0_subscription_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subscription");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_subscription.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "subscription");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Subscriptions_sequence__list_0_template::single_value_struct {
Subscription_template field_subscription;
};

void Subscriptions_sequence__list_0_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_subscription = ANY_VALUE;
}
}
}

void Subscriptions_sequence__list_0_template::copy_value(const Subscriptions_sequence__list_0& other_value)
{
single_value = new single_value_struct;
if (other_value.subscription().is_bound()) {
  single_value->field_subscription = other_value.subscription();
} else {
  single_value->field_subscription.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subscriptions_sequence__list_0_template::copy_template(const Subscriptions_sequence__list_0_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.subscription().get_selection()) {
single_value->field_subscription = other_value.subscription();
} else {
single_value->field_subscription.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscriptions_sequence__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
break;
}
set_selection(other_value);
}

Subscriptions_sequence__list_0_template::Subscriptions_sequence__list_0_template()
{
}

Subscriptions_sequence__list_0_template::Subscriptions_sequence__list_0_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscriptions_sequence__list_0_template::Subscriptions_sequence__list_0_template(const Subscriptions_sequence__list_0& other_value)
{
copy_value(other_value);
}

Subscriptions_sequence__list_0_template::Subscriptions_sequence__list_0_template(const OPTIONAL<Subscriptions_sequence__list_0>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions_sequence__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE from an unbound optional field.");
}
}

Subscriptions_sequence__list_0_template::Subscriptions_sequence__list_0_template(const Subscriptions_sequence__list_0_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subscriptions_sequence__list_0_template::~Subscriptions_sequence__list_0_template()
{
clean_up();
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_0_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_0_template::operator=(const Subscriptions_sequence__list_0& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_0_template::operator=(const OPTIONAL<Subscriptions_sequence__list_0>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions_sequence__list_0&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
}
return *this;
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_0_template::operator=(const Subscriptions_sequence__list_0_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscriptions_sequence__list_0_template::match(const Subscriptions_sequence__list_0& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.subscription().is_bound()) return FALSE;
if(!single_value->field_subscription.match(other_value.subscription()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
}
return FALSE;
}

boolean Subscriptions_sequence__list_0_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_subscription.is_bound()) return TRUE;
return FALSE;
}

boolean Subscriptions_sequence__list_0_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_subscription.is_value()) return FALSE;
return TRUE;
}

void Subscriptions_sequence__list_0_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscriptions_sequence__list_0 Subscriptions_sequence__list_0_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
Subscriptions_sequence__list_0 ret_val;
if (single_value->field_subscription.is_bound()) {
ret_val.subscription() = single_value->field_subscription.valueof();
}
return ret_val;
}

void Subscriptions_sequence__list_0_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscriptions_sequence__list_0_template[list_length];
}

Subscriptions_sequence__list_0_template& Subscriptions_sequence__list_0_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
return value_list.list_value[list_index];
}

Subscription_template& Subscriptions_sequence__list_0_template::subscription()
{
set_specific();
return single_value->field_subscription;
}

const Subscription_template& Subscriptions_sequence__list_0_template::subscription() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subscription of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
return single_value->field_subscription;
}

int Subscriptions_sequence__list_0_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
  }
  return 0;
}

void Subscriptions_sequence__list_0_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ subscription := ");
single_value->field_subscription.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscriptions_sequence__list_0_template::log_match(const Subscriptions_sequence__list_0& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_subscription.match(match_value.subscription())){
TTCN_Logger::log_logmatch_info(".subscription");
single_value->field_subscription.log_match(match_value.subscription());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ subscription := ");
single_value->field_subscription.log_match(match_value.subscription());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscriptions_sequence__list_0_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_subscription.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
}
}

void Subscriptions_sequence__list_0_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_subscription.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscriptions_sequence__list_0_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE.");
}
}

void Subscriptions_sequence__list_0_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE'");
    }
    if (strcmp("subscription", param_field) == 0) {
      subscription().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) subscription().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subscription")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subscription().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscriptions_sequence__list_0_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_subscription.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.SEQUENCE");
}

boolean Subscriptions_sequence__list_0_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscriptions_sequence__list_0_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Subscriptions::Subscriptions()
{
  bound_flag = FALSE;
}

Subscriptions::Subscriptions(const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const Subscriptions_sequence__list& par_sequence__list)
  :   field_node(par_node),
  field_sequence__list(par_sequence__list)
{
  bound_flag = TRUE;
}

Subscriptions::Subscriptions(const Subscriptions& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.");
bound_flag = TRUE;
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.sequence__list().is_bound()) field_sequence__list = other_value.sequence__list();
else field_sequence__list.clean_up();
}

void Subscriptions::clean_up()
{
field_node.clean_up();
field_sequence__list.clean_up();
bound_flag = FALSE;
}

Subscriptions& Subscriptions::operator=(const Subscriptions& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.");
  bound_flag = TRUE;
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.sequence__list().is_bound()) field_sequence__list = other_value.sequence__list();
  else field_sequence__list.clean_up();
}
return *this;
}

boolean Subscriptions::operator==(const Subscriptions& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_node==other_value.field_node
  && field_sequence__list==other_value.field_sequence__list;
}

boolean Subscriptions::is_bound() const
{
if (bound_flag) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(field_sequence__list.is_bound()) return TRUE;
return FALSE;
}
boolean Subscriptions::is_value() const
{
if (!is_bound()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(!field_sequence__list.is_value()) return FALSE;
return TRUE;
}
int Subscriptions::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscriptions");
  int ret_val = 1;
  if (field_node.ispresent()) ret_val++;
  return ret_val;
}

void Subscriptions::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ node := ");
field_node.log();
TTCN_Logger::log_event_str(", sequence_list := ");
field_sequence__list.log();
TTCN_Logger::log_event_str(" }");
}

void Subscriptions::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Subscriptions'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("sequence_list", param_field) == 0) {
      sequence__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Subscriptions'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Subscriptions has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscriptions: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Subscriptions");
  }
}

void Subscriptions::set_implicit_omit()
{
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (sequence__list().is_bound()) sequence__list().set_implicit_omit();
}

void Subscriptions::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Subscriptions.");
field_node.encode_text(text_buf);
field_sequence__list.encode_text(text_buf);
}

void Subscriptions::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_node.decode_text(text_buf);
field_sequence__list.decode_text(text_buf);
}

void Subscriptions::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Subscriptions::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Subscriptions::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_node.collect_ns(Subscriptions_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_sequence__list.collect_ns(Subscriptions_sequence__list_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Subscriptions::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Subscriptions_node_xer_, flavor)) return true;
  else if (Subscriptions_sequence__list::can_start(name, uri, Subscriptions_sequence__list_xer_, flavor)) return true;
  return false;
}

int Subscriptions::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Subscriptions_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("sequence_list': ");
  sub_len += field_sequence__list.XER_encode(Subscriptions_sequence__list_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Subscriptions::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Subscriptions_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Subscriptions_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Subscriptions_node_xer_, 1) && check_namespace(ns_uri, Subscriptions_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Subscriptions_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Subscriptions_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_sequence__list = *static_cast<const Subscriptions_sequence__list*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("sequence_list': ");
    field_sequence__list.XER_decode(Subscriptions_sequence__list_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Subscriptions::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Subscriptions_node_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "sequence_list");
    enc_len += field_sequence__list.JSON_encode(Subscriptions_sequence__list_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Subscriptions::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Subscriptions_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (13 == name_len && 0 == strncmp(fld_name, "sequence_list", name_len)) {
        int ret_val = field_sequence__list.JSON_decode(Subscriptions_sequence__list_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "sequence_list");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_sequence__list.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "sequence_list");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Subscriptions_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_node;
Subscriptions_sequence__list_template field_sequence__list;
};

void Subscriptions_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_node = ANY_OR_OMIT;
single_value->field_sequence__list = ANY_VALUE;
}
}
}

void Subscriptions_template::copy_value(const Subscriptions& other_value)
{
single_value = new single_value_struct;
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.sequence__list().is_bound()) {
  single_value->field_sequence__list = other_value.sequence__list();
} else {
  single_value->field_sequence__list.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Subscriptions_template::copy_template(const Subscriptions_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.sequence__list().get_selection()) {
single_value->field_sequence__list = other_value.sequence__list();
} else {
single_value->field_sequence__list.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Subscriptions_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
break;
}
set_selection(other_value);
}

Subscriptions_template::Subscriptions_template()
{
}

Subscriptions_template::Subscriptions_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Subscriptions_template::Subscriptions_template(const Subscriptions& other_value)
{
copy_value(other_value);
}

Subscriptions_template::Subscriptions_template(const OPTIONAL<Subscriptions>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Subscriptions from an unbound optional field.");
}
}

Subscriptions_template::Subscriptions_template(const Subscriptions_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Subscriptions_template::~Subscriptions_template()
{
clean_up();
}

Subscriptions_template& Subscriptions_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Subscriptions_template& Subscriptions_template::operator=(const Subscriptions& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Subscriptions_template& Subscriptions_template::operator=(const OPTIONAL<Subscriptions>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Subscriptions&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
}
return *this;
}

Subscriptions_template& Subscriptions_template::operator=(const Subscriptions_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Subscriptions_template::match(const Subscriptions& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.sequence__list().is_bound()) return FALSE;
if(!single_value->field_sequence__list.match(other_value.sequence__list()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
}
return FALSE;
}

boolean Subscriptions_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_sequence__list.is_bound()) return TRUE;
return FALSE;
}

boolean Subscriptions_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_sequence__list.is_value()) return FALSE;
return TRUE;
}

void Subscriptions_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Subscriptions Subscriptions_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
Subscriptions ret_val;
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_sequence__list.is_bound()) {
ret_val.sequence__list() = single_value->field_sequence__list.valueof();
}
return ret_val;
}

void Subscriptions_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Subscriptions_template[list_length];
}

Subscriptions_template& Subscriptions_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Subscriptions_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Subscriptions_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
return single_value->field_node;
}

Subscriptions_sequence__list_template& Subscriptions_template::sequence__list()
{
set_specific();
return single_value->field_sequence__list;
}

const Subscriptions_sequence__list_template& Subscriptions_template::sequence__list() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field sequence_list of a non-specific template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
return single_value->field_sequence__list;
}

int Subscriptions_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 1;
      if (single_value->field_node.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Subscriptions containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
  }
  return 0;
}

void Subscriptions_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", sequence_list := ");
single_value->field_sequence__list.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Subscriptions_template::log_match(const Subscriptions& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_sequence__list.match(match_value.sequence__list())){
TTCN_Logger::log_logmatch_info(".sequence_list");
single_value->field_sequence__list.log_match(match_value.sequence__list());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", sequence_list := ");
single_value->field_sequence__list.log_match(match_value.sequence__list());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Subscriptions_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_node.encode_text(text_buf);
single_value->field_sequence__list.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
}
}

void Subscriptions_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_node.decode_text(text_buf);
single_value->field_sequence__list.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Subscriptions_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Subscriptions.");
}
}

void Subscriptions_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Subscriptions'");
    }
    if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("sequence_list", param_field) == 0) {
      sequence__list().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Subscriptions'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (2<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Subscriptions has 2 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) sequence__list().set_param(*param.get_elem(1));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "sequence_list")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          sequence__list().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Subscriptions: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Subscriptions");
  }
  is_ifpresent = param.get_ifpresent();
}

void Subscriptions_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions");
single_value->field_sequence__list.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Subscriptions");
}

boolean Subscriptions_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Subscriptions_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Unsubscribe::Unsubscribe()
{
  bound_flag = FALSE;
}

Unsubscribe::Unsubscribe(const UNIVERSAL_CHARSTRING& par_jid,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_node,
    const OPTIONAL<UNIVERSAL_CHARSTRING>& par_subid,
    const Empty& par_base)
  :   field_jid(par_jid),
  field_node(par_node),
  field_subid(par_subid),
  field_base(par_base)
{
  bound_flag = TRUE;
}

Unsubscribe::Unsubscribe(const Unsubscribe& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
bound_flag = TRUE;
if (other_value.jid().is_bound()) field_jid = other_value.jid();
else field_jid.clean_up();
if (other_value.node().is_bound()) field_node = other_value.node();
else field_node.clean_up();
if (other_value.subid().is_bound()) field_subid = other_value.subid();
else field_subid.clean_up();
if (other_value.base().is_bound()) field_base = other_value.base();
else field_base.clean_up();
}

void Unsubscribe::clean_up()
{
field_jid.clean_up();
field_node.clean_up();
field_subid.clean_up();
field_base.clean_up();
bound_flag = FALSE;
}

Unsubscribe& Unsubscribe::operator=(const Unsubscribe& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
  bound_flag = TRUE;
  if (other_value.jid().is_bound()) field_jid = other_value.jid();
  else field_jid.clean_up();
  if (other_value.node().is_bound()) field_node = other_value.node();
  else field_node.clean_up();
  if (other_value.subid().is_bound()) field_subid = other_value.subid();
  else field_subid.clean_up();
  if (other_value.base().is_bound()) field_base = other_value.base();
  else field_base.clean_up();
}
return *this;
}

boolean Unsubscribe::operator==(const Unsubscribe& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_jid==other_value.field_jid
  && field_node==other_value.field_node
  && field_subid==other_value.field_subid
  && field_base==other_value.field_base;
}

boolean Unsubscribe::is_bound() const
{
if (bound_flag) return TRUE;
if(field_jid.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_node.get_selection() || field_node.is_bound()) return TRUE;
if(OPTIONAL_OMIT == field_subid.get_selection() || field_subid.is_bound()) return TRUE;
if(field_base.is_bound()) return TRUE;
return FALSE;
}
boolean Unsubscribe::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_jid.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_node.get_selection() && !field_node.is_value()) return FALSE;
if(OPTIONAL_OMIT != field_subid.get_selection() && !field_subid.is_value()) return FALSE;
if(!field_base.is_value()) return FALSE;
return TRUE;
}
int Unsubscribe::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Unsubscribe");
  int ret_val = 2;
  if (field_node.ispresent()) ret_val++;
  if (field_subid.ispresent()) ret_val++;
  return ret_val;
}

void Unsubscribe::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ jid := ");
field_jid.log();
TTCN_Logger::log_event_str(", node := ");
field_node.log();
TTCN_Logger::log_event_str(", subid := ");
field_subid.log();
TTCN_Logger::log_event_str(", base := ");
field_base.log();
TTCN_Logger::log_event_str(" }");
}

void Unsubscribe::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Unsubscribe'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Unsubscribe'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Unsubscribe has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Unsubscribe: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Unsubscribe");
  }
}

void Unsubscribe::set_implicit_omit()
{
if (jid().is_bound()) jid().set_implicit_omit();
if (!node().is_bound()) node() = OMIT_VALUE;
else node().set_implicit_omit();
if (!subid().is_bound()) subid() = OMIT_VALUE;
else subid().set_implicit_omit();
if (base().is_bound()) base().set_implicit_omit();
}

void Unsubscribe::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
field_jid.encode_text(text_buf);
field_node.encode_text(text_buf);
field_subid.encode_text(text_buf);
field_base.encode_text(text_buf);
}

void Unsubscribe::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_jid.decode_text(text_buf);
field_node.decode_text(text_buf);
field_subid.decode_text(text_buf);
field_base.decode_text(text_buf);
}

void Unsubscribe::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Unsubscribe::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Unsubscribe::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_jid.collect_ns(Unsubscribe_jid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_node.collect_ns(Unsubscribe_node_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_subid.collect_ns(Unsubscribe_subid_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  new_ns = field_base.collect_ns(Unsubscribe_base_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Unsubscribe::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (UNIVERSAL_CHARSTRING::can_start(name, uri, Unsubscribe_jid_xer_, flavor)) return true;
  return false;
}

int Unsubscribe::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer;
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0, tmp_len; (void)tmp_len;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  ec_1.set_msg("jid': ");
  tmp_len = field_jid.XER_encode(Unsubscribe_jid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("node': ");
  tmp_len = field_node.XER_encode(Unsubscribe_node_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  ec_1.set_msg("subid': ");
  tmp_len = field_subid.XER_encode(Unsubscribe_subid_xer_, p_buf, p_flavor, p_indent+1, 0);
  if (!e_xer) sub_len += tmp_len;
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1, (cbyte*)">\n");
  ec_1.set_msg("base': ");
  sub_len += field_base.XER_encode(Unsubscribe_base_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Unsubscribe::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
if (e_xer) {
 if (!omit_tag || parent_tag) {
  if (Unsubscribe_jid_xer_.dfeValue) field_jid = *static_cast<const UNIVERSAL_CHARSTRING*>(Unsubscribe_jid_xer_.dfeValue);
  if (Unsubscribe_node_xer_.dfeValue) field_node = *static_cast<const UNIVERSAL_CHARSTRING*>(Unsubscribe_node_xer_.dfeValue);
  else field_node = OMIT_VALUE;
  if (Unsubscribe_subid_xer_.dfeValue) field_subid = *static_cast<const UNIVERSAL_CHARSTRING*>(Unsubscribe_subid_xer_.dfeValue);
  else field_subid = OMIT_VALUE;
  for (rd_ok = p_reader.MoveToFirstAttribute(); rd_ok==1 && p_reader.NodeType()==XML_READER_TYPE_ATTRIBUTE; rd_ok = p_reader.AdvanceAttribute()) {
    if (p_reader.IsNamespaceDecl()) continue;
    const char *attr_name = (const char*)p_reader.LocalName();
    const char *ns_uri    = (const char*)p_reader.NamespaceUri();
    if (check_name(attr_name, Unsubscribe_jid_xer_, 1) && check_namespace(ns_uri, Unsubscribe_jid_xer_)) {
      ec_1.set_msg("jid': ");
      field_jid.XER_decode(Unsubscribe_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Unsubscribe_node_xer_, 1) && check_namespace(ns_uri, Unsubscribe_node_xer_)) {
      ec_1.set_msg("node': ");
      field_node.XER_decode(Unsubscribe_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (check_name(attr_name, Unsubscribe_subid_xer_, 1) && check_namespace(ns_uri, Unsubscribe_subid_xer_)) {
      ec_1.set_msg("subid': ");
      field_subid.XER_decode(Unsubscribe_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
    } else    if (parent_tag && !strcmp(attr_name, "type") && !strcmp((const char*)p_reader.Prefix(), "xsi")) {} else
    {
      if (!p_reader.LocalName() || strcmp((const char*)p_reader.LocalName(), "schemaLocation") ||
          !p_reader.Prefix() || strcmp((const char*)p_reader.Prefix(), "xsi"))
      {
        ec_0.set_msg(" "); ec_1.set_msg(" ");
        TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Unexpected attribute '%s', ns '%s'", attr_name, ns_uri ? ns_uri : "");
      }
    }
  }
  if (!field_jid.is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_INVAL_MSG, "Missing attribute 'jid'");
 }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
} else {
  if (!p_reader.IsEmptyElement()) p_reader.Read();
  {
    ec_1.set_msg("jid': ");
    field_jid.XER_decode(Unsubscribe_jid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("node': ");
    field_node.XER_decode(Unsubscribe_node_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
  {
    ec_1.set_msg("subid': ");
    field_subid.XER_decode(Unsubscribe_subid_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL), 0);
  }
}
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_base = *static_cast<const Empty*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("base': ");
    field_base.XER_decode(Unsubscribe_base_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Unsubscribe::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "jid");
    enc_len += field_jid.JSON_encode(Unsubscribe_jid_descr_, p_tok);
  }

  if (field_node.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "node");
    enc_len += field_node.JSON_encode(Unsubscribe_node_descr_, p_tok);
  }

  if (field_subid.is_present())
  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "subid");
    enc_len += field_subid.JSON_encode(Unsubscribe_subid_descr_, p_tok);
  }

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "base");
    enc_len += field_base.JSON_encode(Unsubscribe_base_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Unsubscribe::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (3 == name_len && 0 == strncmp(fld_name, "jid", name_len)) {
        int ret_val = field_jid.JSON_decode(Unsubscribe_jid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "jid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "node", name_len)) {
        int ret_val = field_node.JSON_decode(Unsubscribe_node_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "node");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (5 == name_len && 0 == strncmp(fld_name, "subid", name_len)) {
        int ret_val = field_subid.JSON_decode(Unsubscribe_subid_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "subid");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else if (4 == name_len && 0 == strncmp(fld_name, "base", name_len)) {
        int ret_val = field_base.JSON_decode(Unsubscribe_base_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "base");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_jid.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "jid");
    return JSON_ERROR_FATAL;
  }
  if (!field_node.is_bound()) {
    field_node = OMIT_VALUE;
  }
  if (!field_subid.is_bound()) {
    field_subid = OMIT_VALUE;
  }
  if (!field_base.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "base");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Unsubscribe_template::single_value_struct {
UNIVERSAL_CHARSTRING_template field_jid;
UNIVERSAL_CHARSTRING_template field_node;
UNIVERSAL_CHARSTRING_template field_subid;
Empty_template field_base;
};

void Unsubscribe_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_jid = ANY_VALUE;
single_value->field_node = ANY_OR_OMIT;
single_value->field_subid = ANY_OR_OMIT;
single_value->field_base = ANY_VALUE;
}
}
}

void Unsubscribe_template::copy_value(const Unsubscribe& other_value)
{
single_value = new single_value_struct;
if (other_value.jid().is_bound()) {
  single_value->field_jid = other_value.jid();
} else {
  single_value->field_jid.clean_up();
}
if (other_value.node().is_bound()) {
  if (other_value.node().ispresent()) single_value->field_node = other_value.node()();
  else single_value->field_node = OMIT_VALUE;
} else {
  single_value->field_node.clean_up();
}
if (other_value.subid().is_bound()) {
  if (other_value.subid().ispresent()) single_value->field_subid = other_value.subid()();
  else single_value->field_subid = OMIT_VALUE;
} else {
  single_value->field_subid.clean_up();
}
if (other_value.base().is_bound()) {
  single_value->field_base = other_value.base();
} else {
  single_value->field_base.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Unsubscribe_template::copy_template(const Unsubscribe_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.jid().get_selection()) {
single_value->field_jid = other_value.jid();
} else {
single_value->field_jid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.node().get_selection()) {
single_value->field_node = other_value.node();
} else {
single_value->field_node.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.subid().get_selection()) {
single_value->field_subid = other_value.subid();
} else {
single_value->field_subid.clean_up();
}
if (UNINITIALIZED_TEMPLATE != other_value.base().get_selection()) {
single_value->field_base = other_value.base();
} else {
single_value->field_base.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Unsubscribe_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
break;
}
set_selection(other_value);
}

Unsubscribe_template::Unsubscribe_template()
{
}

Unsubscribe_template::Unsubscribe_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Unsubscribe_template::Unsubscribe_template(const Unsubscribe& other_value)
{
copy_value(other_value);
}

Unsubscribe_template::Unsubscribe_template(const OPTIONAL<Unsubscribe>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Unsubscribe&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Unsubscribe from an unbound optional field.");
}
}

Unsubscribe_template::Unsubscribe_template(const Unsubscribe_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Unsubscribe_template::~Unsubscribe_template()
{
clean_up();
}

Unsubscribe_template& Unsubscribe_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Unsubscribe_template& Unsubscribe_template::operator=(const Unsubscribe& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Unsubscribe_template& Unsubscribe_template::operator=(const OPTIONAL<Unsubscribe>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Unsubscribe&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
}
return *this;
}

Unsubscribe_template& Unsubscribe_template::operator=(const Unsubscribe_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Unsubscribe_template::match(const Unsubscribe& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.jid().is_bound()) return FALSE;
if(!single_value->field_jid.match(other_value.jid()))return FALSE;
if(!other_value.node().is_bound()) return FALSE;
if((other_value.node().ispresent() ? !single_value->field_node.match((const UNIVERSAL_CHARSTRING&)other_value.node()) : !single_value->field_node.match_omit()))return FALSE;
if(!other_value.subid().is_bound()) return FALSE;
if((other_value.subid().ispresent() ? !single_value->field_subid.match((const UNIVERSAL_CHARSTRING&)other_value.subid()) : !single_value->field_subid.match_omit()))return FALSE;
if(!other_value.base().is_bound()) return FALSE;
if(!single_value->field_base.match(other_value.base()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
}
return FALSE;
}

boolean Unsubscribe_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_jid.is_bound()) return TRUE;
if (single_value->field_node.is_omit() || single_value->field_node.is_bound()) return TRUE;
if (single_value->field_subid.is_omit() || single_value->field_subid.is_bound()) return TRUE;
if (single_value->field_base.is_bound()) return TRUE;
return FALSE;
}

boolean Unsubscribe_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_jid.is_value()) return FALSE;
if (!single_value->field_node.is_omit() && !single_value->field_node.is_value()) return FALSE;
if (!single_value->field_subid.is_omit() && !single_value->field_subid.is_value()) return FALSE;
if (!single_value->field_base.is_value()) return FALSE;
return TRUE;
}

void Unsubscribe_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Unsubscribe Unsubscribe_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
Unsubscribe ret_val;
if (single_value->field_jid.is_bound()) {
ret_val.jid() = single_value->field_jid.valueof();
}
if (single_value->field_node.is_omit()) ret_val.node() = OMIT_VALUE;
else if (single_value->field_node.is_bound()) {
ret_val.node() = single_value->field_node.valueof();
}
if (single_value->field_subid.is_omit()) ret_val.subid() = OMIT_VALUE;
else if (single_value->field_subid.is_bound()) {
ret_val.subid() = single_value->field_subid.valueof();
}
if (single_value->field_base.is_bound()) {
ret_val.base() = single_value->field_base.valueof();
}
return ret_val;
}

void Unsubscribe_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Unsubscribe_template[list_length];
}

Unsubscribe_template& Unsubscribe_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
return value_list.list_value[list_index];
}

UNIVERSAL_CHARSTRING_template& Unsubscribe_template::jid()
{
set_specific();
return single_value->field_jid;
}

const UNIVERSAL_CHARSTRING_template& Unsubscribe_template::jid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field jid of a non-specific template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
return single_value->field_jid;
}

UNIVERSAL_CHARSTRING_template& Unsubscribe_template::node()
{
set_specific();
return single_value->field_node;
}

const UNIVERSAL_CHARSTRING_template& Unsubscribe_template::node() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field node of a non-specific template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
return single_value->field_node;
}

UNIVERSAL_CHARSTRING_template& Unsubscribe_template::subid()
{
set_specific();
return single_value->field_subid;
}

const UNIVERSAL_CHARSTRING_template& Unsubscribe_template::subid() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field subid of a non-specific template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
return single_value->field_subid;
}

Empty_template& Unsubscribe_template::base()
{
set_specific();
return single_value->field_base;
}

const Empty_template& Unsubscribe_template::base() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field base of a non-specific template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
return single_value->field_base;
}

int Unsubscribe_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
  {    int ret_val = 2;
      if (single_value->field_node.is_present()) ret_val++;
      if (single_value->field_subid.is_present()) ret_val++;
      return ret_val;
    }
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Unsubscribe containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
  }
  return 0;
}

void Unsubscribe_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log();
TTCN_Logger::log_event_str(", node := ");
single_value->field_node.log();
TTCN_Logger::log_event_str(", subid := ");
single_value->field_subid.log();
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Unsubscribe_template::log_match(const Unsubscribe& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_jid.match(match_value.jid())){
TTCN_Logger::log_logmatch_info(".jid");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
if (match_value.node().ispresent()){
if(!single_value->field_node.match(match_value.node())){
TTCN_Logger::log_logmatch_info(".node");
single_value->field_node.log_match(match_value.node());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_node.match_omit()){
 TTCN_Logger::log_logmatch_info(".node := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_node.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if (match_value.subid().ispresent()){
if(!single_value->field_subid.match(match_value.subid())){
TTCN_Logger::log_logmatch_info(".subid");
single_value->field_subid.log_match(match_value.subid());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
} else {
if (!single_value->field_subid.match_omit()){
 TTCN_Logger::log_logmatch_info(".subid := omit with ");
TTCN_Logger::print_logmatch_buffer();
single_value->field_subid.log();
TTCN_Logger::log_event_str(" unmatched");
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}
if(!single_value->field_base.match(match_value.base())){
TTCN_Logger::log_logmatch_info(".base");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ jid := ");
single_value->field_jid.log_match(match_value.jid());
TTCN_Logger::log_event_str(", node := ");
if (match_value.node().ispresent()) single_value->field_node.log_match(match_value.node());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_node.log();
if (single_value->field_node.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", subid := ");
if (match_value.subid().ispresent()) single_value->field_subid.log_match(match_value.subid());
else {
TTCN_Logger::log_event_str("omit with ");
single_value->field_subid.log();
if (single_value->field_subid.match_omit()) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
TTCN_Logger::log_event_str(", base := ");
single_value->field_base.log_match(match_value.base());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Unsubscribe_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_jid.encode_text(text_buf);
single_value->field_node.encode_text(text_buf);
single_value->field_subid.encode_text(text_buf);
single_value->field_base.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
}
}

void Unsubscribe_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_jid.decode_text(text_buf);
single_value->field_node.decode_text(text_buf);
single_value->field_subid.decode_text(text_buf);
single_value->field_base.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Unsubscribe_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Unsubscribe.");
}
}

void Unsubscribe_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Unsubscribe'");
    }
    if (strcmp("jid", param_field) == 0) {
      jid().set_param(param);
      return;
    } else if (strcmp("node", param_field) == 0) {
      node().set_param(param);
      return;
    } else if (strcmp("subid", param_field) == 0) {
      subid().set_param(param);
      return;
    } else if (strcmp("base", param_field) == 0) {
      base().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Unsubscribe'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (4<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Unsubscribe has 4 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) jid().set_param(*param.get_elem(0));
    if (param.get_size()>1 && param.get_elem(1)->get_type()!=Module_Param::MP_NotUsed) node().set_param(*param.get_elem(1));
    if (param.get_size()>2 && param.get_elem(2)->get_type()!=Module_Param::MP_NotUsed) subid().set_param(*param.get_elem(2));
    if (param.get_size()>3 && param.get_elem(3)->get_type()!=Module_Param::MP_NotUsed) base().set_param(*param.get_elem(3));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "jid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          jid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "node")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          node().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "subid")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          subid().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "base")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          base().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Unsubscribe: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Unsubscribe");
  }
  is_ifpresent = param.get_ifpresent();
}

void Unsubscribe_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_jid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Unsubscribe");
single_value->field_node.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Unsubscribe");
single_value->field_subid.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Unsubscribe");
single_value->field_base.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Unsubscribe");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Unsubscribe");
}

boolean Unsubscribe_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Unsubscribe_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}

Pubsub::Pubsub()
{
  bound_flag = FALSE;
}

Pubsub::Pubsub(const Pubsub_choice& par_choice)
  :   field_choice(par_choice)
{
  bound_flag = TRUE;
}

Pubsub::Pubsub(const Pubsub& other_value)
{
if(!other_value.is_bound()) TTCN_error("Copying an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.");
bound_flag = TRUE;
if (other_value.choice().is_bound()) field_choice = other_value.choice();
else field_choice.clean_up();
}

void Pubsub::clean_up()
{
field_choice.clean_up();
bound_flag = FALSE;
}

Pubsub& Pubsub::operator=(const Pubsub& other_value)
{
if (this != &other_value) {
  if(!other_value.is_bound()) TTCN_error("Assignment of an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.");
  bound_flag = TRUE;
  if (other_value.choice().is_bound()) field_choice = other_value.choice();
  else field_choice.clean_up();
}
return *this;
}

boolean Pubsub::operator==(const Pubsub& other_value) const
{
if (!is_bound() && !other_value.is_bound()) return TRUE;
return field_choice==other_value.field_choice;
}

boolean Pubsub::is_bound() const
{
if (bound_flag) return TRUE;
if(field_choice.is_bound()) return TRUE;
return FALSE;
}
boolean Pubsub::is_value() const
{
if (!is_bound()) return FALSE;
if(!field_choice.is_value()) return FALSE;
return TRUE;
}
int Pubsub::size_of() const
{
  if (!is_bound()) TTCN_error("Calculating the size of an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub");
  return 1;
}

void Pubsub::log() const
{
if (!is_bound()) {
TTCN_Logger::log_event_unbound();
return;
}
TTCN_Logger::log_event_str("{ choice := ");
field_choice.log();
TTCN_Logger::log_event_str(" }");
}

void Pubsub::set_param(Module_Param& param)
{
  bound_flag = TRUE;
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record type `@http_jabber_org_protocol_pubsub.Pubsub'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else param.error("Field `%s' not found in record type `@http_jabber_org_protocol_pubsub.Pubsub'", param_field);
  }
  param.basic_check(Module_Param::BC_VALUE, "record value");
  switch (param.get_type()) {
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record value of type @http_jabber_org_protocol_pubsub.Pubsub has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record value", "@http_jabber_org_protocol_pubsub.Pubsub");
  }
}

void Pubsub::set_implicit_omit()
{
if (choice().is_bound()) choice().set_implicit_omit();
}

void Pubsub::encode_text(Text_Buf& text_buf) const
{
if (!is_bound()) TTCN_error("Text encoder: Encoding an unbound record/set value of type @http_jabber_org_protocol_pubsub.Pubsub.");
field_choice.encode_text(text_buf);
}

void Pubsub::decode_text(Text_Buf& text_buf)
{
bound_flag = TRUE;
field_choice.decode_text(text_buf);
}

void Pubsub::encode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...) const
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-encoding type '%s': ", p_td.name);
    unsigned BER_coding=va_arg(pvar, unsigned);
    BER_encode_chk_coding(BER_coding);
    ASN_BER_TLV_t *tlv=BER_encode_TLV(p_td, BER_coding);
    tlv->put_in_buffer(p_buf);
    ASN_BER_TLV_t::destruct(tlv);
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-encoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    RAW_enc_tr_pos rp;
    rp.level=0;
    rp.pos=NULL;
    RAW_enc_tree root(FALSE, NULL, &rp, 1, p_td.raw);
    RAW_encode(p_td, root);
    root.put_to_buf(p_buf);
    break;}
  case TTCN_EncDec::CT_TEXT: {
    TTCN_EncDec_ErrorContext ec("While TEXT-encoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
      ("No TEXT descriptor available for type '%s'.", p_td.name);
    TEXT_encode(p_td,p_buf);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-encoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XER_encode(*(p_td.xer),p_buf, XER_coding, 0, 0);
    p_buf.put_c('\n');
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-encoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok(va_arg(pvar, int) != 0);
    JSON_encode(p_td, tok);
    p_buf.put_s(tok.get_buffer_length(), (const unsigned char*)tok.get_buffer());
    break;}
  default:
    TTCN_error("Unknown coding method requested to encode type '%s'", p_td.name);
  }
  va_end(pvar);
}

void Pubsub::decode(const TTCN_Typedescriptor_t& p_td, TTCN_Buffer& p_buf, TTCN_EncDec::coding_t p_coding, ...)
{
  va_list pvar;
  va_start(pvar, p_coding);
  switch(p_coding) {
  case TTCN_EncDec::CT_BER: {
    TTCN_EncDec_ErrorContext ec("While BER-decoding type '%s': ", p_td.name);
    unsigned L_form=va_arg(pvar, unsigned);
    ASN_BER_TLV_t tlv;
    BER_decode_str2TLV(p_buf, tlv, L_form);
    BER_decode_TLV(p_td, tlv, L_form);
    if(tlv.isComplete) p_buf.increase_pos(tlv.get_len());
    break;}
  case TTCN_EncDec::CT_RAW: {
    TTCN_EncDec_ErrorContext ec("While RAW-decoding type '%s': ", p_td.name);
    if(!p_td.raw)
      TTCN_EncDec_ErrorContext::error_internal
        ("No RAW descriptor available for type '%s'.", p_td.name);
    raw_order_t r_order;
    switch(p_td.raw->top_bit_order) {
    case TOP_BIT_LEFT:
      r_order=ORDER_LSB;
      break;
    case TOP_BIT_RIGHT:
    default:
      r_order=ORDER_MSB;
    }
    int rawr = RAW_decode(p_td, p_buf, p_buf.get_len()*8, r_order);
    if(rawr<0) switch (-rawr) {
    case TTCN_EncDec::ET_INCOMPL_MSG:
    case TTCN_EncDec::ET_LEN_ERR:
      ec.error((TTCN_EncDec::error_type_t)-rawr, "Can not decode type '%s', because incomplete message was received", p_td.name);
      break;
    case 1:
    default:
      ec.error(TTCN_EncDec::ET_INVAL_MSG, "Can not decode type '%s', because invalid message was received", p_td.name);
      break;
    }
    break;}
  case TTCN_EncDec::CT_TEXT: {
    Limit_Token_List limit;
    TTCN_EncDec_ErrorContext ec("While TEXT-decoding type '%s': ", p_td.name);
    if(!p_td.text)
      TTCN_EncDec_ErrorContext::error_internal
        ("No TEXT descriptor available for type '%s'.", p_td.name);
    const unsigned char *b_data=p_buf.get_data();
    if(b_data[p_buf.get_len()-1]!='\0'){
      p_buf.set_pos(p_buf.get_len());
      p_buf.put_zero(8,ORDER_LSB);
      p_buf.rewind();
    }
    if(TEXT_decode(p_td,p_buf,limit)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    break;}
  case TTCN_EncDec::CT_XER: {
    TTCN_EncDec_ErrorContext ec("While XER-decoding type '%s': ", p_td.name);
    unsigned XER_coding=va_arg(pvar, unsigned);
    XER_encode_chk_coding(XER_coding, p_td);
    XmlReaderWrap reader(p_buf);
    for (int rd_ok=reader.Read(); rd_ok==1; rd_ok=reader.Read()) {
      if (reader.NodeType() == XML_READER_TYPE_ELEMENT) break;
    }
    XER_decode(*(p_td.xer), reader, XER_coding | XER_TOPLEVEL, 0);
    size_t bytes = reader.ByteConsumed();
    p_buf.set_pos(bytes);
    break;}
  case TTCN_EncDec::CT_JSON: {
    TTCN_EncDec_ErrorContext ec("While JSON-decoding type '%s': ", p_td.name);
    if(!p_td.json)
      TTCN_EncDec_ErrorContext::error_internal
        ("No JSON descriptor available for type '%s'.", p_td.name);
    JSON_Tokenizer tok((const char*)p_buf.get_data(), p_buf.get_len());
    if(JSON_decode(p_td, tok, false)<0)
      ec.error(TTCN_EncDec::ET_INCOMPL_MSG,"Can not decode type '%s', because invalid or incomplete message was received", p_td.name);
    p_buf.set_pos(tok.get_buf_pos());
    break;}
  default:
    TTCN_error("Unknown coding method requested to decode type '%s'", p_td.name);
  }
  va_end(pvar);
}

char ** Pubsub::collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const {
  size_t num_collected;
  char **collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
  try {
  char **new_ns;
  size_t num_new;
  bool def_ns_1 = false;
  new_ns = field_choice.collect_ns(Pubsub_choice_xer_, num_new, def_ns);
  merge_ns(collected_ns, num_collected, new_ns, num_new);
  def_ns = def_ns || def_ns_1;
  }
  catch (...) {
    while (num_collected > 0) Free(collected_ns[--num_collected]);
    Free(collected_ns);
    throw;
  }
  num_ns = num_collected;
  return collected_ns;
}

boolean Pubsub::can_start(const char *name, const char *uri, const XERdescriptor_t& xd, unsigned int flavor) {
  boolean e_xer = is_exer(flavor &= ~XER_RECOF);
  if (!e_xer || !((xd.xer_bits & UNTAGGED) || (flavor & (USE_NIL|XER_RECOF)))) return check_name(name, xd, e_xer) && (!e_xer || check_namespace(uri, xd));
  else if (Pubsub_choice::can_start(name, uri, Pubsub_choice_xer_, flavor)) return true;
  return false;
}

int Pubsub::XER_encode(const XERdescriptor_t& p_td, TTCN_Buffer& p_buf, unsigned int p_flavor, int p_indent, embed_values_enc_struct_t*) const
{
  if (!is_bound()) TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND, "Encoding an unbound value.");
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  int encoded_length=(int)p_buf.get_len();
  int e_xer = is_exer(p_flavor);
  const boolean omit_tag = e_xer && p_indent && ((p_td.xer_bits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  if (e_xer && (p_td.xer_bits & EMBED_VALUES)) p_flavor |= XER_CANONICAL;
  int is_indented = !is_canonical(p_flavor);
  const boolean need_control_ns = (p_td.xer_bits & (USE_NIL));
  size_t num_collected = 0;
  char **collected_ns = NULL;
  bool def_ns = false;
  if (e_xer) {
    if (p_indent == 0) {
      collected_ns = collect_ns(p_td, num_collected, def_ns);
    }
    else if ((p_flavor & DEF_NS_SQUASHED) && p_td.my_module && p_td.ns_index != -1){
      const namespace_t * ns = p_td.my_module->get_ns(p_td.ns_index);
      if (*ns->px == '\0') {
        collected_ns = Base_Type::collect_ns(p_td, num_collected, def_ns);
      }
    }
  }
  const boolean empty_ns_hack = e_xer && !omit_tag && (p_indent > 0)
    && (p_td.xer_bits & FORM_UNQUALIFIED)
    && p_td.my_module && p_td.ns_index != -1
    && *p_td.my_module->get_ns(p_td.ns_index)->px == '\0';
  const boolean delay_close = e_xer && (need_control_ns || num_collected || empty_ns_hack);
  size_t chopped_chars = 0;
  if (!omit_tag) {
    if (is_indented) do_indent(p_buf, p_indent);
    p_buf.put_c('<');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-(delay_close || (e_xer && (p_td.xer_bits & HAS_1UNTAGGED)))-(!is_indented || delay_close), (cbyte*)p_td.names[e_xer]);
  }
  else if (p_flavor & USE_TYPE_ATTR) {
    size_t buf_len = p_buf.get_len();
    const unsigned char * const buf_data = p_buf.get_data();
    if (buf_data[buf_len-1-chopped_chars] == '\n') ++chopped_chars;
    if (buf_data[buf_len-1-chopped_chars] == '>' ) ++chopped_chars;
    if (chopped_chars) {
      p_buf.increase_length(-chopped_chars);
    }
  }
  int sub_len=0;
  p_flavor &= XER_MASK;
  { // !QN
  if (e_xer && num_collected) {
    size_t num_ns;
    for (num_ns = 0; num_ns < num_collected; ++num_ns) {
      p_buf.put_s(strlen(collected_ns[num_ns]), (cbyte*)collected_ns[num_ns]);
      Free(collected_ns[num_ns]);
    }
    Free(collected_ns);
  }

  if (def_ns) {
    p_flavor &= ~DEF_NS_SQUASHED;
    p_flavor |=  DEF_NS_PRESENT;
  }
  else if (empty_ns_hack) {
    p_buf.put_s(9, (cbyte*)" xmlns=''");
    p_flavor &= ~DEF_NS_PRESENT;
    p_flavor |=  DEF_NS_SQUASHED;
  }
  if (delay_close && (!omit_tag || chopped_chars)) p_buf.put_s(1+is_indented, (cbyte*)">\n");
  ec_1.set_msg("choice': ");
  sub_len += field_choice.XER_encode(Pubsub_choice_xer_, p_buf, p_flavor, p_indent+!omit_tag, 0);
  } // QN?
  if (!omit_tag) {
  if (sub_len) {
    if (is_indented && !(e_xer && (p_td.xer_bits & (HAS_1UNTAGGED | USE_QNAME)))) {
      switch ((int)(e_xer && (p_td.xer_bits & USE_NIL))) {
      case 1: {
        const unsigned char *buf_end = p_buf.get_data() + (p_buf.get_len()-1);
        if (buf_end[-1] != '>' || *buf_end != '\n') break;
      }
      case 0:
        do_indent(p_buf, p_indent);
        break;
      }
    }
    p_buf.put_c('<');
    p_buf.put_c('/');
    if (e_xer) write_ns_prefix(p_td, p_buf);
    p_buf.put_s((size_t)p_td.namelens[e_xer]-!is_indented, (cbyte*)p_td.names[e_xer]);
  } else {
    p_buf.increase_length(-is_indented-1);
    p_buf.put_s((size_t)2+is_indented, (cbyte*)"/>\n");
  }}
  return (int)p_buf.get_len() - encoded_length;
}

int Pubsub::XER_decode(const XERdescriptor_t& p_td, XmlReaderWrap& p_reader, unsigned int p_flavor, embed_values_dec_struct_t*)
{
  bound_flag = TRUE;
  int e_xer = is_exer(p_flavor);
  int xerbits = p_td.xer_bits;
  if (p_flavor & XER_TOPLEVEL) xerbits &= ~UNTAGGED;
  const boolean omit_tag = e_xer && ((xerbits & (UNTAGGED|XER_ATTRIBUTE)) || (p_flavor & (USE_NIL|USE_TYPE_ATTR)));
  boolean tag_closed = (p_flavor & PARENT_CLOSED) != 0;
  const boolean parent_tag = e_xer && (p_flavor & (USE_TYPE_ATTR));
  (void)parent_tag;
  p_flavor &= XER_MASK;
  int rd_ok, xml_depth=-1, type;
  {
  TTCN_EncDec_ErrorContext ec_0("Component '");
  TTCN_EncDec_ErrorContext ec_1;
  if (!omit_tag) for (rd_ok=p_reader.Ok(); rd_ok==1; rd_ok=p_reader.Read()) {
    type = p_reader.NodeType();
    if (type==XML_READER_TYPE_ELEMENT) {
      verify_name(p_reader, p_td, e_xer);
      xml_depth = p_reader.Depth();
      tag_closed = p_reader.IsEmptyElement();
      break;
    }
  }
  if ((!omit_tag || parent_tag) && !p_reader.IsEmptyElement()) rd_ok = p_reader.Read();
  if (e_xer && p_td.dfeValue && p_reader.IsEmptyElement()) {
    field_choice = *static_cast<const Pubsub_choice*>(p_td.dfeValue);
  }
  else  {
    ec_1.set_msg("choice': ");
    field_choice.XER_decode(Pubsub_choice_xer_, p_reader, p_flavor | (p_td.xer_bits & USE_NIL)| (tag_closed ? PARENT_CLOSED : 0), 0);
  }
  } // errorcontext
  if (!omit_tag) {
    int current_depth;
    for (rd_ok = p_reader.Ok(); rd_ok == 1; rd_ok = p_reader.Read()) {
      type = p_reader.NodeType();
      if ((current_depth = p_reader.Depth()) > xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_TAG,
              "Unprocessed XML tag `%s'", (const char *)p_reader.Name());
        }
        continue;
      }
      else if (current_depth == xml_depth) {
        if (XML_READER_TYPE_ELEMENT == type) {
          verify_name(p_reader, p_td, e_xer);
          if (p_reader.IsEmptyElement()) {
            p_reader.Read();
            break;
          }
        }
        else if (XML_READER_TYPE_END_ELEMENT == type) {
          verify_end(p_reader, p_td, xml_depth, e_xer);
          rd_ok = p_reader.Read();
          break;
        }
      }
      else break;    }
  }
  return 1;
}

int Pubsub::JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok) const
{
  if (!is_bound()) {
    TTCN_EncDec_ErrorContext::error(TTCN_EncDec::ET_UNBOUND,
      "Encoding an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.");
    return -1;
  }

  int enc_len = p_tok.put_next_token(JSON_TOKEN_OBJECT_START, NULL);

  {
    enc_len += p_tok.put_next_token(JSON_TOKEN_NAME, "choice");
    enc_len += field_choice.JSON_encode(Pubsub_choice_descr_, p_tok);
  }

  enc_len += p_tok.put_next_token(JSON_TOKEN_OBJECT_END, NULL);
  return enc_len;
}

int Pubsub::JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer& p_tok, boolean p_silent)
{
  json_token_t j_token = JSON_TOKEN_NONE;
  int dec_len = p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_ERROR == j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_BAD_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }
  else if (JSON_TOKEN_OBJECT_START != j_token) {
    return JSON_ERROR_INVALID_TOKEN;
  }
  bound_flag = TRUE;

  while (true) {
    char* fld_name = 0;
    size_t name_len = 0;
    size_t buf_pos = p_tok.get_buf_pos();
    dec_len += p_tok.get_next_token(&j_token, &fld_name, &name_len);
    if (JSON_TOKEN_ERROR == j_token) {
      JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_NAME_TOKEN_ERROR);
      return JSON_ERROR_FATAL;
    }
    else if (JSON_TOKEN_NAME != j_token) {
      p_tok.set_buf_pos(buf_pos);
      break;
    }
    else {
      if (6 == name_len && 0 == strncmp(fld_name, "choice", name_len)) {
        int ret_val = field_choice.JSON_decode(Pubsub_choice_descr_, p_tok, p_silent);
        if (0 > ret_val) {
          if (JSON_ERROR_INVALID_TOKEN) {
            JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, "choice");
          }
          return JSON_ERROR_FATAL;
        }
        dec_len += ret_val;
      } else {
        char* fld_name2 = mcopystrn(fld_name, name_len);
        JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_INVALID_NAME_ERROR, fld_name2);
        dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
        if (JSON_TOKEN_NUMBER != j_token && JSON_TOKEN_STRING != j_token &&
            JSON_TOKEN_LITERAL_TRUE != j_token && JSON_TOKEN_LITERAL_FALSE != j_token &&
            JSON_TOKEN_LITERAL_NULL != j_token) {
          JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_FIELD_TOKEN_ERROR, fld_name2);
          Free(fld_name2);
          return JSON_ERROR_FATAL;
        }
        Free(fld_name2);
      }
    }
  }

  dec_len += p_tok.get_next_token(&j_token, NULL, NULL);
  if (JSON_TOKEN_OBJECT_END != j_token) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_OBJECT_END_TOKEN_ERROR, "");
    return JSON_ERROR_FATAL;
  }

  if (!field_choice.is_bound()) {
    JSON_ERROR(TTCN_EncDec::ET_INVAL_MSG, JSON_DEC_MISSING_FIELD_ERROR, "choice");
    return JSON_ERROR_FATAL;
  }

  return dec_len;
}

struct Pubsub_template::single_value_struct {
Pubsub_choice_template field_choice;
};

void Pubsub_template::set_specific()
{
if (template_selection != SPECIFIC_VALUE) {
template_sel old_selection = template_selection;
clean_up();
single_value = new single_value_struct;
set_selection(SPECIFIC_VALUE);
if (old_selection == ANY_VALUE || old_selection == ANY_OR_OMIT) {
single_value->field_choice = ANY_VALUE;
}
}
}

void Pubsub_template::copy_value(const Pubsub& other_value)
{
single_value = new single_value_struct;
if (other_value.choice().is_bound()) {
  single_value->field_choice = other_value.choice();
} else {
  single_value->field_choice.clean_up();
}
set_selection(SPECIFIC_VALUE);
}

void Pubsub_template::copy_template(const Pubsub_template& other_value)
{
switch (other_value.template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
if (UNINITIALIZED_TEMPLATE != other_value.choice().get_selection()) {
single_value->field_choice = other_value.choice();
} else {
single_value->field_choice.clean_up();
}
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = other_value.value_list.n_values;
value_list.list_value = new Pubsub_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].copy_template(other_value.value_list.list_value[list_count]);
break;
default:
TTCN_error("Copying an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.");
break;
}
set_selection(other_value);
}

Pubsub_template::Pubsub_template()
{
}

Pubsub_template::Pubsub_template(template_sel other_value)
 : Base_Template(other_value)
{
check_single_selection(other_value);
}

Pubsub_template::Pubsub_template(const Pubsub& other_value)
{
copy_value(other_value);
}

Pubsub_template::Pubsub_template(const OPTIONAL<Pubsub>& other_value)
{
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Creating a template of type @http_jabber_org_protocol_pubsub.Pubsub from an unbound optional field.");
}
}

Pubsub_template::Pubsub_template(const Pubsub_template& other_value)
: Base_Template()
{
copy_template(other_value);
}

Pubsub_template::~Pubsub_template()
{
clean_up();
}

Pubsub_template& Pubsub_template::operator=(template_sel other_value)
{
check_single_selection(other_value);
clean_up();
set_selection(other_value);
return *this;
}

Pubsub_template& Pubsub_template::operator=(const Pubsub& other_value)
{
clean_up();
copy_value(other_value);
return *this;
}

Pubsub_template& Pubsub_template::operator=(const OPTIONAL<Pubsub>& other_value)
{
clean_up();
switch (other_value.get_selection()) {
case OPTIONAL_PRESENT:
copy_value((const Pubsub&)other_value);
break;
case OPTIONAL_OMIT:
set_selection(OMIT_VALUE);
break;
default:
TTCN_error("Assignment of an unbound optional field to a template of type @http_jabber_org_protocol_pubsub.Pubsub.");
}
return *this;
}

Pubsub_template& Pubsub_template::operator=(const Pubsub_template& other_value)
{
if (&other_value != this) {
clean_up();
copy_template(other_value);
}
return *this;
}

boolean Pubsub_template::match(const Pubsub& other_value) const
{
if (!other_value.is_bound()) return FALSE;
switch (template_selection) {
case ANY_VALUE:
case ANY_OR_OMIT:
return TRUE;
case OMIT_VALUE:
return FALSE;
case SPECIFIC_VALUE:
if(!other_value.choice().is_bound()) return FALSE;
if(!single_value->field_choice.match(other_value.choice()))return FALSE;
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
if (value_list.list_value[list_count].match(other_value)) return template_selection == VALUE_LIST;
return template_selection == COMPLEMENTED_LIST;
default:
TTCN_error("Matching an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.");
}
return FALSE;
}

boolean Pubsub_template::is_bound() const
{
if (template_selection == UNINITIALIZED_TEMPLATE && !is_ifpresent) return FALSE;
if (template_selection != SPECIFIC_VALUE) return TRUE;
if (single_value->field_choice.is_bound()) return TRUE;
return FALSE;
}

boolean Pubsub_template::is_value() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent) return FALSE;
if (!single_value->field_choice.is_value()) return FALSE;
return TRUE;
}

void Pubsub_template::clean_up()
{
switch (template_selection) {
case SPECIFIC_VALUE:
delete single_value;
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
delete [] value_list.list_value;
default:
break;
}
template_selection = UNINITIALIZED_TEMPLATE;
}

Pubsub Pubsub_template::valueof() const
{
if (template_selection != SPECIFIC_VALUE || is_ifpresent)
TTCN_error("Performing valueof or send operation on a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.");
Pubsub ret_val;
if (single_value->field_choice.is_bound()) {
ret_val.choice() = single_value->field_choice.valueof();
}
return ret_val;
}

void Pubsub_template::set_type(template_sel template_type, unsigned int list_length)
{
if (template_type != VALUE_LIST && template_type != COMPLEMENTED_LIST)
TTCN_error("Setting an invalid list for a template of type @http_jabber_org_protocol_pubsub.Pubsub.");
clean_up();
set_selection(template_type);
value_list.n_values = list_length;
value_list.list_value = new Pubsub_template[list_length];
}

Pubsub_template& Pubsub_template::list_item(unsigned int list_index) const
{
if (template_selection != VALUE_LIST && template_selection != COMPLEMENTED_LIST)
TTCN_error("Accessing a list element of a non-list template of type @http_jabber_org_protocol_pubsub.Pubsub.");
if (list_index >= value_list.n_values)
TTCN_error("Index overflow in a value list template of type @http_jabber_org_protocol_pubsub.Pubsub.");
return value_list.list_value[list_index];
}

Pubsub_choice_template& Pubsub_template::choice()
{
set_specific();
return single_value->field_choice;
}

const Pubsub_choice_template& Pubsub_template::choice() const
{
if (template_selection != SPECIFIC_VALUE)
TTCN_error("Accessing field choice of a non-specific template of type @http_jabber_org_protocol_pubsub.Pubsub.");
return single_value->field_choice;
}

int Pubsub_template::size_of() const
{
  if (is_ifpresent) TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub which has an ifpresent attribute.");
  switch (template_selection)
  {
  case SPECIFIC_VALUE:
    return 1;
  case VALUE_LIST:
   {
     if (value_list.n_values<1)
       TTCN_error("Internal error: Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub containing an empty list.");
      int item_size = value_list.list_value[0].size_of();
      for (unsigned int l_idx = 1; l_idx < value_list.n_values; l_idx++)
      {
        if (value_list.list_value[l_idx].size_of()!=item_size)
          TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub containing a value list with different sizes.");
      }
      return item_size;
    }
  case OMIT_VALUE:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub containing omit value.");
  case ANY_VALUE:
  case ANY_OR_OMIT:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub containing */? value.");
  case COMPLEMENTED_LIST:
    TTCN_error("Performing sizeof() operation on a template of type @http_jabber_org_protocol_pubsub.Pubsub containing complemented list.");
  default:
    TTCN_error("Performing sizeof() operation on an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.");
  }
  return 0;
}

void Pubsub_template::log() const
{
switch (template_selection) {
case SPECIFIC_VALUE:
TTCN_Logger::log_event_str("{ choice := ");
single_value->field_choice.log();
TTCN_Logger::log_event_str(" }");
break;
case COMPLEMENTED_LIST:
TTCN_Logger::log_event_str("complement ");
case VALUE_LIST:
TTCN_Logger::log_char('(');
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++) {
if (list_count > 0) TTCN_Logger::log_event_str(", ");
value_list.list_value[list_count].log();
}
TTCN_Logger::log_char(')');
break;
default:
log_generic();
}
log_ifpresent();
}

void Pubsub_template::log_match(const Pubsub& match_value) const
{
if(TTCN_Logger::VERBOSITY_COMPACT == TTCN_Logger::get_matching_verbosity()){
if(match(match_value)){
TTCN_Logger::print_logmatch_buffer();
TTCN_Logger::log_event_str(" matched");
} else{
if (template_selection == SPECIFIC_VALUE) {
size_t previous_size = TTCN_Logger::get_logmatch_buffer_len();
if(!single_value->field_choice.match(match_value.choice())){
TTCN_Logger::log_logmatch_info(".choice");
single_value->field_choice.log_match(match_value.choice());
TTCN_Logger::set_logmatch_buffer_len(previous_size);
}
}else {
TTCN_Logger::print_logmatch_buffer();
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
TTCN_Logger::log_event_str(" unmatched");
}
}
return;
}
if (template_selection == SPECIFIC_VALUE) {
TTCN_Logger::log_event_str("{ choice := ");
single_value->field_choice.log_match(match_value.choice());
TTCN_Logger::log_event_str(" }");
} else {
match_value.log();
TTCN_Logger::log_event_str(" with ");
log();
if (match(match_value)) TTCN_Logger::log_event_str(" matched");
else TTCN_Logger::log_event_str(" unmatched");
}
}

void Pubsub_template::encode_text(Text_Buf& text_buf) const
{
encode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value->field_choice.encode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
text_buf.push_int(value_list.n_values);
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].encode_text(text_buf);
break;
default:
TTCN_error("Text encoder: Encoding an uninitialized/unsupported template of type @http_jabber_org_protocol_pubsub.Pubsub.");
}
}

void Pubsub_template::decode_text(Text_Buf& text_buf)
{
clean_up();
decode_text_base(text_buf);
switch (template_selection) {
case SPECIFIC_VALUE:
single_value = new single_value_struct;
single_value->field_choice.decode_text(text_buf);
case OMIT_VALUE:
case ANY_VALUE:
case ANY_OR_OMIT:
break;
case VALUE_LIST:
case COMPLEMENTED_LIST:
value_list.n_values = text_buf.pull_int().get_val();
value_list.list_value = new Pubsub_template[value_list.n_values];
for (unsigned int list_count = 0; list_count < value_list.n_values; list_count++)
value_list.list_value[list_count].decode_text(text_buf);
break;
default:
TTCN_error("Text decoder: An unknown/unsupported selection was received in a template of type @http_jabber_org_protocol_pubsub.Pubsub.");
}
}

void Pubsub_template::set_param(Module_Param& param)
{
  if (dynamic_cast<Module_Param_Name*>(param.get_id()) != NULL &&
      param.get_id()->next_name()) {
    char* param_field = param.get_id()->get_current_name();
    if (param_field[0] >= '0' && param_field[0] <= '9') {
      param.error("Unexpected array index in module parameter, expected a valid field"
        " name for record template type `@http_jabber_org_protocol_pubsub.Pubsub'");
    }
    if (strcmp("choice", param_field) == 0) {
      choice().set_param(param);
      return;
    } else param.error("Field `%s' not found in record template type `@http_jabber_org_protocol_pubsub.Pubsub'", param_field);
  }
  param.basic_check(Module_Param::BC_TEMPLATE, "record template");
  switch (param.get_type()) {
  case Module_Param::MP_Omit:
    *this = OMIT_VALUE;
    break;
  case Module_Param::MP_Any:
    *this = ANY_VALUE;
    break;
  case Module_Param::MP_AnyOrNone:
    *this = ANY_OR_OMIT;
    break;
  case Module_Param::MP_List_Template:
  case Module_Param::MP_ComplementList_Template:
    set_type(param.get_type()==Module_Param::MP_List_Template ? VALUE_LIST : COMPLEMENTED_LIST, param.get_size());
    for (size_t p_i=0; p_i<param.get_size(); p_i++) {
      list_item(p_i).set_param(*param.get_elem(p_i));
    }
    break;
  case Module_Param::MP_Value_List:
    if (1<param.get_size()) {
      param.error("record template of type @http_jabber_org_protocol_pubsub.Pubsub has 1 fields but list value has %d fields", (int)param.get_size());
    }
    if (param.get_size()>0 && param.get_elem(0)->get_type()!=Module_Param::MP_NotUsed) choice().set_param(*param.get_elem(0));
    break;
  case Module_Param::MP_Assignment_List: {
    Vector<bool> value_used(param.get_size());
    value_used.resize(param.get_size(), false);
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) {
      Module_Param* const curr_param = param.get_elem(val_idx);
      if (!strcmp(curr_param->get_id()->get_name(), "choice")) {
        if (curr_param->get_type()!=Module_Param::MP_NotUsed) {
          choice().set_param(*curr_param);
        }
        value_used[val_idx]=true;
      }
    }
    for (size_t val_idx=0; val_idx<param.get_size(); val_idx++) if (!value_used[val_idx]) {
      param.get_elem(val_idx)->error("Non existent field name in type @http_jabber_org_protocol_pubsub.Pubsub: %s", param.get_elem(val_idx)->get_id()->get_name());
      break;
    }
  } break;
  default:
    param.type_error("record template", "@http_jabber_org_protocol_pubsub.Pubsub");
  }
  is_ifpresent = param.get_ifpresent();
}

void Pubsub_template::check_restriction(template_res t_res, const char* t_name) const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return;
switch ((t_name&&(t_res==TR_VALUE))?TR_OMIT:t_res) {
case TR_OMIT:
if (template_selection==OMIT_VALUE) return;
case TR_VALUE:
if (template_selection!=SPECIFIC_VALUE || is_ifpresent) break;
single_value->field_choice.check_restriction(t_res, t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub");
return;
case TR_PRESENT:
if (!match_omit()) return;
break;
default:
return;
}
TTCN_error("Restriction `%s' on template of type %s violated.", get_res_name(t_res), t_name ? t_name : "@http_jabber_org_protocol_pubsub.Pubsub");
}

boolean Pubsub_template::is_present() const
{
if (template_selection==UNINITIALIZED_TEMPLATE) return FALSE;
return !match_omit();
}

boolean Pubsub_template::match_omit() const
{
if (is_ifpresent) return TRUE;
switch (template_selection) {
case OMIT_VALUE:
case ANY_OR_OMIT:
return TRUE;
case VALUE_LIST:
case COMPLEMENTED_LIST:
for (unsigned int l_idx=0; l_idx<value_list.n_values; l_idx++)
if (value_list.list_value[l_idx].match_omit())
return template_selection==VALUE_LIST;
return template_selection==COMPLEMENTED_LIST;
default:
return FALSE;
}
return FALSE;
}


/* Bodies of functions, altsteps and testcases */

boolean operator==(null_type, const Pubsub_choice_choice__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Pubsub.choice.choice_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Affiliations_affiliation__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Affiliations.affiliation_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Items_item__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Items.item_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Publish_item__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Publish.item_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Retract_item__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Retract.item_list.");
return other_value.val_ptr->n_elements == 0;
}

boolean operator==(null_type, const Subscriptions_sequence__list& other_value)
{
if (other_value.val_ptr == NULL)
TTCN_error("The right operand of comparison is an unbound value of type @http_jabber_org_protocol_pubsub.Subscriptions.sequence_list.");
return other_value.val_ptr->n_elements == 0;
}


/* Bodies of static functions */

static void pre_init_module()
{
jabber__x__data::module_object.pre_init_module();
Default_type___dfe = Default_type__::leaf;
}

static void post_init_module()
{
jabber__x__data::module_object.post_init_module();
}


} /* end of namespace */
