// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef urn__ietf__params__xml__ns__xmpp__tls_HH
#define urn__ietf__params__xml__ns__xmpp__tls_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "XSD.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef urn__ietf__params__xml__ns__xmpp__tls_HH
#endif

namespace urn__ietf__params__xml__ns__xmpp__tls {

/* Forward declarations of classes */

class Starttls;
class Starttls_template;
class Starttls_choice;
class Starttls_choice_template;
class Empty;
class Empty_template;

} /* end of namespace */

#ifndef urn__ietf__params__xml__ns__xmpp__tls_HH
#define urn__ietf__params__xml__ns__xmpp__tls_HH

namespace urn__ietf__params__xml__ns__xmpp__tls {

/* Type definitions */

typedef Empty Proceed;
typedef Empty_template Proceed_template;
typedef Empty Failure;
typedef Empty_template Failure_template;

/* Class definitions */

class Starttls : public Base_Type {
  OPTIONAL<Starttls_choice> field_choice;
  boolean bound_flag;
public:
  Starttls();
  Starttls(const OPTIONAL<Starttls_choice>& par_choice);
  Starttls(const Starttls& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Starttls& operator=(const Starttls& other_value);
  boolean operator==(const Starttls& other_value) const;
  inline boolean operator!=(const Starttls& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<Starttls_choice>& choice()
    {return field_choice;}
  inline const OPTIONAL<Starttls_choice>& choice() const
    {return field_choice;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Starttls_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Starttls_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Starttls& other_value);
void copy_template(const Starttls_template& other_value);

public:
Starttls_template();
Starttls_template(template_sel other_value);
Starttls_template(const Starttls& other_value);
Starttls_template(const OPTIONAL<Starttls>& other_value);
Starttls_template(const Starttls_template& other_value);
~Starttls_template();
Starttls_template& operator=(template_sel other_value);
Starttls_template& operator=(const Starttls& other_value);
Starttls_template& operator=(const OPTIONAL<Starttls>& other_value);
Starttls_template& operator=(const Starttls_template& other_value);
boolean match(const Starttls& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Starttls valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Starttls_template& list_item(unsigned int list_index) const;
Starttls_choice_template& choice();
const Starttls_choice_template& choice() const;
int size_of() const;
void log() const;
void log_match(const Starttls& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};

class Starttls_choice : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_required = 1 };
private:
union_selection_type union_selection;
union {
Empty *field_required;
};
void copy_value(const Starttls_choice& other_value);

public:
Starttls_choice();
Starttls_choice(const Starttls_choice& other_value);
~Starttls_choice();
Starttls_choice& operator=(const Starttls_choice& other_value);
boolean operator==(const Starttls_choice& other_value) const;
inline boolean operator!=(const Starttls_choice& other_value) const { return !(*this == other_value); }
Empty& required();
const Empty& required() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class Starttls_choice_template : public Base_Template {
union {
struct {
Starttls_choice::union_selection_type union_selection;
union {
Empty_template *field_required;
};
} single_value;
struct {
unsigned int n_values;
Starttls_choice_template *list_value;
} value_list;
};
void copy_value(const Starttls_choice& other_value);

void copy_template(const Starttls_choice_template& other_value);

public:
Starttls_choice_template();
Starttls_choice_template(template_sel other_value);
Starttls_choice_template(const Starttls_choice& other_value);
Starttls_choice_template(const OPTIONAL<Starttls_choice>& other_value);
Starttls_choice_template(const Starttls_choice_template& other_value);
~Starttls_choice_template();
void clean_up();
Starttls_choice_template& operator=(template_sel other_value);
Starttls_choice_template& operator=(const Starttls_choice& other_value);
Starttls_choice_template& operator=(const OPTIONAL<Starttls_choice>& other_value);
Starttls_choice_template& operator=(const Starttls_choice_template& other_value);
boolean match(const Starttls_choice& other_value) const;
boolean is_value() const;Starttls_choice valueof() const;
Starttls_choice_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& required();
const Empty_template& required() const;
boolean ischosen(Starttls_choice::union_selection_type checked_selection) const;
void log() const;
void log_match(const Starttls_choice& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};


/* Global variable declarations */

extern const XERdescriptor_t Starttls_xer_;
extern const TTCN_JSONdescriptor_t Starttls_json_;
extern const TTCN_Typedescriptor_t Starttls_descr_;
extern const XERdescriptor_t Starttls_choice_xer_;
extern const TTCN_JSONdescriptor_t Starttls_choice_json_;
extern const TTCN_Typedescriptor_t Starttls_choice_descr_;
extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Starttls_choice_required_xer_;
extern const TTCN_Typedescriptor_t Starttls_choice_required_descr_;
extern const XERdescriptor_t Proceed_xer_;
extern const TTCN_Typedescriptor_t Proceed_descr_;
extern const XERdescriptor_t Failure_xer_;
extern const TTCN_Typedescriptor_t Failure_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
