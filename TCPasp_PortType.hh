// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Sep 18 12:18:50 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef TCPasp__PortType_HH
#define TCPasp__PortType_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "TCPasp_Types.hh"
#include "TCPasp_PT.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef TCPasp__PortType_HH
#endif

namespace TCPasp__PortType {

/* Forward declarations of classes */

class TCPasp__PT;

} /* end of namespace */

#ifndef TCPasp__PortType_HH
#define TCPasp__PortType_HH

namespace TCPasp__PortType {

/* Class definitions */

class TCPasp__PT : public TCPasp__PT_PROVIDER {
enum msg_selection { MESSAGE_0, MESSAGE_1, MESSAGE_2, MESSAGE_3, MESSAGE_4, MESSAGE_5 };
struct msg_queue_item : public msg_queue_item_base {
msg_selection item_selection;
union {
TCPasp__Types::ASP__TCP__Connect__result *message_0;
TCPasp__Types::ASP__TCP__Connected *message_1;
TCPasp__Types::ASP__TCP__Listen__result *message_2;
TCPasp__Types::ASP__TCP__Send__error *message_3;
TCPasp__Types::ASP__TCP *message_4;
TCPasp__Types::ASP__TCP__Close *message_5;
};
component sender_component;
};

void remove_msg_queue_head();
protected:
void clear_queue();
public:
TCPasp__PT(const char *par_port_name = NULL);
~TCPasp__PT();
void send(const TCPasp__Types::ASP__TCP__Connect& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Connect& send_par);
void send(const TCPasp__Types::ASP__TCP__Connect_template& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Connect_template& send_par);
void send(const TCPasp__Types::ASP__TCP__Listen& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Listen& send_par);
void send(const TCPasp__Types::ASP__TCP__Listen_template& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Listen_template& send_par);
void send(const TCPasp__Types::ASP__TCP__Shutdown& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Shutdown& send_par);
void send(const TCPasp__Types::ASP__TCP__Shutdown_template& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Shutdown_template& send_par);
void send(const CHARSTRING& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING& send_par);
void send(const CHARSTRING_template& send_par, const COMPONENT& destination_component);
void send(const CHARSTRING_template& send_par);
void send(const TCPasp__Types::ASP__TCP& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP& send_par);
void send(const TCPasp__Types::ASP__TCP_template& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP_template& send_par);
void send(const TCPasp__Types::ASP__TCP__Close& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Close& send_par);
void send(const TCPasp__Types::ASP__TCP__Close_template& send_par, const COMPONENT& destination_component);
void send(const TCPasp__Types::ASP__TCP__Close_template& send_par);
alt_status receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP__Connect__result_template& value_template, TCPasp__Types::ASP__TCP__Connect__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP__Connect__result_template& value_template, TCPasp__Types::ASP__TCP__Connect__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP__Connect__result_template& value_template, TCPasp__Types::ASP__TCP__Connect__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP__Connected_template& value_template, TCPasp__Types::ASP__TCP__Connected *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP__Connected_template& value_template, TCPasp__Types::ASP__TCP__Connected *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP__Connected_template& value_template, TCPasp__Types::ASP__TCP__Connected *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP__Listen__result_template& value_template, TCPasp__Types::ASP__TCP__Listen__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP__Listen__result_template& value_template, TCPasp__Types::ASP__TCP__Listen__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP__Listen__result_template& value_template, TCPasp__Types::ASP__TCP__Listen__result *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP__Send__error_template& value_template, TCPasp__Types::ASP__TCP__Send__error *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP__Send__error_template& value_template, TCPasp__Types::ASP__TCP__Send__error *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP__Send__error_template& value_template, TCPasp__Types::ASP__TCP__Send__error *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP_template& value_template, TCPasp__Types::ASP__TCP *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP_template& value_template, TCPasp__Types::ASP__TCP *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP_template& value_template, TCPasp__Types::ASP__TCP *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status receive(const TCPasp__Types::ASP__TCP__Close_template& value_template, TCPasp__Types::ASP__TCP__Close *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status check_receive(const TCPasp__Types::ASP__TCP__Close_template& value_template, TCPasp__Types::ASP__TCP__Close *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
alt_status trigger(const TCPasp__Types::ASP__TCP__Close_template& value_template, TCPasp__Types::ASP__TCP__Close *value_ptr, const COMPONENT_template& sender_template, COMPONENT *sender_ptr);
private:
void incoming_message(const TCPasp__Types::ASP__TCP__Connect__result& incoming_par, component sender_component);
void incoming_message(const TCPasp__Types::ASP__TCP__Connected& incoming_par, component sender_component);
void incoming_message(const TCPasp__Types::ASP__TCP__Listen__result& incoming_par, component sender_component);
void incoming_message(const TCPasp__Types::ASP__TCP__Send__error& incoming_par, component sender_component);
void incoming_message(const TCPasp__Types::ASP__TCP& incoming_par, component sender_component);
void incoming_message(const TCPasp__Types::ASP__TCP__Close& incoming_par, component sender_component);
protected:
void incoming_message(const TCPasp__Types::ASP__TCP__Connect__result& incoming_par);
void incoming_message(const TCPasp__Types::ASP__TCP__Connected& incoming_par);
void incoming_message(const TCPasp__Types::ASP__TCP__Listen__result& incoming_par);
void incoming_message(const TCPasp__Types::ASP__TCP__Send__error& incoming_par);
void incoming_message(const TCPasp__Types::ASP__TCP& incoming_par);
void incoming_message(const TCPasp__Types::ASP__TCP__Close& incoming_par);
boolean process_message(const char *message_type, Text_Buf& incoming_buf, component sender_component, OCTETSTRING& slider);
};


/* Global variable declarations */

extern TTCN_Module module_object;

} /* end of namespace */

#endif
