// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Fri Sep 25 13:42:36 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef http__www__w3__org__XML__1998__namespace_HH
#define http__www__w3__org__XML__1998__namespace_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "XSD.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef http__www__w3__org__XML__1998__namespace_HH
#endif

namespace http__www__w3__org__XML__1998__namespace {

/* Forward declarations of classes */

class Space;
class Space_template;

} /* end of namespace */

#ifndef http__www__w3__org__XML__1998__namespace_HH
#define http__www__w3__org__XML__1998__namespace_HH

namespace http__www__w3__org__XML__1998__namespace {

/* Type definitions */

typedef CHARSTRING Lang;
typedef CHARSTRING_template Lang_template;
typedef UNIVERSAL_CHARSTRING Base;
typedef UNIVERSAL_CHARSTRING_template Base_template;

/* Class definitions */

class Space : public Base_Type { // enum
friend class Space_template;
public:
enum enum_type { default__ = 0, preserve = 1, UNKNOWN_VALUE = 2, UNBOUND_VALUE = 3 };
private:
enum_type enum_value;

public:
Space();
Space(int other_value);
Space(enum_type other_value);
Space(const Space& other_value);

Space& operator=(int other_value);
Space& operator=(enum_type other_value);
Space& operator=(const Space& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Space& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Space& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Space& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Space& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Space& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Space& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Space& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
};

class Space_template : public Base_Template {
union {
Space::enum_type single_value;
struct {
unsigned int n_values;
Space_template *list_value;
} value_list;
};

void copy_template(const Space_template& other_value);

public:
Space_template();
Space_template(template_sel other_value);
Space_template(int other_value);
Space_template(Space::enum_type other_value);
Space_template(const Space& other_value);
Space_template(const OPTIONAL<Space>& other_value);
Space_template(const Space_template& other_value);
~Space_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Space_template& operator=(template_sel other_value);
Space_template& operator=(int other_value);
Space_template& operator=(Space::enum_type other_value);
Space_template& operator=(const Space& other_value);
Space_template& operator=(const OPTIONAL<Space>& other_value);
Space_template& operator=(const Space_template& other_value);

boolean match(Space::enum_type other_value) const;
boolean match(const Space& other_value) const;
Space::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Space_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Space& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};


/* Global variable declarations */

extern const XERdescriptor_t Lang_xer_;
extern const TTCN_Typedescriptor_t Lang_descr_;
extern const XERdescriptor_t Space_xer_;
extern Space Space_dfe;
extern const TTCN_Typedescriptor_t Space_descr_;
extern const XERdescriptor_t Base_xer_;
extern const TTCN_Typedescriptor_t Base_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
