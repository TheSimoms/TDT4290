/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module simple_request
// [.objid{ itu_t(0) identified_organization(4) etsi(0)
// identified_organization(127) ericsson(5) testing(0)
// <put further nodes here if needed>}]
{

//=========================================================================
// Import Part
//=========================================================================

import from HTTPmsg_Types all;
import from HTTPmsg_PortType all;

//=========================================================================
// Module Parameters
//=========================================================================

// Insert module parameters here if applicable!
// You can use the module_param skeleton!

//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

type component HTTP_TYPE {
	port HTTPmsg_PT HTTP_PORT;
	timer TIMER := 1.0;
}

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

template Connect connect_ := {
    hostname := "127.0.0.1",
    portnumber := 8000,
    use_ssl := false
};

template HTTPRequest request(charstring method, charstring uri, charstring body, HeaderLines headers) := {
    client_id := omit,
    method := method,
    uri := uri,
    version_major := 1,
    version_minor := 0,
    header := headers,
    body := body
};

template HTTPResponse response(integer status_code, charstring body) := {
	client_id := (0 .. infinity),
  	version_major := 1,
  	version_minor := 0,
  	statuscode := status_code,
  	statustext := ?,
  	header := ?,
  	body := body
};

template HTTPMessage request_message(charstring method, charstring uri, charstring body, HeaderLines headers) := {
  	request := request(method, uri, body, headers)
}

template HTTPMessage respone_message(integer status_code, charstring body) := {
  	response := response(status_code, body)
}
template Half_close half_close_receive := {
  	client_id := (0 .. infinity)
}

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================

testcase Simple_HTTP_request_test(charstring method, charstring uri, charstring request_body, integer status_code, charstring response_body) runs on HTTP_TYPE system HTTP_TYPE
{
	map(mtc:HTTP_PORT, system:HTTP_PORT);
	
	var HeaderLines headers;
	
	if(method == "POST") {
		headers := {
			{
    			header_name := "Content-Type",
    			header_value := "application/x-www-form-urlencoded"
    		},
    		{
    			header_name := "Content-Length",
    			header_value := int2str(lengthof(request_body))
    		}
    	};
	} else {
		headers := {};
	}
	
	HTTP_PORT.send(connect_);
	HTTP_PORT.send(request_message(method, uri, request_body, headers));
	
	TIMER.start;
  	
  	alt {
			[] HTTP_PORT.receive(respone_message(status_code, response_body)) {
				TIMER.stop;
				
				alt {
          			[] HTTP_PORT.receive(half_close_receive) { setverdict(pass); }
          			[] HTTP_PORT.receive { setverdict(fail); }
            	}
			}
			[] TIMER.timeout { setverdict(inconc); }
			[] HTTP_PORT.receive { TIMER.stop; setverdict(fail); }
	}
}

//=========================================================================
// Control
//=========================================================================

// Insert control part here if applicable!

}  // end of module
