/*
//AUTHOR: 
//DATE: 
//VERSION: 
*/
module simple_request
// [.objid{ itu_t(0) identified_organization(4) etsi(0)
// identified_organization(127) ericsson(5) testing(0)
// <put further nodes here if needed>}]
{

//=========================================================================
// Import Part
//=========================================================================

import from HTTPmsg_Types all;
import from HTTPmsg_PortType all;

//=========================================================================
// Module Parameters
//=========================================================================

// Insert module parameters here if applicable!
// You can use the module_param skeleton!

//=========================================================================
// Data Types
//=========================================================================

// Insert data type defintions here if applicable!
// You can use the data_type skeleton!

//=========================================================================
// Signatures
//=========================================================================

// Insert signature definitions here if applicable!
// You can use the signature skeleton!

//=========================================================================
//Port Types
//=========================================================================

// Insert port type defintions here if applicable!
// You can use the port_type skeleton!

//=========================================================================
//Component Types
//=========================================================================

type component HTTP_TYPE {
	port HTTPmsg_PT HTTP_PORT;
	timer TIMER := 2.0;
}

//=========================================================================
// Constants
//=========================================================================

// Insert constants here if applicable!
// You can use the constant skeleton!

//=========================================================================
// Templates
//=========================================================================

template Connect connect_ := {
    hostname := "127.0.0.1",
    portnumber := 8000,
    use_ssl := false
};

template HTTPMessage request_message(charstring method, charstring uri, charstring body, HeaderLines headers) := {
  	request := {
    	client_id := omit,
        method := method,
        uri := uri,
        version_major := 1,
        version_minor := 0,
        header := headers,
        body := body
    }
}

template HTTPMessage id_request_message(integer id, charstring method, charstring uri, charstring body, HeaderLines headers) := {
  	request := {
        client_id := id,
        method := method,
        uri := uri,
        version_major := 1,
        version_minor := 0,
        header := headers,
        body := body
  	}
}

template HTTPMessage response_message(integer status_code, charstring body) := {
  	response := {
    	client_id := (0 .. infinity),
      	version_major := 1,
      	version_minor := 0,
      	statuscode := status_code,
      	statustext := ?,
      	header := ?,
      	body := body
    }
}

template Close close := {
  	client_id := omit
}

template Half_close half_close := {
  	client_id := ?
}

//=========================================================================
// Altsteps
//=========================================================================

// Insert altsteps here if applicable!
// You can use the altstep skeleton!

//=========================================================================
// Functions
//=========================================================================

// Insert functions here if applicable!
// You can use the function skeleton!

//=========================================================================
// Testcases
//=========================================================================

testcase Simple_HTTP_request_test(
	charstring method, charstring uri, charstring request_body, integer status_code, charstring response_body) runs on HTTP_TYPE system HTTP_TYPE
{
	map(mtc:HTTP_PORT, system:HTTP_PORT);
	
	var HeaderLines headers;
	
	if(method == "POST") {
		headers := {
			{
    			header_name := "Content-Type",
    			header_value := "application/x-www-form-urlencoded"
    		},
    		{
    			header_name := "Content-Length",
    			header_value := int2str(lengthof(request_body))
    		}
    	};
	} else {
		headers := {};
	}
	
	HTTP_PORT.send(connect_);
	HTTP_PORT.send(request_message(method, uri, request_body, headers));
	
	TIMER.start;
  	
  	alt {
			[] HTTP_PORT.receive(response_message(status_code, response_body)) {
				TIMER.stop;
				
				alt {
          			[] HTTP_PORT.receive(half_close) {
          			    TIMER.stop;
          			    
          			    HTTP_PORT.send(close);
          			    
          				setverdict(pass);	
          			}
          			[] HTTP_PORT.receive {
          			    TIMER.stop;
          			    
          			    HTTP_PORT.send(close);
          			    
          			    setverdict(fail);
          			}
            	}
			}
			[] TIMER.timeout { setverdict(inconc); }
			[] HTTP_PORT.receive {
			    TIMER.stop;
			    
			    HTTP_PORT.send(close);
			    
			    setverdict(fail);
			}
	}
}

function get_session_id(HTTPMessage message_) return charstring{
  	var charstring session_id := "", session_id_pattern := "(sessionid=[a-zA-Z0-9]+;)?*";
  	
  	for(var integer i := 0; i < lengthof(message_.response.header); i := i + 1){
  		var HeaderLine header := message_.response.header[i];
  		
  		if(header.header_name == "Set-Cookie"){
			var charstring session_id_match := regexp(header.header_value, session_id_pattern, 0);
			
			if(lengthof(session_id_match) > 0){			    
			    session_id := session_id_match;
			    
			    break;
			}
  		}
  	}
  	
  	return session_id;
}

testcase Authenticated_request_test(
	charstring method, charstring uri, charstring request_body,
	integer status_code, charstring response_body, charstring username, charstring password) runs on HTTP_TYPE system HTTP_TYPE
{
	map(mtc:HTTP_PORT, system:HTTP_PORT);
	
	var HeaderLines authentication_headers, headers;
	var HTTPMessage authentication_response;
	var charstring authentication_string := "username=" & username & "&password=" & password;
	
	authentication_headers := {
		{
  			header_name := "Content-Type",
  			header_value := "application/x-www-form-urlencoded"
  		},
  		{
  			header_name := "Content-Length",
  			header_value := int2str(lengthof(authentication_string))
  		}
	}
	
	HTTP_PORT.send(connect_);
	HTTP_PORT.send(request_message("POST", "/api/auth/login/", authentication_string, authentication_headers));
	
	TIMER.start;
  	
  	alt {
		[] HTTP_PORT.receive(HTTPMessage:?) -> value authentication_response {
			TIMER.stop;
			TIMER.start;
		    
			alt {
          		[] HTTP_PORT.receive(half_close) {
          		    TIMER.stop;
          		    
          			if(method == "POST") {
                    	headers := {
                    		{
                       			header_name := "Content-Type",
                       			header_value := "application/x-www-form-urlencoded"
                       		}
                       	};
                    } else if(method == "PUT") {
                    	headers := {
                    		{
                       			header_name := "Content-Type",
                       			header_value := "application/xml"
                       		}
                       	};
                    } else {
                    	headers := {};
                    }
                    
                    if(lengthof(request_body) > 0) {
                        headers := headers & {
                       		{
                       			header_name := "Content-Length",
                       			header_value := int2str(lengthof(request_body))
                       		},
                       		{
                       		  	header_name := "Cookie",
                    			header_value := get_session_id(authentication_response)
                       		}
                        }
                    }
                    
        			HTTP_PORT.send(close);
					HTTP_PORT.send(connect_);
        			HTTP_PORT.send(request_message(method, uri, request_body, headers));
        			
                    TIMER.start;
        				
        			alt {
                		[] HTTP_PORT.receive(response_message(status_code, response_body)) {
                			TIMER.stop;
                			TIMER.start;
                			
                			alt {
                       			[] HTTP_PORT.receive(half_close) {    
                       			    TIMER.stop;
                		    
                        		    HTTP_PORT.send(close);
                       			                       			    
                       				setverdict(pass);	
                       			}
                       			[] HTTP_PORT.receive {
                       			    TIMER.stop;
                		    
                        		    HTTP_PORT.send(close);
                        		    
                        		    setverdict(fail);
                       			}
                          	}
                		}
                		[] TIMER.timeout { setverdict(inconc); }
                		[] HTTP_PORT.receive {
                		    TIMER.stop;
                		    
                		    HTTP_PORT.send(close);
                		    
                		    setverdict(fail);
                		}
        			}
            	}
            	[] HTTP_PORT.receive {
					TIMER.stop;
		    
        		    HTTP_PORT.send(close);
        		    
        		    setverdict(fail);
				}
          	}
		}
		[] TIMER.timeout { setverdict(inconc); }
		[] HTTP_PORT.receive {
		    TIMER.stop;
		    
		    HTTP_PORT.send(close);
		    
		    setverdict(fail);
		}
	}
}

//=========================================================================
// Control
//=========================================================================

// Insert control part here if applicable!

}  // end of module
