// This C++ header file was generated by the TTCN-3 compiler
// of the TTCN-3 Test Executor version CRL 113 200/5 R3A
// for user (user@user-multicom) on Wed Sep 16 13:14:39 2015

// Copyright Ericsson Telecom AB 2000-2014

// Do not edit this file unless you know what you are doing.

#ifndef urn__ietf__params__xml__ns__xmpp__stanzas_HH
#define urn__ietf__params__xml__ns__xmpp__stanzas_HH

#ifdef TITAN_RUNTIME_2
#error Generated code does not match with used runtime.\
 Code was generated without -R option but -DTITAN_RUNTIME_2 was used.
#endif

/* Header file includes */

#include "http_www_w3_org_XML_1998_namespace.hh"

#if TTCN3_VERSION != 50300
#error Version mismatch detected.\
 Please check the version of the TTCN-3 compiler and the base library.
#endif

#ifndef LINUX
#error This file should be compiled on LINUX
#endif

#undef urn__ietf__params__xml__ns__xmpp__stanzas_HH
#endif

namespace urn__ietf__params__xml__ns__xmpp__stanzas {

/* Forward declarations of classes */

class Empty;
class Empty_template;
class StanzaErrorGroup;
class StanzaErrorGroup_template;
class Text;
class Text_template;

} /* end of namespace */

#ifndef urn__ietf__params__xml__ns__xmpp__stanzas_HH
#define urn__ietf__params__xml__ns__xmpp__stanzas_HH

namespace urn__ietf__params__xml__ns__xmpp__stanzas {

/* Type definitions */

typedef Empty Bad__request;
typedef Empty_template Bad__request_template;
typedef Empty Conflict;
typedef Empty_template Conflict_template;
typedef Empty Feature__not__implemented;
typedef Empty_template Feature__not__implemented_template;
typedef Empty Forbidden;
typedef Empty_template Forbidden_template;
typedef UNIVERSAL_CHARSTRING Gone;
typedef UNIVERSAL_CHARSTRING_template Gone_template;
typedef Empty Internal__server__error;
typedef Empty_template Internal__server__error_template;
typedef Empty Item__not__found;
typedef Empty_template Item__not__found_template;
typedef Empty Jid__malformed;
typedef Empty_template Jid__malformed_template;
typedef Empty Not__acceptable;
typedef Empty_template Not__acceptable_template;
typedef Empty Not__allowed;
typedef Empty_template Not__allowed_template;
typedef Empty Not__authorized;
typedef Empty_template Not__authorized_template;
typedef Empty Payment__required;
typedef Empty_template Payment__required_template;
typedef Empty Policy__violation;
typedef Empty_template Policy__violation_template;
typedef Empty Recipient__unavailable;
typedef Empty_template Recipient__unavailable_template;
typedef UNIVERSAL_CHARSTRING Redirect;
typedef UNIVERSAL_CHARSTRING_template Redirect_template;
typedef Empty Registration__required;
typedef Empty_template Registration__required_template;
typedef Empty Remote__server__not__found;
typedef Empty_template Remote__server__not__found_template;
typedef Empty Remote__server__timeout;
typedef Empty_template Remote__server__timeout_template;
typedef Empty Resource__constraint;
typedef Empty_template Resource__constraint_template;
typedef Empty Service__unavailable;
typedef Empty_template Service__unavailable_template;
typedef Empty Subscription__required;
typedef Empty_template Subscription__required_template;
typedef Empty Undefined__condition;
typedef Empty_template Undefined__condition_template;
typedef Empty Unexpected__request;
typedef Empty_template Unexpected__request_template;

/* Class definitions */

class Empty : public Base_Type { // enum
friend class Empty_template;
public:
enum enum_type { x = 0, UNKNOWN_VALUE = 1, UNBOUND_VALUE = 2 };
private:
enum_type enum_value;

public:
Empty();
Empty(int other_value);
Empty(enum_type other_value);
Empty(const Empty& other_value);

Empty& operator=(int other_value);
Empty& operator=(enum_type other_value);
Empty& operator=(const Empty& other_value);

boolean operator==(enum_type other_value) const;
boolean operator==(const Empty& other_value) const;
inline boolean operator!=(enum_type other_value) const { return !(*this == other_value); }
inline boolean operator!=(const Empty& other_value) const { return !(*this == other_value); }
boolean operator<(enum_type other_value) const;
boolean operator<(const Empty& other_value) const;
boolean operator>(enum_type other_value) const;
boolean operator>(const Empty& other_value) const;
inline boolean operator<=(enum_type other_value) const { return !(*this > other_value); }
inline boolean operator<=(const Empty& other_value) const { return !(*this > other_value); }
inline boolean operator>=(enum_type other_value) const { return !(*this < other_value); }
inline boolean operator>=(const Empty& other_value) const { return !(*this < other_value); }

static const char *enum_to_str(enum_type enum_par, boolean txt = false);
static enum_type str_to_enum(const char *str_par);
static boolean is_valid_enum(int int_par);

static int enum2int(enum_type enum_par);
static int enum2int(const Empty& enum_par);
int as_int() const { return enum2int(enum_value); }
void from_int(int p_val) { *this = p_val; }
operator enum_type() const;
inline boolean is_bound() const { return enum_value != UNBOUND_VALUE; }
inline boolean is_value() const { return enum_value != UNBOUND_VALUE; }
inline void clean_up(){ enum_value = UNBOUND_VALUE; }
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
};

class Empty_template : public Base_Template {
union {
Empty::enum_type single_value;
struct {
unsigned int n_values;
Empty_template *list_value;
} value_list;
};

void copy_template(const Empty_template& other_value);

public:
Empty_template();
Empty_template(template_sel other_value);
Empty_template(int other_value);
Empty_template(Empty::enum_type other_value);
Empty_template(const Empty& other_value);
Empty_template(const OPTIONAL<Empty>& other_value);
Empty_template(const Empty_template& other_value);
~Empty_template();

boolean is_bound() const;
boolean is_value() const;
void clean_up();
Empty_template& operator=(template_sel other_value);
Empty_template& operator=(int other_value);
Empty_template& operator=(Empty::enum_type other_value);
Empty_template& operator=(const Empty& other_value);
Empty_template& operator=(const OPTIONAL<Empty>& other_value);
Empty_template& operator=(const Empty_template& other_value);

boolean match(Empty::enum_type other_value) const;
boolean match(const Empty& other_value) const;
Empty::enum_type valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& list_item(unsigned int list_index);
void log() const;
void log_match(const Empty& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class StanzaErrorGroup : public Base_Type {
public:
enum union_selection_type { UNBOUND_VALUE = 0, ALT_bad__request = 1, ALT_conflict = 2, ALT_feature__not__implemented = 3, ALT_forbidden = 4, ALT_gone = 5, ALT_internal__server__error = 6, ALT_item__not__found = 7, ALT_jid__malformed = 8, ALT_not__acceptable = 9, ALT_not__authorized = 10, ALT_not__allowed = 11, ALT_payment__required = 12, ALT_policy__violation = 13, ALT_recipient__unavailable = 14, ALT_redirect = 15, ALT_registration__required = 16, ALT_remote__server__not__found = 17, ALT_remote__server__timeout = 18, ALT_resource__constraint = 19, ALT_service__unavailable = 20, ALT_subscription__required = 21, ALT_undefined__condition = 22, ALT_unexpected__request = 23 };
private:
union_selection_type union_selection;
union {
Empty *field_bad__request;
Empty *field_conflict;
Empty *field_feature__not__implemented;
Empty *field_forbidden;
UNIVERSAL_CHARSTRING *field_gone;
Empty *field_internal__server__error;
Empty *field_item__not__found;
Empty *field_jid__malformed;
Empty *field_not__acceptable;
Empty *field_not__authorized;
Empty *field_not__allowed;
Empty *field_payment__required;
Empty *field_policy__violation;
Empty *field_recipient__unavailable;
UNIVERSAL_CHARSTRING *field_redirect;
Empty *field_registration__required;
Empty *field_remote__server__not__found;
Empty *field_remote__server__timeout;
Empty *field_resource__constraint;
Empty *field_service__unavailable;
Empty *field_subscription__required;
Empty *field_undefined__condition;
Empty *field_unexpected__request;
};
void copy_value(const StanzaErrorGroup& other_value);

public:
StanzaErrorGroup();
StanzaErrorGroup(const StanzaErrorGroup& other_value);
~StanzaErrorGroup();
StanzaErrorGroup& operator=(const StanzaErrorGroup& other_value);
boolean operator==(const StanzaErrorGroup& other_value) const;
inline boolean operator!=(const StanzaErrorGroup& other_value) const { return !(*this == other_value); }
Empty& bad__request();
const Empty& bad__request() const;
Empty& conflict();
const Empty& conflict() const;
Empty& feature__not__implemented();
const Empty& feature__not__implemented() const;
Empty& forbidden();
const Empty& forbidden() const;
UNIVERSAL_CHARSTRING& gone();
const UNIVERSAL_CHARSTRING& gone() const;
Empty& internal__server__error();
const Empty& internal__server__error() const;
Empty& item__not__found();
const Empty& item__not__found() const;
Empty& jid__malformed();
const Empty& jid__malformed() const;
Empty& not__acceptable();
const Empty& not__acceptable() const;
Empty& not__authorized();
const Empty& not__authorized() const;
Empty& not__allowed();
const Empty& not__allowed() const;
Empty& payment__required();
const Empty& payment__required() const;
Empty& policy__violation();
const Empty& policy__violation() const;
Empty& recipient__unavailable();
const Empty& recipient__unavailable() const;
UNIVERSAL_CHARSTRING& redirect();
const UNIVERSAL_CHARSTRING& redirect() const;
Empty& registration__required();
const Empty& registration__required() const;
Empty& remote__server__not__found();
const Empty& remote__server__not__found() const;
Empty& remote__server__timeout();
const Empty& remote__server__timeout() const;
Empty& resource__constraint();
const Empty& resource__constraint() const;
Empty& service__unavailable();
const Empty& service__unavailable() const;
Empty& subscription__required();
const Empty& subscription__required() const;
Empty& undefined__condition();
const Empty& undefined__condition() const;
Empty& unexpected__request();
const Empty& unexpected__request() const;
inline union_selection_type get_selection() const { return union_selection; }
boolean ischosen(union_selection_type checked_selection) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
inline boolean is_present() const { return is_bound(); }
void log() const;
void set_param(Module_Param& param);
  void set_implicit_omit();
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num, bool& def_ns) const;
};

class StanzaErrorGroup_template : public Base_Template {
union {
struct {
StanzaErrorGroup::union_selection_type union_selection;
union {
Empty_template *field_bad__request;
Empty_template *field_conflict;
Empty_template *field_feature__not__implemented;
Empty_template *field_forbidden;
UNIVERSAL_CHARSTRING_template *field_gone;
Empty_template *field_internal__server__error;
Empty_template *field_item__not__found;
Empty_template *field_jid__malformed;
Empty_template *field_not__acceptable;
Empty_template *field_not__authorized;
Empty_template *field_not__allowed;
Empty_template *field_payment__required;
Empty_template *field_policy__violation;
Empty_template *field_recipient__unavailable;
UNIVERSAL_CHARSTRING_template *field_redirect;
Empty_template *field_registration__required;
Empty_template *field_remote__server__not__found;
Empty_template *field_remote__server__timeout;
Empty_template *field_resource__constraint;
Empty_template *field_service__unavailable;
Empty_template *field_subscription__required;
Empty_template *field_undefined__condition;
Empty_template *field_unexpected__request;
};
} single_value;
struct {
unsigned int n_values;
StanzaErrorGroup_template *list_value;
} value_list;
};
void copy_value(const StanzaErrorGroup& other_value);

void copy_template(const StanzaErrorGroup_template& other_value);

public:
StanzaErrorGroup_template();
StanzaErrorGroup_template(template_sel other_value);
StanzaErrorGroup_template(const StanzaErrorGroup& other_value);
StanzaErrorGroup_template(const OPTIONAL<StanzaErrorGroup>& other_value);
StanzaErrorGroup_template(const StanzaErrorGroup_template& other_value);
~StanzaErrorGroup_template();
void clean_up();
StanzaErrorGroup_template& operator=(template_sel other_value);
StanzaErrorGroup_template& operator=(const StanzaErrorGroup& other_value);
StanzaErrorGroup_template& operator=(const OPTIONAL<StanzaErrorGroup>& other_value);
StanzaErrorGroup_template& operator=(const StanzaErrorGroup_template& other_value);
boolean match(const StanzaErrorGroup& other_value) const;
boolean is_value() const;StanzaErrorGroup valueof() const;
StanzaErrorGroup_template& list_item(unsigned int list_index) const;
void set_type(template_sel template_type, unsigned int list_length);
Empty_template& bad__request();
const Empty_template& bad__request() const;
Empty_template& conflict();
const Empty_template& conflict() const;
Empty_template& feature__not__implemented();
const Empty_template& feature__not__implemented() const;
Empty_template& forbidden();
const Empty_template& forbidden() const;
UNIVERSAL_CHARSTRING_template& gone();
const UNIVERSAL_CHARSTRING_template& gone() const;
Empty_template& internal__server__error();
const Empty_template& internal__server__error() const;
Empty_template& item__not__found();
const Empty_template& item__not__found() const;
Empty_template& jid__malformed();
const Empty_template& jid__malformed() const;
Empty_template& not__acceptable();
const Empty_template& not__acceptable() const;
Empty_template& not__authorized();
const Empty_template& not__authorized() const;
Empty_template& not__allowed();
const Empty_template& not__allowed() const;
Empty_template& payment__required();
const Empty_template& payment__required() const;
Empty_template& policy__violation();
const Empty_template& policy__violation() const;
Empty_template& recipient__unavailable();
const Empty_template& recipient__unavailable() const;
UNIVERSAL_CHARSTRING_template& redirect();
const UNIVERSAL_CHARSTRING_template& redirect() const;
Empty_template& registration__required();
const Empty_template& registration__required() const;
Empty_template& remote__server__not__found();
const Empty_template& remote__server__not__found() const;
Empty_template& remote__server__timeout();
const Empty_template& remote__server__timeout() const;
Empty_template& resource__constraint();
const Empty_template& resource__constraint() const;
Empty_template& service__unavailable();
const Empty_template& service__unavailable() const;
Empty_template& subscription__required();
const Empty_template& subscription__required() const;
Empty_template& undefined__condition();
const Empty_template& undefined__condition() const;
Empty_template& unexpected__request();
const Empty_template& unexpected__request() const;
boolean ischosen(StanzaErrorGroup::union_selection_type checked_selection) const;
void log() const;
void log_match(const StanzaErrorGroup& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
boolean is_present() const;
boolean match_omit() const;
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
};

class Text : public Base_Type {
  OPTIONAL<CHARSTRING> field_lang;
  UNIVERSAL_CHARSTRING field_base;
  boolean bound_flag;
public:
  Text();
  Text(const OPTIONAL<CHARSTRING>& par_lang,
    const UNIVERSAL_CHARSTRING& par_base);
  Text(const Text& other_value);
  inline boolean is_component() { return FALSE; }
  void clean_up();
  Text& operator=(const Text& other_value);
  boolean operator==(const Text& other_value) const;
  inline boolean operator!=(const Text& other_value) const
    { return !(*this == other_value); }

  boolean is_bound() const;

inline boolean is_present() const { return is_bound(); }
  boolean is_value() const;

  inline OPTIONAL<CHARSTRING>& lang()
    {return field_lang;}
  inline const OPTIONAL<CHARSTRING>& lang() const
    {return field_lang;}
  inline UNIVERSAL_CHARSTRING& base()
    {return field_base;}
  inline const UNIVERSAL_CHARSTRING& base() const
    {return field_base;}
  int size_of() const;
  void log() const;
  void set_param(Module_Param& param);
  void set_implicit_omit();
  void encode_text(Text_Buf& text_buf) const;
  void decode_text(Text_Buf& text_buf);
void encode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...) const;
void decode(const TTCN_Typedescriptor_t&, TTCN_Buffer&, TTCN_EncDec::coding_t, ...);
int XER_encode(const XERdescriptor_t&, TTCN_Buffer&, unsigned int, int, embed_values_enc_struct_t*) const;
int XER_decode(const XERdescriptor_t&, XmlReaderWrap&, unsigned int, embed_values_dec_struct_t*);
static boolean can_start(const char *name, const char *uri, XERdescriptor_t const& xd, unsigned int);
int JSON_encode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&) const;
int JSON_decode(const TTCN_Typedescriptor_t&, JSON_Tokenizer&, boolean);
char **collect_ns(const XERdescriptor_t& p_td, size_t& num_ns, bool& def_ns) const;
};

class Text_template : public Base_Template {
struct single_value_struct;
union {
single_value_struct *single_value;
struct {
unsigned int n_values;
Text_template *list_value;
} value_list;
};

void set_specific();
void copy_value(const Text& other_value);
void copy_template(const Text_template& other_value);

public:
Text_template();
Text_template(template_sel other_value);
Text_template(const Text& other_value);
Text_template(const OPTIONAL<Text>& other_value);
Text_template(const Text_template& other_value);
~Text_template();
Text_template& operator=(template_sel other_value);
Text_template& operator=(const Text& other_value);
Text_template& operator=(const OPTIONAL<Text>& other_value);
Text_template& operator=(const Text_template& other_value);
boolean match(const Text& other_value) const;
boolean is_bound() const;
boolean is_value() const;
void clean_up();
Text valueof() const;
void set_type(template_sel template_type, unsigned int list_length);
Text_template& list_item(unsigned int list_index) const;
CHARSTRING_template& lang();
const CHARSTRING_template& lang() const;
UNIVERSAL_CHARSTRING_template& base();
const UNIVERSAL_CHARSTRING_template& base() const;
int size_of() const;
void log() const;
void log_match(const Text& match_value) const;
void encode_text(Text_Buf& text_buf) const;
void decode_text(Text_Buf& text_buf);
void set_param(Module_Param& param);
void check_restriction(template_res t_res, const char* t_name=NULL) const;
boolean is_present() const;
boolean match_omit() const;
};


/* Global variable declarations */

extern const XERdescriptor_t Empty_xer_;
extern const TTCN_JSONdescriptor_t Empty_json_;
extern const TTCN_Typedescriptor_t Empty_descr_;
extern const XERdescriptor_t Bad__request_xer_;
extern const TTCN_Typedescriptor_t Bad__request_descr_;
extern const XERdescriptor_t Conflict_xer_;
extern const TTCN_Typedescriptor_t Conflict_descr_;
extern const XERdescriptor_t Feature__not__implemented_xer_;
extern const TTCN_Typedescriptor_t Feature__not__implemented_descr_;
extern const XERdescriptor_t Forbidden_xer_;
extern const TTCN_Typedescriptor_t Forbidden_descr_;
extern const XERdescriptor_t Gone_xer_;
extern const TTCN_Typedescriptor_t Gone_descr_;
extern const XERdescriptor_t Internal__server__error_xer_;
extern const TTCN_Typedescriptor_t Internal__server__error_descr_;
extern const XERdescriptor_t Item__not__found_xer_;
extern const TTCN_Typedescriptor_t Item__not__found_descr_;
extern const XERdescriptor_t Jid__malformed_xer_;
extern const TTCN_Typedescriptor_t Jid__malformed_descr_;
extern const XERdescriptor_t Not__acceptable_xer_;
extern const TTCN_Typedescriptor_t Not__acceptable_descr_;
extern const XERdescriptor_t Not__allowed_xer_;
extern const TTCN_Typedescriptor_t Not__allowed_descr_;
extern const XERdescriptor_t Not__authorized_xer_;
extern const TTCN_Typedescriptor_t Not__authorized_descr_;
extern const XERdescriptor_t Payment__required_xer_;
extern const TTCN_Typedescriptor_t Payment__required_descr_;
extern const XERdescriptor_t Policy__violation_xer_;
extern const TTCN_Typedescriptor_t Policy__violation_descr_;
extern const XERdescriptor_t Recipient__unavailable_xer_;
extern const TTCN_Typedescriptor_t Recipient__unavailable_descr_;
extern const XERdescriptor_t Redirect_xer_;
extern const TTCN_Typedescriptor_t Redirect_descr_;
extern const XERdescriptor_t Registration__required_xer_;
extern const TTCN_Typedescriptor_t Registration__required_descr_;
extern const XERdescriptor_t Remote__server__not__found_xer_;
extern const TTCN_Typedescriptor_t Remote__server__not__found_descr_;
extern const XERdescriptor_t Remote__server__timeout_xer_;
extern const TTCN_Typedescriptor_t Remote__server__timeout_descr_;
extern const XERdescriptor_t Resource__constraint_xer_;
extern const TTCN_Typedescriptor_t Resource__constraint_descr_;
extern const XERdescriptor_t Service__unavailable_xer_;
extern const TTCN_Typedescriptor_t Service__unavailable_descr_;
extern const XERdescriptor_t Subscription__required_xer_;
extern const TTCN_Typedescriptor_t Subscription__required_descr_;
extern const XERdescriptor_t Undefined__condition_xer_;
extern const TTCN_Typedescriptor_t Undefined__condition_descr_;
extern const XERdescriptor_t Unexpected__request_xer_;
extern const TTCN_Typedescriptor_t Unexpected__request_descr_;
extern const XERdescriptor_t StanzaErrorGroup_xer_;
extern const TTCN_JSONdescriptor_t StanzaErrorGroup_json_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_descr_;
extern const XERdescriptor_t StanzaErrorGroup_bad__request_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_bad__request_descr_;
extern const XERdescriptor_t StanzaErrorGroup_conflict_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_conflict_descr_;
extern const XERdescriptor_t StanzaErrorGroup_feature__not__implemented_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_feature__not__implemented_descr_;
extern const XERdescriptor_t StanzaErrorGroup_forbidden_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_forbidden_descr_;
extern const XERdescriptor_t StanzaErrorGroup_gone_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_gone_descr_;
extern const XERdescriptor_t StanzaErrorGroup_internal__server__error_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_internal__server__error_descr_;
extern const XERdescriptor_t StanzaErrorGroup_item__not__found_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_item__not__found_descr_;
extern const XERdescriptor_t StanzaErrorGroup_jid__malformed_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_jid__malformed_descr_;
extern const XERdescriptor_t StanzaErrorGroup_not__acceptable_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_not__acceptable_descr_;
extern const XERdescriptor_t StanzaErrorGroup_not__authorized_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_not__authorized_descr_;
extern const XERdescriptor_t StanzaErrorGroup_not__allowed_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_not__allowed_descr_;
extern const XERdescriptor_t StanzaErrorGroup_payment__required_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_payment__required_descr_;
extern const XERdescriptor_t StanzaErrorGroup_policy__violation_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_policy__violation_descr_;
extern const XERdescriptor_t StanzaErrorGroup_recipient__unavailable_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_recipient__unavailable_descr_;
extern const XERdescriptor_t StanzaErrorGroup_redirect_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_redirect_descr_;
extern const XERdescriptor_t StanzaErrorGroup_registration__required_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_registration__required_descr_;
extern const XERdescriptor_t StanzaErrorGroup_remote__server__not__found_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_remote__server__not__found_descr_;
extern const XERdescriptor_t StanzaErrorGroup_remote__server__timeout_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_remote__server__timeout_descr_;
extern const XERdescriptor_t StanzaErrorGroup_resource__constraint_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_resource__constraint_descr_;
extern const XERdescriptor_t StanzaErrorGroup_service__unavailable_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_service__unavailable_descr_;
extern const XERdescriptor_t StanzaErrorGroup_subscription__required_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_subscription__required_descr_;
extern const XERdescriptor_t StanzaErrorGroup_undefined__condition_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_undefined__condition_descr_;
extern const XERdescriptor_t StanzaErrorGroup_unexpected__request_xer_;
extern const TTCN_Typedescriptor_t StanzaErrorGroup_unexpected__request_descr_;
extern const XERdescriptor_t Text_base_xer_;
extern const TTCN_Typedescriptor_t Text_base_descr_;
extern const XERdescriptor_t Text_xer_;
extern const TTCN_JSONdescriptor_t Text_json_;
extern const TTCN_Typedescriptor_t Text_descr_;
extern const XERdescriptor_t Text_lang_xer_;
extern const TTCN_Typedescriptor_t Text_lang_descr_;
extern TTCN_Module module_object;

} /* end of namespace */

#endif
